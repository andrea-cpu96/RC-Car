
RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce0  08003ce0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ce0  08003ce0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ce0  08003ce0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ce4  08003ce4  00013ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003cf4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003cf4  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce93  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e0e  00000000  00000000  0002cf0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  0002ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097f  00000000  00000000  0002f928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010907  00000000  00000000  000302a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eab3  00000000  00000000  00040bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000684e5  00000000  00000000  0004f661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b08  00000000  00000000  000b7b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000ba650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003c90 	.word	0x08003c90

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003c90 	.word	0x08003c90

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fd5c 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f80d 	bl	8000242 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f9c2 	bl	80005b0 <MX_GPIO_Init>
  MX_TIM15_Init();
 800022c:	f000 f8d0 	bl	80003d0 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8000230:	f000 f98e 	bl	8000550 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000234:	f000 f84e 	bl	80002d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  rc_car_init();
 8000238:	f000 fa18 	bl	800066c <rc_car_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  rc_car_process();
 800023c:	f000 fa44 	bl	80006c8 <rc_car_process>
 8000240:	e7fc      	b.n	800023c <main+0x20>

08000242 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000242:	b590      	push	{r4, r7, lr}
 8000244:	b091      	sub	sp, #68	; 0x44
 8000246:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000248:	2410      	movs	r4, #16
 800024a:	193b      	adds	r3, r7, r4
 800024c:	0018      	movs	r0, r3
 800024e:	2330      	movs	r3, #48	; 0x30
 8000250:	001a      	movs	r2, r3
 8000252:	2100      	movs	r1, #0
 8000254:	f003 fcf0 	bl	8003c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	003b      	movs	r3, r7
 800025a:	0018      	movs	r0, r3
 800025c:	2310      	movs	r3, #16
 800025e:	001a      	movs	r2, r3
 8000260:	2100      	movs	r1, #0
 8000262:	f003 fce9 	bl	8003c38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000266:	0021      	movs	r1, r4
 8000268:	187b      	adds	r3, r7, r1
 800026a:	2201      	movs	r2, #1
 800026c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026e:	187b      	adds	r3, r7, r1
 8000270:	2201      	movs	r2, #1
 8000272:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000274:	187b      	adds	r3, r7, r1
 8000276:	2202      	movs	r2, #2
 8000278:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027a:	187b      	adds	r3, r7, r1
 800027c:	2280      	movs	r2, #128	; 0x80
 800027e:	0252      	lsls	r2, r2, #9
 8000280:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2200      	movs	r2, #0
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2200      	movs	r2, #0
 800028c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	187b      	adds	r3, r7, r1
 8000290:	0018      	movs	r0, r3
 8000292:	f001 f87b 	bl	800138c <HAL_RCC_OscConfig>
 8000296:	1e03      	subs	r3, r0, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800029a:	f000 f9e1 	bl	8000660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	003b      	movs	r3, r7
 80002a0:	2207      	movs	r2, #7
 80002a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a4:	003b      	movs	r3, r7
 80002a6:	2202      	movs	r2, #2
 80002a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	003b      	movs	r3, r7
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80002b0:	003b      	movs	r3, r7
 80002b2:	22e0      	movs	r2, #224	; 0xe0
 80002b4:	00d2      	lsls	r2, r2, #3
 80002b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b8:	003b      	movs	r3, r7
 80002ba:	2100      	movs	r1, #0
 80002bc:	0018      	movs	r0, r3
 80002be:	f001 fb83 	bl	80019c8 <HAL_RCC_ClockConfig>
 80002c2:	1e03      	subs	r3, r0, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002c6:	f000 f9cb 	bl	8000660 <Error_Handler>
  }
}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	b011      	add	sp, #68	; 0x44
 80002d0:	bd90      	pop	{r4, r7, pc}
	...

080002d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08e      	sub	sp, #56	; 0x38
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002da:	2328      	movs	r3, #40	; 0x28
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	0018      	movs	r0, r3
 80002e0:	2310      	movs	r3, #16
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f003 fca7 	bl	8003c38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ea:	2320      	movs	r3, #32
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	0018      	movs	r0, r3
 80002f0:	2308      	movs	r3, #8
 80002f2:	001a      	movs	r2, r3
 80002f4:	2100      	movs	r1, #0
 80002f6:	f003 fc9f 	bl	8003c38 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	0018      	movs	r0, r3
 80002fe:	231c      	movs	r3, #28
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f003 fc98 	bl	8003c38 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000308:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <MX_TIM3_Init+0xf4>)
 800030a:	4a30      	ldr	r2, [pc, #192]	; (80003cc <MX_TIM3_Init+0xf8>)
 800030c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800030e:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <MX_TIM3_Init+0xf4>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000314:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <MX_TIM3_Init+0xf4>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800031a:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <MX_TIM3_Init+0xf4>)
 800031c:	2263      	movs	r2, #99	; 0x63
 800031e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000320:	4b29      	ldr	r3, [pc, #164]	; (80003c8 <MX_TIM3_Init+0xf4>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000326:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <MX_TIM3_Init+0xf4>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800032c:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <MX_TIM3_Init+0xf4>)
 800032e:	0018      	movs	r0, r3
 8000330:	f001 fc90 	bl	8001c54 <HAL_TIM_Base_Init>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000338:	f000 f992 	bl	8000660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800033c:	2128      	movs	r1, #40	; 0x28
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2280      	movs	r2, #128	; 0x80
 8000342:	0152      	lsls	r2, r2, #5
 8000344:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000346:	187a      	adds	r2, r7, r1
 8000348:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <MX_TIM3_Init+0xf4>)
 800034a:	0011      	movs	r1, r2
 800034c:	0018      	movs	r0, r3
 800034e:	f001 fdef 	bl	8001f30 <HAL_TIM_ConfigClockSource>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000356:	f000 f983 	bl	8000660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800035a:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_TIM3_Init+0xf4>)
 800035c:	0018      	movs	r0, r3
 800035e:	f001 fcc9 	bl	8001cf4 <HAL_TIM_PWM_Init>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000366:	f000 f97b 	bl	8000660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036a:	2120      	movs	r1, #32
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000378:	187a      	adds	r2, r7, r1
 800037a:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <MX_TIM3_Init+0xf4>)
 800037c:	0011      	movs	r1, r2
 800037e:	0018      	movs	r0, r3
 8000380:	f002 f9b6 	bl	80026f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d001      	beq.n	800038c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000388:	f000 f96a 	bl	8000660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2260      	movs	r2, #96	; 0x60
 8000390:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10-1;
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2209      	movs	r2, #9
 8000396:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003a4:	1d39      	adds	r1, r7, #4
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_TIM3_Init+0xf4>)
 80003a8:	220c      	movs	r2, #12
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 fcfa 	bl	8001da4 <HAL_TIM_PWM_ConfigChannel>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80003b4:	f000 f954 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <MX_TIM3_Init+0xf4>)
 80003ba:	0018      	movs	r0, r3
 80003bc:	f000 fb4e 	bl	8000a5c <HAL_TIM_MspPostInit>

}
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	b00e      	add	sp, #56	; 0x38
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000028 	.word	0x20000028
 80003cc:	40000400 	.word	0x40000400

080003d0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b096      	sub	sp, #88	; 0x58
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d6:	2348      	movs	r3, #72	; 0x48
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	0018      	movs	r0, r3
 80003dc:	2310      	movs	r3, #16
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f003 fc29 	bl	8003c38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e6:	2340      	movs	r3, #64	; 0x40
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	0018      	movs	r0, r3
 80003ec:	2308      	movs	r3, #8
 80003ee:	001a      	movs	r2, r3
 80003f0:	2100      	movs	r1, #0
 80003f2:	f003 fc21 	bl	8003c38 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f6:	2324      	movs	r3, #36	; 0x24
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	0018      	movs	r0, r3
 80003fc:	231c      	movs	r3, #28
 80003fe:	001a      	movs	r2, r3
 8000400:	2100      	movs	r1, #0
 8000402:	f003 fc19 	bl	8003c38 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	0018      	movs	r0, r3
 800040a:	2320      	movs	r3, #32
 800040c:	001a      	movs	r2, r3
 800040e:	2100      	movs	r1, #0
 8000410:	f003 fc12 	bl	8003c38 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000414:	4b4b      	ldr	r3, [pc, #300]	; (8000544 <MX_TIM15_Init+0x174>)
 8000416:	4a4c      	ldr	r2, [pc, #304]	; (8000548 <MX_TIM15_Init+0x178>)
 8000418:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800041a:	4b4a      	ldr	r3, [pc, #296]	; (8000544 <MX_TIM15_Init+0x174>)
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000420:	4b48      	ldr	r3, [pc, #288]	; (8000544 <MX_TIM15_Init+0x174>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 32000-1;
 8000426:	4b47      	ldr	r3, [pc, #284]	; (8000544 <MX_TIM15_Init+0x174>)
 8000428:	4a48      	ldr	r2, [pc, #288]	; (800054c <MX_TIM15_Init+0x17c>)
 800042a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042c:	4b45      	ldr	r3, [pc, #276]	; (8000544 <MX_TIM15_Init+0x174>)
 800042e:	2200      	movs	r2, #0
 8000430:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000432:	4b44      	ldr	r3, [pc, #272]	; (8000544 <MX_TIM15_Init+0x174>)
 8000434:	2200      	movs	r2, #0
 8000436:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000438:	4b42      	ldr	r3, [pc, #264]	; (8000544 <MX_TIM15_Init+0x174>)
 800043a:	2280      	movs	r2, #128	; 0x80
 800043c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800043e:	4b41      	ldr	r3, [pc, #260]	; (8000544 <MX_TIM15_Init+0x174>)
 8000440:	0018      	movs	r0, r3
 8000442:	f001 fc07 	bl	8001c54 <HAL_TIM_Base_Init>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800044a:	f000 f909 	bl	8000660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800044e:	2148      	movs	r1, #72	; 0x48
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2280      	movs	r2, #128	; 0x80
 8000454:	0152      	lsls	r2, r2, #5
 8000456:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000458:	187a      	adds	r2, r7, r1
 800045a:	4b3a      	ldr	r3, [pc, #232]	; (8000544 <MX_TIM15_Init+0x174>)
 800045c:	0011      	movs	r1, r2
 800045e:	0018      	movs	r0, r3
 8000460:	f001 fd66 	bl	8001f30 <HAL_TIM_ConfigClockSource>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d001      	beq.n	800046c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000468:	f000 f8fa 	bl	8000660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800046c:	4b35      	ldr	r3, [pc, #212]	; (8000544 <MX_TIM15_Init+0x174>)
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fc40 	bl	8001cf4 <HAL_TIM_PWM_Init>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000478:	f000 f8f2 	bl	8000660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047c:	2140      	movs	r1, #64	; 0x40
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800048a:	187a      	adds	r2, r7, r1
 800048c:	4b2d      	ldr	r3, [pc, #180]	; (8000544 <MX_TIM15_Init+0x174>)
 800048e:	0011      	movs	r1, r2
 8000490:	0018      	movs	r0, r3
 8000492:	f002 f92d 	bl	80026f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800049a:	f000 f8e1 	bl	8000660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800049e:	2124      	movs	r1, #36	; 0x24
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2260      	movs	r2, #96	; 0x60
 80004a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <MX_TIM15_Init+0x174>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 fc67 	bl	8001da4 <HAL_TIM_PWM_ConfigChannel>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80004da:	f000 f8c1 	bl	8000660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004de:	2324      	movs	r3, #36	; 0x24
 80004e0:	18f9      	adds	r1, r7, r3
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_TIM15_Init+0x174>)
 80004e4:	2204      	movs	r2, #4
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 fc5c 	bl	8001da4 <HAL_TIM_PWM_ConfigChannel>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 80004f0:	f000 f8b6 	bl	8000660 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	0192      	lsls	r2, r2, #6
 8000518:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2200      	movs	r2, #0
 800051e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000520:	1d3a      	adds	r2, r7, #4
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <MX_TIM15_Init+0x174>)
 8000524:	0011      	movs	r1, r2
 8000526:	0018      	movs	r0, r3
 8000528:	f002 f93a 	bl	80027a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 8000530:	f000 f896 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <MX_TIM15_Init+0x174>)
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fa90 	bl	8000a5c <HAL_TIM_MspPostInit>

}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b016      	add	sp, #88	; 0x58
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000070 	.word	0x20000070
 8000548:	40014000 	.word	0x40014000
 800054c:	00007cff 	.word	0x00007cff

08000550 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000556:	4a15      	ldr	r2, [pc, #84]	; (80005ac <MX_USART3_UART_Init+0x5c>)
 8000558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800055c:	2296      	movs	r2, #150	; 0x96
 800055e:	0192      	lsls	r2, r2, #6
 8000560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000576:	220c      	movs	r2, #12
 8000578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <MX_USART3_UART_Init+0x58>)
 8000594:	0018      	movs	r0, r3
 8000596:	f002 f961 	bl	800285c <HAL_UART_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800059e:	f000 f85f 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000b8 	.word	0x200000b8
 80005ac:	40004800 	.word	0x40004800

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b089      	sub	sp, #36	; 0x24
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	240c      	movs	r4, #12
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2314      	movs	r3, #20
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f003 fb39 	bl	8003c38 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c6:	4b25      	ldr	r3, [pc, #148]	; (800065c <MX_GPIO_Init+0xac>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	4b24      	ldr	r3, [pc, #144]	; (800065c <MX_GPIO_Init+0xac>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	03c9      	lsls	r1, r1, #15
 80005d0:	430a      	orrs	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <MX_GPIO_Init+0xac>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	03db      	lsls	r3, r3, #15
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b1e      	ldr	r3, [pc, #120]	; (800065c <MX_GPIO_Init+0xac>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MX_GPIO_Init+0xac>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	02c9      	lsls	r1, r1, #11
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_GPIO_Init+0xac>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	02db      	lsls	r3, r3, #11
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_GPIO_Init+0xac>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_GPIO_Init+0xac>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0289      	lsls	r1, r1, #10
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_GPIO_Init+0xac>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M_BACKWARD_Pin|M_FORWARD_Pin, GPIO_PIN_RESET);
 800061a:	23c0      	movs	r3, #192	; 0xc0
 800061c:	00d9      	lsls	r1, r3, #3
 800061e:	2390      	movs	r3, #144	; 0x90
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	2200      	movs	r2, #0
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fe93 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M_BACKWARD_Pin M_FORWARD_Pin */
  GPIO_InitStruct.Pin = M_BACKWARD_Pin|M_FORWARD_Pin;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	22c0      	movs	r2, #192	; 0xc0
 800062e:	00d2      	lsls	r2, r2, #3
 8000630:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2201      	movs	r2, #1
 8000636:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	193a      	adds	r2, r7, r4
 8000646:	2390      	movs	r3, #144	; 0x90
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	0011      	movs	r1, r2
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fd0f 	bl	8001070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b009      	add	sp, #36	; 0x24
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40021000 	.word	0x40021000

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	e7fe      	b.n	8000668 <Error_Handler+0x8>
	...

0800066c <rc_car_init>:
static void setBackward(void);
static void unpackedData(void);


void rc_car_init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

	rcCar.newDataFlag = NO_NEW_DATA_AVAILABLE;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <rc_car_init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	rcCar.pckReceived = 0;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <rc_car_init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	705a      	strb	r2, [r3, #1]
	rcCar.mode = MODE_NORM;	// Start in NORMAL mode
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <rc_car_init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	709a      	strb	r2, [r3, #2]
	rcCar.angle = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <rc_car_init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	715a      	strb	r2, [r3, #5]
	rcCar.speed = 0;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <rc_car_init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	70da      	strb	r2, [r3, #3]
	rcCar.direction = NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <rc_car_init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	711a      	strb	r2, [r3, #4]

	rcCar.status = STOP;	// Start in STOP and wait for new command
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <rc_car_init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	731a      	strb	r2, [r3, #12]

	// Start with a stop condition
	stopCondition();
 800069a:	f000 f8a7 	bl	80007ec <stopCondition>

	// First reception enabled
	HAL_UART_Receive_IT(&huart3, &rcCar.pckReceived, 1);
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <rc_car_init+0x54>)
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <rc_car_init+0x58>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 f92d 	bl	8002904 <HAL_UART_Receive_IT>

	// Timer initialization
	rcCar.WDtimer = getTimeMs();
 80006aa:	f000 fac2 	bl	8000c32 <getTimeMs>
 80006ae:	0002      	movs	r2, r0
 80006b0:	4b02      	ldr	r3, [pc, #8]	; (80006bc <rc_car_init+0x50>)
 80006b2:	609a      	str	r2, [r3, #8]

}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000140 	.word	0x20000140
 80006c0:	20000141 	.word	0x20000141
 80006c4:	200000b8 	.word	0x200000b8

080006c8 <rc_car_process>:


void rc_car_process(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

	switch(rcCar.status)
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <rc_car_process+0xc0>)
 80006ce:	7b1b      	ldrb	r3, [r3, #12]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d002      	beq.n	80006da <rc_car_process+0x12>
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d029      	beq.n	800072c <rc_car_process+0x64>

			break;

	}

}
 80006d8:	e053      	b.n	8000782 <rc_car_process+0xba>
			if(rcCar.newDataFlag == NEW_DATA_AVAILABLE)
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <rc_car_process+0xc0>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d110      	bne.n	8000704 <rc_car_process+0x3c>
				if(rcCar.pckReceived == ERROR)
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <rc_car_process+0xc0>)
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	2bff      	cmp	r3, #255	; 0xff
 80006e8:	d108      	bne.n	80006fc <rc_car_process+0x34>
					rcCar.newDataFlag = NO_NEW_DATA_AVAILABLE;
 80006ea:	4b27      	ldr	r3, [pc, #156]	; (8000788 <rc_car_process+0xc0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
					stopCondition();
 80006f0:	f000 f87c 	bl	80007ec <stopCondition>
					rcCar.status = STOP;
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <rc_car_process+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	731a      	strb	r2, [r3, #12]
			break;
 80006fa:	e042      	b.n	8000782 <rc_car_process+0xba>
					rcCar.status = RUN;
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <rc_car_process+0xc0>)
 80006fe:	2201      	movs	r2, #1
 8000700:	731a      	strb	r2, [r3, #12]
			break;
 8000702:	e03e      	b.n	8000782 <rc_car_process+0xba>
				if(IS_MOTORS_RUNNING())
 8000704:	2390      	movs	r3, #144	; 0x90
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4013      	ands	r3, r2
 8000710:	d106      	bne.n	8000720 <rc_car_process+0x58>
 8000712:	2390      	movs	r3, #144	; 0x90
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	4013      	ands	r3, r2
 800071e:	d001      	beq.n	8000724 <rc_car_process+0x5c>
					stopCondition();
 8000720:	f000 f864 	bl	80007ec <stopCondition>
				rcCar.status = STOP;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <rc_car_process+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	731a      	strb	r2, [r3, #12]
			break;
 800072a:	e02a      	b.n	8000782 <rc_car_process+0xba>
			if(rcCar.newDataFlag == NEW_DATA_AVAILABLE)
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <rc_car_process+0xc0>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d112      	bne.n	800075a <rc_car_process+0x92>
				rcCar.newDataFlag = NO_NEW_DATA_AVAILABLE;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <rc_car_process+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
				if(rcCar.pckReceived == ERROR)
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <rc_car_process+0xc0>)
 800073c:	785b      	ldrb	r3, [r3, #1]
 800073e:	2bff      	cmp	r3, #255	; 0xff
 8000740:	d105      	bne.n	800074e <rc_car_process+0x86>
					stopCondition();
 8000742:	f000 f853 	bl	80007ec <stopCondition>
					rcCar.status = STOP;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <rc_car_process+0xc0>)
 8000748:	2200      	movs	r2, #0
 800074a:	731a      	strb	r2, [r3, #12]
			break;
 800074c:	e018      	b.n	8000780 <rc_car_process+0xb8>
					motors_handler();
 800074e:	f000 f81d 	bl	800078c <motors_handler>
					rcCar.status = RUN;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <rc_car_process+0xc0>)
 8000754:	2201      	movs	r2, #1
 8000756:	731a      	strb	r2, [r3, #12]
			break;
 8000758:	e012      	b.n	8000780 <rc_car_process+0xb8>
				if(getDelayMs(rcCar.WDtimer) > MAX_DELAY)
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <rc_car_process+0xc0>)
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fa73 	bl	8000c4a <getDelayMs>
 8000764:	0002      	movs	r2, r0
 8000766:	23fa      	movs	r3, #250	; 0xfa
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	429a      	cmp	r2, r3
 800076c:	d905      	bls.n	800077a <rc_car_process+0xb2>
					stopCondition();
 800076e:	f000 f83d 	bl	80007ec <stopCondition>
					rcCar.mode = STOP;
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <rc_car_process+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	709a      	strb	r2, [r3, #2]
			break;
 8000778:	e002      	b.n	8000780 <rc_car_process+0xb8>
					rcCar.mode = RUN;
 800077a:	4b03      	ldr	r3, [pc, #12]	; (8000788 <rc_car_process+0xc0>)
 800077c:	2201      	movs	r2, #1
 800077e:	709a      	strb	r2, [r3, #2]
			break;
 8000780:	46c0      	nop			; (mov r8, r8)
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000140 	.word	0x20000140

0800078c <motors_handler>:

/********************** PRIVATE FUNCTIONS ********************************/

static void motors_handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

	uint8_t directionOld = rcCar.direction;
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <motors_handler+0x5c>)
 8000796:	7912      	ldrb	r2, [r2, #4]
 8000798:	701a      	strb	r2, [r3, #0]
	uint8_t speedOld = rcCar.speed;
 800079a:	1dbb      	adds	r3, r7, #6
 800079c:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <motors_handler+0x5c>)
 800079e:	78d2      	ldrb	r2, [r2, #3]
 80007a0:	701a      	strb	r2, [r3, #0]
	uint8_t angleOld = rcCar.angle;
 80007a2:	1d7b      	adds	r3, r7, #5
 80007a4:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <motors_handler+0x5c>)
 80007a6:	7952      	ldrb	r2, [r2, #5]
 80007a8:	701a      	strb	r2, [r3, #0]


	unpackedData();
 80007aa:	f000 f857 	bl	800085c <unpackedData>

	if(rcCar.angle != angleOld)
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <motors_handler+0x5c>)
 80007b0:	795b      	ldrb	r3, [r3, #5]
 80007b2:	1d7a      	adds	r2, r7, #5
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d001      	beq.n	80007be <motors_handler+0x32>
		// Evaluate new angle
		angle_control();
 80007ba:	f000 f845 	bl	8000848 <angle_control>

	if(rcCar.direction != directionOld)
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <motors_handler+0x5c>)
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	1dfa      	adds	r2, r7, #7
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d001      	beq.n	80007ce <motors_handler+0x42>
		// Evaluate new direction
		direction_control();
 80007ca:	f000 f825 	bl	8000818 <direction_control>

	if(rcCar.speed != speedOld)
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <motors_handler+0x5c>)
 80007d0:	78db      	ldrb	r3, [r3, #3]
 80007d2:	1dba      	adds	r2, r7, #6
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d001      	beq.n	80007de <motors_handler+0x52>
		// Evaluate new speed
		speed_control();
 80007da:	f000 f83a 	bl	8000852 <speed_control>

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000140 	.word	0x20000140

080007ec <stopCondition>:


static void stopCondition(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

	// Default configuration

	rcCar.mode = MODE_NORM;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <stopCondition+0x28>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	709a      	strb	r2, [r3, #2]
	rcCar.direction = NONE;				// This will stop the motors
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <stopCondition+0x28>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	711a      	strb	r2, [r3, #4]
	rcCar.angle = ANGLE_STRAIGHT;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <stopCondition+0x28>)
 80007fe:	2200      	movs	r2, #0
 8000800:	715a      	strb	r2, [r3, #5]
	rcCar.speed = SPEED_SLOWEST;
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <stopCondition+0x28>)
 8000804:	2200      	movs	r2, #0
 8000806:	70da      	strb	r2, [r3, #3]

	motors_handler();
 8000808:	f7ff ffc0 	bl	800078c <motors_handler>

	return;
 800080c:	46c0      	nop			; (mov r8, r8)

}
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	20000140 	.word	0x20000140

08000818 <direction_control>:


static void direction_control(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

	if(rcCar.direction == FORWARD)
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <direction_control+0x2c>)
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d102      	bne.n	800082a <direction_control+0x12>
		setForward();
 8000824:	f000 f85a 	bl	80008dc <setForward>
	else if(rcCar.direction == BACKWARD)
		setBackward();
	else
		setStop();

}
 8000828:	e008      	b.n	800083c <direction_control+0x24>
	else if(rcCar.direction == BACKWARD)
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <direction_control+0x2c>)
 800082c:	791b      	ldrb	r3, [r3, #4]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d102      	bne.n	8000838 <direction_control+0x20>
		setBackward();
 8000832:	f000 f868 	bl	8000906 <setBackward>
}
 8000836:	e001      	b.n	800083c <direction_control+0x24>
		setStop();
 8000838:	f000 f87a 	bl	8000930 <setStop>
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	20000140 	.word	0x20000140

08000848 <angle_control>:


static void angle_control(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0




}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <speed_control>:


static void speed_control(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0




}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <unpackedData>:


static void unpackedData(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

	rcCar.mode = EXTRACT_MODE_FROM_PCK(rcCar.pckReceived);
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <unpackedData+0x7c>)
 8000862:	785b      	ldrb	r3, [r3, #1]
 8000864:	09db      	lsrs	r3, r3, #7
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <unpackedData+0x7c>)
 800086a:	709a      	strb	r2, [r3, #2]
	rcCar.angle = EXTRACT_ANGLE_FROM_PCK(rcCar.pckReceived);
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <unpackedData+0x7c>)
 800086e:	785b      	ldrb	r3, [r3, #1]
 8000870:	115b      	asrs	r3, r3, #5
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2203      	movs	r2, #3
 8000876:	4013      	ands	r3, r2
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <unpackedData+0x7c>)
 800087c:	715a      	strb	r2, [r3, #5]
	rcCar.speed = EXTRACT_SPEED_FROM_PCK(rcCar.pckReceived);
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <unpackedData+0x7c>)
 8000880:	785b      	ldrb	r3, [r3, #1]
 8000882:	221f      	movs	r2, #31
 8000884:	4013      	ands	r3, r2
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <unpackedData+0x7c>)
 800088a:	70da      	strb	r2, [r3, #3]

	if(rcCar.speed >= FORWARD_BORDER)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <unpackedData+0x7c>)
 800088e:	78db      	ldrb	r3, [r3, #3]
 8000890:	2b12      	cmp	r3, #18
 8000892:	d909      	bls.n	80008a8 <unpackedData+0x4c>
	{

		rcCar.direction = FORWARD;
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <unpackedData+0x7c>)
 8000896:	2202      	movs	r2, #2
 8000898:	711a      	strb	r2, [r3, #4]

		// Normalize speed for 13 values
		rcCar.speed -= FORWARD_BORDER;		// 0-12
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <unpackedData+0x7c>)
 800089c:	78db      	ldrb	r3, [r3, #3]
 800089e:	3b13      	subs	r3, #19
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <unpackedData+0x7c>)
 80008a4:	70da      	strb	r2, [r3, #3]

		rcCar.speed = SPEED_ZERO_VAL;

	}

}
 80008a6:	e014      	b.n	80008d2 <unpackedData+0x76>
	else if(rcCar.speed <= BACKWARD_BORDER)
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <unpackedData+0x7c>)
 80008aa:	78db      	ldrb	r3, [r3, #3]
 80008ac:	2b0c      	cmp	r3, #12
 80008ae:	d80a      	bhi.n	80008c6 <unpackedData+0x6a>
		rcCar.direction = BACKWARD;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <unpackedData+0x7c>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	711a      	strb	r2, [r3, #4]
		rcCar.speed = FORWARD_BORDER - rcCar.speed;		// 0-12
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <unpackedData+0x7c>)
 80008b8:	78db      	ldrb	r3, [r3, #3]
 80008ba:	2213      	movs	r2, #19
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <unpackedData+0x7c>)
 80008c2:	70da      	strb	r2, [r3, #3]
}
 80008c4:	e005      	b.n	80008d2 <unpackedData+0x76>
		rcCar.direction = NONE;
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <unpackedData+0x7c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	711a      	strb	r2, [r3, #4]
		rcCar.speed = SPEED_ZERO_VAL;
 80008cc:	4b02      	ldr	r3, [pc, #8]	; (80008d8 <unpackedData+0x7c>)
 80008ce:	22ff      	movs	r2, #255	; 0xff
 80008d0:	70da      	strb	r2, [r3, #3]
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000140 	.word	0x20000140

080008dc <setForward>:


static void setForward(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(M_BACKWARD_GPIO_Port, M_BACKWARD_Pin, 1);
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	0099      	lsls	r1, r3, #2
 80008e4:	2390      	movs	r3, #144	; 0x90
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	2201      	movs	r2, #1
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fd30 	bl	8001350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_FORWARD_GPIO_Port, M_FORWARD_Pin, 0);
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	00d9      	lsls	r1, r3, #3
 80008f4:	2390      	movs	r3, #144	; 0x90
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	2200      	movs	r2, #0
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fd28 	bl	8001350 <HAL_GPIO_WritePin>

}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <setBackward>:


static void setBackward(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(M_BACKWARD_GPIO_Port, M_BACKWARD_Pin, 0);
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	0099      	lsls	r1, r3, #2
 800090e:	2390      	movs	r3, #144	; 0x90
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	2200      	movs	r2, #0
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fd1b 	bl	8001350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_FORWARD_GPIO_Port, M_FORWARD_Pin, 1);
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	00d9      	lsls	r1, r3, #3
 800091e:	2390      	movs	r3, #144	; 0x90
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	2201      	movs	r2, #1
 8000924:	0018      	movs	r0, r3
 8000926:	f000 fd13 	bl	8001350 <HAL_GPIO_WritePin>

}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <setStop>:


static void setStop(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(M_BACKWARD_GPIO_Port, M_BACKWARD_Pin, 0);
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	0099      	lsls	r1, r3, #2
 8000938:	2390      	movs	r3, #144	; 0x90
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2200      	movs	r2, #0
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fd06 	bl	8001350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_FORWARD_GPIO_Port, M_FORWARD_Pin, 0);
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	00d9      	lsls	r1, r3, #3
 8000948:	2390      	movs	r3, #144	; 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2200      	movs	r2, #0
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fcfe 	bl	8001350 <HAL_GPIO_WritePin>

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <HAL_UART_RxCpltCallback>:

/********************* INTERRUPT CALLBACKS ******************************/


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

	// Timer reset
	rcCar.WDtimer = getTimeMs();
 8000964:	f000 f965 	bl	8000c32 <getTimeMs>
 8000968:	0002      	movs	r2, r0
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_UART_RxCpltCallback+0x44>)
 800096c:	609a      	str	r2, [r3, #8]

	// New data available
	rcCar.newDataFlag = NEW_DATA_AVAILABLE;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_UART_RxCpltCallback+0x44>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]

	if(rcCar.pckReceived != ERROR)
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_UART_RxCpltCallback+0x44>)
 8000976:	785b      	ldrb	r3, [r3, #1]
 8000978:	2bff      	cmp	r3, #255	; 0xff
 800097a:	d003      	beq.n	8000984 <HAL_UART_RxCpltCallback+0x28>
		// If no error occurs go into RUN mode
		rcCar.status = RUN;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_UART_RxCpltCallback+0x44>)
 800097e:	2201      	movs	r2, #1
 8000980:	731a      	strb	r2, [r3, #12]
 8000982:	e002      	b.n	800098a <HAL_UART_RxCpltCallback+0x2e>
	else
		// If error occurs go into STOP mode
		rcCar.status = STOP;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_UART_RxCpltCallback+0x44>)
 8000986:	2200      	movs	r2, #0
 8000988:	731a      	strb	r2, [r3, #12]

	// Start a new reception
	HAL_UART_Receive_IT(&huart3, &rcCar.pckReceived, 1);
 800098a:	4906      	ldr	r1, [pc, #24]	; (80009a4 <HAL_UART_RxCpltCallback+0x48>)
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_UART_RxCpltCallback+0x4c>)
 800098e:	2201      	movs	r2, #1
 8000990:	0018      	movs	r0, r3
 8000992:	f001 ffb7 	bl	8002904 <HAL_UART_Receive_IT>

}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	20000140 	.word	0x20000140
 80009a4:	20000141 	.word	0x20000141
 80009a8:	200000b8 	.word	0x200000b8

080009ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x44>)
 80009b4:	699a      	ldr	r2, [r3, #24]
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_MspInit+0x44>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	430a      	orrs	r2, r1
 80009bc:	619a      	str	r2, [r3, #24]
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_MspInit+0x44>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	2201      	movs	r2, #1
 80009c4:	4013      	ands	r3, r2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x44>)
 80009cc:	69da      	ldr	r2, [r3, #28]
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_MspInit+0x44>)
 80009d0:	2180      	movs	r1, #128	; 0x80
 80009d2:	0549      	lsls	r1, r1, #21
 80009d4:	430a      	orrs	r2, r1
 80009d6:	61da      	str	r2, [r3, #28]
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_MspInit+0x44>)
 80009da:	69da      	ldr	r2, [r3, #28]
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	055b      	lsls	r3, r3, #21
 80009e0:	4013      	ands	r3, r2
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <HAL_TIM_Base_MspInit+0x5c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d10c      	bne.n	8000a20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <HAL_TIM_Base_MspInit+0x60>)
 8000a08:	69da      	ldr	r2, [r3, #28]
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_TIM_Base_MspInit+0x60>)
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	61da      	str	r2, [r3, #28]
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_TIM_Base_MspInit+0x60>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	2202      	movs	r2, #2
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000a1e:	e012      	b.n	8000a46 <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM15)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <HAL_TIM_Base_MspInit+0x64>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10d      	bne.n	8000a46 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_TIM_Base_MspInit+0x60>)
 8000a2c:	699a      	ldr	r2, [r3, #24]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_TIM_Base_MspInit+0x60>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0249      	lsls	r1, r1, #9
 8000a34:	430a      	orrs	r2, r1
 8000a36:	619a      	str	r2, [r3, #24]
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_TIM_Base_MspInit+0x60>)
 8000a3a:	699a      	ldr	r2, [r3, #24]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	025b      	lsls	r3, r3, #9
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b004      	add	sp, #16
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40000400 	.word	0x40000400
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40014000 	.word	0x40014000

08000a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	2414      	movs	r4, #20
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f003 f8e2 	bl	8003c38 <memset>
  if(htim->Instance==TIM3)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2a      	ldr	r2, [pc, #168]	; (8000b24 <HAL_TIM_MspPostInit+0xc8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d124      	bne.n	8000ac8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <HAL_TIM_MspPostInit+0xcc>)
 8000a80:	695a      	ldr	r2, [r3, #20]
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <HAL_TIM_MspPostInit+0xcc>)
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	02c9      	lsls	r1, r1, #11
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <HAL_TIM_MspPostInit+0xcc>)
 8000a8e:	695a      	ldr	r2, [r3, #20]
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	02db      	lsls	r3, r3, #11
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = M_SPEED_Pin;
 8000a9a:	0021      	movs	r1, r4
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(M_SPEED_GPIO_Port, &GPIO_InitStruct);
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <HAL_TIM_MspPostInit+0xd0>)
 8000abe:	0019      	movs	r1, r3
 8000ac0:	0010      	movs	r0, r2
 8000ac2:	f000 fad5 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000ac6:	e029      	b.n	8000b1c <HAL_TIM_MspPostInit+0xc0>
  else if(htim->Instance==TIM15)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <HAL_TIM_MspPostInit+0xd4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d124      	bne.n	8000b1c <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_TIM_MspPostInit+0xcc>)
 8000ad4:	695a      	ldr	r2, [r3, #20]
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_TIM_MspPostInit+0xcc>)
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	02c9      	lsls	r1, r1, #11
 8000adc:	430a      	orrs	r2, r1
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_TIM_MspPostInit+0xcc>)
 8000ae2:	695a      	ldr	r2, [r3, #20]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	02db      	lsls	r3, r3, #11
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SM1_PWM_Pin|SM2_PWM_Pin;
 8000aee:	2114      	movs	r1, #20
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	22c0      	movs	r2, #192	; 0xc0
 8000af4:	0212      	lsls	r2, r2, #8
 8000af6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2202      	movs	r2, #2
 8000afc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_TIM_MspPostInit+0xd0>)
 8000b14:	0019      	movs	r1, r3
 8000b16:	0010      	movs	r0, r2
 8000b18:	f000 faaa 	bl	8001070 <HAL_GPIO_Init>
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b00b      	add	sp, #44	; 0x2c
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	40000400 	.word	0x40000400
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	40014000 	.word	0x40014000

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b08b      	sub	sp, #44	; 0x2c
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	2414      	movs	r4, #20
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	0018      	movs	r0, r3
 8000b42:	2314      	movs	r3, #20
 8000b44:	001a      	movs	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f003 f876 	bl	8003c38 <memset>
  if(huart->Instance==USART3)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <HAL_UART_MspInit+0xa0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d13a      	bne.n	8000bcc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HAL_UART_MspInit+0xa4>)
 8000b58:	69da      	ldr	r2, [r3, #28]
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <HAL_UART_MspInit+0xa4>)
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	02c9      	lsls	r1, r1, #11
 8000b60:	430a      	orrs	r2, r1
 8000b62:	61da      	str	r2, [r3, #28]
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_UART_MspInit+0xa4>)
 8000b66:	69da      	ldr	r2, [r3, #28]
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	02db      	lsls	r3, r3, #11
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_UART_MspInit+0xa4>)
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_UART_MspInit+0xa4>)
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	02c9      	lsls	r1, r1, #11
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	615a      	str	r2, [r3, #20]
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_UART_MspInit+0xa4>)
 8000b82:	695a      	ldr	r2, [r3, #20]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	02db      	lsls	r3, r3, #11
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = LORA_TX_Pin|LORA_RX_Pin;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	22c0      	movs	r2, #192	; 0xc0
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	0021      	movs	r1, r4
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2204      	movs	r2, #4
 8000bae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_UART_MspInit+0xa8>)
 8000bb4:	0019      	movs	r1, r3
 8000bb6:	0010      	movs	r0, r2
 8000bb8:	f000 fa5a 	bl	8001070 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	201d      	movs	r0, #29
 8000bc2:	f000 f9a5 	bl	8000f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 8000bc6:	201d      	movs	r0, #29
 8000bc8:	f000 f9b7 	bl	8000f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b00b      	add	sp, #44	; 0x2c
 8000bd2:	bd90      	pop	{r4, r7, pc}
 8000bd4:	40004800 	.word	0x40004800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000400 	.word	0x48000400

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f8b2 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <USART3_6_IRQHandler>:

/**
  * @brief This function handles USART3 to USART6 global interrupts.
  */
void USART3_6_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_6_IRQn 0 */

  /* USER CODE END USART3_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <USART3_6_IRQHandler+0x14>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 fecc 	bl	80029b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_6_IRQn 1 */

  /* USER CODE END USART3_6_IRQn 1 */
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	200000b8 	.word	0x200000b8

08000c28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <getTimeMs>:
/*
 *	@ Function; getDelayms
 *  @ Return; uint32_t -> current time in ms
 */
uint32_t getTimeMs(void)
{
 8000c32:	b5b0      	push	{r4, r5, r7, lr}
 8000c34:	af00      	add	r7, sp, #0

	// Tick frequency is by default 1kHz (1ms period)
	return ( HAL_GetTick() * HAL_GetTickFreq() );
 8000c36:	f000 f8ab 	bl	8000d90 <HAL_GetTick>
 8000c3a:	0004      	movs	r4, r0
 8000c3c:	f000 f8b2 	bl	8000da4 <HAL_GetTickFreq>
 8000c40:	0003      	movs	r3, r0
 8000c42:	4363      	muls	r3, r4

}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}

08000c4a <getDelayMs>:
 *	@ Function; getDelayms
 * 	@ Par1; uint32_t timeStamp -> captured time
 *  @ Return; uint32_t tDiff -> time elapsed since timeStamp in ms
 */
uint32_t getDelayMs(uint32_t timeStamp)
{
 8000c4a:	b590      	push	{r4, r7, lr}
 8000c4c:	b085      	sub	sp, #20
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]

	uint32_t tDiff;
	uint32_t currentTime;

	currentTime = ( getTimeMs() * HAL_GetTickFreq() );
 8000c52:	f7ff ffee 	bl	8000c32 <getTimeMs>
 8000c56:	0004      	movs	r4, r0
 8000c58:	f000 f8a4 	bl	8000da4 <HAL_GetTickFreq>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	4363      	muls	r3, r4
 8000c60:	60bb      	str	r3, [r7, #8]

	if(currentTime >= timeStamp)
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d304      	bcc.n	8000c74 <getDelayMs+0x2a>
		tDiff = currentTime - timeStamp;
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	e003      	b.n	8000c7c <getDelayMs+0x32>
	else
		tDiff = timeStamp - currentTime;
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	60fb      	str	r3, [r7, #12]

	return tDiff;
 8000c7c:	68fb      	ldr	r3, [r7, #12]

}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b005      	add	sp, #20
 8000c84:	bd90      	pop	{r4, r7, pc}
	...

08000c88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c8c:	f7ff ffcc 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	; (8000cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <LoopForever+0xe>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	; (8000cd4 <LoopForever+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cb6:	f002 ffc7 	bl	8003c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cba:	f7ff faaf 	bl	800021c <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   r0, =_estack
 8000cc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ccc:	08003ce8 	.word	0x08003ce8
  ldr r2, =_sbss
 8000cd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cd4:	20000154 	.word	0x20000154

08000cd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_IRQHandler>
	...

08000cdc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_Init+0x24>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_Init+0x24>)
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f809 	bl	8000d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf2:	f7ff fe5b 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_InitTick+0x5c>)
 8000d0e:	681c      	ldr	r4, [r3, #0]
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_InitTick+0x60>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	0019      	movs	r1, r3
 8000d16:	23fa      	movs	r3, #250	; 0xfa
 8000d18:	0098      	lsls	r0, r3, #2
 8000d1a:	f7ff f9f3 	bl	8000104 <__udivsi3>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	0019      	movs	r1, r3
 8000d22:	0020      	movs	r0, r4
 8000d24:	f7ff f9ee 	bl	8000104 <__udivsi3>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f915 	bl	8000f5a <HAL_SYSTICK_Config>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e00f      	b.n	8000d58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d80b      	bhi.n	8000d56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	2301      	movs	r3, #1
 8000d42:	425b      	negs	r3, r3
 8000d44:	2200      	movs	r2, #0
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 f8e2 	bl	8000f10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_InitTick+0x64>)
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b003      	add	sp, #12
 8000d5e:	bd90      	pop	{r4, r7, pc}
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_IncTick+0x1c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	001a      	movs	r2, r3
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x20>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	18d2      	adds	r2, r2, r3
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <HAL_IncTick+0x20>)
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000150 	.word	0x20000150

08000d90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <HAL_GetTick+0x10>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	20000150 	.word	0x20000150

08000da4 <HAL_GetTickFreq>:
  * @brief return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <HAL_GetTickFreq+0x10>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	20000008 	.word	0x20000008

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dca:	d809      	bhi.n	8000de0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	231f      	movs	r3, #31
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_EnableIRQ+0x30>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4091      	lsls	r1, r2
 8000ddc:	000a      	movs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
  }
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	0002      	movs	r2, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000e00:	d828      	bhi.n	8000e54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e02:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <__NVIC_SetPriority+0xd4>)
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	33c0      	adds	r3, #192	; 0xc0
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	589b      	ldr	r3, [r3, r2]
 8000e12:	1dfa      	adds	r2, r7, #7
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	0011      	movs	r1, r2
 8000e18:	2203      	movs	r2, #3
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	00d2      	lsls	r2, r2, #3
 8000e1e:	21ff      	movs	r1, #255	; 0xff
 8000e20:	4091      	lsls	r1, r2
 8000e22:	000a      	movs	r2, r1
 8000e24:	43d2      	mvns	r2, r2
 8000e26:	401a      	ands	r2, r3
 8000e28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	019b      	lsls	r3, r3, #6
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	401a      	ands	r2, r3
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	0018      	movs	r0, r3
 8000e38:	2303      	movs	r3, #3
 8000e3a:	4003      	ands	r3, r0
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e40:	481f      	ldr	r0, [pc, #124]	; (8000ec0 <__NVIC_SetPriority+0xd4>)
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	33c0      	adds	r3, #192	; 0xc0
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e52:	e031      	b.n	8000eb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e54:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <__NVIC_SetPriority+0xd8>)
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	400b      	ands	r3, r1
 8000e60:	3b08      	subs	r3, #8
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3306      	adds	r3, #6
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	18d3      	adds	r3, r2, r3
 8000e6a:	3304      	adds	r3, #4
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1dfa      	adds	r2, r7, #7
 8000e70:	7812      	ldrb	r2, [r2, #0]
 8000e72:	0011      	movs	r1, r2
 8000e74:	2203      	movs	r2, #3
 8000e76:	400a      	ands	r2, r1
 8000e78:	00d2      	lsls	r2, r2, #3
 8000e7a:	21ff      	movs	r1, #255	; 0xff
 8000e7c:	4091      	lsls	r1, r2
 8000e7e:	000a      	movs	r2, r1
 8000e80:	43d2      	mvns	r2, r2
 8000e82:	401a      	ands	r2, r3
 8000e84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	019b      	lsls	r3, r3, #6
 8000e8a:	22ff      	movs	r2, #255	; 0xff
 8000e8c:	401a      	ands	r2, r3
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	0018      	movs	r0, r3
 8000e94:	2303      	movs	r3, #3
 8000e96:	4003      	ands	r3, r0
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <__NVIC_SetPriority+0xd8>)
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	001c      	movs	r4, r3
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	4023      	ands	r3, r4
 8000ea8:	3b08      	subs	r3, #8
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	430a      	orrs	r2, r1
 8000eae:	3306      	adds	r3, #6
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	18c3      	adds	r3, r0, r3
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b003      	add	sp, #12
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	1e5a      	subs	r2, r3, #1
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	045b      	lsls	r3, r3, #17
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d301      	bcc.n	8000ee0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000edc:	2301      	movs	r3, #1
 8000ede:	e010      	b.n	8000f02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <SysTick_Config+0x44>)
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee8:	2301      	movs	r3, #1
 8000eea:	425b      	negs	r3, r3
 8000eec:	2103      	movs	r1, #3
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f7ff ff7c 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x44>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x44>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	1c02      	adds	r2, r0, #0
 8000f20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b004      	add	sp, #16
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	0002      	movs	r2, r0
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff ff33 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ffaf 	bl	8000ec8 <SysTick_Config>
 8000f6a:	0003      	movs	r3, r0
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b002      	add	sp, #8
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2221      	movs	r2, #33	; 0x21
 8000f80:	5c9b      	ldrb	r3, [r3, r2]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d008      	beq.n	8000f9a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2220      	movs	r2, #32
 8000f92:	2100      	movs	r1, #0
 8000f94:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e020      	b.n	8000fdc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	210e      	movs	r1, #14
 8000fa6:	438a      	bics	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	438a      	bics	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2221      	movs	r2, #33	; 0x21
 8000fce:	2101      	movs	r1, #1
 8000fd0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	0018      	movs	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fec:	210f      	movs	r1, #15
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2221      	movs	r2, #33	; 0x21
 8000ff8:	5c9b      	ldrb	r3, [r3, r2]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d006      	beq.n	800100e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2204      	movs	r2, #4
 8001004:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
 800100c:	e028      	b.n	8001060 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	210e      	movs	r1, #14
 800101a:	438a      	bics	r2, r1
 800101c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	438a      	bics	r2, r1
 800102c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001036:	2101      	movs	r1, #1
 8001038:	4091      	lsls	r1, r2
 800103a:	000a      	movs	r2, r1
 800103c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2221      	movs	r2, #33	; 0x21
 8001042:	2101      	movs	r1, #1
 8001044:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	0010      	movs	r0, r2
 800105e:	4798      	blx	r3
    }
  }
  return status;
 8001060:	230f      	movs	r3, #15
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	781b      	ldrb	r3, [r3, #0]
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b004      	add	sp, #16
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107e:	e14f      	b.n	8001320 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4091      	lsls	r1, r2
 800108a:	000a      	movs	r2, r1
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d100      	bne.n	8001098 <HAL_GPIO_Init+0x28>
 8001096:	e140      	b.n	800131a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2203      	movs	r2, #3
 800109e:	4013      	ands	r3, r2
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d005      	beq.n	80010b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d130      	bne.n	8001112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	409a      	lsls	r2, r3
 80010be:	0013      	movs	r3, r2
 80010c0:	43da      	mvns	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	409a      	lsls	r2, r3
 80010d2:	0013      	movs	r3, r2
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e6:	2201      	movs	r2, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	2201      	movs	r2, #1
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2203      	movs	r2, #3
 8001118:	4013      	ands	r3, r2
 800111a:	2b03      	cmp	r3, #3
 800111c:	d017      	beq.n	800114e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	409a      	lsls	r2, r3
 800112c:	0013      	movs	r3, r2
 800112e:	43da      	mvns	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2203      	movs	r2, #3
 8001154:	4013      	ands	r3, r2
 8001156:	2b02      	cmp	r3, #2
 8001158:	d123      	bne.n	80011a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	58d3      	ldr	r3, [r2, r3]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2207      	movs	r2, #7
 800116c:	4013      	ands	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	691a      	ldr	r2, [r3, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2107      	movs	r1, #7
 8001186:	400b      	ands	r3, r1
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	6939      	ldr	r1, [r7, #16]
 80011a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2203      	movs	r2, #3
 80011c0:	401a      	ands	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	23c0      	movs	r3, #192	; 0xc0
 80011dc:	029b      	lsls	r3, r3, #10
 80011de:	4013      	ands	r3, r2
 80011e0:	d100      	bne.n	80011e4 <HAL_GPIO_Init+0x174>
 80011e2:	e09a      	b.n	800131a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	4b54      	ldr	r3, [pc, #336]	; (8001338 <HAL_GPIO_Init+0x2c8>)
 80011e6:	699a      	ldr	r2, [r3, #24]
 80011e8:	4b53      	ldr	r3, [pc, #332]	; (8001338 <HAL_GPIO_Init+0x2c8>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	619a      	str	r2, [r3, #24]
 80011f0:	4b51      	ldr	r3, [pc, #324]	; (8001338 <HAL_GPIO_Init+0x2c8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	2201      	movs	r2, #1
 80011f6:	4013      	ands	r3, r2
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011fc:	4a4f      	ldr	r2, [pc, #316]	; (800133c <HAL_GPIO_Init+0x2cc>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	589b      	ldr	r3, [r3, r2]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2203      	movs	r2, #3
 800120e:	4013      	ands	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	409a      	lsls	r2, r3
 8001216:	0013      	movs	r3, r2
 8001218:	43da      	mvns	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	2390      	movs	r3, #144	; 0x90
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	429a      	cmp	r2, r3
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x1e2>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a44      	ldr	r2, [pc, #272]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x1de>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a43      	ldr	r2, [pc, #268]	; (8001344 <HAL_GPIO_Init+0x2d4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x1da>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a42      	ldr	r2, [pc, #264]	; (8001348 <HAL_GPIO_Init+0x2d8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x1d6>
 8001242:	2303      	movs	r3, #3
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x1e4>
 8001246:	2305      	movs	r3, #5
 8001248:	e004      	b.n	8001254 <HAL_GPIO_Init+0x1e4>
 800124a:	2302      	movs	r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x1e4>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x1e4>
 8001252:	2300      	movs	r3, #0
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	2103      	movs	r1, #3
 8001258:	400a      	ands	r2, r1
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4093      	lsls	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001264:	4935      	ldr	r1, [pc, #212]	; (800133c <HAL_GPIO_Init+0x2cc>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <HAL_GPIO_Init+0x2dc>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43da      	mvns	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	035b      	lsls	r3, r3, #13
 800128a:	4013      	ands	r3, r2
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_GPIO_Init+0x2dc>)
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_GPIO_Init+0x2dc>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43da      	mvns	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	039b      	lsls	r3, r3, #14
 80012b4:	4013      	ands	r3, r2
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <HAL_GPIO_Init+0x2dc>)
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_GPIO_Init+0x2dc>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	4013      	ands	r3, r2
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_GPIO_Init+0x2dc>)
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_GPIO_Init+0x2dc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43da      	mvns	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	025b      	lsls	r3, r3, #9
 8001308:	4013      	ands	r3, r2
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_GPIO_Init+0x2dc>)
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	40da      	lsrs	r2, r3
 8001328:	1e13      	subs	r3, r2, #0
 800132a:	d000      	beq.n	800132e <HAL_GPIO_Init+0x2be>
 800132c:	e6a8      	b.n	8001080 <HAL_GPIO_Init+0x10>
  } 
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b006      	add	sp, #24
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000
 8001340:	48000400 	.word	0x48000400
 8001344:	48000800 	.word	0x48000800
 8001348:	48000c00 	.word	0x48000c00
 800134c:	40010400 	.word	0x40010400

08001350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	0008      	movs	r0, r1
 800135a:	0011      	movs	r1, r2
 800135c:	1cbb      	adds	r3, r7, #2
 800135e:	1c02      	adds	r2, r0, #0
 8001360:	801a      	strh	r2, [r3, #0]
 8001362:	1c7b      	adds	r3, r7, #1
 8001364:	1c0a      	adds	r2, r1, #0
 8001366:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001368:	1c7b      	adds	r3, r7, #1
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001370:	1cbb      	adds	r3, r7, #2
 8001372:	881a      	ldrh	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001378:	e003      	b.n	8001382 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800137a:	1cbb      	adds	r3, r7, #2
 800137c:	881a      	ldrh	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b002      	add	sp, #8
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e305      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	d100      	bne.n	80013aa <HAL_RCC_OscConfig+0x1e>
 80013a8:	e08d      	b.n	80014c6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013aa:	4bc5      	ldr	r3, [pc, #788]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	220c      	movs	r2, #12
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d00e      	beq.n	80013d4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b6:	4bc2      	ldr	r3, [pc, #776]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	220c      	movs	r2, #12
 80013bc:	4013      	ands	r3, r2
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x64>
 80013c2:	4bbf      	ldr	r3, [pc, #764]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	23c0      	movs	r3, #192	; 0xc0
 80013c8:	025b      	lsls	r3, r3, #9
 80013ca:	401a      	ands	r2, r3
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	025b      	lsls	r3, r3, #9
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d10d      	bne.n	80013f0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	4bba      	ldr	r3, [pc, #744]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	d100      	bne.n	80013e2 <HAL_RCC_OscConfig+0x56>
 80013e0:	e070      	b.n	80014c4 <HAL_RCC_OscConfig+0x138>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d000      	beq.n	80013ec <HAL_RCC_OscConfig+0x60>
 80013ea:	e06b      	b.n	80014c4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e2dc      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d107      	bne.n	8001408 <HAL_RCC_OscConfig+0x7c>
 80013f8:	4bb1      	ldr	r3, [pc, #708]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4bb0      	ldr	r3, [pc, #704]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	0249      	lsls	r1, r1, #9
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e02f      	b.n	8001468 <HAL_RCC_OscConfig+0xdc>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10c      	bne.n	800142a <HAL_RCC_OscConfig+0x9e>
 8001410:	4bab      	ldr	r3, [pc, #684]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4baa      	ldr	r3, [pc, #680]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001416:	49ab      	ldr	r1, [pc, #684]	; (80016c4 <HAL_RCC_OscConfig+0x338>)
 8001418:	400a      	ands	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	4ba8      	ldr	r3, [pc, #672]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4ba7      	ldr	r3, [pc, #668]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001422:	49a9      	ldr	r1, [pc, #676]	; (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001424:	400a      	ands	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	e01e      	b.n	8001468 <HAL_RCC_OscConfig+0xdc>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d10e      	bne.n	8001450 <HAL_RCC_OscConfig+0xc4>
 8001432:	4ba3      	ldr	r3, [pc, #652]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4ba2      	ldr	r3, [pc, #648]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	02c9      	lsls	r1, r1, #11
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	4b9f      	ldr	r3, [pc, #636]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b9e      	ldr	r3, [pc, #632]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	0249      	lsls	r1, r1, #9
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0xdc>
 8001450:	4b9b      	ldr	r3, [pc, #620]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b9a      	ldr	r3, [pc, #616]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001456:	499b      	ldr	r1, [pc, #620]	; (80016c4 <HAL_RCC_OscConfig+0x338>)
 8001458:	400a      	ands	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	4b98      	ldr	r3, [pc, #608]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b97      	ldr	r3, [pc, #604]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001462:	4999      	ldr	r1, [pc, #612]	; (80016c8 <HAL_RCC_OscConfig+0x33c>)
 8001464:	400a      	ands	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d014      	beq.n	800149a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fc8e 	bl	8000d90 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800147a:	f7ff fc89 	bl	8000d90 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b64      	cmp	r3, #100	; 0x64
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e28e      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148c:	4b8c      	ldr	r3, [pc, #560]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	029b      	lsls	r3, r3, #10
 8001494:	4013      	ands	r3, r2
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0xee>
 8001498:	e015      	b.n	80014c6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fc79 	bl	8000d90 <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fc74 	bl	8000d90 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e279      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	4b82      	ldr	r3, [pc, #520]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	029b      	lsls	r3, r3, #10
 80014be:	4013      	ands	r3, r2
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x118>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2202      	movs	r2, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	d100      	bne.n	80014d2 <HAL_RCC_OscConfig+0x146>
 80014d0:	e06c      	b.n	80015ac <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014d2:	4b7b      	ldr	r3, [pc, #492]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	220c      	movs	r2, #12
 80014d8:	4013      	ands	r3, r2
 80014da:	d00e      	beq.n	80014fa <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014dc:	4b78      	ldr	r3, [pc, #480]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	220c      	movs	r2, #12
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d11f      	bne.n	8001528 <HAL_RCC_OscConfig+0x19c>
 80014e8:	4b75      	ldr	r3, [pc, #468]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	23c0      	movs	r3, #192	; 0xc0
 80014ee:	025b      	lsls	r3, r3, #9
 80014f0:	401a      	ands	r2, r3
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d116      	bne.n	8001528 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	4b71      	ldr	r3, [pc, #452]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d005      	beq.n	8001510 <HAL_RCC_OscConfig+0x184>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d001      	beq.n	8001510 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e24c      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b6b      	ldr	r3, [pc, #428]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	22f8      	movs	r2, #248	; 0xf8
 8001516:	4393      	bics	r3, r2
 8001518:	0019      	movs	r1, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00da      	lsls	r2, r3, #3
 8001520:	4b67      	ldr	r3, [pc, #412]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	e041      	b.n	80015ac <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d024      	beq.n	800157a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001530:	4b63      	ldr	r3, [pc, #396]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001536:	2101      	movs	r1, #1
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fc28 	bl	8000d90 <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff fc23 	bl	8000d90 <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e228      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001558:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2202      	movs	r2, #2
 800155e:	4013      	ands	r3, r2
 8001560:	d0f1      	beq.n	8001546 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001562:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	22f8      	movs	r2, #248	; 0xf8
 8001568:	4393      	bics	r3, r2
 800156a:	0019      	movs	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	00da      	lsls	r2, r3, #3
 8001572:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e018      	b.n	80015ac <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157a:	4b51      	ldr	r3, [pc, #324]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b50      	ldr	r3, [pc, #320]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001580:	2101      	movs	r1, #1
 8001582:	438a      	bics	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fc03 	bl	8000d90 <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fbfe 	bl	8000d90 <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e203      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2202      	movs	r2, #2
 80015a8:	4013      	ands	r3, r2
 80015aa:	d1f1      	bne.n	8001590 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2208      	movs	r2, #8
 80015b2:	4013      	ands	r3, r2
 80015b4:	d036      	beq.n	8001624 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d019      	beq.n	80015f2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015be:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80015c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c2:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80015c4:	2101      	movs	r1, #1
 80015c6:	430a      	orrs	r2, r1
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbe1 	bl	8000d90 <HAL_GetTick>
 80015ce:	0003      	movs	r3, r0
 80015d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d4:	f7ff fbdc 	bl	8000d90 <HAL_GetTick>
 80015d8:	0002      	movs	r2, r0
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1e1      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	d0f1      	beq.n	80015d4 <HAL_RCC_OscConfig+0x248>
 80015f0:	e018      	b.n	8001624 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80015f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f6:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80015f8:	2101      	movs	r1, #1
 80015fa:	438a      	bics	r2, r1
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fbc7 	bl	8000d90 <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff fbc2 	bl	8000d90 <HAL_GetTick>
 800160c:	0002      	movs	r2, r0
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1c7      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	2202      	movs	r2, #2
 8001620:	4013      	ands	r3, r2
 8001622:	d1f1      	bne.n	8001608 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2204      	movs	r2, #4
 800162a:	4013      	ands	r3, r2
 800162c:	d100      	bne.n	8001630 <HAL_RCC_OscConfig+0x2a4>
 800162e:	e0b5      	b.n	800179c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001630:	201f      	movs	r0, #31
 8001632:	183b      	adds	r3, r7, r0
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 800163a:	69da      	ldr	r2, [r3, #28]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	055b      	lsls	r3, r3, #21
 8001640:	4013      	ands	r3, r2
 8001642:	d110      	bne.n	8001666 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001646:	69da      	ldr	r2, [r3, #28]
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	0549      	lsls	r1, r1, #21
 800164e:	430a      	orrs	r2, r1
 8001650:	61da      	str	r2, [r3, #28]
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	055b      	lsls	r3, r3, #21
 800165a:	4013      	ands	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001660:	183b      	adds	r3, r7, r0
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_RCC_OscConfig+0x340>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4013      	ands	r3, r2
 8001670:	d11a      	bne.n	80016a8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_RCC_OscConfig+0x340>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_RCC_OscConfig+0x340>)
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	0049      	lsls	r1, r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001680:	f7ff fb86 	bl	8000d90 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7ff fb81 	bl	8000d90 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b64      	cmp	r3, #100	; 0x64
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e186      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_OscConfig+0x340>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d10f      	bne.n	80016d0 <HAL_RCC_OscConfig+0x344>
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80016b2:	6a1a      	ldr	r2, [r3, #32]
 80016b4:	4b02      	ldr	r3, [pc, #8]	; (80016c0 <HAL_RCC_OscConfig+0x334>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	430a      	orrs	r2, r1
 80016ba:	621a      	str	r2, [r3, #32]
 80016bc:	e036      	b.n	800172c <HAL_RCC_OscConfig+0x3a0>
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	40021000 	.word	0x40021000
 80016c4:	fffeffff 	.word	0xfffeffff
 80016c8:	fffbffff 	.word	0xfffbffff
 80016cc:	40007000 	.word	0x40007000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10c      	bne.n	80016f2 <HAL_RCC_OscConfig+0x366>
 80016d8:	4bb6      	ldr	r3, [pc, #728]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80016da:	6a1a      	ldr	r2, [r3, #32]
 80016dc:	4bb5      	ldr	r3, [pc, #724]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80016de:	2101      	movs	r1, #1
 80016e0:	438a      	bics	r2, r1
 80016e2:	621a      	str	r2, [r3, #32]
 80016e4:	4bb3      	ldr	r3, [pc, #716]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80016e6:	6a1a      	ldr	r2, [r3, #32]
 80016e8:	4bb2      	ldr	r3, [pc, #712]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80016ea:	2104      	movs	r1, #4
 80016ec:	438a      	bics	r2, r1
 80016ee:	621a      	str	r2, [r3, #32]
 80016f0:	e01c      	b.n	800172c <HAL_RCC_OscConfig+0x3a0>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d10c      	bne.n	8001714 <HAL_RCC_OscConfig+0x388>
 80016fa:	4bae      	ldr	r3, [pc, #696]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80016fc:	6a1a      	ldr	r2, [r3, #32]
 80016fe:	4bad      	ldr	r3, [pc, #692]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001700:	2104      	movs	r1, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	621a      	str	r2, [r3, #32]
 8001706:	4bab      	ldr	r3, [pc, #684]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001708:	6a1a      	ldr	r2, [r3, #32]
 800170a:	4baa      	ldr	r3, [pc, #680]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800170c:	2101      	movs	r1, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	621a      	str	r2, [r3, #32]
 8001712:	e00b      	b.n	800172c <HAL_RCC_OscConfig+0x3a0>
 8001714:	4ba7      	ldr	r3, [pc, #668]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001716:	6a1a      	ldr	r2, [r3, #32]
 8001718:	4ba6      	ldr	r3, [pc, #664]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800171a:	2101      	movs	r1, #1
 800171c:	438a      	bics	r2, r1
 800171e:	621a      	str	r2, [r3, #32]
 8001720:	4ba4      	ldr	r3, [pc, #656]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001722:	6a1a      	ldr	r2, [r3, #32]
 8001724:	4ba3      	ldr	r3, [pc, #652]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001726:	2104      	movs	r1, #4
 8001728:	438a      	bics	r2, r1
 800172a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d014      	beq.n	800175e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001734:	f7ff fb2c 	bl	8000d90 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	e009      	b.n	8001752 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff fb27 	bl	8000d90 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	4a9b      	ldr	r2, [pc, #620]	; (80019b8 <HAL_RCC_OscConfig+0x62c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e12b      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001752:	4b98      	ldr	r3, [pc, #608]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	2202      	movs	r2, #2
 8001758:	4013      	ands	r3, r2
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x3b2>
 800175c:	e013      	b.n	8001786 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff fb17 	bl	8000d90 <HAL_GetTick>
 8001762:	0003      	movs	r3, r0
 8001764:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001766:	e009      	b.n	800177c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff fb12 	bl	8000d90 <HAL_GetTick>
 800176c:	0002      	movs	r2, r0
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	4a91      	ldr	r2, [pc, #580]	; (80019b8 <HAL_RCC_OscConfig+0x62c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e116      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177c:	4b8d      	ldr	r3, [pc, #564]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001786:	231f      	movs	r3, #31
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001790:	4b88      	ldr	r3, [pc, #544]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001792:	69da      	ldr	r2, [r3, #28]
 8001794:	4b87      	ldr	r3, [pc, #540]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001796:	4989      	ldr	r1, [pc, #548]	; (80019bc <HAL_RCC_OscConfig+0x630>)
 8001798:	400a      	ands	r2, r1
 800179a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2210      	movs	r2, #16
 80017a2:	4013      	ands	r3, r2
 80017a4:	d063      	beq.n	800186e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d12a      	bne.n	8001804 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017ae:	4b81      	ldr	r3, [pc, #516]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80017b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b2:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80017b4:	2104      	movs	r1, #4
 80017b6:	430a      	orrs	r2, r1
 80017b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017ba:	4b7e      	ldr	r3, [pc, #504]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80017bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017be:	4b7d      	ldr	r3, [pc, #500]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80017c0:	2101      	movs	r1, #1
 80017c2:	430a      	orrs	r2, r1
 80017c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fae3 	bl	8000d90 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017d0:	f7ff fade 	bl	8000d90 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e0e3      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017e2:	4b74      	ldr	r3, [pc, #464]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80017e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e6:	2202      	movs	r2, #2
 80017e8:	4013      	ands	r3, r2
 80017ea:	d0f1      	beq.n	80017d0 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017ec:	4b71      	ldr	r3, [pc, #452]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80017ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f0:	22f8      	movs	r2, #248	; 0xf8
 80017f2:	4393      	bics	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	00da      	lsls	r2, r3, #3
 80017fc:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80017fe:	430a      	orrs	r2, r1
 8001800:	635a      	str	r2, [r3, #52]	; 0x34
 8001802:	e034      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	3305      	adds	r3, #5
 800180a:	d111      	bne.n	8001830 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800180c:	4b69      	ldr	r3, [pc, #420]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800180e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001810:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001812:	2104      	movs	r1, #4
 8001814:	438a      	bics	r2, r1
 8001816:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001818:	4b66      	ldr	r3, [pc, #408]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800181a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181c:	22f8      	movs	r2, #248	; 0xf8
 800181e:	4393      	bics	r3, r2
 8001820:	0019      	movs	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	00da      	lsls	r2, r3, #3
 8001828:	4b62      	ldr	r3, [pc, #392]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800182a:	430a      	orrs	r2, r1
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
 800182e:	e01e      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001830:	4b60      	ldr	r3, [pc, #384]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001834:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001836:	2104      	movs	r1, #4
 8001838:	430a      	orrs	r2, r1
 800183a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800183c:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800183e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001840:	4b5c      	ldr	r3, [pc, #368]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001842:	2101      	movs	r1, #1
 8001844:	438a      	bics	r2, r1
 8001846:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7ff faa2 	bl	8000d90 <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001852:	f7ff fa9d 	bl	8000d90 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e0a2      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001864:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001868:	2202      	movs	r2, #2
 800186a:	4013      	ands	r3, r2
 800186c:	d1f1      	bne.n	8001852 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d100      	bne.n	8001878 <HAL_RCC_OscConfig+0x4ec>
 8001876:	e097      	b.n	80019a8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001878:	4b4e      	ldr	r3, [pc, #312]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	220c      	movs	r2, #12
 800187e:	4013      	ands	r3, r2
 8001880:	2b08      	cmp	r3, #8
 8001882:	d100      	bne.n	8001886 <HAL_RCC_OscConfig+0x4fa>
 8001884:	e06b      	b.n	800195e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d14c      	bne.n	8001928 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b48      	ldr	r3, [pc, #288]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001894:	494a      	ldr	r1, [pc, #296]	; (80019c0 <HAL_RCC_OscConfig+0x634>)
 8001896:	400a      	ands	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff fa79 	bl	8000d90 <HAL_GetTick>
 800189e:	0003      	movs	r3, r0
 80018a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff fa74 	bl	8000d90 <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e079      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b6:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	049b      	lsls	r3, r3, #18
 80018be:	4013      	ands	r3, r2
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c2:	4b3c      	ldr	r3, [pc, #240]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	220f      	movs	r2, #15
 80018c8:	4393      	bics	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d0:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80018d6:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a3a      	ldr	r2, [pc, #232]	; (80019c4 <HAL_RCC_OscConfig+0x638>)
 80018dc:	4013      	ands	r3, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	431a      	orrs	r2, r3
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80018ec:	430a      	orrs	r2, r1
 80018ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f0:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	0449      	lsls	r1, r1, #17
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff fa47 	bl	8000d90 <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff fa42 	bl	8000d90 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e047      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	049b      	lsls	r3, r3, #18
 8001922:	4013      	ands	r3, r2
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x57c>
 8001926:	e03f      	b.n	80019a8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800192e:	4924      	ldr	r1, [pc, #144]	; (80019c0 <HAL_RCC_OscConfig+0x634>)
 8001930:	400a      	ands	r2, r1
 8001932:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fa2c 	bl	8000d90 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff fa27 	bl	8000d90 <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e02c      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	049b      	lsls	r3, r3, #18
 8001958:	4013      	ands	r3, r2
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x5b2>
 800195c:	e024      	b.n	80019a8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e01f      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	23c0      	movs	r3, #192	; 0xc0
 800197a:	025b      	lsls	r3, r3, #9
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	429a      	cmp	r2, r3
 8001984:	d10e      	bne.n	80019a4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	220f      	movs	r2, #15
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	23f0      	movs	r3, #240	; 0xf0
 8001998:	039b      	lsls	r3, r3, #14
 800199a:	401a      	ands	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b008      	add	sp, #32
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	40021000 	.word	0x40021000
 80019b8:	00001388 	.word	0x00001388
 80019bc:	efffffff 	.word	0xefffffff
 80019c0:	feffffff 	.word	0xfeffffff
 80019c4:	ffc27fff 	.word	0xffc27fff

080019c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0b3      	b.n	8001b44 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b5b      	ldr	r3, [pc, #364]	; (8001b4c <HAL_RCC_ClockConfig+0x184>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2201      	movs	r2, #1
 80019e2:	4013      	ands	r3, r2
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d911      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b58      	ldr	r3, [pc, #352]	; (8001b4c <HAL_RCC_ClockConfig+0x184>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2201      	movs	r2, #1
 80019f0:	4393      	bics	r3, r2
 80019f2:	0019      	movs	r1, r3
 80019f4:	4b55      	ldr	r3, [pc, #340]	; (8001b4c <HAL_RCC_ClockConfig+0x184>)
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <HAL_RCC_ClockConfig+0x184>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e09a      	b.n	8001b44 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d015      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d006      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a22:	4b4b      	ldr	r3, [pc, #300]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001a28:	21e0      	movs	r1, #224	; 0xe0
 8001a2a:	00c9      	lsls	r1, r1, #3
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	22f0      	movs	r2, #240	; 0xf0
 8001a36:	4393      	bics	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	4b44      	ldr	r3, [pc, #272]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001a40:	430a      	orrs	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d040      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	029b      	lsls	r3, r3, #10
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d114      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e06e      	b.n	8001b44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	049b      	lsls	r3, r3, #18
 8001a76:	4013      	ands	r3, r2
 8001a78:	d108      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e062      	b.n	8001b44 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e05b      	b.n	8001b44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8c:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2203      	movs	r2, #3
 8001a92:	4393      	bics	r3, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff f976 	bl	8000d90 <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa8:	e009      	b.n	8001abe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aaa:	f7ff f971 	bl	8000d90 <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <HAL_RCC_ClockConfig+0x18c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e042      	b.n	8001b44 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1ec      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_RCC_ClockConfig+0x184>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d211      	bcs.n	8001b02 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_RCC_ClockConfig+0x184>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4393      	bics	r3, r2
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_RCC_ClockConfig+0x184>)
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_RCC_ClockConfig+0x184>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e020      	b.n	8001b44 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2204      	movs	r2, #4
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <HAL_RCC_ClockConfig+0x190>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	0019      	movs	r1, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b20:	f000 f820 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001b24:	0001      	movs	r1, r0
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_RCC_ClockConfig+0x188>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_RCC_ClockConfig+0x194>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	000a      	movs	r2, r1
 8001b36:	40da      	lsrs	r2, r3
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_RCC_ClockConfig+0x198>)
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f7ff f8e1 	bl	8000d04 <HAL_InitTick>
  
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	0018      	movs	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40022000 	.word	0x40022000
 8001b50:	40021000 	.word	0x40021000
 8001b54:	00001388 	.word	0x00001388
 8001b58:	fffff8ff 	.word	0xfffff8ff
 8001b5c:	08003ca8 	.word	0x08003ca8
 8001b60:	20000000 	.word	0x20000000

08001b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	220c      	movs	r2, #12
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d002      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x30>
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x36>
 8001b92:	e02e      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b96:	613b      	str	r3, [r7, #16]
      break;
 8001b98:	e02e      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	4a1a      	ldr	r2, [pc, #104]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	220f      	movs	r2, #15
 8001bae:	4013      	ands	r3, r2
 8001bb0:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_RCC_GetSysClockFreq+0xac>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	23c0      	movs	r3, #192	; 0xc0
 8001bba:	025b      	lsls	r3, r3, #9
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	025b      	lsls	r3, r3, #9
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	480f      	ldr	r0, [pc, #60]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bca:	f7fe fa9b 	bl	8000104 <__udivsi3>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4353      	muls	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	480a      	ldr	r0, [pc, #40]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bde:	f7fe fa91 	bl	8000104 <__udivsi3>
 8001be2:	0003      	movs	r3, r0
 8001be4:	001a      	movs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4353      	muls	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
      break;
 8001bf0:	e002      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bf4:	613b      	str	r3, [r7, #16]
      break;
 8001bf6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bf8:	693b      	ldr	r3, [r7, #16]
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b006      	add	sp, #24
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	40021000 	.word	0x40021000
 8001c08:	007a1200 	.word	0x007a1200
 8001c0c:	08003cc0 	.word	0x08003cc0
 8001c10:	08003cd0 	.word	0x08003cd0

08001c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c18:	4b02      	ldr	r3, [pc, #8]	; (8001c24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	20000000 	.word	0x20000000

08001c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c2c:	f7ff fff2 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c30:	0001      	movs	r1, r0
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	2207      	movs	r2, #7
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	40d9      	lsrs	r1, r3
 8001c42:	000b      	movs	r3, r1
}    
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08003cb8 	.word	0x08003cb8

08001c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e042      	b.n	8001cec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	223d      	movs	r2, #61	; 0x3d
 8001c6a:	5c9b      	ldrb	r3, [r3, r2]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	223c      	movs	r2, #60	; 0x3c
 8001c76:	2100      	movs	r1, #0
 8001c78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7fe feb9 	bl	80009f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	223d      	movs	r2, #61	; 0x3d
 8001c86:	2102      	movs	r1, #2
 8001c88:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3304      	adds	r3, #4
 8001c92:	0019      	movs	r1, r3
 8001c94:	0010      	movs	r0, r2
 8001c96:	f000 fa1f 	bl	80020d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2246      	movs	r2, #70	; 0x46
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	223e      	movs	r2, #62	; 0x3e
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	5499      	strb	r1, [r3, r2]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	223f      	movs	r2, #63	; 0x3f
 8001cae:	2101      	movs	r1, #1
 8001cb0:	5499      	strb	r1, [r3, r2]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2240      	movs	r2, #64	; 0x40
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	5499      	strb	r1, [r3, r2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2241      	movs	r2, #65	; 0x41
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2242      	movs	r2, #66	; 0x42
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2243      	movs	r2, #67	; 0x43
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2244      	movs	r2, #68	; 0x44
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2245      	movs	r2, #69	; 0x45
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	223d      	movs	r2, #61	; 0x3d
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e042      	b.n	8001d8c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	223d      	movs	r2, #61	; 0x3d
 8001d0a:	5c9b      	ldrb	r3, [r3, r2]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d107      	bne.n	8001d22 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	223c      	movs	r2, #60	; 0x3c
 8001d16:	2100      	movs	r1, #0
 8001d18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f000 f839 	bl	8001d94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	223d      	movs	r2, #61	; 0x3d
 8001d26:	2102      	movs	r1, #2
 8001d28:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	0019      	movs	r1, r3
 8001d34:	0010      	movs	r0, r2
 8001d36:	f000 f9cf 	bl	80020d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2246      	movs	r2, #70	; 0x46
 8001d3e:	2101      	movs	r1, #1
 8001d40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	223e      	movs	r2, #62	; 0x3e
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	223f      	movs	r2, #63	; 0x3f
 8001d4e:	2101      	movs	r1, #1
 8001d50:	5499      	strb	r1, [r3, r2]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2240      	movs	r2, #64	; 0x40
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2241      	movs	r2, #65	; 0x41
 8001d5e:	2101      	movs	r1, #1
 8001d60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2242      	movs	r2, #66	; 0x42
 8001d66:	2101      	movs	r1, #1
 8001d68:	5499      	strb	r1, [r3, r2]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2243      	movs	r2, #67	; 0x43
 8001d6e:	2101      	movs	r1, #1
 8001d70:	5499      	strb	r1, [r3, r2]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2244      	movs	r2, #68	; 0x44
 8001d76:	2101      	movs	r1, #1
 8001d78:	5499      	strb	r1, [r3, r2]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2245      	movs	r2, #69	; 0x45
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	223d      	movs	r2, #61	; 0x3d
 8001d86:	2101      	movs	r1, #1
 8001d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b002      	add	sp, #8
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b002      	add	sp, #8
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db0:	2317      	movs	r3, #23
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	223c      	movs	r2, #60	; 0x3c
 8001dbc:	5c9b      	ldrb	r3, [r3, r2]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e0ad      	b.n	8001f22 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	223c      	movs	r2, #60	; 0x3c
 8001dca:	2101      	movs	r1, #1
 8001dcc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	d100      	bne.n	8001dd6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001dd4:	e076      	b.n	8001ec4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	d900      	bls.n	8001dde <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001ddc:	e095      	b.n	8001f0a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d04e      	beq.n	8001e82 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d900      	bls.n	8001dec <HAL_TIM_PWM_ConfigChannel+0x48>
 8001dea:	e08e      	b.n	8001f0a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_PWM_ConfigChannel+0x56>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d021      	beq.n	8001e3c <HAL_TIM_PWM_ConfigChannel+0x98>
 8001df8:	e087      	b.n	8001f0a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	0011      	movs	r1, r2
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 f9de 	bl	80021c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2108      	movs	r1, #8
 8001e14:	430a      	orrs	r2, r1
 8001e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2104      	movs	r1, #4
 8001e24:	438a      	bics	r2, r1
 8001e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6999      	ldr	r1, [r3, #24]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	619a      	str	r2, [r3, #24]
      break;
 8001e3a:	e06b      	b.n	8001f14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	0011      	movs	r1, r2
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 fa45 	bl	80022d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699a      	ldr	r2, [r3, #24]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	0109      	lsls	r1, r1, #4
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4931      	ldr	r1, [pc, #196]	; (8001f2c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001e68:	400a      	ands	r2, r1
 8001e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6999      	ldr	r1, [r3, #24]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	021a      	lsls	r2, r3, #8
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	619a      	str	r2, [r3, #24]
      break;
 8001e80:	e048      	b.n	8001f14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	0011      	movs	r1, r2
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 faa6 	bl	80023dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2108      	movs	r1, #8
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2104      	movs	r1, #4
 8001eac:	438a      	bics	r2, r1
 8001eae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69d9      	ldr	r1, [r3, #28]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	61da      	str	r2, [r3, #28]
      break;
 8001ec2:	e027      	b.n	8001f14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	0011      	movs	r1, r2
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f000 fb0b 	bl	80024e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	0109      	lsls	r1, r1, #4
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69da      	ldr	r2, [r3, #28]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	490f      	ldr	r1, [pc, #60]	; (8001f2c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69d9      	ldr	r1, [r3, #28]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	021a      	lsls	r2, r3, #8
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	61da      	str	r2, [r3, #28]
      break;
 8001f08:	e004      	b.n	8001f14 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001f0a:	2317      	movs	r3, #23
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
      break;
 8001f12:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	223c      	movs	r2, #60	; 0x3c
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]

  return status;
 8001f1c:	2317      	movs	r3, #23
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	781b      	ldrb	r3, [r3, #0]
}
 8001f22:	0018      	movs	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b006      	add	sp, #24
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	fffffbff 	.word	0xfffffbff

08001f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	230f      	movs	r3, #15
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	223c      	movs	r2, #60	; 0x3c
 8001f46:	5c9b      	ldrb	r3, [r3, r2]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_TIM_ConfigClockSource+0x20>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e0bc      	b.n	80020ca <HAL_TIM_ConfigClockSource+0x19a>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	223c      	movs	r2, #60	; 0x3c
 8001f54:	2101      	movs	r1, #1
 8001f56:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	223d      	movs	r2, #61	; 0x3d
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2277      	movs	r2, #119	; 0x77
 8001f6c:	4393      	bics	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4a58      	ldr	r2, [pc, #352]	; (80020d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	0192      	lsls	r2, r2, #6
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d040      	beq.n	800200e <HAL_TIM_ConfigClockSource+0xde>
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	0192      	lsls	r2, r2, #6
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d900      	bls.n	8001f96 <HAL_TIM_ConfigClockSource+0x66>
 8001f94:	e088      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x178>
 8001f96:	2280      	movs	r2, #128	; 0x80
 8001f98:	0152      	lsls	r2, r2, #5
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d100      	bne.n	8001fa0 <HAL_TIM_ConfigClockSource+0x70>
 8001f9e:	e088      	b.n	80020b2 <HAL_TIM_ConfigClockSource+0x182>
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	0152      	lsls	r2, r2, #5
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d900      	bls.n	8001faa <HAL_TIM_ConfigClockSource+0x7a>
 8001fa8:	e07e      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x178>
 8001faa:	2b70      	cmp	r3, #112	; 0x70
 8001fac:	d018      	beq.n	8001fe0 <HAL_TIM_ConfigClockSource+0xb0>
 8001fae:	d900      	bls.n	8001fb2 <HAL_TIM_ConfigClockSource+0x82>
 8001fb0:	e07a      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x178>
 8001fb2:	2b60      	cmp	r3, #96	; 0x60
 8001fb4:	d04f      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x126>
 8001fb6:	d900      	bls.n	8001fba <HAL_TIM_ConfigClockSource+0x8a>
 8001fb8:	e076      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x178>
 8001fba:	2b50      	cmp	r3, #80	; 0x50
 8001fbc:	d03b      	beq.n	8002036 <HAL_TIM_ConfigClockSource+0x106>
 8001fbe:	d900      	bls.n	8001fc2 <HAL_TIM_ConfigClockSource+0x92>
 8001fc0:	e072      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x178>
 8001fc2:	2b40      	cmp	r3, #64	; 0x40
 8001fc4:	d057      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0x146>
 8001fc6:	d900      	bls.n	8001fca <HAL_TIM_ConfigClockSource+0x9a>
 8001fc8:	e06e      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x178>
 8001fca:	2b30      	cmp	r3, #48	; 0x30
 8001fcc:	d063      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x166>
 8001fce:	d86b      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x178>
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d060      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x166>
 8001fd4:	d868      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x178>
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d05d      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x166>
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d05b      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x166>
 8001fde:	e063      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ff0:	f000 fb5e 	bl	80026b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2277      	movs	r2, #119	; 0x77
 8002000:	4313      	orrs	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	609a      	str	r2, [r3, #8]
      break;
 800200c:	e052      	b.n	80020b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800201e:	f000 fb47 	bl	80026b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	01c9      	lsls	r1, r1, #7
 8002030:	430a      	orrs	r2, r1
 8002032:	609a      	str	r2, [r3, #8]
      break;
 8002034:	e03e      	b.n	80020b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002042:	001a      	movs	r2, r3
 8002044:	f000 faba 	bl	80025bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2150      	movs	r1, #80	; 0x50
 800204e:	0018      	movs	r0, r3
 8002050:	f000 fb14 	bl	800267c <TIM_ITRx_SetConfig>
      break;
 8002054:	e02e      	b.n	80020b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002062:	001a      	movs	r2, r3
 8002064:	f000 fad8 	bl	8002618 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2160      	movs	r1, #96	; 0x60
 800206e:	0018      	movs	r0, r3
 8002070:	f000 fb04 	bl	800267c <TIM_ITRx_SetConfig>
      break;
 8002074:	e01e      	b.n	80020b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002082:	001a      	movs	r2, r3
 8002084:	f000 fa9a 	bl	80025bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2140      	movs	r1, #64	; 0x40
 800208e:	0018      	movs	r0, r3
 8002090:	f000 faf4 	bl	800267c <TIM_ITRx_SetConfig>
      break;
 8002094:	e00e      	b.n	80020b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0019      	movs	r1, r3
 80020a0:	0010      	movs	r0, r2
 80020a2:	f000 faeb 	bl	800267c <TIM_ITRx_SetConfig>
      break;
 80020a6:	e005      	b.n	80020b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80020a8:	230f      	movs	r3, #15
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
      break;
 80020b0:	e000      	b.n	80020b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80020b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	223d      	movs	r2, #61	; 0x3d
 80020b8:	2101      	movs	r1, #1
 80020ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	223c      	movs	r2, #60	; 0x3c
 80020c0:	2100      	movs	r1, #0
 80020c2:	5499      	strb	r1, [r3, r2]

  return status;
 80020c4:	230f      	movs	r3, #15
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	781b      	ldrb	r3, [r3, #0]
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b004      	add	sp, #16
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	ffff00ff 	.word	0xffff00ff

080020d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a2f      	ldr	r2, [pc, #188]	; (80021a8 <TIM_Base_SetConfig+0xd0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0x20>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <TIM_Base_SetConfig+0xd4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d108      	bne.n	800210a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2270      	movs	r2, #112	; 0x70
 80020fc:	4393      	bics	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <TIM_Base_SetConfig+0xd0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a25      	ldr	r2, [pc, #148]	; (80021ac <TIM_Base_SetConfig+0xd4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00f      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <TIM_Base_SetConfig+0xd8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00b      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a23      	ldr	r2, [pc, #140]	; (80021b4 <TIM_Base_SetConfig+0xdc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <TIM_Base_SetConfig+0xe0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d003      	beq.n	800213a <TIM_Base_SetConfig+0x62>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a21      	ldr	r2, [pc, #132]	; (80021bc <TIM_Base_SetConfig+0xe4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d108      	bne.n	800214c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <TIM_Base_SetConfig+0xe8>)
 800213e:	4013      	ands	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	4393      	bics	r3, r2
 8002152:	001a      	movs	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <TIM_Base_SetConfig+0xd0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00b      	beq.n	8002192 <TIM_Base_SetConfig+0xba>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <TIM_Base_SetConfig+0xdc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d007      	beq.n	8002192 <TIM_Base_SetConfig+0xba>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <TIM_Base_SetConfig+0xe0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d003      	beq.n	8002192 <TIM_Base_SetConfig+0xba>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <TIM_Base_SetConfig+0xe4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d103      	bne.n	800219a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	615a      	str	r2, [r3, #20]
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b004      	add	sp, #16
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40002000 	.word	0x40002000
 80021b4:	40014000 	.word	0x40014000
 80021b8:	40014400 	.word	0x40014400
 80021bc:	40014800 	.word	0x40014800
 80021c0:	fffffcff 	.word	0xfffffcff

080021c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4393      	bics	r3, r2
 80021d6:	001a      	movs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2270      	movs	r2, #112	; 0x70
 80021f2:	4393      	bics	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2203      	movs	r2, #3
 80021fa:	4393      	bics	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2202      	movs	r2, #2
 800220c:	4393      	bics	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <TIM_OC1_SetConfig+0xf8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00b      	beq.n	800223a <TIM_OC1_SetConfig+0x76>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <TIM_OC1_SetConfig+0xfc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <TIM_OC1_SetConfig+0x76>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <TIM_OC1_SetConfig+0x100>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d003      	beq.n	800223a <TIM_OC1_SetConfig+0x76>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <TIM_OC1_SetConfig+0x104>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10c      	bne.n	8002254 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2208      	movs	r2, #8
 800223e:	4393      	bics	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2204      	movs	r2, #4
 8002250:	4393      	bics	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a19      	ldr	r2, [pc, #100]	; (80022bc <TIM_OC1_SetConfig+0xf8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00b      	beq.n	8002274 <TIM_OC1_SetConfig+0xb0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <TIM_OC1_SetConfig+0xfc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d007      	beq.n	8002274 <TIM_OC1_SetConfig+0xb0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <TIM_OC1_SetConfig+0x100>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <TIM_OC1_SetConfig+0xb0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <TIM_OC1_SetConfig+0x104>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d111      	bne.n	8002298 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4a15      	ldr	r2, [pc, #84]	; (80022cc <TIM_OC1_SetConfig+0x108>)
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <TIM_OC1_SetConfig+0x10c>)
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	621a      	str	r2, [r3, #32]
}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b006      	add	sp, #24
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40014000 	.word	0x40014000
 80022c4:	40014400 	.word	0x40014400
 80022c8:	40014800 	.word	0x40014800
 80022cc:	fffffeff 	.word	0xfffffeff
 80022d0:	fffffdff 	.word	0xfffffdff

080022d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	2210      	movs	r2, #16
 80022e4:	4393      	bics	r3, r2
 80022e6:	001a      	movs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <TIM_OC2_SetConfig+0xe8>)
 8002302:	4013      	ands	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a2d      	ldr	r2, [pc, #180]	; (80023c0 <TIM_OC2_SetConfig+0xec>)
 800230a:	4013      	ands	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2220      	movs	r2, #32
 800231e:	4393      	bics	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a24      	ldr	r2, [pc, #144]	; (80023c4 <TIM_OC2_SetConfig+0xf0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d10d      	bne.n	8002352 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	4393      	bics	r3, r2
 800233c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	4313      	orrs	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2240      	movs	r2, #64	; 0x40
 800234e:	4393      	bics	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <TIM_OC2_SetConfig+0xf0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00b      	beq.n	8002372 <TIM_OC2_SetConfig+0x9e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <TIM_OC2_SetConfig+0xf4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d007      	beq.n	8002372 <TIM_OC2_SetConfig+0x9e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a19      	ldr	r2, [pc, #100]	; (80023cc <TIM_OC2_SetConfig+0xf8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d003      	beq.n	8002372 <TIM_OC2_SetConfig+0x9e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <TIM_OC2_SetConfig+0xfc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d113      	bne.n	800239a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <TIM_OC2_SetConfig+0x100>)
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <TIM_OC2_SetConfig+0x104>)
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	621a      	str	r2, [r3, #32]
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b006      	add	sp, #24
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	ffff8fff 	.word	0xffff8fff
 80023c0:	fffffcff 	.word	0xfffffcff
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	40014000 	.word	0x40014000
 80023cc:	40014400 	.word	0x40014400
 80023d0:	40014800 	.word	0x40014800
 80023d4:	fffffbff 	.word	0xfffffbff
 80023d8:	fffff7ff 	.word	0xfffff7ff

080023dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a35      	ldr	r2, [pc, #212]	; (80024c0 <TIM_OC3_SetConfig+0xe4>)
 80023ec:	401a      	ands	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2270      	movs	r2, #112	; 0x70
 8002408:	4393      	bics	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2203      	movs	r2, #3
 8002410:	4393      	bics	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	4a28      	ldr	r2, [pc, #160]	; (80024c4 <TIM_OC3_SetConfig+0xe8>)
 8002422:	4013      	ands	r3, r2
 8002424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <TIM_OC3_SetConfig+0xec>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10d      	bne.n	8002456 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	4a23      	ldr	r2, [pc, #140]	; (80024cc <TIM_OC3_SetConfig+0xf0>)
 800243e:	4013      	ands	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <TIM_OC3_SetConfig+0xf4>)
 8002452:	4013      	ands	r3, r2
 8002454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <TIM_OC3_SetConfig+0xec>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00b      	beq.n	8002476 <TIM_OC3_SetConfig+0x9a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <TIM_OC3_SetConfig+0xf8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <TIM_OC3_SetConfig+0x9a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1b      	ldr	r2, [pc, #108]	; (80024d8 <TIM_OC3_SetConfig+0xfc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d003      	beq.n	8002476 <TIM_OC3_SetConfig+0x9a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <TIM_OC3_SetConfig+0x100>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d113      	bne.n	800249e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <TIM_OC3_SetConfig+0x104>)
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <TIM_OC3_SetConfig+0x108>)
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	621a      	str	r2, [r3, #32]
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b006      	add	sp, #24
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	fffffeff 	.word	0xfffffeff
 80024c4:	fffffdff 	.word	0xfffffdff
 80024c8:	40012c00 	.word	0x40012c00
 80024cc:	fffff7ff 	.word	0xfffff7ff
 80024d0:	fffffbff 	.word	0xfffffbff
 80024d4:	40014000 	.word	0x40014000
 80024d8:	40014400 	.word	0x40014400
 80024dc:	40014800 	.word	0x40014800
 80024e0:	ffffefff 	.word	0xffffefff
 80024e4:	ffffdfff 	.word	0xffffdfff

080024e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a28      	ldr	r2, [pc, #160]	; (8002598 <TIM_OC4_SetConfig+0xb0>)
 80024f8:	401a      	ands	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a22      	ldr	r2, [pc, #136]	; (800259c <TIM_OC4_SetConfig+0xb4>)
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <TIM_OC4_SetConfig+0xb8>)
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4a1d      	ldr	r2, [pc, #116]	; (80025a4 <TIM_OC4_SetConfig+0xbc>)
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	031b      	lsls	r3, r3, #12
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <TIM_OC4_SetConfig+0xc0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00b      	beq.n	8002560 <TIM_OC4_SetConfig+0x78>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a18      	ldr	r2, [pc, #96]	; (80025ac <TIM_OC4_SetConfig+0xc4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <TIM_OC4_SetConfig+0x78>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <TIM_OC4_SetConfig+0xc8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d003      	beq.n	8002560 <TIM_OC4_SetConfig+0x78>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <TIM_OC4_SetConfig+0xcc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d109      	bne.n	8002574 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <TIM_OC4_SetConfig+0xd0>)
 8002564:	4013      	ands	r3, r2
 8002566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	019b      	lsls	r3, r3, #6
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	621a      	str	r2, [r3, #32]
}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	46bd      	mov	sp, r7
 8002592:	b006      	add	sp, #24
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	ffffefff 	.word	0xffffefff
 800259c:	ffff8fff 	.word	0xffff8fff
 80025a0:	fffffcff 	.word	0xfffffcff
 80025a4:	ffffdfff 	.word	0xffffdfff
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40014000 	.word	0x40014000
 80025b0:	40014400 	.word	0x40014400
 80025b4:	40014800 	.word	0x40014800
 80025b8:	ffffbfff 	.word	0xffffbfff

080025bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	2201      	movs	r2, #1
 80025d4:	4393      	bics	r3, r2
 80025d6:	001a      	movs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	22f0      	movs	r2, #240	; 0xf0
 80025e6:	4393      	bics	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	220a      	movs	r2, #10
 80025f8:	4393      	bics	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	621a      	str	r2, [r3, #32]
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b006      	add	sp, #24
 8002616:	bd80      	pop	{r7, pc}

08002618 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	2210      	movs	r2, #16
 800262a:	4393      	bics	r3, r2
 800262c:	001a      	movs	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <TIM_TI2_ConfigInputStage+0x60>)
 8002642:	4013      	ands	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	031b      	lsls	r3, r3, #12
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	22a0      	movs	r2, #160	; 0xa0
 8002654:	4393      	bics	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	621a      	str	r2, [r3, #32]
}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	46bd      	mov	sp, r7
 8002672:	b006      	add	sp, #24
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	ffff0fff 	.word	0xffff0fff

0800267c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2270      	movs	r2, #112	; 0x70
 8002690:	4393      	bics	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	2207      	movs	r2, #7
 800269c:	4313      	orrs	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	609a      	str	r2, [r3, #8]
}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <TIM_ETR_SetConfig+0x3c>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	021a      	lsls	r2, r3, #8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b006      	add	sp, #24
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	ffff00ff 	.word	0xffff00ff

080026f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	223c      	movs	r2, #60	; 0x3c
 80026fe:	5c9b      	ldrb	r3, [r3, r2]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002704:	2302      	movs	r3, #2
 8002706:	e041      	b.n	800278c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	223c      	movs	r2, #60	; 0x3c
 800270c:	2101      	movs	r1, #1
 800270e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	223d      	movs	r2, #61	; 0x3d
 8002714:	2102      	movs	r1, #2
 8002716:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2270      	movs	r2, #112	; 0x70
 800272c:	4393      	bics	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a13      	ldr	r2, [pc, #76]	; (8002794 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d009      	beq.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a11      	ldr	r2, [pc, #68]	; (8002798 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d004      	beq.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a10      	ldr	r2, [pc, #64]	; (800279c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d10c      	bne.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	4393      	bics	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	4313      	orrs	r3, r2
 8002770:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	223d      	movs	r2, #61	; 0x3d
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	223c      	movs	r2, #60	; 0x3c
 8002786:	2100      	movs	r1, #0
 8002788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b004      	add	sp, #16
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40012c00 	.word	0x40012c00
 8002798:	40000400 	.word	0x40000400
 800279c:	40014000 	.word	0x40014000

080027a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	223c      	movs	r2, #60	; 0x3c
 80027b2:	5c9b      	ldrb	r3, [r3, r2]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e03e      	b.n	800283a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	223c      	movs	r2, #60	; 0x3c
 80027c0:	2101      	movs	r1, #1
 80027c2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	22ff      	movs	r2, #255	; 0xff
 80027c8:	4393      	bics	r3, r2
 80027ca:	001a      	movs	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80027d8:	401a      	ands	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80027e6:	401a      	ands	r2, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4a16      	ldr	r2, [pc, #88]	; (800284c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80027f4:	401a      	ands	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a13      	ldr	r2, [pc, #76]	; (8002850 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002802:	401a      	ands	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002810:	401a      	ands	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800281e:	401a      	ands	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	223c      	movs	r2, #60	; 0x3c
 8002834:	2100      	movs	r1, #0
 8002836:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b004      	add	sp, #16
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	fffffcff 	.word	0xfffffcff
 8002848:	fffffbff 	.word	0xfffffbff
 800284c:	fffff7ff 	.word	0xfffff7ff
 8002850:	ffffefff 	.word	0xffffefff
 8002854:	ffffdfff 	.word	0xffffdfff
 8002858:	ffffbfff 	.word	0xffffbfff

0800285c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e044      	b.n	80028f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2278      	movs	r2, #120	; 0x78
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	0018      	movs	r0, r3
 8002882:	f7fe f957 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2224      	movs	r2, #36	; 0x24
 800288a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2101      	movs	r1, #1
 8002898:	438a      	bics	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 fb6c 	bl	8002f7c <UART_SetConfig>
 80028a4:	0003      	movs	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e024      	b.n	80028f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fccf 	bl	800325c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	490d      	ldr	r1, [pc, #52]	; (8002900 <HAL_UART_Init+0xa4>)
 80028ca:	400a      	ands	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2108      	movs	r1, #8
 80028da:	438a      	bics	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2101      	movs	r1, #1
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 fd67 	bl	80033c4 <UART_CheckIdleState>
 80028f6:	0003      	movs	r3, r0
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	fffff7ff 	.word	0xfffff7ff

08002904 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	1dbb      	adds	r3, r7, #6
 8002910:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2280      	movs	r2, #128	; 0x80
 8002916:	589b      	ldr	r3, [r3, r2]
 8002918:	2b20      	cmp	r3, #32
 800291a:	d145      	bne.n	80029a8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_UART_Receive_IT+0x26>
 8002922:	1dbb      	adds	r3, r7, #6
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e03d      	b.n	80029aa <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	015b      	lsls	r3, r3, #5
 8002936:	429a      	cmp	r2, r3
 8002938:	d109      	bne.n	800294e <HAL_UART_Receive_IT+0x4a>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2201      	movs	r2, #1
 8002946:	4013      	ands	r3, r2
 8002948:	d001      	beq.n	800294e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e02d      	b.n	80029aa <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	4013      	ands	r3, r2
 8002960:	d019      	beq.n	8002996 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002962:	f3ef 8310 	mrs	r3, PRIMASK
 8002966:	613b      	str	r3, [r7, #16]
  return(result);
 8002968:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800296a:	61fb      	str	r3, [r7, #28]
 800296c:	2301      	movs	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f383 8810 	msr	PRIMASK, r3
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	04c9      	lsls	r1, r1, #19
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f383 8810 	msr	PRIMASK, r3
}
 8002994:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002996:	1dbb      	adds	r3, r7, #6
 8002998:	881a      	ldrh	r2, [r3, #0]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 fe22 	bl	80035e8 <UART_Start_Receive_IT>
 80029a4:	0003      	movs	r3, r0
 80029a6:	e000      	b.n	80029aa <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80029a8:	2302      	movs	r3, #2
  }
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b008      	add	sp, #32
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b0ab      	sub	sp, #172	; 0xac
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	22a4      	movs	r2, #164	; 0xa4
 80029c4:	18b9      	adds	r1, r7, r2
 80029c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	20a0      	movs	r0, #160	; 0xa0
 80029d0:	1839      	adds	r1, r7, r0
 80029d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	219c      	movs	r1, #156	; 0x9c
 80029dc:	1879      	adds	r1, r7, r1
 80029de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029e0:	0011      	movs	r1, r2
 80029e2:	18bb      	adds	r3, r7, r2
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a99      	ldr	r2, [pc, #612]	; (8002c4c <HAL_UART_IRQHandler+0x298>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	2298      	movs	r2, #152	; 0x98
 80029ec:	18bc      	adds	r4, r7, r2
 80029ee:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80029f0:	18bb      	adds	r3, r7, r2
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d114      	bne.n	8002a22 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2220      	movs	r2, #32
 80029fe:	4013      	ands	r3, r2
 8002a00:	d00f      	beq.n	8002a22 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a02:	183b      	adds	r3, r7, r0
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2220      	movs	r2, #32
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d00a      	beq.n	8002a22 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d100      	bne.n	8002a16 <HAL_UART_IRQHandler+0x62>
 8002a14:	e286      	b.n	8002f24 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	0010      	movs	r0, r2
 8002a1e:	4798      	blx	r3
      }
      return;
 8002a20:	e280      	b.n	8002f24 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a22:	2398      	movs	r3, #152	; 0x98
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d100      	bne.n	8002a2e <HAL_UART_IRQHandler+0x7a>
 8002a2c:	e114      	b.n	8002c58 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a2e:	239c      	movs	r3, #156	; 0x9c
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2201      	movs	r2, #1
 8002a36:	4013      	ands	r3, r2
 8002a38:	d106      	bne.n	8002a48 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a3a:	23a0      	movs	r3, #160	; 0xa0
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a83      	ldr	r2, [pc, #524]	; (8002c50 <HAL_UART_IRQHandler+0x29c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	d100      	bne.n	8002a48 <HAL_UART_IRQHandler+0x94>
 8002a46:	e107      	b.n	8002c58 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a48:	23a4      	movs	r3, #164	; 0xa4
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	d012      	beq.n	8002a7a <HAL_UART_IRQHandler+0xc6>
 8002a54:	23a0      	movs	r3, #160	; 0xa0
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d00b      	beq.n	8002a7a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2284      	movs	r2, #132	; 0x84
 8002a6e:	589b      	ldr	r3, [r3, r2]
 8002a70:	2201      	movs	r2, #1
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2184      	movs	r1, #132	; 0x84
 8002a78:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a7a:	23a4      	movs	r3, #164	; 0xa4
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2202      	movs	r2, #2
 8002a82:	4013      	ands	r3, r2
 8002a84:	d011      	beq.n	8002aaa <HAL_UART_IRQHandler+0xf6>
 8002a86:	239c      	movs	r3, #156	; 0x9c
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2202      	movs	r2, #2
 8002a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2284      	movs	r2, #132	; 0x84
 8002a9e:	589b      	ldr	r3, [r3, r2]
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2184      	movs	r1, #132	; 0x84
 8002aa8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aaa:	23a4      	movs	r3, #164	; 0xa4
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d011      	beq.n	8002ada <HAL_UART_IRQHandler+0x126>
 8002ab6:	239c      	movs	r3, #156	; 0x9c
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2201      	movs	r2, #1
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2284      	movs	r2, #132	; 0x84
 8002ace:	589b      	ldr	r3, [r3, r2]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2184      	movs	r1, #132	; 0x84
 8002ad8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ada:	23a4      	movs	r3, #164	; 0xa4
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d017      	beq.n	8002b16 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ae6:	23a0      	movs	r3, #160	; 0xa0
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2220      	movs	r2, #32
 8002aee:	4013      	ands	r3, r2
 8002af0:	d105      	bne.n	8002afe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002af2:	239c      	movs	r3, #156	; 0x9c
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2201      	movs	r2, #1
 8002afa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002afc:	d00b      	beq.n	8002b16 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2208      	movs	r2, #8
 8002b04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2284      	movs	r2, #132	; 0x84
 8002b0a:	589b      	ldr	r3, [r3, r2]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2184      	movs	r1, #132	; 0x84
 8002b14:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b16:	23a4      	movs	r3, #164	; 0xa4
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4013      	ands	r3, r2
 8002b22:	d013      	beq.n	8002b4c <HAL_UART_IRQHandler+0x198>
 8002b24:	23a0      	movs	r3, #160	; 0xa0
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	04db      	lsls	r3, r3, #19
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d00c      	beq.n	8002b4c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	0112      	lsls	r2, r2, #4
 8002b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2284      	movs	r2, #132	; 0x84
 8002b40:	589b      	ldr	r3, [r3, r2]
 8002b42:	2220      	movs	r2, #32
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2184      	movs	r1, #132	; 0x84
 8002b4a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2284      	movs	r2, #132	; 0x84
 8002b50:	589b      	ldr	r3, [r3, r2]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d100      	bne.n	8002b58 <HAL_UART_IRQHandler+0x1a4>
 8002b56:	e1e7      	b.n	8002f28 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b58:	23a4      	movs	r3, #164	; 0xa4
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	4013      	ands	r3, r2
 8002b62:	d00e      	beq.n	8002b82 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b64:	23a0      	movs	r3, #160	; 0xa0
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d008      	beq.n	8002b82 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	0010      	movs	r0, r2
 8002b80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2284      	movs	r2, #132	; 0x84
 8002b86:	589b      	ldr	r3, [r3, r2]
 8002b88:	2194      	movs	r1, #148	; 0x94
 8002b8a:	187a      	adds	r2, r7, r1
 8002b8c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d004      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2228      	movs	r2, #40	; 0x28
 8002ba2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ba4:	d047      	beq.n	8002c36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fde7 	bl	800377c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d137      	bne.n	8002c2c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	2090      	movs	r0, #144	; 0x90
 8002bc6:	183a      	adds	r2, r7, r0
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	2301      	movs	r3, #1
 8002bcc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bd0:	f383 8810 	msr	PRIMASK, r3
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2140      	movs	r1, #64	; 0x40
 8002be2:	438a      	bics	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	183b      	adds	r3, r7, r0
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bee:	f383 8810 	msr	PRIMASK, r3
}
 8002bf2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d012      	beq.n	8002c22 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <HAL_UART_IRQHandler+0x2a0>)
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7fe f9eb 	bl	8000fe4 <HAL_DMA_Abort_IT>
 8002c0e:	1e03      	subs	r3, r0, #0
 8002c10:	d01a      	beq.n	8002c48 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c20:	e012      	b.n	8002c48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 f995 	bl	8002f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2a:	e00d      	b.n	8002c48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f000 f990 	bl	8002f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	e008      	b.n	8002c48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f000 f98b 	bl	8002f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2284      	movs	r2, #132	; 0x84
 8002c42:	2100      	movs	r1, #0
 8002c44:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c46:	e16f      	b.n	8002f28 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	46c0      	nop			; (mov r8, r8)
    return;
 8002c4a:	e16d      	b.n	8002f28 <HAL_UART_IRQHandler+0x574>
 8002c4c:	0000080f 	.word	0x0000080f
 8002c50:	04000120 	.word	0x04000120
 8002c54:	08003845 	.word	0x08003845

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d000      	beq.n	8002c62 <HAL_UART_IRQHandler+0x2ae>
 8002c60:	e139      	b.n	8002ed6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c62:	23a4      	movs	r3, #164	; 0xa4
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d100      	bne.n	8002c70 <HAL_UART_IRQHandler+0x2bc>
 8002c6e:	e132      	b.n	8002ed6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c70:	23a0      	movs	r3, #160	; 0xa0
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2210      	movs	r2, #16
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <HAL_UART_IRQHandler+0x2ca>
 8002c7c:	e12b      	b.n	8002ed6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2210      	movs	r2, #16
 8002c84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2240      	movs	r2, #64	; 0x40
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d000      	beq.n	8002c96 <HAL_UART_IRQHandler+0x2e2>
 8002c94:	e09f      	b.n	8002dd6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	217e      	movs	r1, #126	; 0x7e
 8002ca0:	187b      	adds	r3, r7, r1
 8002ca2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002ca4:	187b      	adds	r3, r7, r1
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d100      	bne.n	8002cae <HAL_UART_IRQHandler+0x2fa>
 8002cac:	e13e      	b.n	8002f2c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2258      	movs	r2, #88	; 0x58
 8002cb2:	5a9b      	ldrh	r3, [r3, r2]
 8002cb4:	187a      	adds	r2, r7, r1
 8002cb6:	8812      	ldrh	r2, [r2, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d300      	bcc.n	8002cbe <HAL_UART_IRQHandler+0x30a>
 8002cbc:	e136      	b.n	8002f2c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	187a      	adds	r2, r7, r1
 8002cc2:	215a      	movs	r1, #90	; 0x5a
 8002cc4:	8812      	ldrh	r2, [r2, #0]
 8002cc6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d06f      	beq.n	8002db2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cda:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cdc:	2301      	movs	r3, #1
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce2:	f383 8810 	msr	PRIMASK, r3
}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4992      	ldr	r1, [pc, #584]	; (8002f3c <HAL_UART_IRQHandler+0x588>)
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	f383 8810 	msr	PRIMASK, r3
}
 8002d02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d04:	f3ef 8310 	mrs	r3, PRIMASK
 8002d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0c:	677b      	str	r3, [r7, #116]	; 0x74
 8002d0e:	2301      	movs	r3, #1
 8002d10:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d14:	f383 8810 	msr	PRIMASK, r3
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2101      	movs	r1, #1
 8002d26:	438a      	bics	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d30:	f383 8810 	msr	PRIMASK, r3
}
 8002d34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d36:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d40:	2301      	movs	r3, #1
 8002d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d46:	f383 8810 	msr	PRIMASK, r3
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2140      	movs	r1, #64	; 0x40
 8002d58:	438a      	bics	r2, r1
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d5e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d62:	f383 8810 	msr	PRIMASK, r3
}
 8002d66:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	2120      	movs	r1, #32
 8002d6e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d76:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d80:	2301      	movs	r3, #1
 8002d82:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d86:	f383 8810 	msr	PRIMASK, r3
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2110      	movs	r1, #16
 8002d98:	438a      	bics	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da2:	f383 8810 	msr	PRIMASK, r3
}
 8002da6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dac:	0018      	movs	r0, r3
 8002dae:	f7fe f8e1 	bl	8000f74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2258      	movs	r2, #88	; 0x58
 8002dbc:	5a9a      	ldrh	r2, [r3, r2]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	215a      	movs	r1, #90	; 0x5a
 8002dc2:	5a5b      	ldrh	r3, [r3, r1]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0011      	movs	r1, r2
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 f8c8 	bl	8002f64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dd4:	e0aa      	b.n	8002f2c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2258      	movs	r2, #88	; 0x58
 8002dda:	5a99      	ldrh	r1, [r3, r2]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	225a      	movs	r2, #90	; 0x5a
 8002de0:	5a9b      	ldrh	r3, [r3, r2]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	208e      	movs	r0, #142	; 0x8e
 8002de6:	183b      	adds	r3, r7, r0
 8002de8:	1a8a      	subs	r2, r1, r2
 8002dea:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	225a      	movs	r2, #90	; 0x5a
 8002df0:	5a9b      	ldrh	r3, [r3, r2]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d100      	bne.n	8002dfa <HAL_UART_IRQHandler+0x446>
 8002df8:	e09a      	b.n	8002f30 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002dfa:	183b      	adds	r3, r7, r0
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d100      	bne.n	8002e04 <HAL_UART_IRQHandler+0x450>
 8002e02:	e095      	b.n	8002f30 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e04:	f3ef 8310 	mrs	r3, PRIMASK
 8002e08:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e0c:	2488      	movs	r4, #136	; 0x88
 8002e0e:	193a      	adds	r2, r7, r4
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	2301      	movs	r3, #1
 8002e14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f383 8810 	msr	PRIMASK, r3
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4945      	ldr	r1, [pc, #276]	; (8002f40 <HAL_UART_IRQHandler+0x58c>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	193b      	adds	r3, r7, r4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f383 8810 	msr	PRIMASK, r3
}
 8002e3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e40:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e42:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e44:	2484      	movs	r4, #132	; 0x84
 8002e46:	193a      	adds	r2, r7, r4
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f383 8810 	msr	PRIMASK, r3
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	438a      	bics	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	193b      	adds	r3, r7, r4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	f383 8810 	msr	PRIMASK, r3
}
 8002e72:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	2120      	movs	r1, #32
 8002e7a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e88:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e90:	2480      	movs	r4, #128	; 0x80
 8002e92:	193a      	adds	r2, r7, r4
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	2301      	movs	r3, #1
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2110      	movs	r1, #16
 8002eae:	438a      	bics	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	193b      	adds	r3, r7, r4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	f383 8810 	msr	PRIMASK, r3
}
 8002ebe:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ec6:	183b      	adds	r3, r7, r0
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0011      	movs	r1, r2
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 f848 	bl	8002f64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ed4:	e02c      	b.n	8002f30 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ed6:	23a4      	movs	r3, #164	; 0xa4
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d00f      	beq.n	8002f02 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ee2:	23a0      	movs	r3, #160	; 0xa0
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	4013      	ands	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01e      	beq.n	8002f34 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	0010      	movs	r0, r2
 8002efe:	4798      	blx	r3
    }
    return;
 8002f00:	e018      	b.n	8002f34 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f02:	23a4      	movs	r3, #164	; 0xa4
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2240      	movs	r2, #64	; 0x40
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_UART_IRQHandler+0x582>
 8002f0e:	23a0      	movs	r3, #160	; 0xa0
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2240      	movs	r2, #64	; 0x40
 8002f16:	4013      	ands	r3, r2
 8002f18:	d00d      	beq.n	8002f36 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 fca8 	bl	8003872 <UART_EndTransmit_IT>
    return;
 8002f22:	e008      	b.n	8002f36 <HAL_UART_IRQHandler+0x582>
      return;
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	e006      	b.n	8002f36 <HAL_UART_IRQHandler+0x582>
    return;
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	e004      	b.n	8002f36 <HAL_UART_IRQHandler+0x582>
      return;
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	e002      	b.n	8002f36 <HAL_UART_IRQHandler+0x582>
      return;
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	e000      	b.n	8002f36 <HAL_UART_IRQHandler+0x582>
    return;
 8002f34:	46c0      	nop			; (mov r8, r8)
  }

}
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b02b      	add	sp, #172	; 0xac
 8002f3a:	bd90      	pop	{r4, r7, pc}
 8002f3c:	fffffeff 	.word	0xfffffeff
 8002f40:	fffffedf 	.word	0xfffffedf

08002f44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	000a      	movs	r2, r1
 8002f6e:	1cbb      	adds	r3, r7, #2
 8002f70:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b002      	add	sp, #8
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f84:	231e      	movs	r3, #30
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4aa1      	ldr	r2, [pc, #644]	; (8003230 <UART_SetConfig+0x2b4>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a9c      	ldr	r2, [pc, #624]	; (8003234 <UART_SetConfig+0x2b8>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a93      	ldr	r2, [pc, #588]	; (8003238 <UART_SetConfig+0x2bc>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a8f      	ldr	r2, [pc, #572]	; (800323c <UART_SetConfig+0x2c0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d127      	bne.n	8003052 <UART_SetConfig+0xd6>
 8003002:	4b8f      	ldr	r3, [pc, #572]	; (8003240 <UART_SetConfig+0x2c4>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	2203      	movs	r2, #3
 8003008:	4013      	ands	r3, r2
 800300a:	2b03      	cmp	r3, #3
 800300c:	d00d      	beq.n	800302a <UART_SetConfig+0xae>
 800300e:	d81b      	bhi.n	8003048 <UART_SetConfig+0xcc>
 8003010:	2b02      	cmp	r3, #2
 8003012:	d014      	beq.n	800303e <UART_SetConfig+0xc2>
 8003014:	d818      	bhi.n	8003048 <UART_SetConfig+0xcc>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <UART_SetConfig+0xa4>
 800301a:	2b01      	cmp	r3, #1
 800301c:	d00a      	beq.n	8003034 <UART_SetConfig+0xb8>
 800301e:	e013      	b.n	8003048 <UART_SetConfig+0xcc>
 8003020:	231f      	movs	r3, #31
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e049      	b.n	80030be <UART_SetConfig+0x142>
 800302a:	231f      	movs	r3, #31
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	2202      	movs	r2, #2
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e044      	b.n	80030be <UART_SetConfig+0x142>
 8003034:	231f      	movs	r3, #31
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2204      	movs	r2, #4
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e03f      	b.n	80030be <UART_SetConfig+0x142>
 800303e:	231f      	movs	r3, #31
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	2208      	movs	r2, #8
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e03a      	b.n	80030be <UART_SetConfig+0x142>
 8003048:	231f      	movs	r3, #31
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	2210      	movs	r2, #16
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e035      	b.n	80030be <UART_SetConfig+0x142>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a7b      	ldr	r2, [pc, #492]	; (8003244 <UART_SetConfig+0x2c8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d104      	bne.n	8003066 <UART_SetConfig+0xea>
 800305c:	231f      	movs	r3, #31
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e02b      	b.n	80030be <UART_SetConfig+0x142>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a77      	ldr	r2, [pc, #476]	; (8003248 <UART_SetConfig+0x2cc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d104      	bne.n	800307a <UART_SetConfig+0xfe>
 8003070:	231f      	movs	r3, #31
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e021      	b.n	80030be <UART_SetConfig+0x142>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a73      	ldr	r2, [pc, #460]	; (800324c <UART_SetConfig+0x2d0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d104      	bne.n	800308e <UART_SetConfig+0x112>
 8003084:	231f      	movs	r3, #31
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e017      	b.n	80030be <UART_SetConfig+0x142>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6f      	ldr	r2, [pc, #444]	; (8003250 <UART_SetConfig+0x2d4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d104      	bne.n	80030a2 <UART_SetConfig+0x126>
 8003098:	231f      	movs	r3, #31
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	e00d      	b.n	80030be <UART_SetConfig+0x142>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6b      	ldr	r2, [pc, #428]	; (8003254 <UART_SetConfig+0x2d8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d104      	bne.n	80030b6 <UART_SetConfig+0x13a>
 80030ac:	231f      	movs	r3, #31
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e003      	b.n	80030be <UART_SetConfig+0x142>
 80030b6:	231f      	movs	r3, #31
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	2210      	movs	r2, #16
 80030bc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d15c      	bne.n	8003184 <UART_SetConfig+0x208>
  {
    switch (clocksource)
 80030ca:	231f      	movs	r3, #31
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d015      	beq.n	8003100 <UART_SetConfig+0x184>
 80030d4:	dc18      	bgt.n	8003108 <UART_SetConfig+0x18c>
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d00d      	beq.n	80030f6 <UART_SetConfig+0x17a>
 80030da:	dc15      	bgt.n	8003108 <UART_SetConfig+0x18c>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <UART_SetConfig+0x16a>
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d005      	beq.n	80030f0 <UART_SetConfig+0x174>
 80030e4:	e010      	b.n	8003108 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e6:	f7fe fd9f 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 80030ea:	0003      	movs	r3, r0
 80030ec:	61bb      	str	r3, [r7, #24]
        break;
 80030ee:	e012      	b.n	8003116 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030f0:	4b59      	ldr	r3, [pc, #356]	; (8003258 <UART_SetConfig+0x2dc>)
 80030f2:	61bb      	str	r3, [r7, #24]
        break;
 80030f4:	e00f      	b.n	8003116 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030f6:	f7fe fd35 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 80030fa:	0003      	movs	r3, r0
 80030fc:	61bb      	str	r3, [r7, #24]
        break;
 80030fe:	e00a      	b.n	8003116 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	021b      	lsls	r3, r3, #8
 8003104:	61bb      	str	r3, [r7, #24]
        break;
 8003106:	e006      	b.n	8003116 <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800310c:	231e      	movs	r3, #30
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
        break;
 8003114:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d100      	bne.n	800311e <UART_SetConfig+0x1a2>
 800311c:	e07a      	b.n	8003214 <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	005a      	lsls	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	18d2      	adds	r2, r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	0019      	movs	r1, r3
 8003130:	0010      	movs	r0, r2
 8003132:	f7fc ffe7 	bl	8000104 <__udivsi3>
 8003136:	0003      	movs	r3, r0
 8003138:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d91c      	bls.n	800317a <UART_SetConfig+0x1fe>
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	025b      	lsls	r3, r3, #9
 8003146:	429a      	cmp	r2, r3
 8003148:	d217      	bcs.n	800317a <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	b29a      	uxth	r2, r3
 800314e:	200e      	movs	r0, #14
 8003150:	183b      	adds	r3, r7, r0
 8003152:	210f      	movs	r1, #15
 8003154:	438a      	bics	r2, r1
 8003156:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	085b      	lsrs	r3, r3, #1
 800315c:	b29b      	uxth	r3, r3
 800315e:	2207      	movs	r2, #7
 8003160:	4013      	ands	r3, r2
 8003162:	b299      	uxth	r1, r3
 8003164:	183b      	adds	r3, r7, r0
 8003166:	183a      	adds	r2, r7, r0
 8003168:	8812      	ldrh	r2, [r2, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	183a      	adds	r2, r7, r0
 8003174:	8812      	ldrh	r2, [r2, #0]
 8003176:	60da      	str	r2, [r3, #12]
 8003178:	e04c      	b.n	8003214 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 800317a:	231e      	movs	r3, #30
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	e047      	b.n	8003214 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003184:	231f      	movs	r3, #31
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b08      	cmp	r3, #8
 800318c:	d015      	beq.n	80031ba <UART_SetConfig+0x23e>
 800318e:	dc18      	bgt.n	80031c2 <UART_SetConfig+0x246>
 8003190:	2b04      	cmp	r3, #4
 8003192:	d00d      	beq.n	80031b0 <UART_SetConfig+0x234>
 8003194:	dc15      	bgt.n	80031c2 <UART_SetConfig+0x246>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <UART_SetConfig+0x224>
 800319a:	2b02      	cmp	r3, #2
 800319c:	d005      	beq.n	80031aa <UART_SetConfig+0x22e>
 800319e:	e010      	b.n	80031c2 <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a0:	f7fe fd42 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 80031a4:	0003      	movs	r3, r0
 80031a6:	61bb      	str	r3, [r7, #24]
        break;
 80031a8:	e012      	b.n	80031d0 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031aa:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <UART_SetConfig+0x2dc>)
 80031ac:	61bb      	str	r3, [r7, #24]
        break;
 80031ae:	e00f      	b.n	80031d0 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b0:	f7fe fcd8 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 80031b4:	0003      	movs	r3, r0
 80031b6:	61bb      	str	r3, [r7, #24]
        break;
 80031b8:	e00a      	b.n	80031d0 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	61bb      	str	r3, [r7, #24]
        break;
 80031c0:	e006      	b.n	80031d0 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031c6:	231e      	movs	r3, #30
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
        break;
 80031ce:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01e      	beq.n	8003214 <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	085a      	lsrs	r2, r3, #1
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	18d2      	adds	r2, r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	0019      	movs	r1, r3
 80031e6:	0010      	movs	r0, r2
 80031e8:	f7fc ff8c 	bl	8000104 <__udivsi3>
 80031ec:	0003      	movs	r3, r0
 80031ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	d90a      	bls.n	800320c <UART_SetConfig+0x290>
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	025b      	lsls	r3, r3, #9
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d205      	bcs.n	800320c <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	b29a      	uxth	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	e003      	b.n	8003214 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 800320c:	231e      	movs	r3, #30
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	2201      	movs	r2, #1
 8003212:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003220:	231e      	movs	r3, #30
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	781b      	ldrb	r3, [r3, #0]
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	b008      	add	sp, #32
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	efff69f3 	.word	0xefff69f3
 8003234:	ffffcfff 	.word	0xffffcfff
 8003238:	fffff4ff 	.word	0xfffff4ff
 800323c:	40013800 	.word	0x40013800
 8003240:	40021000 	.word	0x40021000
 8003244:	40004400 	.word	0x40004400
 8003248:	40004800 	.word	0x40004800
 800324c:	40004c00 	.word	0x40004c00
 8003250:	40005000 	.word	0x40005000
 8003254:	40011400 	.word	0x40011400
 8003258:	007a1200 	.word	0x007a1200

0800325c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	2201      	movs	r2, #1
 800326a:	4013      	ands	r3, r2
 800326c:	d00b      	beq.n	8003286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4a4a      	ldr	r2, [pc, #296]	; (80033a0 <UART_AdvFeatureConfig+0x144>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2202      	movs	r2, #2
 800328c:	4013      	ands	r3, r2
 800328e:	d00b      	beq.n	80032a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a43      	ldr	r2, [pc, #268]	; (80033a4 <UART_AdvFeatureConfig+0x148>)
 8003298:	4013      	ands	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2204      	movs	r2, #4
 80032ae:	4013      	ands	r3, r2
 80032b0:	d00b      	beq.n	80032ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a3b      	ldr	r2, [pc, #236]	; (80033a8 <UART_AdvFeatureConfig+0x14c>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	2208      	movs	r2, #8
 80032d0:	4013      	ands	r3, r2
 80032d2:	d00b      	beq.n	80032ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4a34      	ldr	r2, [pc, #208]	; (80033ac <UART_AdvFeatureConfig+0x150>)
 80032dc:	4013      	ands	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2210      	movs	r2, #16
 80032f2:	4013      	ands	r3, r2
 80032f4:	d00b      	beq.n	800330e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <UART_AdvFeatureConfig+0x154>)
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2220      	movs	r2, #32
 8003314:	4013      	ands	r3, r2
 8003316:	d00b      	beq.n	8003330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	4a25      	ldr	r2, [pc, #148]	; (80033b4 <UART_AdvFeatureConfig+0x158>)
 8003320:	4013      	ands	r3, r2
 8003322:	0019      	movs	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2240      	movs	r2, #64	; 0x40
 8003336:	4013      	ands	r3, r2
 8003338:	d01d      	beq.n	8003376 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <UART_AdvFeatureConfig+0x15c>)
 8003342:	4013      	ands	r3, r2
 8003344:	0019      	movs	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	035b      	lsls	r3, r3, #13
 800335a:	429a      	cmp	r2, r3
 800335c:	d10b      	bne.n	8003376 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a15      	ldr	r2, [pc, #84]	; (80033bc <UART_AdvFeatureConfig+0x160>)
 8003366:	4013      	ands	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	4013      	ands	r3, r2
 800337e:	d00b      	beq.n	8003398 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <UART_AdvFeatureConfig+0x164>)
 8003388:	4013      	ands	r3, r2
 800338a:	0019      	movs	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
  }
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	fffdffff 	.word	0xfffdffff
 80033a4:	fffeffff 	.word	0xfffeffff
 80033a8:	fffbffff 	.word	0xfffbffff
 80033ac:	ffff7fff 	.word	0xffff7fff
 80033b0:	ffffefff 	.word	0xffffefff
 80033b4:	ffffdfff 	.word	0xffffdfff
 80033b8:	ffefffff 	.word	0xffefffff
 80033bc:	ff9fffff 	.word	0xff9fffff
 80033c0:	fff7ffff 	.word	0xfff7ffff

080033c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b092      	sub	sp, #72	; 0x48
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2284      	movs	r2, #132	; 0x84
 80033d0:	2100      	movs	r1, #0
 80033d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033d4:	f7fd fcdc 	bl	8000d90 <HAL_GetTick>
 80033d8:	0003      	movs	r3, r0
 80033da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2208      	movs	r2, #8
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d12c      	bne.n	8003444 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ec:	2280      	movs	r2, #128	; 0x80
 80033ee:	0391      	lsls	r1, r2, #14
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4a46      	ldr	r2, [pc, #280]	; (800350c <UART_CheckIdleState+0x148>)
 80033f4:	9200      	str	r2, [sp, #0]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f000 f88c 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 80033fc:	1e03      	subs	r3, r0, #0
 80033fe:	d021      	beq.n	8003444 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003400:	f3ef 8310 	mrs	r3, PRIMASK
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003408:	63bb      	str	r3, [r7, #56]	; 0x38
 800340a:	2301      	movs	r3, #1
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	f383 8810 	msr	PRIMASK, r3
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2180      	movs	r1, #128	; 0x80
 8003422:	438a      	bics	r2, r1
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	f383 8810 	msr	PRIMASK, r3
}
 8003430:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2278      	movs	r2, #120	; 0x78
 800343c:	2100      	movs	r1, #0
 800343e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e05f      	b.n	8003504 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2204      	movs	r2, #4
 800344c:	4013      	ands	r3, r2
 800344e:	2b04      	cmp	r3, #4
 8003450:	d146      	bne.n	80034e0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003454:	2280      	movs	r2, #128	; 0x80
 8003456:	03d1      	lsls	r1, r2, #15
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4a2c      	ldr	r2, [pc, #176]	; (800350c <UART_CheckIdleState+0x148>)
 800345c:	9200      	str	r2, [sp, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	f000 f858 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d03b      	beq.n	80034e0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003468:	f3ef 8310 	mrs	r3, PRIMASK
 800346c:	60fb      	str	r3, [r7, #12]
  return(result);
 800346e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
 8003472:	2301      	movs	r3, #1
 8003474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f383 8810 	msr	PRIMASK, r3
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4921      	ldr	r1, [pc, #132]	; (8003510 <UART_CheckIdleState+0x14c>)
 800348a:	400a      	ands	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003490:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f383 8810 	msr	PRIMASK, r3
}
 8003498:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349a:	f3ef 8310 	mrs	r3, PRIMASK
 800349e:	61bb      	str	r3, [r7, #24]
  return(result);
 80034a0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30
 80034a4:	2301      	movs	r3, #1
 80034a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f383 8810 	msr	PRIMASK, r3
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2101      	movs	r1, #1
 80034bc:	438a      	bics	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	f383 8810 	msr	PRIMASK, r3
}
 80034ca:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	2120      	movs	r1, #32
 80034d2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2278      	movs	r2, #120	; 0x78
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e011      	b.n	8003504 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2280      	movs	r2, #128	; 0x80
 80034ea:	2120      	movs	r1, #32
 80034ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2278      	movs	r2, #120	; 0x78
 80034fe:	2100      	movs	r1, #0
 8003500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b010      	add	sp, #64	; 0x40
 800350a:	bd80      	pop	{r7, pc}
 800350c:	01ffffff 	.word	0x01ffffff
 8003510:	fffffedf 	.word	0xfffffedf

08003514 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	1dfb      	adds	r3, r7, #7
 8003522:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003524:	e04b      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	3301      	adds	r3, #1
 800352a:	d048      	beq.n	80035be <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352c:	f7fd fc30 	bl	8000d90 <HAL_GetTick>
 8003530:	0002      	movs	r2, r0
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <UART_WaitOnFlagUntilTimeout+0x2e>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e04b      	b.n	80035de <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2204      	movs	r2, #4
 800354e:	4013      	ands	r3, r2
 8003550:	d035      	beq.n	80035be <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	2208      	movs	r2, #8
 800355a:	4013      	ands	r3, r2
 800355c:	2b08      	cmp	r3, #8
 800355e:	d111      	bne.n	8003584 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2208      	movs	r2, #8
 8003566:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f906 	bl	800377c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2284      	movs	r2, #132	; 0x84
 8003574:	2108      	movs	r1, #8
 8003576:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2278      	movs	r2, #120	; 0x78
 800357c:	2100      	movs	r1, #0
 800357e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e02c      	b.n	80035de <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	401a      	ands	r2, r3
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	429a      	cmp	r2, r3
 8003596:	d112      	bne.n	80035be <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2280      	movs	r2, #128	; 0x80
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f000 f8e9 	bl	800377c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2284      	movs	r2, #132	; 0x84
 80035ae:	2120      	movs	r1, #32
 80035b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2278      	movs	r2, #120	; 0x78
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e00f      	b.n	80035de <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	4013      	ands	r3, r2
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	425a      	negs	r2, r3
 80035ce:	4153      	adcs	r3, r2
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	001a      	movs	r2, r3
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d0a4      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b004      	add	sp, #16
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b090      	sub	sp, #64	; 0x40
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	1dbb      	adds	r3, r7, #6
 80035f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1dba      	adds	r2, r7, #6
 8003600:	2158      	movs	r1, #88	; 0x58
 8003602:	8812      	ldrh	r2, [r2, #0]
 8003604:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1dba      	adds	r2, r7, #6
 800360a:	215a      	movs	r1, #90	; 0x5a
 800360c:	8812      	ldrh	r2, [r2, #0]
 800360e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	015b      	lsls	r3, r3, #5
 800361e:	429a      	cmp	r2, r3
 8003620:	d10d      	bne.n	800363e <UART_Start_Receive_IT+0x56>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d104      	bne.n	8003634 <UART_Start_Receive_IT+0x4c>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	225c      	movs	r2, #92	; 0x5c
 800362e:	4950      	ldr	r1, [pc, #320]	; (8003770 <UART_Start_Receive_IT+0x188>)
 8003630:	5299      	strh	r1, [r3, r2]
 8003632:	e02e      	b.n	8003692 <UART_Start_Receive_IT+0xaa>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	225c      	movs	r2, #92	; 0x5c
 8003638:	21ff      	movs	r1, #255	; 0xff
 800363a:	5299      	strh	r1, [r3, r2]
 800363c:	e029      	b.n	8003692 <UART_Start_Receive_IT+0xaa>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10d      	bne.n	8003662 <UART_Start_Receive_IT+0x7a>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <UART_Start_Receive_IT+0x70>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	225c      	movs	r2, #92	; 0x5c
 8003652:	21ff      	movs	r1, #255	; 0xff
 8003654:	5299      	strh	r1, [r3, r2]
 8003656:	e01c      	b.n	8003692 <UART_Start_Receive_IT+0xaa>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	225c      	movs	r2, #92	; 0x5c
 800365c:	217f      	movs	r1, #127	; 0x7f
 800365e:	5299      	strh	r1, [r3, r2]
 8003660:	e017      	b.n	8003692 <UART_Start_Receive_IT+0xaa>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	055b      	lsls	r3, r3, #21
 800366a:	429a      	cmp	r2, r3
 800366c:	d10d      	bne.n	800368a <UART_Start_Receive_IT+0xa2>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d104      	bne.n	8003680 <UART_Start_Receive_IT+0x98>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	225c      	movs	r2, #92	; 0x5c
 800367a:	217f      	movs	r1, #127	; 0x7f
 800367c:	5299      	strh	r1, [r3, r2]
 800367e:	e008      	b.n	8003692 <UART_Start_Receive_IT+0xaa>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	225c      	movs	r2, #92	; 0x5c
 8003684:	213f      	movs	r1, #63	; 0x3f
 8003686:	5299      	strh	r1, [r3, r2]
 8003688:	e003      	b.n	8003692 <UART_Start_Receive_IT+0xaa>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	225c      	movs	r2, #92	; 0x5c
 800368e:	2100      	movs	r1, #0
 8003690:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2284      	movs	r2, #132	; 0x84
 8003696:	2100      	movs	r1, #0
 8003698:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	2122      	movs	r1, #34	; 0x22
 80036a0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a2:	f3ef 8310 	mrs	r3, PRIMASK
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ac:	2301      	movs	r3, #1
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b2:	f383 8810 	msr	PRIMASK, r3
}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2101      	movs	r1, #1
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	f383 8810 	msr	PRIMASK, r3
}
 80036d2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	015b      	lsls	r3, r3, #5
 80036dc:	429a      	cmp	r2, r3
 80036de:	d107      	bne.n	80036f0 <UART_Start_Receive_IT+0x108>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d103      	bne.n	80036f0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a22      	ldr	r2, [pc, #136]	; (8003774 <UART_Start_Receive_IT+0x18c>)
 80036ec:	669a      	str	r2, [r3, #104]	; 0x68
 80036ee:	e002      	b.n	80036f6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a21      	ldr	r2, [pc, #132]	; (8003778 <UART_Start_Receive_IT+0x190>)
 80036f4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d019      	beq.n	8003732 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003702:	61fb      	str	r3, [r7, #28]
  return(result);
 8003704:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
 8003708:	2301      	movs	r3, #1
 800370a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2190      	movs	r1, #144	; 0x90
 8003720:	0049      	lsls	r1, r1, #1
 8003722:	430a      	orrs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	f383 8810 	msr	PRIMASK, r3
}
 8003730:	e018      	b.n	8003764 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003732:	f3ef 8310 	mrs	r3, PRIMASK
 8003736:	613b      	str	r3, [r7, #16]
  return(result);
 8003738:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800373a:	63bb      	str	r3, [r7, #56]	; 0x38
 800373c:	2301      	movs	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f383 8810 	msr	PRIMASK, r3
}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2120      	movs	r1, #32
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f383 8810 	msr	PRIMASK, r3
}
 8003762:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b010      	add	sp, #64	; 0x40
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	000001ff 	.word	0x000001ff
 8003774:	08003a81 	.word	0x08003a81
 8003778:	080038c9 	.word	0x080038c9

0800377c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08e      	sub	sp, #56	; 0x38
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003784:	f3ef 8310 	mrs	r3, PRIMASK
 8003788:	617b      	str	r3, [r7, #20]
  return(result);
 800378a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378c:	637b      	str	r3, [r7, #52]	; 0x34
 800378e:	2301      	movs	r3, #1
 8003790:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4926      	ldr	r1, [pc, #152]	; (8003840 <UART_EndRxTransfer+0xc4>)
 80037a6:	400a      	ands	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f383 8810 	msr	PRIMASK, r3
}
 80037b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b6:	f3ef 8310 	mrs	r3, PRIMASK
 80037ba:	623b      	str	r3, [r7, #32]
  return(result);
 80037bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037be:	633b      	str	r3, [r7, #48]	; 0x30
 80037c0:	2301      	movs	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	f383 8810 	msr	PRIMASK, r3
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2101      	movs	r1, #1
 80037d8:	438a      	bics	r2, r1
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	f383 8810 	msr	PRIMASK, r3
}
 80037e6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d118      	bne.n	8003822 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f0:	f3ef 8310 	mrs	r3, PRIMASK
 80037f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80037f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	2301      	movs	r3, #1
 80037fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2110      	movs	r1, #16
 8003812:	438a      	bics	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f383 8810 	msr	PRIMASK, r3
}
 8003820:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	2120      	movs	r1, #32
 8003828:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b00e      	add	sp, #56	; 0x38
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	fffffedf 	.word	0xfffffedf

08003844 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	225a      	movs	r2, #90	; 0x5a
 8003856:	2100      	movs	r1, #0
 8003858:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2252      	movs	r2, #82	; 0x52
 800385e:	2100      	movs	r1, #0
 8003860:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	0018      	movs	r0, r3
 8003866:	f7ff fb75 	bl	8002f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	b004      	add	sp, #16
 8003870:	bd80      	pop	{r7, pc}

08003872 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387a:	f3ef 8310 	mrs	r3, PRIMASK
 800387e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003880:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	2301      	movs	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f383 8810 	msr	PRIMASK, r3
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2140      	movs	r1, #64	; 0x40
 800389c:	438a      	bics	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7ff fb42 	bl	8002f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b006      	add	sp, #24
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b094      	sub	sp, #80	; 0x50
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038d0:	204e      	movs	r0, #78	; 0x4e
 80038d2:	183b      	adds	r3, r7, r0
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	215c      	movs	r1, #92	; 0x5c
 80038d8:	5a52      	ldrh	r2, [r2, r1]
 80038da:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	589b      	ldr	r3, [r3, r2]
 80038e2:	2b22      	cmp	r3, #34	; 0x22
 80038e4:	d000      	beq.n	80038e8 <UART_RxISR_8BIT+0x20>
 80038e6:	e0ba      	b.n	8003a5e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	214c      	movs	r1, #76	; 0x4c
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80038f2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	183b      	adds	r3, r7, r0
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	b2d9      	uxtb	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003904:	400a      	ands	r2, r1
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	225a      	movs	r2, #90	; 0x5a
 8003918:	5a9b      	ldrh	r3, [r3, r2]
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b299      	uxth	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	225a      	movs	r2, #90	; 0x5a
 8003924:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	225a      	movs	r2, #90	; 0x5a
 800392a:	5a9b      	ldrh	r3, [r3, r2]
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d000      	beq.n	8003934 <UART_RxISR_8BIT+0x6c>
 8003932:	e09c      	b.n	8003a6e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003934:	f3ef 8310 	mrs	r3, PRIMASK
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800393c:	64bb      	str	r3, [r7, #72]	; 0x48
 800393e:	2301      	movs	r3, #1
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	f383 8810 	msr	PRIMASK, r3
}
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4948      	ldr	r1, [pc, #288]	; (8003a78 <UART_RxISR_8BIT+0x1b0>)
 8003956:	400a      	ands	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	f383 8810 	msr	PRIMASK, r3
}
 8003964:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003966:	f3ef 8310 	mrs	r3, PRIMASK
 800396a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396e:	647b      	str	r3, [r7, #68]	; 0x44
 8003970:	2301      	movs	r3, #1
 8003972:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003976:	f383 8810 	msr	PRIMASK, r3
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2101      	movs	r1, #1
 8003988:	438a      	bics	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	f383 8810 	msr	PRIMASK, r3
}
 8003996:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	2120      	movs	r1, #32
 800399e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	4013      	ands	r3, r2
 80039b8:	d018      	beq.n	80039ec <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ba:	f3ef 8310 	mrs	r3, PRIMASK
 80039be:	61bb      	str	r3, [r7, #24]
  return(result);
 80039c0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039c2:	643b      	str	r3, [r7, #64]	; 0x40
 80039c4:	2301      	movs	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f383 8810 	msr	PRIMASK, r3
}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4928      	ldr	r1, [pc, #160]	; (8003a7c <UART_RxISR_8BIT+0x1b4>)
 80039dc:	400a      	ands	r2, r1
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	f383 8810 	msr	PRIMASK, r3
}
 80039ea:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d12f      	bne.n	8003a54 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fa:	f3ef 8310 	mrs	r3, PRIMASK
 80039fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a00:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a04:	2301      	movs	r3, #1
 8003a06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f383 8810 	msr	PRIMASK, r3
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2110      	movs	r1, #16
 8003a1c:	438a      	bics	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f383 8810 	msr	PRIMASK, r3
}
 8003a2a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	2210      	movs	r2, #16
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d103      	bne.n	8003a42 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2210      	movs	r2, #16
 8003a40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2258      	movs	r2, #88	; 0x58
 8003a46:	5a9a      	ldrh	r2, [r3, r2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0011      	movs	r1, r2
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7ff fa89 	bl	8002f64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a52:	e00c      	b.n	8003a6e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7fc ff80 	bl	800095c <HAL_UART_RxCpltCallback>
}
 8003a5c:	e007      	b.n	8003a6e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2108      	movs	r1, #8
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	619a      	str	r2, [r3, #24]
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b014      	add	sp, #80	; 0x50
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	fffffedf 	.word	0xfffffedf
 8003a7c:	fbffffff 	.word	0xfbffffff

08003a80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b094      	sub	sp, #80	; 0x50
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a88:	204e      	movs	r0, #78	; 0x4e
 8003a8a:	183b      	adds	r3, r7, r0
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	215c      	movs	r1, #92	; 0x5c
 8003a90:	5a52      	ldrh	r2, [r2, r1]
 8003a92:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2280      	movs	r2, #128	; 0x80
 8003a98:	589b      	ldr	r3, [r3, r2]
 8003a9a:	2b22      	cmp	r3, #34	; 0x22
 8003a9c:	d000      	beq.n	8003aa0 <UART_RxISR_16BIT+0x20>
 8003a9e:	e0ba      	b.n	8003c16 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	214c      	movs	r1, #76	; 0x4c
 8003aa6:	187b      	adds	r3, r7, r1
 8003aa8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003aaa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ab2:	187b      	adds	r3, r7, r1
 8003ab4:	183a      	adds	r2, r7, r0
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	8812      	ldrh	r2, [r2, #0]
 8003aba:	4013      	ands	r3, r2
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	1c9a      	adds	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	225a      	movs	r2, #90	; 0x5a
 8003ad0:	5a9b      	ldrh	r3, [r3, r2]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b299      	uxth	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	225a      	movs	r2, #90	; 0x5a
 8003adc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	225a      	movs	r2, #90	; 0x5a
 8003ae2:	5a9b      	ldrh	r3, [r3, r2]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d000      	beq.n	8003aec <UART_RxISR_16BIT+0x6c>
 8003aea:	e09c      	b.n	8003c26 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aec:	f3ef 8310 	mrs	r3, PRIMASK
 8003af0:	623b      	str	r3, [r7, #32]
  return(result);
 8003af2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
 8003af6:	2301      	movs	r3, #1
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	f383 8810 	msr	PRIMASK, r3
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4948      	ldr	r1, [pc, #288]	; (8003c30 <UART_RxISR_16BIT+0x1b0>)
 8003b0e:	400a      	ands	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	f383 8810 	msr	PRIMASK, r3
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b26:	643b      	str	r3, [r7, #64]	; 0x40
 8003b28:	2301      	movs	r3, #1
 8003b2a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	f383 8810 	msr	PRIMASK, r3
}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2101      	movs	r1, #1
 8003b40:	438a      	bics	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	f383 8810 	msr	PRIMASK, r3
}
 8003b4e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	2120      	movs	r1, #32
 8003b56:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d018      	beq.n	8003ba4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b72:	f3ef 8310 	mrs	r3, PRIMASK
 8003b76:	617b      	str	r3, [r7, #20]
  return(result);
 8003b78:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f383 8810 	msr	PRIMASK, r3
}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4928      	ldr	r1, [pc, #160]	; (8003c34 <UART_RxISR_16BIT+0x1b4>)
 8003b94:	400a      	ands	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ba2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d12f      	bne.n	8003c0c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bb8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f383 8810 	msr	PRIMASK, r3
}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2110      	movs	r1, #16
 8003bd4:	438a      	bics	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f383 8810 	msr	PRIMASK, r3
}
 8003be2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	2210      	movs	r2, #16
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b10      	cmp	r3, #16
 8003bf0:	d103      	bne.n	8003bfa <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2258      	movs	r2, #88	; 0x58
 8003bfe:	5a9a      	ldrh	r2, [r3, r2]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	0011      	movs	r1, r2
 8003c04:	0018      	movs	r0, r3
 8003c06:	f7ff f9ad 	bl	8002f64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c0a:	e00c      	b.n	8003c26 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f7fc fea4 	bl	800095c <HAL_UART_RxCpltCallback>
}
 8003c14:	e007      	b.n	8003c26 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699a      	ldr	r2, [r3, #24]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2108      	movs	r1, #8
 8003c22:	430a      	orrs	r2, r1
 8003c24:	619a      	str	r2, [r3, #24]
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b014      	add	sp, #80	; 0x50
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	fffffedf 	.word	0xfffffedf
 8003c34:	fbffffff 	.word	0xfbffffff

08003c38 <memset>:
 8003c38:	0003      	movs	r3, r0
 8003c3a:	1882      	adds	r2, r0, r2
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d100      	bne.n	8003c42 <memset+0xa>
 8003c40:	4770      	bx	lr
 8003c42:	7019      	strb	r1, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	e7f9      	b.n	8003c3c <memset+0x4>

08003c48 <__libc_init_array>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	2600      	movs	r6, #0
 8003c4c:	4c0c      	ldr	r4, [pc, #48]	; (8003c80 <__libc_init_array+0x38>)
 8003c4e:	4d0d      	ldr	r5, [pc, #52]	; (8003c84 <__libc_init_array+0x3c>)
 8003c50:	1b64      	subs	r4, r4, r5
 8003c52:	10a4      	asrs	r4, r4, #2
 8003c54:	42a6      	cmp	r6, r4
 8003c56:	d109      	bne.n	8003c6c <__libc_init_array+0x24>
 8003c58:	2600      	movs	r6, #0
 8003c5a:	f000 f819 	bl	8003c90 <_init>
 8003c5e:	4c0a      	ldr	r4, [pc, #40]	; (8003c88 <__libc_init_array+0x40>)
 8003c60:	4d0a      	ldr	r5, [pc, #40]	; (8003c8c <__libc_init_array+0x44>)
 8003c62:	1b64      	subs	r4, r4, r5
 8003c64:	10a4      	asrs	r4, r4, #2
 8003c66:	42a6      	cmp	r6, r4
 8003c68:	d105      	bne.n	8003c76 <__libc_init_array+0x2e>
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	00b3      	lsls	r3, r6, #2
 8003c6e:	58eb      	ldr	r3, [r5, r3]
 8003c70:	4798      	blx	r3
 8003c72:	3601      	adds	r6, #1
 8003c74:	e7ee      	b.n	8003c54 <__libc_init_array+0xc>
 8003c76:	00b3      	lsls	r3, r6, #2
 8003c78:	58eb      	ldr	r3, [r5, r3]
 8003c7a:	4798      	blx	r3
 8003c7c:	3601      	adds	r6, #1
 8003c7e:	e7f2      	b.n	8003c66 <__libc_init_array+0x1e>
 8003c80:	08003ce0 	.word	0x08003ce0
 8003c84:	08003ce0 	.word	0x08003ce0
 8003c88:	08003ce4 	.word	0x08003ce4
 8003c8c:	08003ce0 	.word	0x08003ce0

08003c90 <_init>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr

08003c9c <_fini>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr
