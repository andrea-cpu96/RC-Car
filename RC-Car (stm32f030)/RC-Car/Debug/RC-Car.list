
RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f5c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003050  08003050  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003050  08003050  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003050  08003050  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08003064  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003064  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c703  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000199b  00000000  00000000  0002c77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  0002e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000972  00000000  00000000  0002ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000109ee  00000000  00000000  0002f672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e08c  00000000  00000000  00040060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006ac28  00000000  00000000  0004e0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b44  00000000  00000000  000b8d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000bb858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003000 	.word	0x08003000

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003000 	.word	0x08003000

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fb90 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f809 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f9b2 	bl	8000590 <MX_GPIO_Init>
  MX_ADC_Init();
 800022c:	f000 f856 	bl	80002dc <MX_ADC_Init>
  MX_TIM15_Init();
 8000230:	f000 f8bc 	bl	80003ac <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8000234:	f000 f97c 	bl	8000530 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x1c>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b590      	push	{r4, r7, lr}
 800023c:	b091      	sub	sp, #68	; 0x44
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	2410      	movs	r4, #16
 8000242:	193b      	adds	r3, r7, r4
 8000244:	0018      	movs	r0, r3
 8000246:	2330      	movs	r3, #48	; 0x30
 8000248:	001a      	movs	r2, r3
 800024a:	2100      	movs	r1, #0
 800024c:	f002 feac 	bl	8002fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	003b      	movs	r3, r7
 8000252:	0018      	movs	r0, r3
 8000254:	2310      	movs	r3, #16
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f002 fea5 	bl	8002fa8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800025e:	0021      	movs	r1, r4
 8000260:	187b      	adds	r3, r7, r1
 8000262:	2212      	movs	r2, #18
 8000264:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	187b      	adds	r3, r7, r1
 8000268:	2201      	movs	r2, #1
 800026a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800026c:	187b      	adds	r3, r7, r1
 800026e:	2201      	movs	r2, #1
 8000270:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000272:	187b      	adds	r3, r7, r1
 8000274:	2210      	movs	r2, #16
 8000276:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2210      	movs	r2, #16
 800027c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2202      	movs	r2, #2
 8000282:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2280      	movs	r2, #128	; 0x80
 8000288:	0212      	lsls	r2, r2, #8
 800028a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2200      	movs	r2, #0
 8000290:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2200      	movs	r2, #0
 8000296:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	187b      	adds	r3, r7, r1
 800029a:	0018      	movs	r0, r3
 800029c:	f001 f82e 	bl	80012fc <HAL_RCC_OscConfig>
 80002a0:	1e03      	subs	r3, r0, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a4:	f000 f9cc 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	003b      	movs	r3, r7
 80002aa:	2207      	movs	r2, #7
 80002ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ae:	003b      	movs	r3, r7
 80002b0:	2202      	movs	r2, #2
 80002b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	003b      	movs	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	003b      	movs	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c0:	003b      	movs	r3, r7
 80002c2:	2100      	movs	r1, #0
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 fb37 	bl	8001938 <HAL_RCC_ClockConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002ce:	f000 f9b7 	bl	8000640 <Error_Handler>
  }
}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b011      	add	sp, #68	; 0x44
 80002d8:	bd90      	pop	{r4, r7, pc}
	...

080002dc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	0018      	movs	r0, r3
 80002e6:	230c      	movs	r3, #12
 80002e8:	001a      	movs	r2, r3
 80002ea:	2100      	movs	r1, #0
 80002ec:	f002 fe5c 	bl	8002fa8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80002f0:	4b2c      	ldr	r3, [pc, #176]	; (80003a4 <MX_ADC_Init+0xc8>)
 80002f2:	4a2d      	ldr	r2, [pc, #180]	; (80003a8 <MX_ADC_Init+0xcc>)
 80002f4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f6:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <MX_ADC_Init+0xc8>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80002fc:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <MX_ADC_Init+0xc8>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000302:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <MX_ADC_Init+0xc8>)
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000308:	4b26      	ldr	r3, [pc, #152]	; (80003a4 <MX_ADC_Init+0xc8>)
 800030a:	2201      	movs	r2, #1
 800030c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800030e:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <MX_ADC_Init+0xc8>)
 8000310:	2204      	movs	r2, #4
 8000312:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000314:	4b23      	ldr	r3, [pc, #140]	; (80003a4 <MX_ADC_Init+0xc8>)
 8000316:	2200      	movs	r2, #0
 8000318:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <MX_ADC_Init+0xc8>)
 800031c:	2200      	movs	r2, #0
 800031e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000320:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <MX_ADC_Init+0xc8>)
 8000322:	2200      	movs	r2, #0
 8000324:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000326:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <MX_ADC_Init+0xc8>)
 8000328:	2200      	movs	r2, #0
 800032a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032c:	4b1d      	ldr	r3, [pc, #116]	; (80003a4 <MX_ADC_Init+0xc8>)
 800032e:	22c2      	movs	r2, #194	; 0xc2
 8000330:	32ff      	adds	r2, #255	; 0xff
 8000332:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_ADC_Init+0xc8>)
 8000336:	2200      	movs	r2, #0
 8000338:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_ADC_Init+0xc8>)
 800033c:	2224      	movs	r2, #36	; 0x24
 800033e:	2100      	movs	r1, #0
 8000340:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_ADC_Init+0xc8>)
 8000344:	2201      	movs	r2, #1
 8000346:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_ADC_Init+0xc8>)
 800034a:	0018      	movs	r0, r3
 800034c:	f000 fb5e 	bl	8000a0c <HAL_ADC_Init>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000354:	f000 f974 	bl	8000640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2207      	movs	r2, #7
 800035c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	0152      	lsls	r2, r2, #5
 8000364:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2207      	movs	r2, #7
 800036a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800036c:	1d3a      	adds	r2, r7, #4
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <MX_ADC_Init+0xc8>)
 8000370:	0011      	movs	r1, r2
 8000372:	0018      	movs	r0, r3
 8000374:	f000 fc8a 	bl	8000c8c <HAL_ADC_ConfigChannel>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800037c:	f000 f960 	bl	8000640 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2208      	movs	r2, #8
 8000384:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000386:	1d3a      	adds	r2, r7, #4
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_ADC_Init+0xc8>)
 800038a:	0011      	movs	r1, r2
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fc7d 	bl	8000c8c <HAL_ADC_ConfigChannel>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000396:	f000 f953 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b004      	add	sp, #16
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	20000028 	.word	0x20000028
 80003a8:	40012400 	.word	0x40012400

080003ac <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b096      	sub	sp, #88	; 0x58
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003b2:	2348      	movs	r3, #72	; 0x48
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	0018      	movs	r0, r3
 80003b8:	2310      	movs	r3, #16
 80003ba:	001a      	movs	r2, r3
 80003bc:	2100      	movs	r1, #0
 80003be:	f002 fdf3 	bl	8002fa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c2:	2340      	movs	r3, #64	; 0x40
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	0018      	movs	r0, r3
 80003c8:	2308      	movs	r3, #8
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f002 fdeb 	bl	8002fa8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003d2:	2324      	movs	r3, #36	; 0x24
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	231c      	movs	r3, #28
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 fde3 	bl	8002fa8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	0018      	movs	r0, r3
 80003e6:	2320      	movs	r3, #32
 80003e8:	001a      	movs	r2, r3
 80003ea:	2100      	movs	r1, #0
 80003ec:	f002 fddc 	bl	8002fa8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80003f0:	4b4b      	ldr	r3, [pc, #300]	; (8000520 <MX_TIM15_Init+0x174>)
 80003f2:	4a4c      	ldr	r2, [pc, #304]	; (8000524 <MX_TIM15_Init+0x178>)
 80003f4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80003f6:	4b4a      	ldr	r3, [pc, #296]	; (8000520 <MX_TIM15_Init+0x174>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fc:	4b48      	ldr	r3, [pc, #288]	; (8000520 <MX_TIM15_Init+0x174>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 32000-1;
 8000402:	4b47      	ldr	r3, [pc, #284]	; (8000520 <MX_TIM15_Init+0x174>)
 8000404:	4a48      	ldr	r2, [pc, #288]	; (8000528 <MX_TIM15_Init+0x17c>)
 8000406:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000408:	4b45      	ldr	r3, [pc, #276]	; (8000520 <MX_TIM15_Init+0x174>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800040e:	4b44      	ldr	r3, [pc, #272]	; (8000520 <MX_TIM15_Init+0x174>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000414:	4b42      	ldr	r3, [pc, #264]	; (8000520 <MX_TIM15_Init+0x174>)
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800041a:	4b41      	ldr	r3, [pc, #260]	; (8000520 <MX_TIM15_Init+0x174>)
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fbd1 	bl	8001bc4 <HAL_TIM_Base_Init>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000426:	f000 f90b 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042a:	2148      	movs	r1, #72	; 0x48
 800042c:	187b      	adds	r3, r7, r1
 800042e:	2280      	movs	r2, #128	; 0x80
 8000430:	0152      	lsls	r2, r2, #5
 8000432:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000434:	187a      	adds	r2, r7, r1
 8000436:	4b3a      	ldr	r3, [pc, #232]	; (8000520 <MX_TIM15_Init+0x174>)
 8000438:	0011      	movs	r1, r2
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fd30 	bl	8001ea0 <HAL_TIM_ConfigClockSource>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000444:	f000 f8fc 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000448:	4b35      	ldr	r3, [pc, #212]	; (8000520 <MX_TIM15_Init+0x174>)
 800044a:	0018      	movs	r0, r3
 800044c:	f001 fc0a 	bl	8001c64 <HAL_TIM_PWM_Init>
 8000450:	1e03      	subs	r3, r0, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000454:	f000 f8f4 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000458:	2140      	movs	r1, #64	; 0x40
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000466:	187a      	adds	r2, r7, r1
 8000468:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <MX_TIM15_Init+0x174>)
 800046a:	0011      	movs	r1, r2
 800046c:	0018      	movs	r0, r3
 800046e:	f002 f8f7 	bl	8002660 <HAL_TIMEx_MasterConfigSynchronization>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000476:	f000 f8e3 	bl	8000640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800047a:	2124      	movs	r1, #36	; 0x24
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2260      	movs	r2, #96	; 0x60
 8000480:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1599;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	4a29      	ldr	r2, [pc, #164]	; (800052c <MX_TIM15_Init+0x180>)
 8000486:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2200      	movs	r2, #0
 8000492:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a6:	1879      	adds	r1, r7, r1
 80004a8:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <MX_TIM15_Init+0x174>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 fc31 	bl	8001d14 <HAL_TIM_PWM_ConfigChannel>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80004b6:	f000 f8c3 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004ba:	2324      	movs	r3, #36	; 0x24
 80004bc:	18f9      	adds	r1, r7, r3
 80004be:	4b18      	ldr	r3, [pc, #96]	; (8000520 <MX_TIM15_Init+0x174>)
 80004c0:	2204      	movs	r2, #4
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fc26 	bl	8001d14 <HAL_TIM_PWM_ConfigChannel>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 80004cc:	f000 f8b8 	bl	8000640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	0192      	lsls	r2, r2, #6
 80004f4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80004fc:	1d3a      	adds	r2, r7, #4
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_TIM15_Init+0x174>)
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f002 f904 	bl	8002710 <HAL_TIMEx_ConfigBreakDeadTime>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 800050c:	f000 f898 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <MX_TIM15_Init+0x174>)
 8000512:	0018      	movs	r0, r3
 8000514:	f000 f942 	bl	800079c <HAL_TIM_MspPostInit>

}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b016      	add	sp, #88	; 0x58
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000068 	.word	0x20000068
 8000524:	40014000 	.word	0x40014000
 8000528:	00007cff 	.word	0x00007cff
 800052c:	0000063f 	.word	0x0000063f

08000530 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_USART3_UART_Init+0x58>)
 8000536:	4a15      	ldr	r2, [pc, #84]	; (800058c <MX_USART3_UART_Init+0x5c>)
 8000538:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_USART3_UART_Init+0x58>)
 800053c:	2296      	movs	r2, #150	; 0x96
 800053e:	0192      	lsls	r2, r2, #6
 8000540:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_USART3_UART_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_USART3_UART_Init+0x58>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_USART3_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MX_USART3_UART_Init+0x58>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <MX_USART3_UART_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <MX_USART3_UART_Init+0x58>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <MX_USART3_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_USART3_UART_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <MX_USART3_UART_Init+0x58>)
 8000574:	0018      	movs	r0, r3
 8000576:	f002 f929 	bl	80027cc <HAL_UART_Init>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800057e:	f000 f85f 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000b0 	.word	0x200000b0
 800058c:	40004800 	.word	0x40004800

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	240c      	movs	r4, #12
 8000598:	193b      	adds	r3, r7, r4
 800059a:	0018      	movs	r0, r3
 800059c:	2314      	movs	r3, #20
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f002 fd01 	bl	8002fa8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <MX_GPIO_Init+0xac>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b24      	ldr	r3, [pc, #144]	; (800063c <MX_GPIO_Init+0xac>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	03c9      	lsls	r1, r1, #15
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_GPIO_Init+0xac>)
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	03db      	lsls	r3, r3, #15
 80005bc:	4013      	ands	r3, r2
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b1e      	ldr	r3, [pc, #120]	; (800063c <MX_GPIO_Init+0xac>)
 80005c4:	695a      	ldr	r2, [r3, #20]
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_GPIO_Init+0xac>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0289      	lsls	r1, r1, #10
 80005cc:	430a      	orrs	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_GPIO_Init+0xac>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	029b      	lsls	r3, r3, #10
 80005d8:	4013      	ands	r3, r2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_GPIO_Init+0xac>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_GPIO_Init+0xac>)
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	02c9      	lsls	r1, r1, #11
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_GPIO_Init+0xac>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	02db      	lsls	r3, r3, #11
 80005f4:	4013      	ands	r3, r2
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M_BACKWARD_Pin|M_FORWARD_Pin, GPIO_PIN_RESET);
 80005fa:	23c0      	movs	r3, #192	; 0xc0
 80005fc:	00d9      	lsls	r1, r3, #3
 80005fe:	2390      	movs	r3, #144	; 0x90
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	2200      	movs	r2, #0
 8000604:	0018      	movs	r0, r3
 8000606:	f000 fe5b 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M_BACKWARD_Pin M_FORWARD_Pin */
  GPIO_InitStruct.Pin = M_BACKWARD_Pin|M_FORWARD_Pin;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	22c0      	movs	r2, #192	; 0xc0
 800060e:	00d2      	lsls	r2, r2, #3
 8000610:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2201      	movs	r2, #1
 8000616:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	193a      	adds	r2, r7, r4
 8000626:	2390      	movs	r3, #144	; 0x90
 8000628:	05db      	lsls	r3, r3, #23
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f000 fcd7 	bl	8000fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b009      	add	sp, #36	; 0x24
 8000638:	bd90      	pop	{r4, r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40021000 	.word	0x40021000

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x44>)
 8000654:	699a      	ldr	r2, [r3, #24]
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_MspInit+0x44>)
 8000658:	2101      	movs	r1, #1
 800065a:	430a      	orrs	r2, r1
 800065c:	619a      	str	r2, [r3, #24]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x44>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	2201      	movs	r2, #1
 8000664:	4013      	ands	r3, r2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_MspInit+0x44>)
 800066c:	69da      	ldr	r2, [r3, #28]
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_MspInit+0x44>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	0549      	lsls	r1, r1, #21
 8000674:	430a      	orrs	r2, r1
 8000676:	61da      	str	r2, [r3, #28]
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_MspInit+0x44>)
 800067a:	69da      	ldr	r2, [r3, #28]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	055b      	lsls	r3, r3, #21
 8000680:	4013      	ands	r3, r2
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b08b      	sub	sp, #44	; 0x2c
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	2414      	movs	r4, #20
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	0018      	movs	r0, r3
 80006a2:	2314      	movs	r3, #20
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f002 fc7e 	bl	8002fa8 <memset>
  if(hadc->Instance==ADC1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a27      	ldr	r2, [pc, #156]	; (8000750 <HAL_ADC_MspInit+0xbc>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d148      	bne.n	8000748 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006b8:	699a      	ldr	r2, [r3, #24]
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	0089      	lsls	r1, r1, #2
 80006c0:	430a      	orrs	r2, r1
 80006c2:	619a      	str	r2, [r3, #24]
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006c6:	699a      	ldr	r2, [r3, #24]
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4013      	ands	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006d4:	695a      	ldr	r2, [r3, #20]
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0289      	lsls	r1, r1, #10
 80006dc:	430a      	orrs	r2, r1
 80006de:	615a      	str	r2, [r3, #20]
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	029b      	lsls	r3, r3, #10
 80006e8:	4013      	ands	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	02c9      	lsls	r1, r1, #11
 80006f8:	430a      	orrs	r2, r1
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_ADC_MspInit+0xc0>)
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	02db      	lsls	r3, r3, #11
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = PAD_X_Pin;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2203      	movs	r2, #3
 8000714:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(PAD_X_GPIO_Port, &GPIO_InitStruct);
 800071c:	193a      	adds	r2, r7, r4
 800071e:	2390      	movs	r3, #144	; 0x90
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	0011      	movs	r1, r2
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fc5b 	bl	8000fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PAD_Y_Pin;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2203      	movs	r2, #3
 8000734:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	193b      	adds	r3, r7, r4
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(PAD_Y_GPIO_Port, &GPIO_InitStruct);
 800073c:	193b      	adds	r3, r7, r4
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_ADC_MspInit+0xc4>)
 8000740:	0019      	movs	r1, r3
 8000742:	0010      	movs	r0, r2
 8000744:	f000 fc4c 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b00b      	add	sp, #44	; 0x2c
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	40012400 	.word	0x40012400
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400

0800075c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <HAL_TIM_Base_MspInit+0x38>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d10d      	bne.n	800078a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_TIM_Base_MspInit+0x3c>)
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_TIM_Base_MspInit+0x3c>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0249      	lsls	r1, r1, #9
 8000778:	430a      	orrs	r2, r1
 800077a:	619a      	str	r2, [r3, #24]
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_TIM_Base_MspInit+0x3c>)
 800077e:	699a      	ldr	r2, [r3, #24]
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	025b      	lsls	r3, r3, #9
 8000784:	4013      	ands	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b004      	add	sp, #16
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40014000 	.word	0x40014000
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	240c      	movs	r4, #12
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	0018      	movs	r0, r3
 80007aa:	2314      	movs	r3, #20
 80007ac:	001a      	movs	r2, r3
 80007ae:	2100      	movs	r1, #0
 80007b0:	f002 fbfa 	bl	8002fa8 <memset>
  if(htim->Instance==TIM15)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a15      	ldr	r2, [pc, #84]	; (8000810 <HAL_TIM_MspPostInit+0x74>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d124      	bne.n	8000808 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_TIM_MspPostInit+0x78>)
 80007c0:	695a      	ldr	r2, [r3, #20]
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_TIM_MspPostInit+0x78>)
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	02c9      	lsls	r1, r1, #11
 80007c8:	430a      	orrs	r2, r1
 80007ca:	615a      	str	r2, [r3, #20]
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_TIM_MspPostInit+0x78>)
 80007ce:	695a      	ldr	r2, [r3, #20]
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	02db      	lsls	r3, r3, #11
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = SM1_PWM_Pin|SM2_PWM_Pin;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	22c0      	movs	r2, #192	; 0xc0
 80007de:	0212      	lsls	r2, r2, #8
 80007e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	0021      	movs	r1, r4
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2202      	movs	r2, #2
 80007e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2201      	movs	r2, #1
 80007fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	4a06      	ldr	r2, [pc, #24]	; (8000818 <HAL_TIM_MspPostInit+0x7c>)
 8000800:	0019      	movs	r1, r3
 8000802:	0010      	movs	r0, r2
 8000804:	f000 fbec 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b009      	add	sp, #36	; 0x24
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	40014000 	.word	0x40014000
 8000814:	40021000 	.word	0x40021000
 8000818:	48000400 	.word	0x48000400

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b08b      	sub	sp, #44	; 0x2c
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	2414      	movs	r4, #20
 8000826:	193b      	adds	r3, r7, r4
 8000828:	0018      	movs	r0, r3
 800082a:	2314      	movs	r3, #20
 800082c:	001a      	movs	r2, r3
 800082e:	2100      	movs	r1, #0
 8000830:	f002 fbba 	bl	8002fa8 <memset>
  if(huart->Instance==USART3)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <HAL_UART_MspInit+0x90>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d132      	bne.n	80008a4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800083e:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <HAL_UART_MspInit+0x94>)
 8000840:	69da      	ldr	r2, [r3, #28]
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <HAL_UART_MspInit+0x94>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	02c9      	lsls	r1, r1, #11
 8000848:	430a      	orrs	r2, r1
 800084a:	61da      	str	r2, [r3, #28]
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <HAL_UART_MspInit+0x94>)
 800084e:	69da      	ldr	r2, [r3, #28]
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	02db      	lsls	r3, r3, #11
 8000854:	4013      	ands	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <HAL_UART_MspInit+0x94>)
 800085c:	695a      	ldr	r2, [r3, #20]
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_UART_MspInit+0x94>)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	02c9      	lsls	r1, r1, #11
 8000864:	430a      	orrs	r2, r1
 8000866:	615a      	str	r2, [r3, #20]
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_UART_MspInit+0x94>)
 800086a:	695a      	ldr	r2, [r3, #20]
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	02db      	lsls	r3, r3, #11
 8000870:	4013      	ands	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = LORA_TX_Pin|LORA_RX_Pin;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	22c0      	movs	r2, #192	; 0xc0
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	0021      	movs	r1, r4
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2202      	movs	r2, #2
 8000884:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2203      	movs	r2, #3
 8000890:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2204      	movs	r2, #4
 8000896:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	187b      	adds	r3, r7, r1
 800089a:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_UART_MspInit+0x98>)
 800089c:	0019      	movs	r1, r3
 800089e:	0010      	movs	r0, r2
 80008a0:	f000 fb9e 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b00b      	add	sp, #44	; 0x2c
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	40004800 	.word	0x40004800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	48000400 	.word	0x48000400

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f87a 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f4:	f7ff fff7 	bl	80008e6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <LoopForever+0x6>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	; (8000930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <LoopForever+0xe>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	; (800093c <LoopForever+0x16>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800091e:	f002 fb4b 	bl	8002fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000922:	f7ff fc7b 	bl	800021c <main>

08000926 <LoopForever>:

LoopForever:
    b LoopForever
 8000926:	e7fe      	b.n	8000926 <LoopForever>
  ldr   r0, =_estack
 8000928:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000934:	08003058 	.word	0x08003058
  ldr r2, =_sbss
 8000938:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800093c:	2000013c 	.word	0x2000013c

08000940 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_IRQHandler>
	...

08000944 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <HAL_Init+0x24>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_Init+0x24>)
 800094e:	2110      	movs	r1, #16
 8000950:	430a      	orrs	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f809 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095a:	f7ff fe77 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_InitTick+0x5c>)
 8000976:	681c      	ldr	r4, [r3, #0]
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_InitTick+0x60>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	0019      	movs	r1, r3
 800097e:	23fa      	movs	r3, #250	; 0xfa
 8000980:	0098      	lsls	r0, r3, #2
 8000982:	f7ff fbbf 	bl	8000104 <__udivsi3>
 8000986:	0003      	movs	r3, r0
 8000988:	0019      	movs	r1, r3
 800098a:	0020      	movs	r0, r4
 800098c:	f7ff fbba 	bl	8000104 <__udivsi3>
 8000990:	0003      	movs	r3, r0
 8000992:	0018      	movs	r0, r3
 8000994:	f000 fb17 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800099c:	2301      	movs	r3, #1
 800099e:	e00f      	b.n	80009c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d80b      	bhi.n	80009be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	2301      	movs	r3, #1
 80009aa:	425b      	negs	r3, r3
 80009ac:	2200      	movs	r2, #0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 faf4 	bl	8000f9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_InitTick+0x64>)
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b003      	add	sp, #12
 80009c6:	bd90      	pop	{r4, r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	001a      	movs	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	18d2      	adds	r2, r2, r3
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	601a      	str	r2, [r3, #0]
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000138 	.word	0x20000138

080009f8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000138 	.word	0x20000138

08000a0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a14:	230f      	movs	r3, #15
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e125      	b.n	8000c76 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10a      	bne.n	8000a48 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2234      	movs	r2, #52	; 0x34
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fe26 	bl	8000694 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	4013      	ands	r3, r2
 8000a50:	d000      	beq.n	8000a54 <HAL_ADC_Init+0x48>
 8000a52:	e103      	b.n	8000c5c <HAL_ADC_Init+0x250>
 8000a54:	230f      	movs	r3, #15
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d000      	beq.n	8000a60 <HAL_ADC_Init+0x54>
 8000a5e:	e0fd      	b.n	8000c5c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	2204      	movs	r2, #4
 8000a68:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000a6a:	d000      	beq.n	8000a6e <HAL_ADC_Init+0x62>
 8000a6c:	e0f6      	b.n	8000c5c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a72:	4a83      	ldr	r2, [pc, #524]	; (8000c80 <HAL_ADC_Init+0x274>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	2202      	movs	r2, #2
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	2203      	movs	r2, #3
 8000a86:	4013      	ands	r3, r2
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d112      	bne.n	8000ab2 <HAL_ADC_Init+0xa6>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2201      	movs	r2, #1
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d009      	beq.n	8000aae <HAL_ADC_Init+0xa2>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d101      	bne.n	8000ab2 <HAL_ADC_Init+0xa6>
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <HAL_ADC_Init+0xa8>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d116      	bne.n	8000ae6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	2218      	movs	r2, #24
 8000ac0:	4393      	bics	r3, r2
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	430a      	orrs	r2, r1
 8000ace:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	0899      	lsrs	r1, r3, #2
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4964      	ldr	r1, [pc, #400]	; (8000c84 <HAL_ADC_Init+0x278>)
 8000af2:	400a      	ands	r2, r1
 8000af4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7e1b      	ldrb	r3, [r3, #24]
 8000afa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7e5b      	ldrb	r3, [r3, #25]
 8000b00:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b02:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7e9b      	ldrb	r3, [r3, #26]
 8000b08:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d002      	beq.n	8000b1a <HAL_ADC_Init+0x10e>
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	015b      	lsls	r3, r3, #5
 8000b18:	e000      	b.n	8000b1c <HAL_ADC_Init+0x110>
 8000b1a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b1c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b22:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d101      	bne.n	8000b30 <HAL_ADC_Init+0x124>
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	e000      	b.n	8000b32 <HAL_ADC_Init+0x126>
 8000b30:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000b32:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2124      	movs	r1, #36	; 0x24
 8000b38:	5c5b      	ldrb	r3, [r3, r1]
 8000b3a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b3c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7edb      	ldrb	r3, [r3, #27]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d115      	bne.n	8000b78 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7e9b      	ldrb	r3, [r3, #26]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d105      	bne.n	8000b60 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	0252      	lsls	r2, r2, #9
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	e00b      	b.n	8000b78 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b64:	2220      	movs	r2, #32
 8000b66:	431a      	orrs	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b70:	2201      	movs	r2, #1
 8000b72:	431a      	orrs	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69da      	ldr	r2, [r3, #28]
 8000b7c:	23c2      	movs	r3, #194	; 0xc2
 8000b7e:	33ff      	adds	r3, #255	; 0xff
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d007      	beq.n	8000b94 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	68d9      	ldr	r1, [r3, #12]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	055b      	lsls	r3, r3, #21
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d01b      	beq.n	8000be8 <HAL_ADC_Init+0x1dc>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d017      	beq.n	8000be8 <HAL_ADC_Init+0x1dc>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d013      	beq.n	8000be8 <HAL_ADC_Init+0x1dc>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d00f      	beq.n	8000be8 <HAL_ADC_Init+0x1dc>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d00b      	beq.n	8000be8 <HAL_ADC_Init+0x1dc>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd4:	2b05      	cmp	r3, #5
 8000bd6:	d007      	beq.n	8000be8 <HAL_ADC_Init+0x1dc>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	2b06      	cmp	r3, #6
 8000bde:	d003      	beq.n	8000be8 <HAL_ADC_Init+0x1dc>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d112      	bne.n	8000c0e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	695a      	ldr	r2, [r3, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2107      	movs	r1, #7
 8000bf4:	438a      	bics	r2, r1
 8000bf6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6959      	ldr	r1, [r3, #20]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c02:	2207      	movs	r2, #7
 8000c04:	401a      	ands	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <HAL_ADC_Init+0x27c>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d10b      	bne.n	8000c36 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c28:	2203      	movs	r2, #3
 8000c2a:	4393      	bics	r3, r2
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c34:	e01c      	b.n	8000c70 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c3a:	2212      	movs	r2, #18
 8000c3c:	4393      	bics	r3, r2
 8000c3e:	2210      	movs	r2, #16
 8000c40:	431a      	orrs	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000c52:	230f      	movs	r3, #15
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c5a:	e009      	b.n	8000c70 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c60:	2210      	movs	r2, #16
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c70:	230f      	movs	r3, #15
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	781b      	ldrb	r3, [r3, #0]
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b004      	add	sp, #16
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	fffffefd 	.word	0xfffffefd
 8000c84:	fffe0219 	.word	0xfffe0219
 8000c88:	833fffe7 	.word	0x833fffe7

08000c8c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c96:	230f      	movs	r3, #15
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	055b      	lsls	r3, r3, #21
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d011      	beq.n	8000cd2 <HAL_ADC_ConfigChannel+0x46>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d00d      	beq.n	8000cd2 <HAL_ADC_ConfigChannel+0x46>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d009      	beq.n	8000cd2 <HAL_ADC_ConfigChannel+0x46>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d005      	beq.n	8000cd2 <HAL_ADC_ConfigChannel+0x46>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d001      	beq.n	8000cd2 <HAL_ADC_ConfigChannel+0x46>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2234      	movs	r2, #52	; 0x34
 8000cd6:	5c9b      	ldrb	r3, [r3, r2]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d101      	bne.n	8000ce0 <HAL_ADC_ConfigChannel+0x54>
 8000cdc:	2302      	movs	r3, #2
 8000cde:	e0bb      	b.n	8000e58 <HAL_ADC_ConfigChannel+0x1cc>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2234      	movs	r2, #52	; 0x34
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2204      	movs	r2, #4
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	d000      	beq.n	8000cf6 <HAL_ADC_ConfigChannel+0x6a>
 8000cf4:	e09f      	b.n	8000e36 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4a59      	ldr	r2, [pc, #356]	; (8000e60 <HAL_ADC_ConfigChannel+0x1d4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d100      	bne.n	8000d02 <HAL_ADC_ConfigChannel+0x76>
 8000d00:	e077      	b.n	8000df2 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	055b      	lsls	r3, r3, #21
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d037      	beq.n	8000d94 <HAL_ADC_ConfigChannel+0x108>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d033      	beq.n	8000d94 <HAL_ADC_ConfigChannel+0x108>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d02f      	beq.n	8000d94 <HAL_ADC_ConfigChannel+0x108>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d02b      	beq.n	8000d94 <HAL_ADC_ConfigChannel+0x108>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d027      	beq.n	8000d94 <HAL_ADC_ConfigChannel+0x108>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d48:	2b05      	cmp	r3, #5
 8000d4a:	d023      	beq.n	8000d94 <HAL_ADC_ConfigChannel+0x108>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d50:	2b06      	cmp	r3, #6
 8000d52:	d01f      	beq.n	8000d94 <HAL_ADC_ConfigChannel+0x108>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	2b07      	cmp	r3, #7
 8000d5a:	d01b      	beq.n	8000d94 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	2107      	movs	r1, #7
 8000d68:	400b      	ands	r3, r1
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d012      	beq.n	8000d94 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	695a      	ldr	r2, [r3, #20]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2107      	movs	r1, #7
 8000d7a:	438a      	bics	r2, r1
 8000d7c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6959      	ldr	r1, [r3, #20]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2207      	movs	r2, #7
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b10      	cmp	r3, #16
 8000d9a:	d003      	beq.n	8000da4 <HAL_ADC_ConfigChannel+0x118>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b11      	cmp	r3, #17
 8000da2:	d152      	bne.n	8000e4a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <HAL_ADC_ConfigChannel+0x1d8>)
 8000da6:	6819      	ldr	r1, [r3, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b10      	cmp	r3, #16
 8000dae:	d102      	bne.n	8000db6 <HAL_ADC_ConfigChannel+0x12a>
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	041b      	lsls	r3, r3, #16
 8000db4:	e001      	b.n	8000dba <HAL_ADC_ConfigChannel+0x12e>
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	03db      	lsls	r3, r3, #15
 8000dba:	4a2a      	ldr	r2, [pc, #168]	; (8000e64 <HAL_ADC_ConfigChannel+0x1d8>)
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b10      	cmp	r3, #16
 8000dc6:	d140      	bne.n	8000e4a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <HAL_ADC_ConfigChannel+0x1dc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4927      	ldr	r1, [pc, #156]	; (8000e6c <HAL_ADC_ConfigChannel+0x1e0>)
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff f998 	bl	8000104 <__udivsi3>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	001a      	movs	r2, r3
 8000dd8:	0013      	movs	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	189b      	adds	r3, r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000de2:	e002      	b.n	8000dea <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f9      	bne.n	8000de4 <HAL_ADC_ConfigChannel+0x158>
 8000df0:	e02b      	b.n	8000e4a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4099      	lsls	r1, r3
 8000e00:	000b      	movs	r3, r1
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	400a      	ands	r2, r1
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b10      	cmp	r3, #16
 8000e12:	d003      	beq.n	8000e1c <HAL_ADC_ConfigChannel+0x190>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b11      	cmp	r3, #17
 8000e1a:	d116      	bne.n	8000e4a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_ADC_ConfigChannel+0x1d8>)
 8000e1e:	6819      	ldr	r1, [r3, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b10      	cmp	r3, #16
 8000e26:	d101      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x1a0>
 8000e28:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e2a:	e000      	b.n	8000e2e <HAL_ADC_ConfigChannel+0x1a2>
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_ADC_ConfigChannel+0x1d8>)
 8000e30:	400a      	ands	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	e009      	b.n	8000e4a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000e42:	230f      	movs	r3, #15
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2234      	movs	r2, #52	; 0x34
 8000e4e:	2100      	movs	r1, #0
 8000e50:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e52:	230f      	movs	r3, #15
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	781b      	ldrb	r3, [r3, #0]
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b004      	add	sp, #16
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	00001001 	.word	0x00001001
 8000e64:	40012708 	.word	0x40012708
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	000f4240 	.word	0x000f4240
 8000e70:	ff7fffff 	.word	0xff7fffff
 8000e74:	ffbfffff 	.word	0xffbfffff

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	0002      	movs	r2, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e8c:	d828      	bhi.n	8000ee0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8e:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <__NVIC_SetPriority+0xd4>)
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	33c0      	adds	r3, #192	; 0xc0
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	589b      	ldr	r3, [r3, r2]
 8000e9e:	1dfa      	adds	r2, r7, #7
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	400a      	ands	r2, r1
 8000ea8:	00d2      	lsls	r2, r2, #3
 8000eaa:	21ff      	movs	r1, #255	; 0xff
 8000eac:	4091      	lsls	r1, r2
 8000eae:	000a      	movs	r2, r1
 8000eb0:	43d2      	mvns	r2, r2
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	019b      	lsls	r3, r3, #6
 8000eba:	22ff      	movs	r2, #255	; 0xff
 8000ebc:	401a      	ands	r2, r3
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	4003      	ands	r3, r0
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ecc:	481f      	ldr	r0, [pc, #124]	; (8000f4c <__NVIC_SetPriority+0xd4>)
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	33c0      	adds	r3, #192	; 0xc0
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ede:	e031      	b.n	8000f44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <__NVIC_SetPriority+0xd8>)
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	0019      	movs	r1, r3
 8000ee8:	230f      	movs	r3, #15
 8000eea:	400b      	ands	r3, r1
 8000eec:	3b08      	subs	r3, #8
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3306      	adds	r3, #6
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	18d3      	adds	r3, r2, r3
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	1dfa      	adds	r2, r7, #7
 8000efc:	7812      	ldrb	r2, [r2, #0]
 8000efe:	0011      	movs	r1, r2
 8000f00:	2203      	movs	r2, #3
 8000f02:	400a      	ands	r2, r1
 8000f04:	00d2      	lsls	r2, r2, #3
 8000f06:	21ff      	movs	r1, #255	; 0xff
 8000f08:	4091      	lsls	r1, r2
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	43d2      	mvns	r2, r2
 8000f0e:	401a      	ands	r2, r3
 8000f10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	019b      	lsls	r3, r3, #6
 8000f16:	22ff      	movs	r2, #255	; 0xff
 8000f18:	401a      	ands	r2, r3
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	0018      	movs	r0, r3
 8000f20:	2303      	movs	r3, #3
 8000f22:	4003      	ands	r3, r0
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f28:	4809      	ldr	r0, [pc, #36]	; (8000f50 <__NVIC_SetPriority+0xd8>)
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	001c      	movs	r4, r3
 8000f30:	230f      	movs	r3, #15
 8000f32:	4023      	ands	r3, r4
 8000f34:	3b08      	subs	r3, #8
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	3306      	adds	r3, #6
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	18c3      	adds	r3, r0, r3
 8000f40:	3304      	adds	r3, #4
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b003      	add	sp, #12
 8000f4a:	bd90      	pop	{r4, r7, pc}
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	1e5a      	subs	r2, r3, #1
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	045b      	lsls	r3, r3, #17
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d301      	bcc.n	8000f6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e010      	b.n	8000f8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <SysTick_Config+0x44>)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	3a01      	subs	r2, #1
 8000f72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f74:	2301      	movs	r3, #1
 8000f76:	425b      	negs	r3, r3
 8000f78:	2103      	movs	r1, #3
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff ff7c 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x44>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x44>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	1c02      	adds	r2, r0, #0
 8000fac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff ff5d 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b004      	add	sp, #16
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff ffbf 	bl	8000f54 <SysTick_Config>
 8000fd6:	0003      	movs	r3, r0
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e14f      	b.n	8001290 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4091      	lsls	r1, r2
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d100      	bne.n	8001008 <HAL_GPIO_Init+0x28>
 8001006:	e140      	b.n	800128a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2203      	movs	r2, #3
 800100e:	4013      	ands	r3, r2
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	409a      	lsls	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	43da      	mvns	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
 800105c:	0013      	movs	r3, r2
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	2201      	movs	r2, #1
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2203      	movs	r2, #3
 8001088:	4013      	ands	r3, r2
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	43da      	mvns	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2203      	movs	r2, #3
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	58d3      	ldr	r3, [r2, r3]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2207      	movs	r2, #7
 80010dc:	4013      	ands	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2107      	movs	r1, #7
 80010f6:	400b      	ands	r3, r1
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	6939      	ldr	r1, [r7, #16]
 8001110:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2203      	movs	r2, #3
 8001130:	401a      	ands	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	23c0      	movs	r3, #192	; 0xc0
 800114c:	029b      	lsls	r3, r3, #10
 800114e:	4013      	ands	r3, r2
 8001150:	d100      	bne.n	8001154 <HAL_GPIO_Init+0x174>
 8001152:	e09a      	b.n	800128a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 8001156:	699a      	ldr	r2, [r3, #24]
 8001158:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 800115a:	2101      	movs	r1, #1
 800115c:	430a      	orrs	r2, r1
 800115e:	619a      	str	r2, [r3, #24]
 8001160:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <HAL_GPIO_Init+0x2c8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2201      	movs	r2, #1
 8001166:	4013      	ands	r3, r2
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116c:	4a4f      	ldr	r2, [pc, #316]	; (80012ac <HAL_GPIO_Init+0x2cc>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	589b      	ldr	r3, [r3, r2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2203      	movs	r2, #3
 800117e:	4013      	ands	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	409a      	lsls	r2, r3
 8001186:	0013      	movs	r3, r2
 8001188:	43da      	mvns	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	2390      	movs	r3, #144	; 0x90
 8001194:	05db      	lsls	r3, r3, #23
 8001196:	429a      	cmp	r2, r3
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x1e2>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a44      	ldr	r2, [pc, #272]	; (80012b0 <HAL_GPIO_Init+0x2d0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x1de>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a43      	ldr	r2, [pc, #268]	; (80012b4 <HAL_GPIO_Init+0x2d4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x1da>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a42      	ldr	r2, [pc, #264]	; (80012b8 <HAL_GPIO_Init+0x2d8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x1d6>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011c2:	2300      	movs	r3, #0
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	2103      	movs	r1, #3
 80011c8:	400a      	ands	r2, r1
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d4:	4935      	ldr	r1, [pc, #212]	; (80012ac <HAL_GPIO_Init+0x2cc>)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43da      	mvns	r2, r3
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	035b      	lsls	r3, r3, #13
 80011fa:	4013      	ands	r3, r2
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800120c:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43da      	mvns	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	039b      	lsls	r3, r3, #14
 8001224:	4013      	ands	r3, r2
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43da      	mvns	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	029b      	lsls	r3, r3, #10
 800124e:	4013      	ands	r3, r2
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43da      	mvns	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	025b      	lsls	r3, r3, #9
 8001278:	4013      	ands	r3, r2
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e13      	subs	r3, r2, #0
 800129a:	d000      	beq.n	800129e <HAL_GPIO_Init+0x2be>
 800129c:	e6a8      	b.n	8000ff0 <HAL_GPIO_Init+0x10>
  } 
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b006      	add	sp, #24
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010000 	.word	0x40010000
 80012b0:	48000400 	.word	0x48000400
 80012b4:	48000800 	.word	0x48000800
 80012b8:	48000c00 	.word	0x48000c00
 80012bc:	40010400 	.word	0x40010400

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	0008      	movs	r0, r1
 80012ca:	0011      	movs	r1, r2
 80012cc:	1cbb      	adds	r3, r7, #2
 80012ce:	1c02      	adds	r2, r0, #0
 80012d0:	801a      	strh	r2, [r3, #0]
 80012d2:	1c7b      	adds	r3, r7, #1
 80012d4:	1c0a      	adds	r2, r1, #0
 80012d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d8:	1c7b      	adds	r3, r7, #1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d004      	beq.n	80012ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e0:	1cbb      	adds	r3, r7, #2
 80012e2:	881a      	ldrh	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ea:	1cbb      	adds	r3, r7, #2
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e305      	b.n	800191a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	4013      	ands	r3, r2
 8001316:	d100      	bne.n	800131a <HAL_RCC_OscConfig+0x1e>
 8001318:	e08d      	b.n	8001436 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800131a:	4bc5      	ldr	r3, [pc, #788]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	220c      	movs	r2, #12
 8001320:	4013      	ands	r3, r2
 8001322:	2b04      	cmp	r3, #4
 8001324:	d00e      	beq.n	8001344 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001326:	4bc2      	ldr	r3, [pc, #776]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	220c      	movs	r2, #12
 800132c:	4013      	ands	r3, r2
 800132e:	2b08      	cmp	r3, #8
 8001330:	d116      	bne.n	8001360 <HAL_RCC_OscConfig+0x64>
 8001332:	4bbf      	ldr	r3, [pc, #764]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	23c0      	movs	r3, #192	; 0xc0
 8001338:	025b      	lsls	r3, r3, #9
 800133a:	401a      	ands	r2, r3
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	025b      	lsls	r3, r3, #9
 8001340:	429a      	cmp	r2, r3
 8001342:	d10d      	bne.n	8001360 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	4bba      	ldr	r3, [pc, #744]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	029b      	lsls	r3, r3, #10
 800134c:	4013      	ands	r3, r2
 800134e:	d100      	bne.n	8001352 <HAL_RCC_OscConfig+0x56>
 8001350:	e070      	b.n	8001434 <HAL_RCC_OscConfig+0x138>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d000      	beq.n	800135c <HAL_RCC_OscConfig+0x60>
 800135a:	e06b      	b.n	8001434 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e2dc      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d107      	bne.n	8001378 <HAL_RCC_OscConfig+0x7c>
 8001368:	4bb1      	ldr	r3, [pc, #708]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4bb0      	ldr	r3, [pc, #704]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 800136e:	2180      	movs	r1, #128	; 0x80
 8001370:	0249      	lsls	r1, r1, #9
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e02f      	b.n	80013d8 <HAL_RCC_OscConfig+0xdc>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10c      	bne.n	800139a <HAL_RCC_OscConfig+0x9e>
 8001380:	4bab      	ldr	r3, [pc, #684]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4baa      	ldr	r3, [pc, #680]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001386:	49ab      	ldr	r1, [pc, #684]	; (8001634 <HAL_RCC_OscConfig+0x338>)
 8001388:	400a      	ands	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	4ba8      	ldr	r3, [pc, #672]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4ba7      	ldr	r3, [pc, #668]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001392:	49a9      	ldr	r1, [pc, #676]	; (8001638 <HAL_RCC_OscConfig+0x33c>)
 8001394:	400a      	ands	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e01e      	b.n	80013d8 <HAL_RCC_OscConfig+0xdc>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d10e      	bne.n	80013c0 <HAL_RCC_OscConfig+0xc4>
 80013a2:	4ba3      	ldr	r3, [pc, #652]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4ba2      	ldr	r3, [pc, #648]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	02c9      	lsls	r1, r1, #11
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	4b9f      	ldr	r3, [pc, #636]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b9e      	ldr	r3, [pc, #632]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	0249      	lsls	r1, r1, #9
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xdc>
 80013c0:	4b9b      	ldr	r3, [pc, #620]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b9a      	ldr	r3, [pc, #616]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80013c6:	499b      	ldr	r1, [pc, #620]	; (8001634 <HAL_RCC_OscConfig+0x338>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	4b98      	ldr	r3, [pc, #608]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b97      	ldr	r3, [pc, #604]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80013d2:	4999      	ldr	r1, [pc, #612]	; (8001638 <HAL_RCC_OscConfig+0x33c>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d014      	beq.n	800140a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fb0a 	bl	80009f8 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ea:	f7ff fb05 	bl	80009f8 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	; 0x64
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e28e      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fc:	4b8c      	ldr	r3, [pc, #560]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	029b      	lsls	r3, r3, #10
 8001404:	4013      	ands	r3, r2
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0xee>
 8001408:	e015      	b.n	8001436 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140a:	f7ff faf5 	bl	80009f8 <HAL_GetTick>
 800140e:	0003      	movs	r3, r0
 8001410:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff faf0 	bl	80009f8 <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e279      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	4b82      	ldr	r3, [pc, #520]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	4013      	ands	r3, r2
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x118>
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001434:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d100      	bne.n	8001442 <HAL_RCC_OscConfig+0x146>
 8001440:	e06c      	b.n	800151c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001442:	4b7b      	ldr	r3, [pc, #492]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	220c      	movs	r2, #12
 8001448:	4013      	ands	r3, r2
 800144a:	d00e      	beq.n	800146a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800144c:	4b78      	ldr	r3, [pc, #480]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	220c      	movs	r2, #12
 8001452:	4013      	ands	r3, r2
 8001454:	2b08      	cmp	r3, #8
 8001456:	d11f      	bne.n	8001498 <HAL_RCC_OscConfig+0x19c>
 8001458:	4b75      	ldr	r3, [pc, #468]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	23c0      	movs	r3, #192	; 0xc0
 800145e:	025b      	lsls	r3, r3, #9
 8001460:	401a      	ands	r2, r3
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	429a      	cmp	r2, r3
 8001468:	d116      	bne.n	8001498 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	4b71      	ldr	r3, [pc, #452]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2202      	movs	r2, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x184>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d001      	beq.n	8001480 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e24c      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b6b      	ldr	r3, [pc, #428]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	22f8      	movs	r2, #248	; 0xf8
 8001486:	4393      	bics	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	00da      	lsls	r2, r3, #3
 8001490:	4b67      	ldr	r3, [pc, #412]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	e041      	b.n	800151c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d024      	beq.n	80014ea <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a0:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b62      	ldr	r3, [pc, #392]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80014a6:	2101      	movs	r1, #1
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff faa4 	bl	80009f8 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fa9f 	bl	80009f8 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e228      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2202      	movs	r2, #2
 80014ce:	4013      	ands	r3, r2
 80014d0:	d0f1      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b57      	ldr	r3, [pc, #348]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	22f8      	movs	r2, #248	; 0xf8
 80014d8:	4393      	bics	r3, r2
 80014da:	0019      	movs	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	00da      	lsls	r2, r3, #3
 80014e2:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e018      	b.n	800151c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ea:	4b51      	ldr	r3, [pc, #324]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	438a      	bics	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fa7f 	bl	80009f8 <HAL_GetTick>
 80014fa:	0003      	movs	r3, r0
 80014fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fa7a 	bl	80009f8 <HAL_GetTick>
 8001504:	0002      	movs	r2, r0
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e203      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	d1f1      	bne.n	8001500 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2208      	movs	r2, #8
 8001522:	4013      	ands	r3, r2
 8001524:	d036      	beq.n	8001594 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d019      	beq.n	8001562 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152e:	4b40      	ldr	r3, [pc, #256]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001532:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001534:	2101      	movs	r1, #1
 8001536:	430a      	orrs	r2, r1
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff fa5d 	bl	80009f8 <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fa58 	bl	80009f8 <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1e1      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	4b36      	ldr	r3, [pc, #216]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d0f1      	beq.n	8001544 <HAL_RCC_OscConfig+0x248>
 8001560:	e018      	b.n	8001594 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001566:	4b32      	ldr	r3, [pc, #200]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001568:	2101      	movs	r1, #1
 800156a:	438a      	bics	r2, r1
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fa43 	bl	80009f8 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fa3e 	bl	80009f8 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1c7      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d1f1      	bne.n	8001578 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2204      	movs	r2, #4
 800159a:	4013      	ands	r3, r2
 800159c:	d100      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2a4>
 800159e:	e0b5      	b.n	800170c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a0:	201f      	movs	r0, #31
 80015a2:	183b      	adds	r3, r7, r0
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a8:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	055b      	lsls	r3, r3, #21
 80015b0:	4013      	ands	r3, r2
 80015b2:	d110      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	0549      	lsls	r1, r1, #21
 80015be:	430a      	orrs	r2, r1
 80015c0:	61da      	str	r2, [r3, #28]
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 80015c4:	69da      	ldr	r2, [r3, #28]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	055b      	lsls	r3, r3, #21
 80015ca:	4013      	ands	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015d0:	183b      	adds	r3, r7, r0
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_RCC_OscConfig+0x340>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4013      	ands	r3, r2
 80015e0:	d11a      	bne.n	8001618 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_RCC_OscConfig+0x340>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_RCC_OscConfig+0x340>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0049      	lsls	r1, r1, #1
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fa02 	bl	80009f8 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fa:	f7ff f9fd 	bl	80009f8 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b64      	cmp	r3, #100	; 0x64
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e186      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_RCC_OscConfig+0x340>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4013      	ands	r3, r2
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d10f      	bne.n	8001640 <HAL_RCC_OscConfig+0x344>
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <HAL_RCC_OscConfig+0x334>)
 8001626:	2101      	movs	r1, #1
 8001628:	430a      	orrs	r2, r1
 800162a:	621a      	str	r2, [r3, #32]
 800162c:	e036      	b.n	800169c <HAL_RCC_OscConfig+0x3a0>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	fffeffff 	.word	0xfffeffff
 8001638:	fffbffff 	.word	0xfffbffff
 800163c:	40007000 	.word	0x40007000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10c      	bne.n	8001662 <HAL_RCC_OscConfig+0x366>
 8001648:	4bb6      	ldr	r3, [pc, #728]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800164a:	6a1a      	ldr	r2, [r3, #32]
 800164c:	4bb5      	ldr	r3, [pc, #724]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800164e:	2101      	movs	r1, #1
 8001650:	438a      	bics	r2, r1
 8001652:	621a      	str	r2, [r3, #32]
 8001654:	4bb3      	ldr	r3, [pc, #716]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	4bb2      	ldr	r3, [pc, #712]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800165a:	2104      	movs	r1, #4
 800165c:	438a      	bics	r2, r1
 800165e:	621a      	str	r2, [r3, #32]
 8001660:	e01c      	b.n	800169c <HAL_RCC_OscConfig+0x3a0>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b05      	cmp	r3, #5
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x388>
 800166a:	4bae      	ldr	r3, [pc, #696]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800166c:	6a1a      	ldr	r2, [r3, #32]
 800166e:	4bad      	ldr	r3, [pc, #692]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001670:	2104      	movs	r1, #4
 8001672:	430a      	orrs	r2, r1
 8001674:	621a      	str	r2, [r3, #32]
 8001676:	4bab      	ldr	r3, [pc, #684]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001678:	6a1a      	ldr	r2, [r3, #32]
 800167a:	4baa      	ldr	r3, [pc, #680]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800167c:	2101      	movs	r1, #1
 800167e:	430a      	orrs	r2, r1
 8001680:	621a      	str	r2, [r3, #32]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0x3a0>
 8001684:	4ba7      	ldr	r3, [pc, #668]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001686:	6a1a      	ldr	r2, [r3, #32]
 8001688:	4ba6      	ldr	r3, [pc, #664]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800168a:	2101      	movs	r1, #1
 800168c:	438a      	bics	r2, r1
 800168e:	621a      	str	r2, [r3, #32]
 8001690:	4ba4      	ldr	r3, [pc, #656]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001692:	6a1a      	ldr	r2, [r3, #32]
 8001694:	4ba3      	ldr	r3, [pc, #652]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001696:	2104      	movs	r1, #4
 8001698:	438a      	bics	r2, r1
 800169a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d014      	beq.n	80016ce <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a4:	f7ff f9a8 	bl	80009f8 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ac:	e009      	b.n	80016c2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ae:	f7ff f9a3 	bl	80009f8 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	4a9b      	ldr	r2, [pc, #620]	; (8001928 <HAL_RCC_OscConfig+0x62c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e12b      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c2:	4b98      	ldr	r3, [pc, #608]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x3b2>
 80016cc:	e013      	b.n	80016f6 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff f993 	bl	80009f8 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d6:	e009      	b.n	80016ec <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff f98e 	bl	80009f8 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	4a91      	ldr	r2, [pc, #580]	; (8001928 <HAL_RCC_OscConfig+0x62c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e116      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ec:	4b8d      	ldr	r3, [pc, #564]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016f6:	231f      	movs	r3, #31
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d105      	bne.n	800170c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001700:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001702:	69da      	ldr	r2, [r3, #28]
 8001704:	4b87      	ldr	r3, [pc, #540]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001706:	4989      	ldr	r1, [pc, #548]	; (800192c <HAL_RCC_OscConfig+0x630>)
 8001708:	400a      	ands	r2, r1
 800170a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2210      	movs	r2, #16
 8001712:	4013      	ands	r3, r2
 8001714:	d063      	beq.n	80017de <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d12a      	bne.n	8001774 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800171e:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001722:	4b80      	ldr	r3, [pc, #512]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001724:	2104      	movs	r1, #4
 8001726:	430a      	orrs	r2, r1
 8001728:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800172a:	4b7e      	ldr	r3, [pc, #504]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800172c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800172e:	4b7d      	ldr	r3, [pc, #500]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001730:	2101      	movs	r1, #1
 8001732:	430a      	orrs	r2, r1
 8001734:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001736:	f7ff f95f 	bl	80009f8 <HAL_GetTick>
 800173a:	0003      	movs	r3, r0
 800173c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001740:	f7ff f95a 	bl	80009f8 <HAL_GetTick>
 8001744:	0002      	movs	r2, r0
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e0e3      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001752:	4b74      	ldr	r3, [pc, #464]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001756:	2202      	movs	r2, #2
 8001758:	4013      	ands	r3, r2
 800175a:	d0f1      	beq.n	8001740 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800175c:	4b71      	ldr	r3, [pc, #452]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	22f8      	movs	r2, #248	; 0xf8
 8001762:	4393      	bics	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	00da      	lsls	r2, r3, #3
 800176c:	4b6d      	ldr	r3, [pc, #436]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800176e:	430a      	orrs	r2, r1
 8001770:	635a      	str	r2, [r3, #52]	; 0x34
 8001772:	e034      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	3305      	adds	r3, #5
 800177a:	d111      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800177c:	4b69      	ldr	r3, [pc, #420]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800177e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001782:	2104      	movs	r1, #4
 8001784:	438a      	bics	r2, r1
 8001786:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001788:	4b66      	ldr	r3, [pc, #408]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178c:	22f8      	movs	r2, #248	; 0xf8
 800178e:	4393      	bics	r3, r2
 8001790:	0019      	movs	r1, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	00da      	lsls	r2, r3, #3
 8001798:	4b62      	ldr	r3, [pc, #392]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800179a:	430a      	orrs	r2, r1
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
 800179e:	e01e      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017a0:	4b60      	ldr	r3, [pc, #384]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 80017a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a4:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 80017a6:	2104      	movs	r1, #4
 80017a8:	430a      	orrs	r2, r1
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017ac:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 80017ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b0:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	438a      	bics	r2, r1
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b8:	f7ff f91e 	bl	80009f8 <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017c2:	f7ff f919 	bl	80009f8 <HAL_GetTick>
 80017c6:	0002      	movs	r2, r0
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e0a2      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d1f1      	bne.n	80017c2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d100      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4ec>
 80017e6:	e097      	b.n	8001918 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e8:	4b4e      	ldr	r3, [pc, #312]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	220c      	movs	r2, #12
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d100      	bne.n	80017f6 <HAL_RCC_OscConfig+0x4fa>
 80017f4:	e06b      	b.n	80018ce <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d14c      	bne.n	8001898 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b48      	ldr	r3, [pc, #288]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001804:	494a      	ldr	r1, [pc, #296]	; (8001930 <HAL_RCC_OscConfig+0x634>)
 8001806:	400a      	ands	r2, r1
 8001808:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7ff f8f5 	bl	80009f8 <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff f8f0 	bl	80009f8 <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e079      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	049b      	lsls	r3, r3, #18
 800182e:	4013      	ands	r3, r2
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001832:	4b3c      	ldr	r3, [pc, #240]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	220f      	movs	r2, #15
 8001838:	4393      	bics	r3, r2
 800183a:	0019      	movs	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001840:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001842:	430a      	orrs	r2, r1
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4a3a      	ldr	r2, [pc, #232]	; (8001934 <HAL_RCC_OscConfig+0x638>)
 800184c:	4013      	ands	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	431a      	orrs	r2, r3
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800185c:	430a      	orrs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b2f      	ldr	r3, [pc, #188]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	0449      	lsls	r1, r1, #17
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff f8c3 	bl	80009f8 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f8be 	bl	80009f8 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e047      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	049b      	lsls	r3, r3, #18
 8001892:	4013      	ands	r3, r2
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x57c>
 8001896:	e03f      	b.n	8001918 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 800189e:	4924      	ldr	r1, [pc, #144]	; (8001930 <HAL_RCC_OscConfig+0x634>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff f8a8 	bl	80009f8 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff f8a3 	bl	80009f8 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e02c      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	049b      	lsls	r3, r3, #18
 80018c8:	4013      	ands	r3, r2
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x5b2>
 80018cc:	e024      	b.n	8001918 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e01f      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_RCC_OscConfig+0x628>)
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	23c0      	movs	r3, #192	; 0xc0
 80018ea:	025b      	lsls	r3, r3, #9
 80018ec:	401a      	ands	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d10e      	bne.n	8001914 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	220f      	movs	r2, #15
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d107      	bne.n	8001914 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	23f0      	movs	r3, #240	; 0xf0
 8001908:	039b      	lsls	r3, r3, #14
 800190a:	401a      	ands	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	b008      	add	sp, #32
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	40021000 	.word	0x40021000
 8001928:	00001388 	.word	0x00001388
 800192c:	efffffff 	.word	0xefffffff
 8001930:	feffffff 	.word	0xfeffffff
 8001934:	ffc27fff 	.word	0xffc27fff

08001938 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0b3      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800194c:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_RCC_ClockConfig+0x184>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	4013      	ands	r3, r2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d911      	bls.n	800197e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_RCC_ClockConfig+0x184>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2201      	movs	r2, #1
 8001960:	4393      	bics	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	4b55      	ldr	r3, [pc, #340]	; (8001abc <HAL_RCC_ClockConfig+0x184>)
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_ClockConfig+0x184>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	4013      	ands	r3, r2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d001      	beq.n	800197e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e09a      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	d015      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2204      	movs	r2, #4
 800198e:	4013      	ands	r3, r2
 8001990:	d006      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001992:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 8001998:	21e0      	movs	r1, #224	; 0xe0
 800199a:	00c9      	lsls	r1, r1, #3
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	22f0      	movs	r2, #240	; 0xf0
 80019a6:	4393      	bics	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	4b44      	ldr	r3, [pc, #272]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	d040      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b3e      	ldr	r3, [pc, #248]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	029b      	lsls	r3, r3, #10
 80019ce:	4013      	ands	r3, r2
 80019d0:	d114      	bne.n	80019fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e06e      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	049b      	lsls	r3, r3, #18
 80019e6:	4013      	ands	r3, r2
 80019e8:	d108      	bne.n	80019fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e062      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e05b      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fc:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2203      	movs	r2, #3
 8001a02:	4393      	bics	r3, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a10:	f7fe fff2 	bl	80009f8 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1a:	f7fe ffed 	bl	80009f8 <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	4a27      	ldr	r2, [pc, #156]	; (8001ac4 <HAL_RCC_ClockConfig+0x18c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e042      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	220c      	movs	r2, #12
 8001a34:	401a      	ands	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1ec      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <HAL_RCC_ClockConfig+0x184>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2201      	movs	r2, #1
 8001a46:	4013      	ands	r3, r2
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d211      	bcs.n	8001a72 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_RCC_ClockConfig+0x184>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2201      	movs	r2, #1
 8001a54:	4393      	bics	r3, r2
 8001a56:	0019      	movs	r1, r3
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_RCC_ClockConfig+0x184>)
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_RCC_ClockConfig+0x184>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2201      	movs	r2, #1
 8001a66:	4013      	ands	r3, r2
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e020      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2204      	movs	r2, #4
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d009      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <HAL_RCC_ClockConfig+0x190>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a90:	f000 f820 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a94:	0001      	movs	r1, r0
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_RCC_ClockConfig+0x188>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	091b      	lsrs	r3, r3, #4
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <HAL_RCC_ClockConfig+0x194>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	40da      	lsrs	r2, r3
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x198>)
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001aac:	2003      	movs	r0, #3
 8001aae:	f7fe ff5d 	bl	800096c <HAL_InitTick>
  
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b004      	add	sp, #16
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	00001388 	.word	0x00001388
 8001ac8:	fffff8ff 	.word	0xfffff8ff
 8001acc:	08003018 	.word	0x08003018
 8001ad0:	20000000 	.word	0x20000000

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	220c      	movs	r2, #12
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x30>
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x36>
 8001b02:	e02e      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b06:	613b      	str	r3, [r7, #16]
      break;
 8001b08:	e02e      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	0c9b      	lsrs	r3, r3, #18
 8001b0e:	220f      	movs	r2, #15
 8001b10:	4013      	ands	r3, r2
 8001b12:	4a1a      	ldr	r2, [pc, #104]	; (8001b7c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	4013      	ands	r3, r2
 8001b20:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	23c0      	movs	r3, #192	; 0xc0
 8001b2a:	025b      	lsls	r3, r3, #9
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	025b      	lsls	r3, r3, #9
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b36:	68b9      	ldr	r1, [r7, #8]
 8001b38:	480f      	ldr	r0, [pc, #60]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b3a:	f7fe fae3 	bl	8000104 <__udivsi3>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	001a      	movs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4353      	muls	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	480a      	ldr	r0, [pc, #40]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b4e:	f7fe fad9 	bl	8000104 <__udivsi3>
 8001b52:	0003      	movs	r3, r0
 8001b54:	001a      	movs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4353      	muls	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
      break;
 8001b60:	e002      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b64:	613b      	str	r3, [r7, #16]
      break;
 8001b66:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b68:	693b      	ldr	r3, [r7, #16]
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b006      	add	sp, #24
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	40021000 	.word	0x40021000
 8001b78:	007a1200 	.word	0x007a1200
 8001b7c:	08003030 	.word	0x08003030
 8001b80:	08003040 	.word	0x08003040

08001b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b88:	4b02      	ldr	r3, [pc, #8]	; (8001b94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	20000000 	.word	0x20000000

08001b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b9c:	f7ff fff2 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001ba0:	0001      	movs	r1, r0
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	2207      	movs	r2, #7
 8001baa:	4013      	ands	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	40d9      	lsrs	r1, r3
 8001bb2:	000b      	movs	r3, r1
}    
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	08003028 	.word	0x08003028

08001bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e042      	b.n	8001c5c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	223d      	movs	r2, #61	; 0x3d
 8001bda:	5c9b      	ldrb	r3, [r3, r2]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	223c      	movs	r2, #60	; 0x3c
 8001be6:	2100      	movs	r1, #0
 8001be8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7fe fdb5 	bl	800075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	223d      	movs	r2, #61	; 0x3d
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3304      	adds	r3, #4
 8001c02:	0019      	movs	r1, r3
 8001c04:	0010      	movs	r0, r2
 8001c06:	f000 fa1f 	bl	8002048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2246      	movs	r2, #70	; 0x46
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	223e      	movs	r2, #62	; 0x3e
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	223f      	movs	r2, #63	; 0x3f
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2240      	movs	r2, #64	; 0x40
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2241      	movs	r2, #65	; 0x41
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2242      	movs	r2, #66	; 0x42
 8001c36:	2101      	movs	r1, #1
 8001c38:	5499      	strb	r1, [r3, r2]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2243      	movs	r2, #67	; 0x43
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2244      	movs	r2, #68	; 0x44
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2245      	movs	r2, #69	; 0x45
 8001c4e:	2101      	movs	r1, #1
 8001c50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	223d      	movs	r2, #61	; 0x3d
 8001c56:	2101      	movs	r1, #1
 8001c58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e042      	b.n	8001cfc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	223d      	movs	r2, #61	; 0x3d
 8001c7a:	5c9b      	ldrb	r3, [r3, r2]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d107      	bne.n	8001c92 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	223c      	movs	r2, #60	; 0x3c
 8001c86:	2100      	movs	r1, #0
 8001c88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f839 	bl	8001d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	223d      	movs	r2, #61	; 0x3d
 8001c96:	2102      	movs	r1, #2
 8001c98:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	0010      	movs	r0, r2
 8001ca6:	f000 f9cf 	bl	8002048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2246      	movs	r2, #70	; 0x46
 8001cae:	2101      	movs	r1, #1
 8001cb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	223e      	movs	r2, #62	; 0x3e
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	5499      	strb	r1, [r3, r2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	223f      	movs	r2, #63	; 0x3f
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2240      	movs	r2, #64	; 0x40
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2241      	movs	r2, #65	; 0x41
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2242      	movs	r2, #66	; 0x42
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2243      	movs	r2, #67	; 0x43
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2244      	movs	r2, #68	; 0x44
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2245      	movs	r2, #69	; 0x45
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	223d      	movs	r2, #61	; 0x3d
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b002      	add	sp, #8
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d20:	2317      	movs	r3, #23
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	223c      	movs	r2, #60	; 0x3c
 8001d2c:	5c9b      	ldrb	r3, [r3, r2]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e0ad      	b.n	8001e92 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	223c      	movs	r2, #60	; 0x3c
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d100      	bne.n	8001d46 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001d44:	e076      	b.n	8001e34 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0c      	cmp	r3, #12
 8001d4a:	d900      	bls.n	8001d4e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001d4c:	e095      	b.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d04e      	beq.n	8001df2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d900      	bls.n	8001d5c <HAL_TIM_PWM_ConfigChannel+0x48>
 8001d5a:	e08e      	b.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_PWM_ConfigChannel+0x56>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d021      	beq.n	8001dac <HAL_TIM_PWM_ConfigChannel+0x98>
 8001d68:	e087      	b.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	0011      	movs	r1, r2
 8001d72:	0018      	movs	r0, r3
 8001d74:	f000 f9de 	bl	8002134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2108      	movs	r1, #8
 8001d84:	430a      	orrs	r2, r1
 8001d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2104      	movs	r1, #4
 8001d94:	438a      	bics	r2, r1
 8001d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6999      	ldr	r1, [r3, #24]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	619a      	str	r2, [r3, #24]
      break;
 8001daa:	e06b      	b.n	8001e84 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	0011      	movs	r1, r2
 8001db4:	0018      	movs	r0, r3
 8001db6:	f000 fa45 	bl	8002244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2180      	movs	r1, #128	; 0x80
 8001dc6:	0109      	lsls	r1, r1, #4
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4931      	ldr	r1, [pc, #196]	; (8001e9c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6999      	ldr	r1, [r3, #24]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	021a      	lsls	r2, r3, #8
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	619a      	str	r2, [r3, #24]
      break;
 8001df0:	e048      	b.n	8001e84 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	0011      	movs	r1, r2
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 faa6 	bl	800234c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2108      	movs	r1, #8
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	438a      	bics	r2, r1
 8001e1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69d9      	ldr	r1, [r3, #28]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	61da      	str	r2, [r3, #28]
      break;
 8001e32:	e027      	b.n	8001e84 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 fb0b 	bl	8002458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0109      	lsls	r1, r1, #4
 8001e50:	430a      	orrs	r2, r1
 8001e52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	490f      	ldr	r1, [pc, #60]	; (8001e9c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001e60:	400a      	ands	r2, r1
 8001e62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69d9      	ldr	r1, [r3, #28]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	021a      	lsls	r2, r3, #8
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	61da      	str	r2, [r3, #28]
      break;
 8001e78:	e004      	b.n	8001e84 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001e7a:	2317      	movs	r3, #23
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
      break;
 8001e82:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	223c      	movs	r2, #60	; 0x3c
 8001e88:	2100      	movs	r1, #0
 8001e8a:	5499      	strb	r1, [r3, r2]

  return status;
 8001e8c:	2317      	movs	r3, #23
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	781b      	ldrb	r3, [r3, #0]
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b006      	add	sp, #24
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	fffffbff 	.word	0xfffffbff

08001ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eaa:	230f      	movs	r3, #15
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	223c      	movs	r2, #60	; 0x3c
 8001eb6:	5c9b      	ldrb	r3, [r3, r2]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_TIM_ConfigClockSource+0x20>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e0bc      	b.n	800203a <HAL_TIM_ConfigClockSource+0x19a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	223c      	movs	r2, #60	; 0x3c
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	223d      	movs	r2, #61	; 0x3d
 8001ecc:	2102      	movs	r1, #2
 8001ece:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2277      	movs	r2, #119	; 0x77
 8001edc:	4393      	bics	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4a58      	ldr	r2, [pc, #352]	; (8002044 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	0192      	lsls	r2, r2, #6
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d040      	beq.n	8001f7e <HAL_TIM_ConfigClockSource+0xde>
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	0192      	lsls	r2, r2, #6
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d900      	bls.n	8001f06 <HAL_TIM_ConfigClockSource+0x66>
 8001f04:	e088      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x178>
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	0152      	lsls	r2, r2, #5
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d100      	bne.n	8001f10 <HAL_TIM_ConfigClockSource+0x70>
 8001f0e:	e088      	b.n	8002022 <HAL_TIM_ConfigClockSource+0x182>
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	0152      	lsls	r2, r2, #5
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d900      	bls.n	8001f1a <HAL_TIM_ConfigClockSource+0x7a>
 8001f18:	e07e      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x178>
 8001f1a:	2b70      	cmp	r3, #112	; 0x70
 8001f1c:	d018      	beq.n	8001f50 <HAL_TIM_ConfigClockSource+0xb0>
 8001f1e:	d900      	bls.n	8001f22 <HAL_TIM_ConfigClockSource+0x82>
 8001f20:	e07a      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x178>
 8001f22:	2b60      	cmp	r3, #96	; 0x60
 8001f24:	d04f      	beq.n	8001fc6 <HAL_TIM_ConfigClockSource+0x126>
 8001f26:	d900      	bls.n	8001f2a <HAL_TIM_ConfigClockSource+0x8a>
 8001f28:	e076      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x178>
 8001f2a:	2b50      	cmp	r3, #80	; 0x50
 8001f2c:	d03b      	beq.n	8001fa6 <HAL_TIM_ConfigClockSource+0x106>
 8001f2e:	d900      	bls.n	8001f32 <HAL_TIM_ConfigClockSource+0x92>
 8001f30:	e072      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x178>
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	d057      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x146>
 8001f36:	d900      	bls.n	8001f3a <HAL_TIM_ConfigClockSource+0x9a>
 8001f38:	e06e      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x178>
 8001f3a:	2b30      	cmp	r3, #48	; 0x30
 8001f3c:	d063      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x166>
 8001f3e:	d86b      	bhi.n	8002018 <HAL_TIM_ConfigClockSource+0x178>
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d060      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x166>
 8001f44:	d868      	bhi.n	8002018 <HAL_TIM_ConfigClockSource+0x178>
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d05d      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x166>
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d05b      	beq.n	8002006 <HAL_TIM_ConfigClockSource+0x166>
 8001f4e:	e063      	b.n	8002018 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f60:	f000 fb5e 	bl	8002620 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2277      	movs	r2, #119	; 0x77
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	609a      	str	r2, [r3, #8]
      break;
 8001f7c:	e052      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f8e:	f000 fb47 	bl	8002620 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	01c9      	lsls	r1, r1, #7
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	609a      	str	r2, [r3, #8]
      break;
 8001fa4:	e03e      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	f000 faba 	bl	800252c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2150      	movs	r1, #80	; 0x50
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 fb14 	bl	80025ec <TIM_ITRx_SetConfig>
      break;
 8001fc4:	e02e      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	f000 fad8 	bl	8002588 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2160      	movs	r1, #96	; 0x60
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 fb04 	bl	80025ec <TIM_ITRx_SetConfig>
      break;
 8001fe4:	e01e      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	f000 fa9a 	bl	800252c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2140      	movs	r1, #64	; 0x40
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 faf4 	bl	80025ec <TIM_ITRx_SetConfig>
      break;
 8002004:	e00e      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0019      	movs	r1, r3
 8002010:	0010      	movs	r0, r2
 8002012:	f000 faeb 	bl	80025ec <TIM_ITRx_SetConfig>
      break;
 8002016:	e005      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002018:	230f      	movs	r3, #15
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
      break;
 8002020:	e000      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002022:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	223d      	movs	r2, #61	; 0x3d
 8002028:	2101      	movs	r1, #1
 800202a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	223c      	movs	r2, #60	; 0x3c
 8002030:	2100      	movs	r1, #0
 8002032:	5499      	strb	r1, [r3, r2]

  return status;
 8002034:	230f      	movs	r3, #15
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	781b      	ldrb	r3, [r3, #0]
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b004      	add	sp, #16
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	ffff00ff 	.word	0xffff00ff

08002048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <TIM_Base_SetConfig+0xd0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <TIM_Base_SetConfig+0x20>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a2e      	ldr	r2, [pc, #184]	; (800211c <TIM_Base_SetConfig+0xd4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d108      	bne.n	800207a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2270      	movs	r2, #112	; 0x70
 800206c:	4393      	bics	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a26      	ldr	r2, [pc, #152]	; (8002118 <TIM_Base_SetConfig+0xd0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <TIM_Base_SetConfig+0x62>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a25      	ldr	r2, [pc, #148]	; (800211c <TIM_Base_SetConfig+0xd4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00f      	beq.n	80020aa <TIM_Base_SetConfig+0x62>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a24      	ldr	r2, [pc, #144]	; (8002120 <TIM_Base_SetConfig+0xd8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00b      	beq.n	80020aa <TIM_Base_SetConfig+0x62>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a23      	ldr	r2, [pc, #140]	; (8002124 <TIM_Base_SetConfig+0xdc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <TIM_Base_SetConfig+0x62>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a22      	ldr	r2, [pc, #136]	; (8002128 <TIM_Base_SetConfig+0xe0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d003      	beq.n	80020aa <TIM_Base_SetConfig+0x62>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a21      	ldr	r2, [pc, #132]	; (800212c <TIM_Base_SetConfig+0xe4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d108      	bne.n	80020bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4a20      	ldr	r2, [pc, #128]	; (8002130 <TIM_Base_SetConfig+0xe8>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	4393      	bics	r3, r2
 80020c2:	001a      	movs	r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <TIM_Base_SetConfig+0xd0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00b      	beq.n	8002102 <TIM_Base_SetConfig+0xba>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <TIM_Base_SetConfig+0xdc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d007      	beq.n	8002102 <TIM_Base_SetConfig+0xba>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <TIM_Base_SetConfig+0xe0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d003      	beq.n	8002102 <TIM_Base_SetConfig+0xba>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a0b      	ldr	r2, [pc, #44]	; (800212c <TIM_Base_SetConfig+0xe4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d103      	bne.n	800210a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	615a      	str	r2, [r3, #20]
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b004      	add	sp, #16
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40012c00 	.word	0x40012c00
 800211c:	40000400 	.word	0x40000400
 8002120:	40002000 	.word	0x40002000
 8002124:	40014000 	.word	0x40014000
 8002128:	40014400 	.word	0x40014400
 800212c:	40014800 	.word	0x40014800
 8002130:	fffffcff 	.word	0xfffffcff

08002134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	2201      	movs	r2, #1
 8002144:	4393      	bics	r3, r2
 8002146:	001a      	movs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2270      	movs	r2, #112	; 0x70
 8002162:	4393      	bics	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2203      	movs	r2, #3
 800216a:	4393      	bics	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2202      	movs	r2, #2
 800217c:	4393      	bics	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <TIM_OC1_SetConfig+0xf8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00b      	beq.n	80021aa <TIM_OC1_SetConfig+0x76>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a26      	ldr	r2, [pc, #152]	; (8002230 <TIM_OC1_SetConfig+0xfc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <TIM_OC1_SetConfig+0x76>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a25      	ldr	r2, [pc, #148]	; (8002234 <TIM_OC1_SetConfig+0x100>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d003      	beq.n	80021aa <TIM_OC1_SetConfig+0x76>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a24      	ldr	r2, [pc, #144]	; (8002238 <TIM_OC1_SetConfig+0x104>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10c      	bne.n	80021c4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2208      	movs	r2, #8
 80021ae:	4393      	bics	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2204      	movs	r2, #4
 80021c0:	4393      	bics	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a19      	ldr	r2, [pc, #100]	; (800222c <TIM_OC1_SetConfig+0xf8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00b      	beq.n	80021e4 <TIM_OC1_SetConfig+0xb0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a18      	ldr	r2, [pc, #96]	; (8002230 <TIM_OC1_SetConfig+0xfc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <TIM_OC1_SetConfig+0xb0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a17      	ldr	r2, [pc, #92]	; (8002234 <TIM_OC1_SetConfig+0x100>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <TIM_OC1_SetConfig+0xb0>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a16      	ldr	r2, [pc, #88]	; (8002238 <TIM_OC1_SetConfig+0x104>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d111      	bne.n	8002208 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4a15      	ldr	r2, [pc, #84]	; (800223c <TIM_OC1_SetConfig+0x108>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4a14      	ldr	r2, [pc, #80]	; (8002240 <TIM_OC1_SetConfig+0x10c>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	621a      	str	r2, [r3, #32]
}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	46bd      	mov	sp, r7
 8002226:	b006      	add	sp, #24
 8002228:	bd80      	pop	{r7, pc}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	40012c00 	.word	0x40012c00
 8002230:	40014000 	.word	0x40014000
 8002234:	40014400 	.word	0x40014400
 8002238:	40014800 	.word	0x40014800
 800223c:	fffffeff 	.word	0xfffffeff
 8002240:	fffffdff 	.word	0xfffffdff

08002244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	2210      	movs	r2, #16
 8002254:	4393      	bics	r3, r2
 8002256:	001a      	movs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a2e      	ldr	r2, [pc, #184]	; (800232c <TIM_OC2_SetConfig+0xe8>)
 8002272:	4013      	ands	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a2d      	ldr	r2, [pc, #180]	; (8002330 <TIM_OC2_SetConfig+0xec>)
 800227a:	4013      	ands	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2220      	movs	r2, #32
 800228e:	4393      	bics	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a24      	ldr	r2, [pc, #144]	; (8002334 <TIM_OC2_SetConfig+0xf0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10d      	bne.n	80022c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	4393      	bics	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2240      	movs	r2, #64	; 0x40
 80022be:	4393      	bics	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <TIM_OC2_SetConfig+0xf0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00b      	beq.n	80022e2 <TIM_OC2_SetConfig+0x9e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <TIM_OC2_SetConfig+0xf4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <TIM_OC2_SetConfig+0x9e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <TIM_OC2_SetConfig+0xf8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d003      	beq.n	80022e2 <TIM_OC2_SetConfig+0x9e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a18      	ldr	r2, [pc, #96]	; (8002340 <TIM_OC2_SetConfig+0xfc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d113      	bne.n	800230a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4a17      	ldr	r2, [pc, #92]	; (8002344 <TIM_OC2_SetConfig+0x100>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4a16      	ldr	r2, [pc, #88]	; (8002348 <TIM_OC2_SetConfig+0x104>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	621a      	str	r2, [r3, #32]
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b006      	add	sp, #24
 800232a:	bd80      	pop	{r7, pc}
 800232c:	ffff8fff 	.word	0xffff8fff
 8002330:	fffffcff 	.word	0xfffffcff
 8002334:	40012c00 	.word	0x40012c00
 8002338:	40014000 	.word	0x40014000
 800233c:	40014400 	.word	0x40014400
 8002340:	40014800 	.word	0x40014800
 8002344:	fffffbff 	.word	0xfffffbff
 8002348:	fffff7ff 	.word	0xfffff7ff

0800234c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a35      	ldr	r2, [pc, #212]	; (8002430 <TIM_OC3_SetConfig+0xe4>)
 800235c:	401a      	ands	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2270      	movs	r2, #112	; 0x70
 8002378:	4393      	bics	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2203      	movs	r2, #3
 8002380:	4393      	bics	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	4a28      	ldr	r2, [pc, #160]	; (8002434 <TIM_OC3_SetConfig+0xe8>)
 8002392:	4013      	ands	r3, r2
 8002394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a24      	ldr	r2, [pc, #144]	; (8002438 <TIM_OC3_SetConfig+0xec>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10d      	bne.n	80023c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4a23      	ldr	r2, [pc, #140]	; (800243c <TIM_OC3_SetConfig+0xf0>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <TIM_OC3_SetConfig+0xf4>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <TIM_OC3_SetConfig+0xec>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00b      	beq.n	80023e6 <TIM_OC3_SetConfig+0x9a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <TIM_OC3_SetConfig+0xf8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <TIM_OC3_SetConfig+0x9a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <TIM_OC3_SetConfig+0xfc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d003      	beq.n	80023e6 <TIM_OC3_SetConfig+0x9a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1a      	ldr	r2, [pc, #104]	; (800244c <TIM_OC3_SetConfig+0x100>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d113      	bne.n	800240e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <TIM_OC3_SetConfig+0x104>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4a18      	ldr	r2, [pc, #96]	; (8002454 <TIM_OC3_SetConfig+0x108>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	621a      	str	r2, [r3, #32]
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b006      	add	sp, #24
 800242e:	bd80      	pop	{r7, pc}
 8002430:	fffffeff 	.word	0xfffffeff
 8002434:	fffffdff 	.word	0xfffffdff
 8002438:	40012c00 	.word	0x40012c00
 800243c:	fffff7ff 	.word	0xfffff7ff
 8002440:	fffffbff 	.word	0xfffffbff
 8002444:	40014000 	.word	0x40014000
 8002448:	40014400 	.word	0x40014400
 800244c:	40014800 	.word	0x40014800
 8002450:	ffffefff 	.word	0xffffefff
 8002454:	ffffdfff 	.word	0xffffdfff

08002458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a28      	ldr	r2, [pc, #160]	; (8002508 <TIM_OC4_SetConfig+0xb0>)
 8002468:	401a      	ands	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4a22      	ldr	r2, [pc, #136]	; (800250c <TIM_OC4_SetConfig+0xb4>)
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <TIM_OC4_SetConfig+0xb8>)
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <TIM_OC4_SetConfig+0xbc>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	031b      	lsls	r3, r3, #12
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a19      	ldr	r2, [pc, #100]	; (8002518 <TIM_OC4_SetConfig+0xc0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00b      	beq.n	80024d0 <TIM_OC4_SetConfig+0x78>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <TIM_OC4_SetConfig+0xc4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d007      	beq.n	80024d0 <TIM_OC4_SetConfig+0x78>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a17      	ldr	r2, [pc, #92]	; (8002520 <TIM_OC4_SetConfig+0xc8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d003      	beq.n	80024d0 <TIM_OC4_SetConfig+0x78>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a16      	ldr	r2, [pc, #88]	; (8002524 <TIM_OC4_SetConfig+0xcc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d109      	bne.n	80024e4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	4a15      	ldr	r2, [pc, #84]	; (8002528 <TIM_OC4_SetConfig+0xd0>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	019b      	lsls	r3, r3, #6
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	621a      	str	r2, [r3, #32]
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b006      	add	sp, #24
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	ffffefff 	.word	0xffffefff
 800250c:	ffff8fff 	.word	0xffff8fff
 8002510:	fffffcff 	.word	0xfffffcff
 8002514:	ffffdfff 	.word	0xffffdfff
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40014000 	.word	0x40014000
 8002520:	40014400 	.word	0x40014400
 8002524:	40014800 	.word	0x40014800
 8002528:	ffffbfff 	.word	0xffffbfff

0800252c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	2201      	movs	r2, #1
 8002544:	4393      	bics	r3, r2
 8002546:	001a      	movs	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	22f0      	movs	r2, #240	; 0xf0
 8002556:	4393      	bics	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	220a      	movs	r2, #10
 8002568:	4393      	bics	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	621a      	str	r2, [r3, #32]
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b006      	add	sp, #24
 8002586:	bd80      	pop	{r7, pc}

08002588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	2210      	movs	r2, #16
 800259a:	4393      	bics	r3, r2
 800259c:	001a      	movs	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <TIM_TI2_ConfigInputStage+0x60>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	031b      	lsls	r3, r3, #12
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	22a0      	movs	r2, #160	; 0xa0
 80025c4:	4393      	bics	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	621a      	str	r2, [r3, #32]
}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b006      	add	sp, #24
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	ffff0fff 	.word	0xffff0fff

080025ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2270      	movs	r2, #112	; 0x70
 8002600:	4393      	bics	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	2207      	movs	r2, #7
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	609a      	str	r2, [r3, #8]
}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b004      	add	sp, #16
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	4a09      	ldr	r2, [pc, #36]	; (800265c <TIM_ETR_SetConfig+0x3c>)
 8002638:	4013      	ands	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	021a      	lsls	r2, r3, #8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	431a      	orrs	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4313      	orrs	r3, r2
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	609a      	str	r2, [r3, #8]
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b006      	add	sp, #24
 800265a:	bd80      	pop	{r7, pc}
 800265c:	ffff00ff 	.word	0xffff00ff

08002660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	223c      	movs	r2, #60	; 0x3c
 800266e:	5c9b      	ldrb	r3, [r3, r2]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002674:	2302      	movs	r3, #2
 8002676:	e041      	b.n	80026fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	223c      	movs	r2, #60	; 0x3c
 800267c:	2101      	movs	r1, #1
 800267e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	223d      	movs	r2, #61	; 0x3d
 8002684:	2102      	movs	r1, #2
 8002686:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2270      	movs	r2, #112	; 0x70
 800269c:	4393      	bics	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a13      	ldr	r2, [pc, #76]	; (8002704 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d009      	beq.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d004      	beq.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a10      	ldr	r2, [pc, #64]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d10c      	bne.n	80026ea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	4393      	bics	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	223d      	movs	r2, #61	; 0x3d
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	223c      	movs	r2, #60	; 0x3c
 80026f6:	2100      	movs	r1, #0
 80026f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	b004      	add	sp, #16
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400
 800270c:	40014000 	.word	0x40014000

08002710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	223c      	movs	r2, #60	; 0x3c
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002728:	2302      	movs	r3, #2
 800272a:	e03e      	b.n	80027aa <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	223c      	movs	r2, #60	; 0x3c
 8002730:	2101      	movs	r1, #1
 8002732:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	22ff      	movs	r2, #255	; 0xff
 8002738:	4393      	bics	r3, r2
 800273a:	001a      	movs	r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002748:	401a      	ands	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002756:	401a      	ands	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002764:	401a      	ands	r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002772:	401a      	ands	r2, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002780:	401a      	ands	r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800278e:	401a      	ands	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	223c      	movs	r2, #60	; 0x3c
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b004      	add	sp, #16
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	fffffcff 	.word	0xfffffcff
 80027b8:	fffffbff 	.word	0xfffffbff
 80027bc:	fffff7ff 	.word	0xfffff7ff
 80027c0:	ffffefff 	.word	0xffffefff
 80027c4:	ffffdfff 	.word	0xffffdfff
 80027c8:	ffffbfff 	.word	0xffffbfff

080027cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e044      	b.n	8002868 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2278      	movs	r2, #120	; 0x78
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fe f813 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2224      	movs	r2, #36	; 0x24
 80027fa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2101      	movs	r1, #1
 8002808:	438a      	bics	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f830 	bl	8002874 <UART_SetConfig>
 8002814:	0003      	movs	r3, r0
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e024      	b.n	8002868 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	0018      	movs	r0, r3
 800282a:	f000 f993 	bl	8002b54 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	490d      	ldr	r1, [pc, #52]	; (8002870 <HAL_UART_Init+0xa4>)
 800283a:	400a      	ands	r2, r1
 800283c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2108      	movs	r1, #8
 800284a:	438a      	bics	r2, r1
 800284c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2101      	movs	r1, #1
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0018      	movs	r0, r3
 8002862:	f000 fa2b 	bl	8002cbc <UART_CheckIdleState>
 8002866:	0003      	movs	r3, r0
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}
 8002870:	fffff7ff 	.word	0xfffff7ff

08002874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800287c:	231e      	movs	r3, #30
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4aa1      	ldr	r2, [pc, #644]	; (8002b28 <UART_SetConfig+0x2b4>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a9c      	ldr	r2, [pc, #624]	; (8002b2c <UART_SetConfig+0x2b8>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a93      	ldr	r2, [pc, #588]	; (8002b30 <UART_SetConfig+0x2bc>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a8f      	ldr	r2, [pc, #572]	; (8002b34 <UART_SetConfig+0x2c0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d127      	bne.n	800294a <UART_SetConfig+0xd6>
 80028fa:	4b8f      	ldr	r3, [pc, #572]	; (8002b38 <UART_SetConfig+0x2c4>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	2203      	movs	r2, #3
 8002900:	4013      	ands	r3, r2
 8002902:	2b03      	cmp	r3, #3
 8002904:	d00d      	beq.n	8002922 <UART_SetConfig+0xae>
 8002906:	d81b      	bhi.n	8002940 <UART_SetConfig+0xcc>
 8002908:	2b02      	cmp	r3, #2
 800290a:	d014      	beq.n	8002936 <UART_SetConfig+0xc2>
 800290c:	d818      	bhi.n	8002940 <UART_SetConfig+0xcc>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <UART_SetConfig+0xa4>
 8002912:	2b01      	cmp	r3, #1
 8002914:	d00a      	beq.n	800292c <UART_SetConfig+0xb8>
 8002916:	e013      	b.n	8002940 <UART_SetConfig+0xcc>
 8002918:	231f      	movs	r3, #31
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	e049      	b.n	80029b6 <UART_SetConfig+0x142>
 8002922:	231f      	movs	r3, #31
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e044      	b.n	80029b6 <UART_SetConfig+0x142>
 800292c:	231f      	movs	r3, #31
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	2204      	movs	r2, #4
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e03f      	b.n	80029b6 <UART_SetConfig+0x142>
 8002936:	231f      	movs	r3, #31
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	2208      	movs	r2, #8
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e03a      	b.n	80029b6 <UART_SetConfig+0x142>
 8002940:	231f      	movs	r3, #31
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2210      	movs	r2, #16
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e035      	b.n	80029b6 <UART_SetConfig+0x142>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a7b      	ldr	r2, [pc, #492]	; (8002b3c <UART_SetConfig+0x2c8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d104      	bne.n	800295e <UART_SetConfig+0xea>
 8002954:	231f      	movs	r3, #31
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e02b      	b.n	80029b6 <UART_SetConfig+0x142>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a77      	ldr	r2, [pc, #476]	; (8002b40 <UART_SetConfig+0x2cc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d104      	bne.n	8002972 <UART_SetConfig+0xfe>
 8002968:	231f      	movs	r3, #31
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e021      	b.n	80029b6 <UART_SetConfig+0x142>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a73      	ldr	r2, [pc, #460]	; (8002b44 <UART_SetConfig+0x2d0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d104      	bne.n	8002986 <UART_SetConfig+0x112>
 800297c:	231f      	movs	r3, #31
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	e017      	b.n	80029b6 <UART_SetConfig+0x142>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	; (8002b48 <UART_SetConfig+0x2d4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d104      	bne.n	800299a <UART_SetConfig+0x126>
 8002990:	231f      	movs	r3, #31
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e00d      	b.n	80029b6 <UART_SetConfig+0x142>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6b      	ldr	r2, [pc, #428]	; (8002b4c <UART_SetConfig+0x2d8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d104      	bne.n	80029ae <UART_SetConfig+0x13a>
 80029a4:	231f      	movs	r3, #31
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e003      	b.n	80029b6 <UART_SetConfig+0x142>
 80029ae:	231f      	movs	r3, #31
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	2210      	movs	r2, #16
 80029b4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	429a      	cmp	r2, r3
 80029c0:	d15c      	bne.n	8002a7c <UART_SetConfig+0x208>
  {
    switch (clocksource)
 80029c2:	231f      	movs	r3, #31
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d015      	beq.n	80029f8 <UART_SetConfig+0x184>
 80029cc:	dc18      	bgt.n	8002a00 <UART_SetConfig+0x18c>
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d00d      	beq.n	80029ee <UART_SetConfig+0x17a>
 80029d2:	dc15      	bgt.n	8002a00 <UART_SetConfig+0x18c>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <UART_SetConfig+0x16a>
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d005      	beq.n	80029e8 <UART_SetConfig+0x174>
 80029dc:	e010      	b.n	8002a00 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029de:	f7ff f8db 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 80029e2:	0003      	movs	r3, r0
 80029e4:	61bb      	str	r3, [r7, #24]
        break;
 80029e6:	e012      	b.n	8002a0e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <UART_SetConfig+0x2dc>)
 80029ea:	61bb      	str	r3, [r7, #24]
        break;
 80029ec:	e00f      	b.n	8002a0e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029ee:	f7ff f871 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 80029f2:	0003      	movs	r3, r0
 80029f4:	61bb      	str	r3, [r7, #24]
        break;
 80029f6:	e00a      	b.n	8002a0e <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	61bb      	str	r3, [r7, #24]
        break;
 80029fe:	e006      	b.n	8002a0e <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a04:	231e      	movs	r3, #30
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
        break;
 8002a0c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d100      	bne.n	8002a16 <UART_SetConfig+0x1a2>
 8002a14:	e07a      	b.n	8002b0c <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	005a      	lsls	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	18d2      	adds	r2, r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0019      	movs	r1, r3
 8002a28:	0010      	movs	r0, r2
 8002a2a:	f7fd fb6b 	bl	8000104 <__udivsi3>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b0f      	cmp	r3, #15
 8002a36:	d91c      	bls.n	8002a72 <UART_SetConfig+0x1fe>
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	025b      	lsls	r3, r3, #9
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d217      	bcs.n	8002a72 <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	200e      	movs	r0, #14
 8002a48:	183b      	adds	r3, r7, r0
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2207      	movs	r2, #7
 8002a58:	4013      	ands	r3, r2
 8002a5a:	b299      	uxth	r1, r3
 8002a5c:	183b      	adds	r3, r7, r0
 8002a5e:	183a      	adds	r2, r7, r0
 8002a60:	8812      	ldrh	r2, [r2, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	183a      	adds	r2, r7, r0
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	60da      	str	r2, [r3, #12]
 8002a70:	e04c      	b.n	8002b0c <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8002a72:	231e      	movs	r3, #30
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e047      	b.n	8002b0c <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a7c:	231f      	movs	r3, #31
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d015      	beq.n	8002ab2 <UART_SetConfig+0x23e>
 8002a86:	dc18      	bgt.n	8002aba <UART_SetConfig+0x246>
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d00d      	beq.n	8002aa8 <UART_SetConfig+0x234>
 8002a8c:	dc15      	bgt.n	8002aba <UART_SetConfig+0x246>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <UART_SetConfig+0x224>
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d005      	beq.n	8002aa2 <UART_SetConfig+0x22e>
 8002a96:	e010      	b.n	8002aba <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a98:	f7ff f87e 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	61bb      	str	r3, [r7, #24]
        break;
 8002aa0:	e012      	b.n	8002ac8 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <UART_SetConfig+0x2dc>)
 8002aa4:	61bb      	str	r3, [r7, #24]
        break;
 8002aa6:	e00f      	b.n	8002ac8 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aa8:	f7ff f814 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8002aac:	0003      	movs	r3, r0
 8002aae:	61bb      	str	r3, [r7, #24]
        break;
 8002ab0:	e00a      	b.n	8002ac8 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	61bb      	str	r3, [r7, #24]
        break;
 8002ab8:	e006      	b.n	8002ac8 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002abe:	231e      	movs	r3, #30
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
        break;
 8002ac6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01e      	beq.n	8002b0c <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	085a      	lsrs	r2, r3, #1
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	18d2      	adds	r2, r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	0019      	movs	r1, r3
 8002ade:	0010      	movs	r0, r2
 8002ae0:	f7fd fb10 	bl	8000104 <__udivsi3>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d90a      	bls.n	8002b04 <UART_SetConfig+0x290>
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	025b      	lsls	r3, r3, #9
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d205      	bcs.n	8002b04 <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	e003      	b.n	8002b0c <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8002b04:	231e      	movs	r3, #30
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b18:	231e      	movs	r3, #30
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	781b      	ldrb	r3, [r3, #0]
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b008      	add	sp, #32
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	efff69f3 	.word	0xefff69f3
 8002b2c:	ffffcfff 	.word	0xffffcfff
 8002b30:	fffff4ff 	.word	0xfffff4ff
 8002b34:	40013800 	.word	0x40013800
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40004400 	.word	0x40004400
 8002b40:	40004800 	.word	0x40004800
 8002b44:	40004c00 	.word	0x40004c00
 8002b48:	40005000 	.word	0x40005000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	007a1200 	.word	0x007a1200

08002b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a4a      	ldr	r2, [pc, #296]	; (8002c98 <UART_AdvFeatureConfig+0x144>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2202      	movs	r2, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4a43      	ldr	r2, [pc, #268]	; (8002c9c <UART_AdvFeatureConfig+0x148>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d00b      	beq.n	8002bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a3b      	ldr	r2, [pc, #236]	; (8002ca0 <UART_AdvFeatureConfig+0x14c>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d00b      	beq.n	8002be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <UART_AdvFeatureConfig+0x150>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	2210      	movs	r2, #16
 8002bea:	4013      	ands	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4a2c      	ldr	r2, [pc, #176]	; (8002ca8 <UART_AdvFeatureConfig+0x154>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d00b      	beq.n	8002c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4a25      	ldr	r2, [pc, #148]	; (8002cac <UART_AdvFeatureConfig+0x158>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d01d      	beq.n	8002c6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <UART_AdvFeatureConfig+0x15c>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	035b      	lsls	r3, r3, #13
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d10b      	bne.n	8002c6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <UART_AdvFeatureConfig+0x160>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	0019      	movs	r1, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	4013      	ands	r3, r2
 8002c76:	d00b      	beq.n	8002c90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a0e      	ldr	r2, [pc, #56]	; (8002cb8 <UART_AdvFeatureConfig+0x164>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	0019      	movs	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  }
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	fffdffff 	.word	0xfffdffff
 8002c9c:	fffeffff 	.word	0xfffeffff
 8002ca0:	fffbffff 	.word	0xfffbffff
 8002ca4:	ffff7fff 	.word	0xffff7fff
 8002ca8:	ffffefff 	.word	0xffffefff
 8002cac:	ffffdfff 	.word	0xffffdfff
 8002cb0:	ffefffff 	.word	0xffefffff
 8002cb4:	ff9fffff 	.word	0xff9fffff
 8002cb8:	fff7ffff 	.word	0xfff7ffff

08002cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b092      	sub	sp, #72	; 0x48
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2284      	movs	r2, #132	; 0x84
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ccc:	f7fd fe94 	bl	80009f8 <HAL_GetTick>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2208      	movs	r2, #8
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d12c      	bne.n	8002d3c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	0391      	lsls	r1, r2, #14
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4a46      	ldr	r2, [pc, #280]	; (8002e04 <UART_CheckIdleState+0x148>)
 8002cec:	9200      	str	r2, [sp, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f000 f88c 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d021      	beq.n	8002d3c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d02:	2301      	movs	r3, #1
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2180      	movs	r1, #128	; 0x80
 8002d1a:	438a      	bics	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2278      	movs	r2, #120	; 0x78
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e05f      	b.n	8002dfc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2204      	movs	r2, #4
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d146      	bne.n	8002dd8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	03d1      	lsls	r1, r2, #15
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4a2c      	ldr	r2, [pc, #176]	; (8002e04 <UART_CheckIdleState+0x148>)
 8002d54:	9200      	str	r2, [sp, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f000 f858 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d03b      	beq.n	8002dd8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d60:	f3ef 8310 	mrs	r3, PRIMASK
 8002d64:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d66:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f383 8810 	msr	PRIMASK, r3
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4921      	ldr	r1, [pc, #132]	; (8002e08 <UART_CheckIdleState+0x14c>)
 8002d82:	400a      	ands	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f383 8810 	msr	PRIMASK, r3
}
 8002d90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d92:	f3ef 8310 	mrs	r3, PRIMASK
 8002d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d98:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f383 8810 	msr	PRIMASK, r3
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	438a      	bics	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f383 8810 	msr	PRIMASK, r3
}
 8002dc2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	2120      	movs	r1, #32
 8002dca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2278      	movs	r2, #120	; 0x78
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e011      	b.n	8002dfc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	2120      	movs	r1, #32
 8002de4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2278      	movs	r2, #120	; 0x78
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b010      	add	sp, #64	; 0x40
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	01ffffff 	.word	0x01ffffff
 8002e08:	fffffedf 	.word	0xfffffedf

08002e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	1dfb      	adds	r3, r7, #7
 8002e1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1c:	e04b      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	3301      	adds	r3, #1
 8002e22:	d048      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e24:	f7fd fde8 	bl	80009f8 <HAL_GetTick>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d302      	bcc.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e04b      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2204      	movs	r2, #4
 8002e46:	4013      	ands	r3, r2
 8002e48:	d035      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2208      	movs	r2, #8
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d111      	bne.n	8002e7c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 f83c 	bl	8002ee0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2284      	movs	r2, #132	; 0x84
 8002e6c:	2108      	movs	r1, #8
 8002e6e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2278      	movs	r2, #120	; 0x78
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e02c      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	401a      	ands	r2, r3
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d112      	bne.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f000 f81f 	bl	8002ee0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2284      	movs	r2, #132	; 0x84
 8002ea6:	2120      	movs	r1, #32
 8002ea8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2278      	movs	r2, #120	; 0x78
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e00f      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	425a      	negs	r2, r3
 8002ec6:	4153      	adcs	r3, r2
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	001a      	movs	r2, r3
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d0a4      	beq.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08e      	sub	sp, #56	; 0x38
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8002eec:	617b      	str	r3, [r7, #20]
  return(result);
 8002eee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f383 8810 	msr	PRIMASK, r3
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4926      	ldr	r1, [pc, #152]	; (8002fa4 <UART_EndRxTransfer+0xc4>)
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f383 8810 	msr	PRIMASK, r3
}
 8002f18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1e:	623b      	str	r3, [r7, #32]
  return(result);
 8002f20:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f22:	633b      	str	r3, [r7, #48]	; 0x30
 8002f24:	2301      	movs	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	f383 8810 	msr	PRIMASK, r3
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	f383 8810 	msr	PRIMASK, r3
}
 8002f4a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d118      	bne.n	8002f86 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f54:	f3ef 8310 	mrs	r3, PRIMASK
 8002f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5e:	2301      	movs	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f383 8810 	msr	PRIMASK, r3
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2110      	movs	r1, #16
 8002f76:	438a      	bics	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f383 8810 	msr	PRIMASK, r3
}
 8002f84:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	2120      	movs	r1, #32
 8002f8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b00e      	add	sp, #56	; 0x38
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	fffffedf 	.word	0xfffffedf

08002fa8 <memset>:
 8002fa8:	0003      	movs	r3, r0
 8002faa:	1882      	adds	r2, r0, r2
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <memset+0xa>
 8002fb0:	4770      	bx	lr
 8002fb2:	7019      	strb	r1, [r3, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	e7f9      	b.n	8002fac <memset+0x4>

08002fb8 <__libc_init_array>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	2600      	movs	r6, #0
 8002fbc:	4c0c      	ldr	r4, [pc, #48]	; (8002ff0 <__libc_init_array+0x38>)
 8002fbe:	4d0d      	ldr	r5, [pc, #52]	; (8002ff4 <__libc_init_array+0x3c>)
 8002fc0:	1b64      	subs	r4, r4, r5
 8002fc2:	10a4      	asrs	r4, r4, #2
 8002fc4:	42a6      	cmp	r6, r4
 8002fc6:	d109      	bne.n	8002fdc <__libc_init_array+0x24>
 8002fc8:	2600      	movs	r6, #0
 8002fca:	f000 f819 	bl	8003000 <_init>
 8002fce:	4c0a      	ldr	r4, [pc, #40]	; (8002ff8 <__libc_init_array+0x40>)
 8002fd0:	4d0a      	ldr	r5, [pc, #40]	; (8002ffc <__libc_init_array+0x44>)
 8002fd2:	1b64      	subs	r4, r4, r5
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	42a6      	cmp	r6, r4
 8002fd8:	d105      	bne.n	8002fe6 <__libc_init_array+0x2e>
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	00b3      	lsls	r3, r6, #2
 8002fde:	58eb      	ldr	r3, [r5, r3]
 8002fe0:	4798      	blx	r3
 8002fe2:	3601      	adds	r6, #1
 8002fe4:	e7ee      	b.n	8002fc4 <__libc_init_array+0xc>
 8002fe6:	00b3      	lsls	r3, r6, #2
 8002fe8:	58eb      	ldr	r3, [r5, r3]
 8002fea:	4798      	blx	r3
 8002fec:	3601      	adds	r6, #1
 8002fee:	e7f2      	b.n	8002fd6 <__libc_init_array+0x1e>
 8002ff0:	08003050 	.word	0x08003050
 8002ff4:	08003050 	.word	0x08003050
 8002ff8:	08003054 	.word	0x08003054
 8002ffc:	08003050 	.word	0x08003050

08003000 <_init>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr

0800300c <_fini>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr
