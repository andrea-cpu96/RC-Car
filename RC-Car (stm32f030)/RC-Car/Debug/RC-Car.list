
RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054bc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f0  080055f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080055f0  080055f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055f0  080055f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080055f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08005604  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08005604  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d21b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e63  00000000  00000000  0002d292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  0002f0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000982  00000000  00000000  0002fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010925  00000000  00000000  0003068a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eae6  00000000  00000000  00040faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000685f0  00000000  00000000  0004fa95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d48  00000000  00000000  000b8088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000badd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005560 	.word	0x08005560

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005560 	.word	0x08005560

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_f2uiz>:
 800021c:	219e      	movs	r1, #158	; 0x9e
 800021e:	b510      	push	{r4, lr}
 8000220:	05c9      	lsls	r1, r1, #23
 8000222:	1c04      	adds	r4, r0, #0
 8000224:	f001 fa16 	bl	8001654 <__aeabi_fcmpge>
 8000228:	2800      	cmp	r0, #0
 800022a:	d103      	bne.n	8000234 <__aeabi_f2uiz+0x18>
 800022c:	1c20      	adds	r0, r4, #0
 800022e:	f000 fafb 	bl	8000828 <__aeabi_f2iz>
 8000232:	bd10      	pop	{r4, pc}
 8000234:	219e      	movs	r1, #158	; 0x9e
 8000236:	1c20      	adds	r0, r4, #0
 8000238:	05c9      	lsls	r1, r1, #23
 800023a:	f000 f955 	bl	80004e8 <__aeabi_fsub>
 800023e:	f000 faf3 	bl	8000828 <__aeabi_f2iz>
 8000242:	2380      	movs	r3, #128	; 0x80
 8000244:	061b      	lsls	r3, r3, #24
 8000246:	469c      	mov	ip, r3
 8000248:	4460      	add	r0, ip
 800024a:	e7f2      	b.n	8000232 <__aeabi_f2uiz+0x16>

0800024c <__aeabi_fmul>:
 800024c:	0243      	lsls	r3, r0, #9
 800024e:	0a5b      	lsrs	r3, r3, #9
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	464f      	mov	r7, r9
 8000254:	4646      	mov	r6, r8
 8000256:	4699      	mov	r9, r3
 8000258:	46d6      	mov	lr, sl
 800025a:	0fc3      	lsrs	r3, r0, #31
 800025c:	0045      	lsls	r5, r0, #1
 800025e:	4698      	mov	r8, r3
 8000260:	b5c0      	push	{r6, r7, lr}
 8000262:	464b      	mov	r3, r9
 8000264:	1c0f      	adds	r7, r1, #0
 8000266:	0e2d      	lsrs	r5, r5, #24
 8000268:	d100      	bne.n	800026c <__aeabi_fmul+0x20>
 800026a:	e0cb      	b.n	8000404 <__aeabi_fmul+0x1b8>
 800026c:	2dff      	cmp	r5, #255	; 0xff
 800026e:	d100      	bne.n	8000272 <__aeabi_fmul+0x26>
 8000270:	e0cf      	b.n	8000412 <__aeabi_fmul+0x1c6>
 8000272:	2280      	movs	r2, #128	; 0x80
 8000274:	00db      	lsls	r3, r3, #3
 8000276:	04d2      	lsls	r2, r2, #19
 8000278:	431a      	orrs	r2, r3
 800027a:	2300      	movs	r3, #0
 800027c:	4691      	mov	r9, r2
 800027e:	2600      	movs	r6, #0
 8000280:	469a      	mov	sl, r3
 8000282:	3d7f      	subs	r5, #127	; 0x7f
 8000284:	027c      	lsls	r4, r7, #9
 8000286:	007b      	lsls	r3, r7, #1
 8000288:	0a64      	lsrs	r4, r4, #9
 800028a:	0e1b      	lsrs	r3, r3, #24
 800028c:	0fff      	lsrs	r7, r7, #31
 800028e:	2b00      	cmp	r3, #0
 8000290:	d100      	bne.n	8000294 <__aeabi_fmul+0x48>
 8000292:	e0a9      	b.n	80003e8 <__aeabi_fmul+0x19c>
 8000294:	2bff      	cmp	r3, #255	; 0xff
 8000296:	d011      	beq.n	80002bc <__aeabi_fmul+0x70>
 8000298:	2280      	movs	r2, #128	; 0x80
 800029a:	00e4      	lsls	r4, r4, #3
 800029c:	04d2      	lsls	r2, r2, #19
 800029e:	4314      	orrs	r4, r2
 80002a0:	4642      	mov	r2, r8
 80002a2:	3b7f      	subs	r3, #127	; 0x7f
 80002a4:	195b      	adds	r3, r3, r5
 80002a6:	407a      	eors	r2, r7
 80002a8:	2000      	movs	r0, #0
 80002aa:	b2d2      	uxtb	r2, r2
 80002ac:	1c5d      	adds	r5, r3, #1
 80002ae:	2e0a      	cmp	r6, #10
 80002b0:	dd13      	ble.n	80002da <__aeabi_fmul+0x8e>
 80002b2:	003a      	movs	r2, r7
 80002b4:	2e0b      	cmp	r6, #11
 80002b6:	d047      	beq.n	8000348 <__aeabi_fmul+0xfc>
 80002b8:	4647      	mov	r7, r8
 80002ba:	e03f      	b.n	800033c <__aeabi_fmul+0xf0>
 80002bc:	002b      	movs	r3, r5
 80002be:	33ff      	adds	r3, #255	; 0xff
 80002c0:	2c00      	cmp	r4, #0
 80002c2:	d11e      	bne.n	8000302 <__aeabi_fmul+0xb6>
 80002c4:	2202      	movs	r2, #2
 80002c6:	4316      	orrs	r6, r2
 80002c8:	4642      	mov	r2, r8
 80002ca:	3501      	adds	r5, #1
 80002cc:	407a      	eors	r2, r7
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	35ff      	adds	r5, #255	; 0xff
 80002d2:	2e0a      	cmp	r6, #10
 80002d4:	dd00      	ble.n	80002d8 <__aeabi_fmul+0x8c>
 80002d6:	e0e4      	b.n	80004a2 <__aeabi_fmul+0x256>
 80002d8:	2002      	movs	r0, #2
 80002da:	2e02      	cmp	r6, #2
 80002dc:	dc1c      	bgt.n	8000318 <__aeabi_fmul+0xcc>
 80002de:	3e01      	subs	r6, #1
 80002e0:	2e01      	cmp	r6, #1
 80002e2:	d842      	bhi.n	800036a <__aeabi_fmul+0x11e>
 80002e4:	2802      	cmp	r0, #2
 80002e6:	d03d      	beq.n	8000364 <__aeabi_fmul+0x118>
 80002e8:	2801      	cmp	r0, #1
 80002ea:	d166      	bne.n	80003ba <__aeabi_fmul+0x16e>
 80002ec:	2000      	movs	r0, #0
 80002ee:	2100      	movs	r1, #0
 80002f0:	05c0      	lsls	r0, r0, #23
 80002f2:	4308      	orrs	r0, r1
 80002f4:	07d2      	lsls	r2, r2, #31
 80002f6:	4310      	orrs	r0, r2
 80002f8:	bce0      	pop	{r5, r6, r7}
 80002fa:	46ba      	mov	sl, r7
 80002fc:	46b1      	mov	r9, r6
 80002fe:	46a8      	mov	r8, r5
 8000300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000302:	2203      	movs	r2, #3
 8000304:	4316      	orrs	r6, r2
 8000306:	4642      	mov	r2, r8
 8000308:	3501      	adds	r5, #1
 800030a:	407a      	eors	r2, r7
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	35ff      	adds	r5, #255	; 0xff
 8000310:	2e0a      	cmp	r6, #10
 8000312:	dd00      	ble.n	8000316 <__aeabi_fmul+0xca>
 8000314:	e0e4      	b.n	80004e0 <__aeabi_fmul+0x294>
 8000316:	2003      	movs	r0, #3
 8000318:	2101      	movs	r1, #1
 800031a:	40b1      	lsls	r1, r6
 800031c:	26a6      	movs	r6, #166	; 0xa6
 800031e:	00f6      	lsls	r6, r6, #3
 8000320:	4231      	tst	r1, r6
 8000322:	d10a      	bne.n	800033a <__aeabi_fmul+0xee>
 8000324:	2690      	movs	r6, #144	; 0x90
 8000326:	00b6      	lsls	r6, r6, #2
 8000328:	4231      	tst	r1, r6
 800032a:	d116      	bne.n	800035a <__aeabi_fmul+0x10e>
 800032c:	3eb9      	subs	r6, #185	; 0xb9
 800032e:	3eff      	subs	r6, #255	; 0xff
 8000330:	420e      	tst	r6, r1
 8000332:	d01a      	beq.n	800036a <__aeabi_fmul+0x11e>
 8000334:	46a1      	mov	r9, r4
 8000336:	4682      	mov	sl, r0
 8000338:	e000      	b.n	800033c <__aeabi_fmul+0xf0>
 800033a:	0017      	movs	r7, r2
 800033c:	4653      	mov	r3, sl
 800033e:	003a      	movs	r2, r7
 8000340:	2b02      	cmp	r3, #2
 8000342:	d00f      	beq.n	8000364 <__aeabi_fmul+0x118>
 8000344:	464c      	mov	r4, r9
 8000346:	4650      	mov	r0, sl
 8000348:	2803      	cmp	r0, #3
 800034a:	d1cd      	bne.n	80002e8 <__aeabi_fmul+0x9c>
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	03c9      	lsls	r1, r1, #15
 8000350:	4321      	orrs	r1, r4
 8000352:	0249      	lsls	r1, r1, #9
 8000354:	20ff      	movs	r0, #255	; 0xff
 8000356:	0a49      	lsrs	r1, r1, #9
 8000358:	e7ca      	b.n	80002f0 <__aeabi_fmul+0xa4>
 800035a:	2180      	movs	r1, #128	; 0x80
 800035c:	2200      	movs	r2, #0
 800035e:	20ff      	movs	r0, #255	; 0xff
 8000360:	03c9      	lsls	r1, r1, #15
 8000362:	e7c5      	b.n	80002f0 <__aeabi_fmul+0xa4>
 8000364:	20ff      	movs	r0, #255	; 0xff
 8000366:	2100      	movs	r1, #0
 8000368:	e7c2      	b.n	80002f0 <__aeabi_fmul+0xa4>
 800036a:	0c20      	lsrs	r0, r4, #16
 800036c:	4649      	mov	r1, r9
 800036e:	0424      	lsls	r4, r4, #16
 8000370:	0c24      	lsrs	r4, r4, #16
 8000372:	0027      	movs	r7, r4
 8000374:	0c0e      	lsrs	r6, r1, #16
 8000376:	0409      	lsls	r1, r1, #16
 8000378:	0c09      	lsrs	r1, r1, #16
 800037a:	4374      	muls	r4, r6
 800037c:	434f      	muls	r7, r1
 800037e:	4346      	muls	r6, r0
 8000380:	4348      	muls	r0, r1
 8000382:	0c39      	lsrs	r1, r7, #16
 8000384:	1900      	adds	r0, r0, r4
 8000386:	1809      	adds	r1, r1, r0
 8000388:	428c      	cmp	r4, r1
 800038a:	d903      	bls.n	8000394 <__aeabi_fmul+0x148>
 800038c:	2080      	movs	r0, #128	; 0x80
 800038e:	0240      	lsls	r0, r0, #9
 8000390:	4684      	mov	ip, r0
 8000392:	4466      	add	r6, ip
 8000394:	043f      	lsls	r7, r7, #16
 8000396:	0408      	lsls	r0, r1, #16
 8000398:	0c3f      	lsrs	r7, r7, #16
 800039a:	19c0      	adds	r0, r0, r7
 800039c:	0184      	lsls	r4, r0, #6
 800039e:	1e67      	subs	r7, r4, #1
 80003a0:	41bc      	sbcs	r4, r7
 80003a2:	0c09      	lsrs	r1, r1, #16
 80003a4:	0e80      	lsrs	r0, r0, #26
 80003a6:	1989      	adds	r1, r1, r6
 80003a8:	4304      	orrs	r4, r0
 80003aa:	0189      	lsls	r1, r1, #6
 80003ac:	430c      	orrs	r4, r1
 80003ae:	0109      	lsls	r1, r1, #4
 80003b0:	d571      	bpl.n	8000496 <__aeabi_fmul+0x24a>
 80003b2:	2301      	movs	r3, #1
 80003b4:	0861      	lsrs	r1, r4, #1
 80003b6:	401c      	ands	r4, r3
 80003b8:	430c      	orrs	r4, r1
 80003ba:	002b      	movs	r3, r5
 80003bc:	337f      	adds	r3, #127	; 0x7f
 80003be:	2b00      	cmp	r3, #0
 80003c0:	dd51      	ble.n	8000466 <__aeabi_fmul+0x21a>
 80003c2:	0761      	lsls	r1, r4, #29
 80003c4:	d004      	beq.n	80003d0 <__aeabi_fmul+0x184>
 80003c6:	210f      	movs	r1, #15
 80003c8:	4021      	ands	r1, r4
 80003ca:	2904      	cmp	r1, #4
 80003cc:	d000      	beq.n	80003d0 <__aeabi_fmul+0x184>
 80003ce:	3404      	adds	r4, #4
 80003d0:	0121      	lsls	r1, r4, #4
 80003d2:	d503      	bpl.n	80003dc <__aeabi_fmul+0x190>
 80003d4:	4b43      	ldr	r3, [pc, #268]	; (80004e4 <__aeabi_fmul+0x298>)
 80003d6:	401c      	ands	r4, r3
 80003d8:	002b      	movs	r3, r5
 80003da:	3380      	adds	r3, #128	; 0x80
 80003dc:	2bfe      	cmp	r3, #254	; 0xfe
 80003de:	dcc1      	bgt.n	8000364 <__aeabi_fmul+0x118>
 80003e0:	01a1      	lsls	r1, r4, #6
 80003e2:	0a49      	lsrs	r1, r1, #9
 80003e4:	b2d8      	uxtb	r0, r3
 80003e6:	e783      	b.n	80002f0 <__aeabi_fmul+0xa4>
 80003e8:	2c00      	cmp	r4, #0
 80003ea:	d12c      	bne.n	8000446 <__aeabi_fmul+0x1fa>
 80003ec:	2301      	movs	r3, #1
 80003ee:	4642      	mov	r2, r8
 80003f0:	431e      	orrs	r6, r3
 80003f2:	002b      	movs	r3, r5
 80003f4:	407a      	eors	r2, r7
 80003f6:	2001      	movs	r0, #1
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	1c5d      	adds	r5, r3, #1
 80003fc:	2e0a      	cmp	r6, #10
 80003fe:	dd00      	ble.n	8000402 <__aeabi_fmul+0x1b6>
 8000400:	e757      	b.n	80002b2 <__aeabi_fmul+0x66>
 8000402:	e76a      	b.n	80002da <__aeabi_fmul+0x8e>
 8000404:	2b00      	cmp	r3, #0
 8000406:	d110      	bne.n	800042a <__aeabi_fmul+0x1de>
 8000408:	2301      	movs	r3, #1
 800040a:	2604      	movs	r6, #4
 800040c:	2500      	movs	r5, #0
 800040e:	469a      	mov	sl, r3
 8000410:	e738      	b.n	8000284 <__aeabi_fmul+0x38>
 8000412:	2b00      	cmp	r3, #0
 8000414:	d104      	bne.n	8000420 <__aeabi_fmul+0x1d4>
 8000416:	2302      	movs	r3, #2
 8000418:	2608      	movs	r6, #8
 800041a:	25ff      	movs	r5, #255	; 0xff
 800041c:	469a      	mov	sl, r3
 800041e:	e731      	b.n	8000284 <__aeabi_fmul+0x38>
 8000420:	2303      	movs	r3, #3
 8000422:	260c      	movs	r6, #12
 8000424:	25ff      	movs	r5, #255	; 0xff
 8000426:	469a      	mov	sl, r3
 8000428:	e72c      	b.n	8000284 <__aeabi_fmul+0x38>
 800042a:	4648      	mov	r0, r9
 800042c:	f001 f91c 	bl	8001668 <__clzsi2>
 8000430:	464a      	mov	r2, r9
 8000432:	1f43      	subs	r3, r0, #5
 8000434:	2576      	movs	r5, #118	; 0x76
 8000436:	409a      	lsls	r2, r3
 8000438:	2300      	movs	r3, #0
 800043a:	426d      	negs	r5, r5
 800043c:	4691      	mov	r9, r2
 800043e:	2600      	movs	r6, #0
 8000440:	469a      	mov	sl, r3
 8000442:	1a2d      	subs	r5, r5, r0
 8000444:	e71e      	b.n	8000284 <__aeabi_fmul+0x38>
 8000446:	0020      	movs	r0, r4
 8000448:	f001 f90e 	bl	8001668 <__clzsi2>
 800044c:	4642      	mov	r2, r8
 800044e:	1f43      	subs	r3, r0, #5
 8000450:	409c      	lsls	r4, r3
 8000452:	1a2b      	subs	r3, r5, r0
 8000454:	3b76      	subs	r3, #118	; 0x76
 8000456:	407a      	eors	r2, r7
 8000458:	2000      	movs	r0, #0
 800045a:	b2d2      	uxtb	r2, r2
 800045c:	1c5d      	adds	r5, r3, #1
 800045e:	2e0a      	cmp	r6, #10
 8000460:	dd00      	ble.n	8000464 <__aeabi_fmul+0x218>
 8000462:	e726      	b.n	80002b2 <__aeabi_fmul+0x66>
 8000464:	e739      	b.n	80002da <__aeabi_fmul+0x8e>
 8000466:	2101      	movs	r1, #1
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	2b1b      	cmp	r3, #27
 800046c:	dd00      	ble.n	8000470 <__aeabi_fmul+0x224>
 800046e:	e73d      	b.n	80002ec <__aeabi_fmul+0xa0>
 8000470:	359e      	adds	r5, #158	; 0x9e
 8000472:	0021      	movs	r1, r4
 8000474:	40ac      	lsls	r4, r5
 8000476:	40d9      	lsrs	r1, r3
 8000478:	1e63      	subs	r3, r4, #1
 800047a:	419c      	sbcs	r4, r3
 800047c:	4321      	orrs	r1, r4
 800047e:	074b      	lsls	r3, r1, #29
 8000480:	d004      	beq.n	800048c <__aeabi_fmul+0x240>
 8000482:	230f      	movs	r3, #15
 8000484:	400b      	ands	r3, r1
 8000486:	2b04      	cmp	r3, #4
 8000488:	d000      	beq.n	800048c <__aeabi_fmul+0x240>
 800048a:	3104      	adds	r1, #4
 800048c:	014b      	lsls	r3, r1, #5
 800048e:	d504      	bpl.n	800049a <__aeabi_fmul+0x24e>
 8000490:	2001      	movs	r0, #1
 8000492:	2100      	movs	r1, #0
 8000494:	e72c      	b.n	80002f0 <__aeabi_fmul+0xa4>
 8000496:	001d      	movs	r5, r3
 8000498:	e78f      	b.n	80003ba <__aeabi_fmul+0x16e>
 800049a:	0189      	lsls	r1, r1, #6
 800049c:	2000      	movs	r0, #0
 800049e:	0a49      	lsrs	r1, r1, #9
 80004a0:	e726      	b.n	80002f0 <__aeabi_fmul+0xa4>
 80004a2:	2302      	movs	r3, #2
 80004a4:	2e0f      	cmp	r6, #15
 80004a6:	d10c      	bne.n	80004c2 <__aeabi_fmul+0x276>
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	464b      	mov	r3, r9
 80004ac:	03c9      	lsls	r1, r1, #15
 80004ae:	420b      	tst	r3, r1
 80004b0:	d00d      	beq.n	80004ce <__aeabi_fmul+0x282>
 80004b2:	420c      	tst	r4, r1
 80004b4:	d10b      	bne.n	80004ce <__aeabi_fmul+0x282>
 80004b6:	4321      	orrs	r1, r4
 80004b8:	0249      	lsls	r1, r1, #9
 80004ba:	003a      	movs	r2, r7
 80004bc:	20ff      	movs	r0, #255	; 0xff
 80004be:	0a49      	lsrs	r1, r1, #9
 80004c0:	e716      	b.n	80002f0 <__aeabi_fmul+0xa4>
 80004c2:	2e0b      	cmp	r6, #11
 80004c4:	d000      	beq.n	80004c8 <__aeabi_fmul+0x27c>
 80004c6:	e6f7      	b.n	80002b8 <__aeabi_fmul+0x6c>
 80004c8:	46a1      	mov	r9, r4
 80004ca:	469a      	mov	sl, r3
 80004cc:	e736      	b.n	800033c <__aeabi_fmul+0xf0>
 80004ce:	2180      	movs	r1, #128	; 0x80
 80004d0:	464b      	mov	r3, r9
 80004d2:	03c9      	lsls	r1, r1, #15
 80004d4:	4319      	orrs	r1, r3
 80004d6:	0249      	lsls	r1, r1, #9
 80004d8:	4642      	mov	r2, r8
 80004da:	20ff      	movs	r0, #255	; 0xff
 80004dc:	0a49      	lsrs	r1, r1, #9
 80004de:	e707      	b.n	80002f0 <__aeabi_fmul+0xa4>
 80004e0:	2303      	movs	r3, #3
 80004e2:	e7df      	b.n	80004a4 <__aeabi_fmul+0x258>
 80004e4:	f7ffffff 	.word	0xf7ffffff

080004e8 <__aeabi_fsub>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46c6      	mov	lr, r8
 80004ec:	0243      	lsls	r3, r0, #9
 80004ee:	0a5b      	lsrs	r3, r3, #9
 80004f0:	0045      	lsls	r5, r0, #1
 80004f2:	00da      	lsls	r2, r3, #3
 80004f4:	0fc4      	lsrs	r4, r0, #31
 80004f6:	0248      	lsls	r0, r1, #9
 80004f8:	004f      	lsls	r7, r1, #1
 80004fa:	4694      	mov	ip, r2
 80004fc:	0a42      	lsrs	r2, r0, #9
 80004fe:	001e      	movs	r6, r3
 8000500:	4690      	mov	r8, r2
 8000502:	b500      	push	{lr}
 8000504:	0e2d      	lsrs	r5, r5, #24
 8000506:	0e3f      	lsrs	r7, r7, #24
 8000508:	0fc9      	lsrs	r1, r1, #31
 800050a:	0980      	lsrs	r0, r0, #6
 800050c:	2fff      	cmp	r7, #255	; 0xff
 800050e:	d059      	beq.n	80005c4 <__aeabi_fsub+0xdc>
 8000510:	2201      	movs	r2, #1
 8000512:	4051      	eors	r1, r2
 8000514:	428c      	cmp	r4, r1
 8000516:	d039      	beq.n	800058c <__aeabi_fsub+0xa4>
 8000518:	1bea      	subs	r2, r5, r7
 800051a:	2a00      	cmp	r2, #0
 800051c:	dd58      	ble.n	80005d0 <__aeabi_fsub+0xe8>
 800051e:	2f00      	cmp	r7, #0
 8000520:	d068      	beq.n	80005f4 <__aeabi_fsub+0x10c>
 8000522:	2dff      	cmp	r5, #255	; 0xff
 8000524:	d100      	bne.n	8000528 <__aeabi_fsub+0x40>
 8000526:	e0d1      	b.n	80006cc <__aeabi_fsub+0x1e4>
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	04db      	lsls	r3, r3, #19
 800052c:	4318      	orrs	r0, r3
 800052e:	2a1b      	cmp	r2, #27
 8000530:	dc00      	bgt.n	8000534 <__aeabi_fsub+0x4c>
 8000532:	e0e3      	b.n	80006fc <__aeabi_fsub+0x214>
 8000534:	2301      	movs	r3, #1
 8000536:	4662      	mov	r2, ip
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	015a      	lsls	r2, r3, #5
 800053c:	d400      	bmi.n	8000540 <__aeabi_fsub+0x58>
 800053e:	e0ac      	b.n	800069a <__aeabi_fsub+0x1b2>
 8000540:	019b      	lsls	r3, r3, #6
 8000542:	099e      	lsrs	r6, r3, #6
 8000544:	0030      	movs	r0, r6
 8000546:	f001 f88f 	bl	8001668 <__clzsi2>
 800054a:	0033      	movs	r3, r6
 800054c:	3805      	subs	r0, #5
 800054e:	4083      	lsls	r3, r0
 8000550:	4285      	cmp	r5, r0
 8000552:	dc00      	bgt.n	8000556 <__aeabi_fsub+0x6e>
 8000554:	e0c6      	b.n	80006e4 <__aeabi_fsub+0x1fc>
 8000556:	4ab2      	ldr	r2, [pc, #712]	; (8000820 <__aeabi_fsub+0x338>)
 8000558:	1a2d      	subs	r5, r5, r0
 800055a:	4013      	ands	r3, r2
 800055c:	075a      	lsls	r2, r3, #29
 800055e:	d004      	beq.n	800056a <__aeabi_fsub+0x82>
 8000560:	220f      	movs	r2, #15
 8000562:	401a      	ands	r2, r3
 8000564:	2a04      	cmp	r2, #4
 8000566:	d000      	beq.n	800056a <__aeabi_fsub+0x82>
 8000568:	3304      	adds	r3, #4
 800056a:	015a      	lsls	r2, r3, #5
 800056c:	d400      	bmi.n	8000570 <__aeabi_fsub+0x88>
 800056e:	e097      	b.n	80006a0 <__aeabi_fsub+0x1b8>
 8000570:	1c6a      	adds	r2, r5, #1
 8000572:	2dfe      	cmp	r5, #254	; 0xfe
 8000574:	d100      	bne.n	8000578 <__aeabi_fsub+0x90>
 8000576:	e084      	b.n	8000682 <__aeabi_fsub+0x19a>
 8000578:	019b      	lsls	r3, r3, #6
 800057a:	0a5e      	lsrs	r6, r3, #9
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	05d0      	lsls	r0, r2, #23
 8000580:	4330      	orrs	r0, r6
 8000582:	07e4      	lsls	r4, r4, #31
 8000584:	4320      	orrs	r0, r4
 8000586:	bc80      	pop	{r7}
 8000588:	46b8      	mov	r8, r7
 800058a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058c:	1bea      	subs	r2, r5, r7
 800058e:	2a00      	cmp	r2, #0
 8000590:	dd41      	ble.n	8000616 <__aeabi_fsub+0x12e>
 8000592:	2f00      	cmp	r7, #0
 8000594:	d06b      	beq.n	800066e <__aeabi_fsub+0x186>
 8000596:	2dff      	cmp	r5, #255	; 0xff
 8000598:	d100      	bne.n	800059c <__aeabi_fsub+0xb4>
 800059a:	e097      	b.n	80006cc <__aeabi_fsub+0x1e4>
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	04db      	lsls	r3, r3, #19
 80005a0:	4318      	orrs	r0, r3
 80005a2:	2a1b      	cmp	r2, #27
 80005a4:	dc00      	bgt.n	80005a8 <__aeabi_fsub+0xc0>
 80005a6:	e0cc      	b.n	8000742 <__aeabi_fsub+0x25a>
 80005a8:	2301      	movs	r3, #1
 80005aa:	4463      	add	r3, ip
 80005ac:	015a      	lsls	r2, r3, #5
 80005ae:	d574      	bpl.n	800069a <__aeabi_fsub+0x1b2>
 80005b0:	3501      	adds	r5, #1
 80005b2:	2dff      	cmp	r5, #255	; 0xff
 80005b4:	d065      	beq.n	8000682 <__aeabi_fsub+0x19a>
 80005b6:	2201      	movs	r2, #1
 80005b8:	499a      	ldr	r1, [pc, #616]	; (8000824 <__aeabi_fsub+0x33c>)
 80005ba:	401a      	ands	r2, r3
 80005bc:	085b      	lsrs	r3, r3, #1
 80005be:	400b      	ands	r3, r1
 80005c0:	4313      	orrs	r3, r2
 80005c2:	e7cb      	b.n	800055c <__aeabi_fsub+0x74>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d01f      	beq.n	8000608 <__aeabi_fsub+0x120>
 80005c8:	428c      	cmp	r4, r1
 80005ca:	d022      	beq.n	8000612 <__aeabi_fsub+0x12a>
 80005cc:	002a      	movs	r2, r5
 80005ce:	3aff      	subs	r2, #255	; 0xff
 80005d0:	2a00      	cmp	r2, #0
 80005d2:	d035      	beq.n	8000640 <__aeabi_fsub+0x158>
 80005d4:	1b7a      	subs	r2, r7, r5
 80005d6:	2d00      	cmp	r5, #0
 80005d8:	d000      	beq.n	80005dc <__aeabi_fsub+0xf4>
 80005da:	e099      	b.n	8000710 <__aeabi_fsub+0x228>
 80005dc:	4663      	mov	r3, ip
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_fsub+0xfc>
 80005e2:	e0dd      	b.n	80007a0 <__aeabi_fsub+0x2b8>
 80005e4:	1e53      	subs	r3, r2, #1
 80005e6:	2a01      	cmp	r2, #1
 80005e8:	d100      	bne.n	80005ec <__aeabi_fsub+0x104>
 80005ea:	e105      	b.n	80007f8 <__aeabi_fsub+0x310>
 80005ec:	2aff      	cmp	r2, #255	; 0xff
 80005ee:	d06b      	beq.n	80006c8 <__aeabi_fsub+0x1e0>
 80005f0:	001a      	movs	r2, r3
 80005f2:	e094      	b.n	800071e <__aeabi_fsub+0x236>
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d073      	beq.n	80006e0 <__aeabi_fsub+0x1f8>
 80005f8:	1e51      	subs	r1, r2, #1
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	d100      	bne.n	8000600 <__aeabi_fsub+0x118>
 80005fe:	e0df      	b.n	80007c0 <__aeabi_fsub+0x2d8>
 8000600:	2aff      	cmp	r2, #255	; 0xff
 8000602:	d063      	beq.n	80006cc <__aeabi_fsub+0x1e4>
 8000604:	000a      	movs	r2, r1
 8000606:	e792      	b.n	800052e <__aeabi_fsub+0x46>
 8000608:	2201      	movs	r2, #1
 800060a:	4051      	eors	r1, r2
 800060c:	42a1      	cmp	r1, r4
 800060e:	d000      	beq.n	8000612 <__aeabi_fsub+0x12a>
 8000610:	e782      	b.n	8000518 <__aeabi_fsub+0x30>
 8000612:	002a      	movs	r2, r5
 8000614:	3aff      	subs	r2, #255	; 0xff
 8000616:	2a00      	cmp	r2, #0
 8000618:	d036      	beq.n	8000688 <__aeabi_fsub+0x1a0>
 800061a:	1b7a      	subs	r2, r7, r5
 800061c:	2d00      	cmp	r5, #0
 800061e:	d100      	bne.n	8000622 <__aeabi_fsub+0x13a>
 8000620:	e0aa      	b.n	8000778 <__aeabi_fsub+0x290>
 8000622:	2fff      	cmp	r7, #255	; 0xff
 8000624:	d100      	bne.n	8000628 <__aeabi_fsub+0x140>
 8000626:	e0da      	b.n	80007de <__aeabi_fsub+0x2f6>
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	4661      	mov	r1, ip
 800062c:	04db      	lsls	r3, r3, #19
 800062e:	4319      	orrs	r1, r3
 8000630:	468c      	mov	ip, r1
 8000632:	2a1b      	cmp	r2, #27
 8000634:	dc00      	bgt.n	8000638 <__aeabi_fsub+0x150>
 8000636:	e0d4      	b.n	80007e2 <__aeabi_fsub+0x2fa>
 8000638:	2301      	movs	r3, #1
 800063a:	003d      	movs	r5, r7
 800063c:	181b      	adds	r3, r3, r0
 800063e:	e7b5      	b.n	80005ac <__aeabi_fsub+0xc4>
 8000640:	27fe      	movs	r7, #254	; 0xfe
 8000642:	1c6a      	adds	r2, r5, #1
 8000644:	4217      	tst	r7, r2
 8000646:	d171      	bne.n	800072c <__aeabi_fsub+0x244>
 8000648:	2d00      	cmp	r5, #0
 800064a:	d000      	beq.n	800064e <__aeabi_fsub+0x166>
 800064c:	e09e      	b.n	800078c <__aeabi_fsub+0x2a4>
 800064e:	4663      	mov	r3, ip
 8000650:	2b00      	cmp	r3, #0
 8000652:	d100      	bne.n	8000656 <__aeabi_fsub+0x16e>
 8000654:	e0d5      	b.n	8000802 <__aeabi_fsub+0x31a>
 8000656:	2200      	movs	r2, #0
 8000658:	2800      	cmp	r0, #0
 800065a:	d100      	bne.n	800065e <__aeabi_fsub+0x176>
 800065c:	e78f      	b.n	800057e <__aeabi_fsub+0x96>
 800065e:	1a1b      	subs	r3, r3, r0
 8000660:	015e      	lsls	r6, r3, #5
 8000662:	d400      	bmi.n	8000666 <__aeabi_fsub+0x17e>
 8000664:	e0d6      	b.n	8000814 <__aeabi_fsub+0x32c>
 8000666:	4663      	mov	r3, ip
 8000668:	000c      	movs	r4, r1
 800066a:	1ac3      	subs	r3, r0, r3
 800066c:	e776      	b.n	800055c <__aeabi_fsub+0x74>
 800066e:	2800      	cmp	r0, #0
 8000670:	d036      	beq.n	80006e0 <__aeabi_fsub+0x1f8>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d100      	bne.n	800067a <__aeabi_fsub+0x192>
 8000678:	e09a      	b.n	80007b0 <__aeabi_fsub+0x2c8>
 800067a:	2aff      	cmp	r2, #255	; 0xff
 800067c:	d026      	beq.n	80006cc <__aeabi_fsub+0x1e4>
 800067e:	000a      	movs	r2, r1
 8000680:	e78f      	b.n	80005a2 <__aeabi_fsub+0xba>
 8000682:	22ff      	movs	r2, #255	; 0xff
 8000684:	2600      	movs	r6, #0
 8000686:	e77a      	b.n	800057e <__aeabi_fsub+0x96>
 8000688:	27fe      	movs	r7, #254	; 0xfe
 800068a:	1c6a      	adds	r2, r5, #1
 800068c:	4217      	tst	r7, r2
 800068e:	d062      	beq.n	8000756 <__aeabi_fsub+0x26e>
 8000690:	2aff      	cmp	r2, #255	; 0xff
 8000692:	d0f6      	beq.n	8000682 <__aeabi_fsub+0x19a>
 8000694:	0015      	movs	r5, r2
 8000696:	4460      	add	r0, ip
 8000698:	0843      	lsrs	r3, r0, #1
 800069a:	075a      	lsls	r2, r3, #29
 800069c:	d000      	beq.n	80006a0 <__aeabi_fsub+0x1b8>
 800069e:	e75f      	b.n	8000560 <__aeabi_fsub+0x78>
 80006a0:	08db      	lsrs	r3, r3, #3
 80006a2:	2dff      	cmp	r5, #255	; 0xff
 80006a4:	d012      	beq.n	80006cc <__aeabi_fsub+0x1e4>
 80006a6:	025b      	lsls	r3, r3, #9
 80006a8:	0a5e      	lsrs	r6, r3, #9
 80006aa:	b2ea      	uxtb	r2, r5
 80006ac:	e767      	b.n	800057e <__aeabi_fsub+0x96>
 80006ae:	4662      	mov	r2, ip
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fsub+0x1ce>
 80006b4:	e093      	b.n	80007de <__aeabi_fsub+0x2f6>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	d008      	beq.n	80006cc <__aeabi_fsub+0x1e4>
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	03d2      	lsls	r2, r2, #15
 80006be:	4213      	tst	r3, r2
 80006c0:	d004      	beq.n	80006cc <__aeabi_fsub+0x1e4>
 80006c2:	4640      	mov	r0, r8
 80006c4:	4210      	tst	r0, r2
 80006c6:	d101      	bne.n	80006cc <__aeabi_fsub+0x1e4>
 80006c8:	000c      	movs	r4, r1
 80006ca:	4643      	mov	r3, r8
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d0d8      	beq.n	8000682 <__aeabi_fsub+0x19a>
 80006d0:	2680      	movs	r6, #128	; 0x80
 80006d2:	03f6      	lsls	r6, r6, #15
 80006d4:	431e      	orrs	r6, r3
 80006d6:	0276      	lsls	r6, r6, #9
 80006d8:	22ff      	movs	r2, #255	; 0xff
 80006da:	0a76      	lsrs	r6, r6, #9
 80006dc:	e74f      	b.n	800057e <__aeabi_fsub+0x96>
 80006de:	4643      	mov	r3, r8
 80006e0:	0015      	movs	r5, r2
 80006e2:	e7de      	b.n	80006a2 <__aeabi_fsub+0x1ba>
 80006e4:	2220      	movs	r2, #32
 80006e6:	1b40      	subs	r0, r0, r5
 80006e8:	3001      	adds	r0, #1
 80006ea:	1a12      	subs	r2, r2, r0
 80006ec:	0019      	movs	r1, r3
 80006ee:	4093      	lsls	r3, r2
 80006f0:	40c1      	lsrs	r1, r0
 80006f2:	1e5a      	subs	r2, r3, #1
 80006f4:	4193      	sbcs	r3, r2
 80006f6:	2500      	movs	r5, #0
 80006f8:	430b      	orrs	r3, r1
 80006fa:	e72f      	b.n	800055c <__aeabi_fsub+0x74>
 80006fc:	2320      	movs	r3, #32
 80006fe:	1a9b      	subs	r3, r3, r2
 8000700:	0001      	movs	r1, r0
 8000702:	4098      	lsls	r0, r3
 8000704:	0003      	movs	r3, r0
 8000706:	40d1      	lsrs	r1, r2
 8000708:	1e5a      	subs	r2, r3, #1
 800070a:	4193      	sbcs	r3, r2
 800070c:	430b      	orrs	r3, r1
 800070e:	e712      	b.n	8000536 <__aeabi_fsub+0x4e>
 8000710:	2fff      	cmp	r7, #255	; 0xff
 8000712:	d0d9      	beq.n	80006c8 <__aeabi_fsub+0x1e0>
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	4664      	mov	r4, ip
 8000718:	04db      	lsls	r3, r3, #19
 800071a:	431c      	orrs	r4, r3
 800071c:	46a4      	mov	ip, r4
 800071e:	2a1b      	cmp	r2, #27
 8000720:	dd52      	ble.n	80007c8 <__aeabi_fsub+0x2e0>
 8000722:	2301      	movs	r3, #1
 8000724:	000c      	movs	r4, r1
 8000726:	003d      	movs	r5, r7
 8000728:	1ac3      	subs	r3, r0, r3
 800072a:	e706      	b.n	800053a <__aeabi_fsub+0x52>
 800072c:	4663      	mov	r3, ip
 800072e:	1a1e      	subs	r6, r3, r0
 8000730:	0173      	lsls	r3, r6, #5
 8000732:	d439      	bmi.n	80007a8 <__aeabi_fsub+0x2c0>
 8000734:	2e00      	cmp	r6, #0
 8000736:	d000      	beq.n	800073a <__aeabi_fsub+0x252>
 8000738:	e704      	b.n	8000544 <__aeabi_fsub+0x5c>
 800073a:	2400      	movs	r4, #0
 800073c:	2200      	movs	r2, #0
 800073e:	2600      	movs	r6, #0
 8000740:	e71d      	b.n	800057e <__aeabi_fsub+0x96>
 8000742:	2320      	movs	r3, #32
 8000744:	1a9b      	subs	r3, r3, r2
 8000746:	0001      	movs	r1, r0
 8000748:	4098      	lsls	r0, r3
 800074a:	0003      	movs	r3, r0
 800074c:	40d1      	lsrs	r1, r2
 800074e:	1e5a      	subs	r2, r3, #1
 8000750:	4193      	sbcs	r3, r2
 8000752:	430b      	orrs	r3, r1
 8000754:	e729      	b.n	80005aa <__aeabi_fsub+0xc2>
 8000756:	2d00      	cmp	r5, #0
 8000758:	d1a9      	bne.n	80006ae <__aeabi_fsub+0x1c6>
 800075a:	4663      	mov	r3, ip
 800075c:	2b00      	cmp	r3, #0
 800075e:	d056      	beq.n	800080e <__aeabi_fsub+0x326>
 8000760:	2200      	movs	r2, #0
 8000762:	2800      	cmp	r0, #0
 8000764:	d100      	bne.n	8000768 <__aeabi_fsub+0x280>
 8000766:	e70a      	b.n	800057e <__aeabi_fsub+0x96>
 8000768:	0003      	movs	r3, r0
 800076a:	4463      	add	r3, ip
 800076c:	015a      	lsls	r2, r3, #5
 800076e:	d594      	bpl.n	800069a <__aeabi_fsub+0x1b2>
 8000770:	4a2b      	ldr	r2, [pc, #172]	; (8000820 <__aeabi_fsub+0x338>)
 8000772:	3501      	adds	r5, #1
 8000774:	4013      	ands	r3, r2
 8000776:	e790      	b.n	800069a <__aeabi_fsub+0x1b2>
 8000778:	4663      	mov	r3, ip
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0af      	beq.n	80006de <__aeabi_fsub+0x1f6>
 800077e:	1e53      	subs	r3, r2, #1
 8000780:	2a01      	cmp	r2, #1
 8000782:	d015      	beq.n	80007b0 <__aeabi_fsub+0x2c8>
 8000784:	2aff      	cmp	r2, #255	; 0xff
 8000786:	d02a      	beq.n	80007de <__aeabi_fsub+0x2f6>
 8000788:	001a      	movs	r2, r3
 800078a:	e752      	b.n	8000632 <__aeabi_fsub+0x14a>
 800078c:	4662      	mov	r2, ip
 800078e:	2a00      	cmp	r2, #0
 8000790:	d191      	bne.n	80006b6 <__aeabi_fsub+0x1ce>
 8000792:	2800      	cmp	r0, #0
 8000794:	d198      	bne.n	80006c8 <__aeabi_fsub+0x1e0>
 8000796:	2680      	movs	r6, #128	; 0x80
 8000798:	2400      	movs	r4, #0
 800079a:	22ff      	movs	r2, #255	; 0xff
 800079c:	03f6      	lsls	r6, r6, #15
 800079e:	e6ee      	b.n	800057e <__aeabi_fsub+0x96>
 80007a0:	000c      	movs	r4, r1
 80007a2:	4643      	mov	r3, r8
 80007a4:	0015      	movs	r5, r2
 80007a6:	e77c      	b.n	80006a2 <__aeabi_fsub+0x1ba>
 80007a8:	4663      	mov	r3, ip
 80007aa:	000c      	movs	r4, r1
 80007ac:	1ac6      	subs	r6, r0, r3
 80007ae:	e6c9      	b.n	8000544 <__aeabi_fsub+0x5c>
 80007b0:	0003      	movs	r3, r0
 80007b2:	4463      	add	r3, ip
 80007b4:	2501      	movs	r5, #1
 80007b6:	015a      	lsls	r2, r3, #5
 80007b8:	d400      	bmi.n	80007bc <__aeabi_fsub+0x2d4>
 80007ba:	e76e      	b.n	800069a <__aeabi_fsub+0x1b2>
 80007bc:	2502      	movs	r5, #2
 80007be:	e6fa      	b.n	80005b6 <__aeabi_fsub+0xce>
 80007c0:	4663      	mov	r3, ip
 80007c2:	2501      	movs	r5, #1
 80007c4:	1a1b      	subs	r3, r3, r0
 80007c6:	e6b8      	b.n	800053a <__aeabi_fsub+0x52>
 80007c8:	4664      	mov	r4, ip
 80007ca:	2320      	movs	r3, #32
 80007cc:	40d4      	lsrs	r4, r2
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4662      	mov	r2, ip
 80007d2:	409a      	lsls	r2, r3
 80007d4:	0013      	movs	r3, r2
 80007d6:	1e5a      	subs	r2, r3, #1
 80007d8:	4193      	sbcs	r3, r2
 80007da:	4323      	orrs	r3, r4
 80007dc:	e7a2      	b.n	8000724 <__aeabi_fsub+0x23c>
 80007de:	4643      	mov	r3, r8
 80007e0:	e774      	b.n	80006cc <__aeabi_fsub+0x1e4>
 80007e2:	4661      	mov	r1, ip
 80007e4:	2320      	movs	r3, #32
 80007e6:	40d1      	lsrs	r1, r2
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	4662      	mov	r2, ip
 80007ec:	409a      	lsls	r2, r3
 80007ee:	0013      	movs	r3, r2
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	4193      	sbcs	r3, r2
 80007f4:	430b      	orrs	r3, r1
 80007f6:	e720      	b.n	800063a <__aeabi_fsub+0x152>
 80007f8:	4663      	mov	r3, ip
 80007fa:	000c      	movs	r4, r1
 80007fc:	2501      	movs	r5, #1
 80007fe:	1ac3      	subs	r3, r0, r3
 8000800:	e69b      	b.n	800053a <__aeabi_fsub+0x52>
 8000802:	2800      	cmp	r0, #0
 8000804:	d099      	beq.n	800073a <__aeabi_fsub+0x252>
 8000806:	000c      	movs	r4, r1
 8000808:	4646      	mov	r6, r8
 800080a:	2200      	movs	r2, #0
 800080c:	e6b7      	b.n	800057e <__aeabi_fsub+0x96>
 800080e:	4646      	mov	r6, r8
 8000810:	2200      	movs	r2, #0
 8000812:	e6b4      	b.n	800057e <__aeabi_fsub+0x96>
 8000814:	2b00      	cmp	r3, #0
 8000816:	d000      	beq.n	800081a <__aeabi_fsub+0x332>
 8000818:	e73f      	b.n	800069a <__aeabi_fsub+0x1b2>
 800081a:	2400      	movs	r4, #0
 800081c:	2600      	movs	r6, #0
 800081e:	e6ae      	b.n	800057e <__aeabi_fsub+0x96>
 8000820:	fbffffff 	.word	0xfbffffff
 8000824:	7dffffff 	.word	0x7dffffff

08000828 <__aeabi_f2iz>:
 8000828:	0241      	lsls	r1, r0, #9
 800082a:	0042      	lsls	r2, r0, #1
 800082c:	0fc3      	lsrs	r3, r0, #31
 800082e:	0a49      	lsrs	r1, r1, #9
 8000830:	2000      	movs	r0, #0
 8000832:	0e12      	lsrs	r2, r2, #24
 8000834:	2a7e      	cmp	r2, #126	; 0x7e
 8000836:	dd03      	ble.n	8000840 <__aeabi_f2iz+0x18>
 8000838:	2a9d      	cmp	r2, #157	; 0x9d
 800083a:	dd02      	ble.n	8000842 <__aeabi_f2iz+0x1a>
 800083c:	4a09      	ldr	r2, [pc, #36]	; (8000864 <__aeabi_f2iz+0x3c>)
 800083e:	1898      	adds	r0, r3, r2
 8000840:	4770      	bx	lr
 8000842:	2080      	movs	r0, #128	; 0x80
 8000844:	0400      	lsls	r0, r0, #16
 8000846:	4301      	orrs	r1, r0
 8000848:	2a95      	cmp	r2, #149	; 0x95
 800084a:	dc07      	bgt.n	800085c <__aeabi_f2iz+0x34>
 800084c:	2096      	movs	r0, #150	; 0x96
 800084e:	1a82      	subs	r2, r0, r2
 8000850:	40d1      	lsrs	r1, r2
 8000852:	4248      	negs	r0, r1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f3      	bne.n	8000840 <__aeabi_f2iz+0x18>
 8000858:	0008      	movs	r0, r1
 800085a:	e7f1      	b.n	8000840 <__aeabi_f2iz+0x18>
 800085c:	3a96      	subs	r2, #150	; 0x96
 800085e:	4091      	lsls	r1, r2
 8000860:	e7f7      	b.n	8000852 <__aeabi_f2iz+0x2a>
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	7fffffff 	.word	0x7fffffff

08000868 <__aeabi_ui2f>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	1e04      	subs	r4, r0, #0
 800086c:	d00e      	beq.n	800088c <__aeabi_ui2f+0x24>
 800086e:	f000 fefb 	bl	8001668 <__clzsi2>
 8000872:	239e      	movs	r3, #158	; 0x9e
 8000874:	0001      	movs	r1, r0
 8000876:	1a1b      	subs	r3, r3, r0
 8000878:	2b96      	cmp	r3, #150	; 0x96
 800087a:	dc0c      	bgt.n	8000896 <__aeabi_ui2f+0x2e>
 800087c:	2808      	cmp	r0, #8
 800087e:	d02c      	beq.n	80008da <__aeabi_ui2f+0x72>
 8000880:	3908      	subs	r1, #8
 8000882:	408c      	lsls	r4, r1
 8000884:	0264      	lsls	r4, r4, #9
 8000886:	0a64      	lsrs	r4, r4, #9
 8000888:	b2d8      	uxtb	r0, r3
 800088a:	e001      	b.n	8000890 <__aeabi_ui2f+0x28>
 800088c:	2000      	movs	r0, #0
 800088e:	2400      	movs	r4, #0
 8000890:	05c0      	lsls	r0, r0, #23
 8000892:	4320      	orrs	r0, r4
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	2b99      	cmp	r3, #153	; 0x99
 8000898:	dd0a      	ble.n	80008b0 <__aeabi_ui2f+0x48>
 800089a:	0002      	movs	r2, r0
 800089c:	0020      	movs	r0, r4
 800089e:	321b      	adds	r2, #27
 80008a0:	4090      	lsls	r0, r2
 80008a2:	0002      	movs	r2, r0
 80008a4:	1e50      	subs	r0, r2, #1
 80008a6:	4182      	sbcs	r2, r0
 80008a8:	2005      	movs	r0, #5
 80008aa:	1a40      	subs	r0, r0, r1
 80008ac:	40c4      	lsrs	r4, r0
 80008ae:	4314      	orrs	r4, r2
 80008b0:	2905      	cmp	r1, #5
 80008b2:	dc16      	bgt.n	80008e2 <__aeabi_ui2f+0x7a>
 80008b4:	0022      	movs	r2, r4
 80008b6:	480f      	ldr	r0, [pc, #60]	; (80008f4 <__aeabi_ui2f+0x8c>)
 80008b8:	4002      	ands	r2, r0
 80008ba:	0765      	lsls	r5, r4, #29
 80008bc:	d009      	beq.n	80008d2 <__aeabi_ui2f+0x6a>
 80008be:	250f      	movs	r5, #15
 80008c0:	402c      	ands	r4, r5
 80008c2:	2c04      	cmp	r4, #4
 80008c4:	d005      	beq.n	80008d2 <__aeabi_ui2f+0x6a>
 80008c6:	3204      	adds	r2, #4
 80008c8:	0154      	lsls	r4, r2, #5
 80008ca:	d502      	bpl.n	80008d2 <__aeabi_ui2f+0x6a>
 80008cc:	239f      	movs	r3, #159	; 0x9f
 80008ce:	4002      	ands	r2, r0
 80008d0:	1a5b      	subs	r3, r3, r1
 80008d2:	0192      	lsls	r2, r2, #6
 80008d4:	0a54      	lsrs	r4, r2, #9
 80008d6:	b2d8      	uxtb	r0, r3
 80008d8:	e7da      	b.n	8000890 <__aeabi_ui2f+0x28>
 80008da:	0264      	lsls	r4, r4, #9
 80008dc:	2096      	movs	r0, #150	; 0x96
 80008de:	0a64      	lsrs	r4, r4, #9
 80008e0:	e7d6      	b.n	8000890 <__aeabi_ui2f+0x28>
 80008e2:	1f4a      	subs	r2, r1, #5
 80008e4:	4094      	lsls	r4, r2
 80008e6:	0022      	movs	r2, r4
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <__aeabi_ui2f+0x8c>)
 80008ea:	4002      	ands	r2, r0
 80008ec:	0765      	lsls	r5, r4, #29
 80008ee:	d0f0      	beq.n	80008d2 <__aeabi_ui2f+0x6a>
 80008f0:	e7e5      	b.n	80008be <__aeabi_ui2f+0x56>
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	fbffffff 	.word	0xfbffffff

080008f8 <__aeabi_ddiv>:
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	4657      	mov	r7, sl
 80008fc:	464e      	mov	r6, r9
 80008fe:	4645      	mov	r5, r8
 8000900:	46de      	mov	lr, fp
 8000902:	b5e0      	push	{r5, r6, r7, lr}
 8000904:	030c      	lsls	r4, r1, #12
 8000906:	001f      	movs	r7, r3
 8000908:	004b      	lsls	r3, r1, #1
 800090a:	4681      	mov	r9, r0
 800090c:	4692      	mov	sl, r2
 800090e:	0005      	movs	r5, r0
 8000910:	b085      	sub	sp, #20
 8000912:	0b24      	lsrs	r4, r4, #12
 8000914:	0d5b      	lsrs	r3, r3, #21
 8000916:	0fce      	lsrs	r6, r1, #31
 8000918:	2b00      	cmp	r3, #0
 800091a:	d100      	bne.n	800091e <__aeabi_ddiv+0x26>
 800091c:	e152      	b.n	8000bc4 <__aeabi_ddiv+0x2cc>
 800091e:	4ad2      	ldr	r2, [pc, #840]	; (8000c68 <__aeabi_ddiv+0x370>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d100      	bne.n	8000926 <__aeabi_ddiv+0x2e>
 8000924:	e16e      	b.n	8000c04 <__aeabi_ddiv+0x30c>
 8000926:	0f42      	lsrs	r2, r0, #29
 8000928:	00e4      	lsls	r4, r4, #3
 800092a:	4314      	orrs	r4, r2
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	0412      	lsls	r2, r2, #16
 8000930:	4322      	orrs	r2, r4
 8000932:	4690      	mov	r8, r2
 8000934:	4acd      	ldr	r2, [pc, #820]	; (8000c6c <__aeabi_ddiv+0x374>)
 8000936:	00c5      	lsls	r5, r0, #3
 8000938:	4693      	mov	fp, r2
 800093a:	449b      	add	fp, r3
 800093c:	2300      	movs	r3, #0
 800093e:	4699      	mov	r9, r3
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	033c      	lsls	r4, r7, #12
 8000944:	007b      	lsls	r3, r7, #1
 8000946:	4650      	mov	r0, sl
 8000948:	0b24      	lsrs	r4, r4, #12
 800094a:	0d5b      	lsrs	r3, r3, #21
 800094c:	0fff      	lsrs	r7, r7, #31
 800094e:	2b00      	cmp	r3, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_ddiv+0x5c>
 8000952:	e11a      	b.n	8000b8a <__aeabi_ddiv+0x292>
 8000954:	4ac4      	ldr	r2, [pc, #784]	; (8000c68 <__aeabi_ddiv+0x370>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d100      	bne.n	800095c <__aeabi_ddiv+0x64>
 800095a:	e15e      	b.n	8000c1a <__aeabi_ddiv+0x322>
 800095c:	0f42      	lsrs	r2, r0, #29
 800095e:	00e4      	lsls	r4, r4, #3
 8000960:	4322      	orrs	r2, r4
 8000962:	2480      	movs	r4, #128	; 0x80
 8000964:	0424      	lsls	r4, r4, #16
 8000966:	4314      	orrs	r4, r2
 8000968:	4ac0      	ldr	r2, [pc, #768]	; (8000c6c <__aeabi_ddiv+0x374>)
 800096a:	00c1      	lsls	r1, r0, #3
 800096c:	4694      	mov	ip, r2
 800096e:	465a      	mov	r2, fp
 8000970:	4463      	add	r3, ip
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	469b      	mov	fp, r3
 8000976:	2000      	movs	r0, #0
 8000978:	0033      	movs	r3, r6
 800097a:	407b      	eors	r3, r7
 800097c:	469a      	mov	sl, r3
 800097e:	464b      	mov	r3, r9
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d827      	bhi.n	80009d4 <__aeabi_ddiv+0xdc>
 8000984:	4aba      	ldr	r2, [pc, #744]	; (8000c70 <__aeabi_ddiv+0x378>)
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	58d3      	ldr	r3, [r2, r3]
 800098a:	469f      	mov	pc, r3
 800098c:	46b2      	mov	sl, r6
 800098e:	9b00      	ldr	r3, [sp, #0]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d016      	beq.n	80009c2 <__aeabi_ddiv+0xca>
 8000994:	2b03      	cmp	r3, #3
 8000996:	d100      	bne.n	800099a <__aeabi_ddiv+0xa2>
 8000998:	e287      	b.n	8000eaa <__aeabi_ddiv+0x5b2>
 800099a:	2b01      	cmp	r3, #1
 800099c:	d000      	beq.n	80009a0 <__aeabi_ddiv+0xa8>
 800099e:	e0d5      	b.n	8000b4c <__aeabi_ddiv+0x254>
 80009a0:	2300      	movs	r3, #0
 80009a2:	2200      	movs	r2, #0
 80009a4:	2500      	movs	r5, #0
 80009a6:	051b      	lsls	r3, r3, #20
 80009a8:	4313      	orrs	r3, r2
 80009aa:	4652      	mov	r2, sl
 80009ac:	07d2      	lsls	r2, r2, #31
 80009ae:	4313      	orrs	r3, r2
 80009b0:	0028      	movs	r0, r5
 80009b2:	0019      	movs	r1, r3
 80009b4:	b005      	add	sp, #20
 80009b6:	bcf0      	pop	{r4, r5, r6, r7}
 80009b8:	46bb      	mov	fp, r7
 80009ba:	46b2      	mov	sl, r6
 80009bc:	46a9      	mov	r9, r5
 80009be:	46a0      	mov	r8, r4
 80009c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c2:	2200      	movs	r2, #0
 80009c4:	2500      	movs	r5, #0
 80009c6:	4ba8      	ldr	r3, [pc, #672]	; (8000c68 <__aeabi_ddiv+0x370>)
 80009c8:	e7ed      	b.n	80009a6 <__aeabi_ddiv+0xae>
 80009ca:	46ba      	mov	sl, r7
 80009cc:	46a0      	mov	r8, r4
 80009ce:	000d      	movs	r5, r1
 80009d0:	9000      	str	r0, [sp, #0]
 80009d2:	e7dc      	b.n	800098e <__aeabi_ddiv+0x96>
 80009d4:	4544      	cmp	r4, r8
 80009d6:	d200      	bcs.n	80009da <__aeabi_ddiv+0xe2>
 80009d8:	e1c4      	b.n	8000d64 <__aeabi_ddiv+0x46c>
 80009da:	d100      	bne.n	80009de <__aeabi_ddiv+0xe6>
 80009dc:	e1bf      	b.n	8000d5e <__aeabi_ddiv+0x466>
 80009de:	2301      	movs	r3, #1
 80009e0:	425b      	negs	r3, r3
 80009e2:	469c      	mov	ip, r3
 80009e4:	002e      	movs	r6, r5
 80009e6:	4640      	mov	r0, r8
 80009e8:	2500      	movs	r5, #0
 80009ea:	44e3      	add	fp, ip
 80009ec:	0223      	lsls	r3, r4, #8
 80009ee:	0e0c      	lsrs	r4, r1, #24
 80009f0:	431c      	orrs	r4, r3
 80009f2:	0c1b      	lsrs	r3, r3, #16
 80009f4:	4699      	mov	r9, r3
 80009f6:	0423      	lsls	r3, r4, #16
 80009f8:	020a      	lsls	r2, r1, #8
 80009fa:	0c1f      	lsrs	r7, r3, #16
 80009fc:	4649      	mov	r1, r9
 80009fe:	9200      	str	r2, [sp, #0]
 8000a00:	9701      	str	r7, [sp, #4]
 8000a02:	f7ff fc05 	bl	8000210 <__aeabi_uidivmod>
 8000a06:	0002      	movs	r2, r0
 8000a08:	437a      	muls	r2, r7
 8000a0a:	040b      	lsls	r3, r1, #16
 8000a0c:	0c31      	lsrs	r1, r6, #16
 8000a0e:	4680      	mov	r8, r0
 8000a10:	4319      	orrs	r1, r3
 8000a12:	428a      	cmp	r2, r1
 8000a14:	d907      	bls.n	8000a26 <__aeabi_ddiv+0x12e>
 8000a16:	2301      	movs	r3, #1
 8000a18:	425b      	negs	r3, r3
 8000a1a:	469c      	mov	ip, r3
 8000a1c:	1909      	adds	r1, r1, r4
 8000a1e:	44e0      	add	r8, ip
 8000a20:	428c      	cmp	r4, r1
 8000a22:	d800      	bhi.n	8000a26 <__aeabi_ddiv+0x12e>
 8000a24:	e201      	b.n	8000e2a <__aeabi_ddiv+0x532>
 8000a26:	1a88      	subs	r0, r1, r2
 8000a28:	4649      	mov	r1, r9
 8000a2a:	f7ff fbf1 	bl	8000210 <__aeabi_uidivmod>
 8000a2e:	9a01      	ldr	r2, [sp, #4]
 8000a30:	0436      	lsls	r6, r6, #16
 8000a32:	4342      	muls	r2, r0
 8000a34:	0409      	lsls	r1, r1, #16
 8000a36:	0c36      	lsrs	r6, r6, #16
 8000a38:	0003      	movs	r3, r0
 8000a3a:	430e      	orrs	r6, r1
 8000a3c:	42b2      	cmp	r2, r6
 8000a3e:	d904      	bls.n	8000a4a <__aeabi_ddiv+0x152>
 8000a40:	1936      	adds	r6, r6, r4
 8000a42:	3b01      	subs	r3, #1
 8000a44:	42b4      	cmp	r4, r6
 8000a46:	d800      	bhi.n	8000a4a <__aeabi_ddiv+0x152>
 8000a48:	e1e9      	b.n	8000e1e <__aeabi_ddiv+0x526>
 8000a4a:	1ab0      	subs	r0, r6, r2
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	9e00      	ldr	r6, [sp, #0]
 8000a50:	0412      	lsls	r2, r2, #16
 8000a52:	431a      	orrs	r2, r3
 8000a54:	0c33      	lsrs	r3, r6, #16
 8000a56:	001f      	movs	r7, r3
 8000a58:	0c11      	lsrs	r1, r2, #16
 8000a5a:	4690      	mov	r8, r2
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	0413      	lsls	r3, r2, #16
 8000a60:	0432      	lsls	r2, r6, #16
 8000a62:	0c16      	lsrs	r6, r2, #16
 8000a64:	0032      	movs	r2, r6
 8000a66:	0c1b      	lsrs	r3, r3, #16
 8000a68:	435a      	muls	r2, r3
 8000a6a:	9603      	str	r6, [sp, #12]
 8000a6c:	437b      	muls	r3, r7
 8000a6e:	434e      	muls	r6, r1
 8000a70:	4379      	muls	r1, r7
 8000a72:	0c17      	lsrs	r7, r2, #16
 8000a74:	46bc      	mov	ip, r7
 8000a76:	199b      	adds	r3, r3, r6
 8000a78:	4463      	add	r3, ip
 8000a7a:	429e      	cmp	r6, r3
 8000a7c:	d903      	bls.n	8000a86 <__aeabi_ddiv+0x18e>
 8000a7e:	2680      	movs	r6, #128	; 0x80
 8000a80:	0276      	lsls	r6, r6, #9
 8000a82:	46b4      	mov	ip, r6
 8000a84:	4461      	add	r1, ip
 8000a86:	0c1e      	lsrs	r6, r3, #16
 8000a88:	1871      	adds	r1, r6, r1
 8000a8a:	0416      	lsls	r6, r2, #16
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	0c36      	lsrs	r6, r6, #16
 8000a90:	199e      	adds	r6, r3, r6
 8000a92:	4288      	cmp	r0, r1
 8000a94:	d302      	bcc.n	8000a9c <__aeabi_ddiv+0x1a4>
 8000a96:	d112      	bne.n	8000abe <__aeabi_ddiv+0x1c6>
 8000a98:	42b5      	cmp	r5, r6
 8000a9a:	d210      	bcs.n	8000abe <__aeabi_ddiv+0x1c6>
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	1e5a      	subs	r2, r3, #1
 8000aa0:	9b00      	ldr	r3, [sp, #0]
 8000aa2:	469c      	mov	ip, r3
 8000aa4:	4465      	add	r5, ip
 8000aa6:	001f      	movs	r7, r3
 8000aa8:	429d      	cmp	r5, r3
 8000aaa:	419b      	sbcs	r3, r3
 8000aac:	425b      	negs	r3, r3
 8000aae:	191b      	adds	r3, r3, r4
 8000ab0:	18c0      	adds	r0, r0, r3
 8000ab2:	4284      	cmp	r4, r0
 8000ab4:	d200      	bcs.n	8000ab8 <__aeabi_ddiv+0x1c0>
 8000ab6:	e19e      	b.n	8000df6 <__aeabi_ddiv+0x4fe>
 8000ab8:	d100      	bne.n	8000abc <__aeabi_ddiv+0x1c4>
 8000aba:	e199      	b.n	8000df0 <__aeabi_ddiv+0x4f8>
 8000abc:	4690      	mov	r8, r2
 8000abe:	1bae      	subs	r6, r5, r6
 8000ac0:	42b5      	cmp	r5, r6
 8000ac2:	41ad      	sbcs	r5, r5
 8000ac4:	1a40      	subs	r0, r0, r1
 8000ac6:	426d      	negs	r5, r5
 8000ac8:	1b40      	subs	r0, r0, r5
 8000aca:	4284      	cmp	r4, r0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_ddiv+0x1d8>
 8000ace:	e1d2      	b.n	8000e76 <__aeabi_ddiv+0x57e>
 8000ad0:	4649      	mov	r1, r9
 8000ad2:	f7ff fb9d 	bl	8000210 <__aeabi_uidivmod>
 8000ad6:	9a01      	ldr	r2, [sp, #4]
 8000ad8:	040b      	lsls	r3, r1, #16
 8000ada:	4342      	muls	r2, r0
 8000adc:	0c31      	lsrs	r1, r6, #16
 8000ade:	0005      	movs	r5, r0
 8000ae0:	4319      	orrs	r1, r3
 8000ae2:	428a      	cmp	r2, r1
 8000ae4:	d900      	bls.n	8000ae8 <__aeabi_ddiv+0x1f0>
 8000ae6:	e16c      	b.n	8000dc2 <__aeabi_ddiv+0x4ca>
 8000ae8:	1a88      	subs	r0, r1, r2
 8000aea:	4649      	mov	r1, r9
 8000aec:	f7ff fb90 	bl	8000210 <__aeabi_uidivmod>
 8000af0:	9a01      	ldr	r2, [sp, #4]
 8000af2:	0436      	lsls	r6, r6, #16
 8000af4:	4342      	muls	r2, r0
 8000af6:	0409      	lsls	r1, r1, #16
 8000af8:	0c36      	lsrs	r6, r6, #16
 8000afa:	0003      	movs	r3, r0
 8000afc:	430e      	orrs	r6, r1
 8000afe:	42b2      	cmp	r2, r6
 8000b00:	d900      	bls.n	8000b04 <__aeabi_ddiv+0x20c>
 8000b02:	e153      	b.n	8000dac <__aeabi_ddiv+0x4b4>
 8000b04:	9803      	ldr	r0, [sp, #12]
 8000b06:	1ab6      	subs	r6, r6, r2
 8000b08:	0002      	movs	r2, r0
 8000b0a:	042d      	lsls	r5, r5, #16
 8000b0c:	431d      	orrs	r5, r3
 8000b0e:	9f02      	ldr	r7, [sp, #8]
 8000b10:	042b      	lsls	r3, r5, #16
 8000b12:	0c1b      	lsrs	r3, r3, #16
 8000b14:	435a      	muls	r2, r3
 8000b16:	437b      	muls	r3, r7
 8000b18:	469c      	mov	ip, r3
 8000b1a:	0c29      	lsrs	r1, r5, #16
 8000b1c:	4348      	muls	r0, r1
 8000b1e:	0c13      	lsrs	r3, r2, #16
 8000b20:	4484      	add	ip, r0
 8000b22:	4463      	add	r3, ip
 8000b24:	4379      	muls	r1, r7
 8000b26:	4298      	cmp	r0, r3
 8000b28:	d903      	bls.n	8000b32 <__aeabi_ddiv+0x23a>
 8000b2a:	2080      	movs	r0, #128	; 0x80
 8000b2c:	0240      	lsls	r0, r0, #9
 8000b2e:	4684      	mov	ip, r0
 8000b30:	4461      	add	r1, ip
 8000b32:	0c18      	lsrs	r0, r3, #16
 8000b34:	0412      	lsls	r2, r2, #16
 8000b36:	041b      	lsls	r3, r3, #16
 8000b38:	0c12      	lsrs	r2, r2, #16
 8000b3a:	1840      	adds	r0, r0, r1
 8000b3c:	189b      	adds	r3, r3, r2
 8000b3e:	4286      	cmp	r6, r0
 8000b40:	d200      	bcs.n	8000b44 <__aeabi_ddiv+0x24c>
 8000b42:	e100      	b.n	8000d46 <__aeabi_ddiv+0x44e>
 8000b44:	d100      	bne.n	8000b48 <__aeabi_ddiv+0x250>
 8000b46:	e0fb      	b.n	8000d40 <__aeabi_ddiv+0x448>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	431d      	orrs	r5, r3
 8000b4c:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <__aeabi_ddiv+0x37c>)
 8000b4e:	445b      	add	r3, fp
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	dc00      	bgt.n	8000b56 <__aeabi_ddiv+0x25e>
 8000b54:	e0aa      	b.n	8000cac <__aeabi_ddiv+0x3b4>
 8000b56:	076a      	lsls	r2, r5, #29
 8000b58:	d000      	beq.n	8000b5c <__aeabi_ddiv+0x264>
 8000b5a:	e13d      	b.n	8000dd8 <__aeabi_ddiv+0x4e0>
 8000b5c:	08e9      	lsrs	r1, r5, #3
 8000b5e:	4642      	mov	r2, r8
 8000b60:	01d2      	lsls	r2, r2, #7
 8000b62:	d506      	bpl.n	8000b72 <__aeabi_ddiv+0x27a>
 8000b64:	4642      	mov	r2, r8
 8000b66:	4b44      	ldr	r3, [pc, #272]	; (8000c78 <__aeabi_ddiv+0x380>)
 8000b68:	401a      	ands	r2, r3
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	445b      	add	r3, fp
 8000b72:	4a42      	ldr	r2, [pc, #264]	; (8000c7c <__aeabi_ddiv+0x384>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	dd00      	ble.n	8000b7a <__aeabi_ddiv+0x282>
 8000b78:	e723      	b.n	80009c2 <__aeabi_ddiv+0xca>
 8000b7a:	4642      	mov	r2, r8
 8000b7c:	055b      	lsls	r3, r3, #21
 8000b7e:	0755      	lsls	r5, r2, #29
 8000b80:	0252      	lsls	r2, r2, #9
 8000b82:	430d      	orrs	r5, r1
 8000b84:	0b12      	lsrs	r2, r2, #12
 8000b86:	0d5b      	lsrs	r3, r3, #21
 8000b88:	e70d      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000b8a:	4651      	mov	r1, sl
 8000b8c:	4321      	orrs	r1, r4
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_ddiv+0x29a>
 8000b90:	e07c      	b.n	8000c8c <__aeabi_ddiv+0x394>
 8000b92:	2c00      	cmp	r4, #0
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0x2a0>
 8000b96:	e0fb      	b.n	8000d90 <__aeabi_ddiv+0x498>
 8000b98:	0020      	movs	r0, r4
 8000b9a:	f000 fd65 	bl	8001668 <__clzsi2>
 8000b9e:	0002      	movs	r2, r0
 8000ba0:	3a0b      	subs	r2, #11
 8000ba2:	231d      	movs	r3, #29
 8000ba4:	1a9b      	subs	r3, r3, r2
 8000ba6:	4652      	mov	r2, sl
 8000ba8:	0001      	movs	r1, r0
 8000baa:	40da      	lsrs	r2, r3
 8000bac:	4653      	mov	r3, sl
 8000bae:	3908      	subs	r1, #8
 8000bb0:	408b      	lsls	r3, r1
 8000bb2:	408c      	lsls	r4, r1
 8000bb4:	0019      	movs	r1, r3
 8000bb6:	4314      	orrs	r4, r2
 8000bb8:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <__aeabi_ddiv+0x388>)
 8000bba:	4458      	add	r0, fp
 8000bbc:	469b      	mov	fp, r3
 8000bbe:	4483      	add	fp, r0
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	e6d9      	b.n	8000978 <__aeabi_ddiv+0x80>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	4698      	mov	r8, r3
 8000bca:	d044      	beq.n	8000c56 <__aeabi_ddiv+0x35e>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_ddiv+0x2da>
 8000bd0:	e0cf      	b.n	8000d72 <__aeabi_ddiv+0x47a>
 8000bd2:	0020      	movs	r0, r4
 8000bd4:	f000 fd48 	bl	8001668 <__clzsi2>
 8000bd8:	0001      	movs	r1, r0
 8000bda:	0002      	movs	r2, r0
 8000bdc:	390b      	subs	r1, #11
 8000bde:	231d      	movs	r3, #29
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	4649      	mov	r1, r9
 8000be4:	0010      	movs	r0, r2
 8000be6:	40d9      	lsrs	r1, r3
 8000be8:	3808      	subs	r0, #8
 8000bea:	4084      	lsls	r4, r0
 8000bec:	000b      	movs	r3, r1
 8000bee:	464d      	mov	r5, r9
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	4085      	lsls	r5, r0
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <__aeabi_ddiv+0x38c>)
 8000bf8:	1a9b      	subs	r3, r3, r2
 8000bfa:	469b      	mov	fp, r3
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	4699      	mov	r9, r3
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	e69e      	b.n	8000942 <__aeabi_ddiv+0x4a>
 8000c04:	0002      	movs	r2, r0
 8000c06:	4322      	orrs	r2, r4
 8000c08:	4690      	mov	r8, r2
 8000c0a:	d11d      	bne.n	8000c48 <__aeabi_ddiv+0x350>
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	469b      	mov	fp, r3
 8000c10:	2302      	movs	r3, #2
 8000c12:	2500      	movs	r5, #0
 8000c14:	4691      	mov	r9, r2
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	e693      	b.n	8000942 <__aeabi_ddiv+0x4a>
 8000c1a:	4651      	mov	r1, sl
 8000c1c:	4321      	orrs	r1, r4
 8000c1e:	d109      	bne.n	8000c34 <__aeabi_ddiv+0x33c>
 8000c20:	2302      	movs	r3, #2
 8000c22:	464a      	mov	r2, r9
 8000c24:	431a      	orrs	r2, r3
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <__aeabi_ddiv+0x390>)
 8000c28:	4691      	mov	r9, r2
 8000c2a:	469c      	mov	ip, r3
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	2002      	movs	r0, #2
 8000c30:	44e3      	add	fp, ip
 8000c32:	e6a1      	b.n	8000978 <__aeabi_ddiv+0x80>
 8000c34:	2303      	movs	r3, #3
 8000c36:	464a      	mov	r2, r9
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <__aeabi_ddiv+0x390>)
 8000c3c:	4691      	mov	r9, r2
 8000c3e:	469c      	mov	ip, r3
 8000c40:	4651      	mov	r1, sl
 8000c42:	2003      	movs	r0, #3
 8000c44:	44e3      	add	fp, ip
 8000c46:	e697      	b.n	8000978 <__aeabi_ddiv+0x80>
 8000c48:	220c      	movs	r2, #12
 8000c4a:	469b      	mov	fp, r3
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	46a0      	mov	r8, r4
 8000c50:	4691      	mov	r9, r2
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	e675      	b.n	8000942 <__aeabi_ddiv+0x4a>
 8000c56:	2304      	movs	r3, #4
 8000c58:	4699      	mov	r9, r3
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	469b      	mov	fp, r3
 8000c5e:	3301      	adds	r3, #1
 8000c60:	2500      	movs	r5, #0
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	e66d      	b.n	8000942 <__aeabi_ddiv+0x4a>
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	000007ff 	.word	0x000007ff
 8000c6c:	fffffc01 	.word	0xfffffc01
 8000c70:	08005578 	.word	0x08005578
 8000c74:	000003ff 	.word	0x000003ff
 8000c78:	feffffff 	.word	0xfeffffff
 8000c7c:	000007fe 	.word	0x000007fe
 8000c80:	000003f3 	.word	0x000003f3
 8000c84:	fffffc0d 	.word	0xfffffc0d
 8000c88:	fffff801 	.word	0xfffff801
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	2301      	movs	r3, #1
 8000c90:	431a      	orrs	r2, r3
 8000c92:	4691      	mov	r9, r2
 8000c94:	2400      	movs	r4, #0
 8000c96:	2001      	movs	r0, #1
 8000c98:	e66e      	b.n	8000978 <__aeabi_ddiv+0x80>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	469a      	mov	sl, r3
 8000ca0:	2500      	movs	r5, #0
 8000ca2:	4b88      	ldr	r3, [pc, #544]	; (8000ec4 <__aeabi_ddiv+0x5cc>)
 8000ca4:	0312      	lsls	r2, r2, #12
 8000ca6:	e67e      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000ca8:	2501      	movs	r5, #1
 8000caa:	426d      	negs	r5, r5
 8000cac:	2201      	movs	r2, #1
 8000cae:	1ad2      	subs	r2, r2, r3
 8000cb0:	2a38      	cmp	r2, #56	; 0x38
 8000cb2:	dd00      	ble.n	8000cb6 <__aeabi_ddiv+0x3be>
 8000cb4:	e674      	b.n	80009a0 <__aeabi_ddiv+0xa8>
 8000cb6:	2a1f      	cmp	r2, #31
 8000cb8:	dc00      	bgt.n	8000cbc <__aeabi_ddiv+0x3c4>
 8000cba:	e0bd      	b.n	8000e38 <__aeabi_ddiv+0x540>
 8000cbc:	211f      	movs	r1, #31
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4641      	mov	r1, r8
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	2a20      	cmp	r2, #32
 8000cca:	d004      	beq.n	8000cd6 <__aeabi_ddiv+0x3de>
 8000ccc:	4641      	mov	r1, r8
 8000cce:	4a7e      	ldr	r2, [pc, #504]	; (8000ec8 <__aeabi_ddiv+0x5d0>)
 8000cd0:	445a      	add	r2, fp
 8000cd2:	4091      	lsls	r1, r2
 8000cd4:	430d      	orrs	r5, r1
 8000cd6:	0029      	movs	r1, r5
 8000cd8:	1e4a      	subs	r2, r1, #1
 8000cda:	4191      	sbcs	r1, r2
 8000cdc:	4319      	orrs	r1, r3
 8000cde:	2307      	movs	r3, #7
 8000ce0:	001d      	movs	r5, r3
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	400d      	ands	r5, r1
 8000ce6:	420b      	tst	r3, r1
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x3f4>
 8000cea:	e0d0      	b.n	8000e8e <__aeabi_ddiv+0x596>
 8000cec:	220f      	movs	r2, #15
 8000cee:	2300      	movs	r3, #0
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	2a04      	cmp	r2, #4
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_ddiv+0x400>
 8000cf6:	e0c7      	b.n	8000e88 <__aeabi_ddiv+0x590>
 8000cf8:	1d0a      	adds	r2, r1, #4
 8000cfa:	428a      	cmp	r2, r1
 8000cfc:	4189      	sbcs	r1, r1
 8000cfe:	4249      	negs	r1, r1
 8000d00:	185b      	adds	r3, r3, r1
 8000d02:	0011      	movs	r1, r2
 8000d04:	021a      	lsls	r2, r3, #8
 8000d06:	d400      	bmi.n	8000d0a <__aeabi_ddiv+0x412>
 8000d08:	e0be      	b.n	8000e88 <__aeabi_ddiv+0x590>
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2500      	movs	r5, #0
 8000d10:	e649      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	4643      	mov	r3, r8
 8000d16:	0312      	lsls	r2, r2, #12
 8000d18:	4213      	tst	r3, r2
 8000d1a:	d008      	beq.n	8000d2e <__aeabi_ddiv+0x436>
 8000d1c:	4214      	tst	r4, r2
 8000d1e:	d106      	bne.n	8000d2e <__aeabi_ddiv+0x436>
 8000d20:	4322      	orrs	r2, r4
 8000d22:	0312      	lsls	r2, r2, #12
 8000d24:	46ba      	mov	sl, r7
 8000d26:	000d      	movs	r5, r1
 8000d28:	4b66      	ldr	r3, [pc, #408]	; (8000ec4 <__aeabi_ddiv+0x5cc>)
 8000d2a:	0b12      	lsrs	r2, r2, #12
 8000d2c:	e63b      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	4643      	mov	r3, r8
 8000d32:	0312      	lsls	r2, r2, #12
 8000d34:	431a      	orrs	r2, r3
 8000d36:	0312      	lsls	r2, r2, #12
 8000d38:	46b2      	mov	sl, r6
 8000d3a:	4b62      	ldr	r3, [pc, #392]	; (8000ec4 <__aeabi_ddiv+0x5cc>)
 8000d3c:	0b12      	lsrs	r2, r2, #12
 8000d3e:	e632      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d100      	bne.n	8000d46 <__aeabi_ddiv+0x44e>
 8000d44:	e702      	b.n	8000b4c <__aeabi_ddiv+0x254>
 8000d46:	19a6      	adds	r6, r4, r6
 8000d48:	1e6a      	subs	r2, r5, #1
 8000d4a:	42a6      	cmp	r6, r4
 8000d4c:	d200      	bcs.n	8000d50 <__aeabi_ddiv+0x458>
 8000d4e:	e089      	b.n	8000e64 <__aeabi_ddiv+0x56c>
 8000d50:	4286      	cmp	r6, r0
 8000d52:	d200      	bcs.n	8000d56 <__aeabi_ddiv+0x45e>
 8000d54:	e09f      	b.n	8000e96 <__aeabi_ddiv+0x59e>
 8000d56:	d100      	bne.n	8000d5a <__aeabi_ddiv+0x462>
 8000d58:	e0af      	b.n	8000eba <__aeabi_ddiv+0x5c2>
 8000d5a:	0015      	movs	r5, r2
 8000d5c:	e6f4      	b.n	8000b48 <__aeabi_ddiv+0x250>
 8000d5e:	42a9      	cmp	r1, r5
 8000d60:	d900      	bls.n	8000d64 <__aeabi_ddiv+0x46c>
 8000d62:	e63c      	b.n	80009de <__aeabi_ddiv+0xe6>
 8000d64:	4643      	mov	r3, r8
 8000d66:	07de      	lsls	r6, r3, #31
 8000d68:	0858      	lsrs	r0, r3, #1
 8000d6a:	086b      	lsrs	r3, r5, #1
 8000d6c:	431e      	orrs	r6, r3
 8000d6e:	07ed      	lsls	r5, r5, #31
 8000d70:	e63c      	b.n	80009ec <__aeabi_ddiv+0xf4>
 8000d72:	f000 fc79 	bl	8001668 <__clzsi2>
 8000d76:	0001      	movs	r1, r0
 8000d78:	0002      	movs	r2, r0
 8000d7a:	3115      	adds	r1, #21
 8000d7c:	3220      	adds	r2, #32
 8000d7e:	291c      	cmp	r1, #28
 8000d80:	dc00      	bgt.n	8000d84 <__aeabi_ddiv+0x48c>
 8000d82:	e72c      	b.n	8000bde <__aeabi_ddiv+0x2e6>
 8000d84:	464b      	mov	r3, r9
 8000d86:	3808      	subs	r0, #8
 8000d88:	4083      	lsls	r3, r0
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	4698      	mov	r8, r3
 8000d8e:	e732      	b.n	8000bf6 <__aeabi_ddiv+0x2fe>
 8000d90:	f000 fc6a 	bl	8001668 <__clzsi2>
 8000d94:	0003      	movs	r3, r0
 8000d96:	001a      	movs	r2, r3
 8000d98:	3215      	adds	r2, #21
 8000d9a:	3020      	adds	r0, #32
 8000d9c:	2a1c      	cmp	r2, #28
 8000d9e:	dc00      	bgt.n	8000da2 <__aeabi_ddiv+0x4aa>
 8000da0:	e6ff      	b.n	8000ba2 <__aeabi_ddiv+0x2aa>
 8000da2:	4654      	mov	r4, sl
 8000da4:	3b08      	subs	r3, #8
 8000da6:	2100      	movs	r1, #0
 8000da8:	409c      	lsls	r4, r3
 8000daa:	e705      	b.n	8000bb8 <__aeabi_ddiv+0x2c0>
 8000dac:	1936      	adds	r6, r6, r4
 8000dae:	3b01      	subs	r3, #1
 8000db0:	42b4      	cmp	r4, r6
 8000db2:	d900      	bls.n	8000db6 <__aeabi_ddiv+0x4be>
 8000db4:	e6a6      	b.n	8000b04 <__aeabi_ddiv+0x20c>
 8000db6:	42b2      	cmp	r2, r6
 8000db8:	d800      	bhi.n	8000dbc <__aeabi_ddiv+0x4c4>
 8000dba:	e6a3      	b.n	8000b04 <__aeabi_ddiv+0x20c>
 8000dbc:	1e83      	subs	r3, r0, #2
 8000dbe:	1936      	adds	r6, r6, r4
 8000dc0:	e6a0      	b.n	8000b04 <__aeabi_ddiv+0x20c>
 8000dc2:	1909      	adds	r1, r1, r4
 8000dc4:	3d01      	subs	r5, #1
 8000dc6:	428c      	cmp	r4, r1
 8000dc8:	d900      	bls.n	8000dcc <__aeabi_ddiv+0x4d4>
 8000dca:	e68d      	b.n	8000ae8 <__aeabi_ddiv+0x1f0>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	d800      	bhi.n	8000dd2 <__aeabi_ddiv+0x4da>
 8000dd0:	e68a      	b.n	8000ae8 <__aeabi_ddiv+0x1f0>
 8000dd2:	1e85      	subs	r5, r0, #2
 8000dd4:	1909      	adds	r1, r1, r4
 8000dd6:	e687      	b.n	8000ae8 <__aeabi_ddiv+0x1f0>
 8000dd8:	220f      	movs	r2, #15
 8000dda:	402a      	ands	r2, r5
 8000ddc:	2a04      	cmp	r2, #4
 8000dde:	d100      	bne.n	8000de2 <__aeabi_ddiv+0x4ea>
 8000de0:	e6bc      	b.n	8000b5c <__aeabi_ddiv+0x264>
 8000de2:	1d29      	adds	r1, r5, #4
 8000de4:	42a9      	cmp	r1, r5
 8000de6:	41ad      	sbcs	r5, r5
 8000de8:	426d      	negs	r5, r5
 8000dea:	08c9      	lsrs	r1, r1, #3
 8000dec:	44a8      	add	r8, r5
 8000dee:	e6b6      	b.n	8000b5e <__aeabi_ddiv+0x266>
 8000df0:	42af      	cmp	r7, r5
 8000df2:	d900      	bls.n	8000df6 <__aeabi_ddiv+0x4fe>
 8000df4:	e662      	b.n	8000abc <__aeabi_ddiv+0x1c4>
 8000df6:	4281      	cmp	r1, r0
 8000df8:	d804      	bhi.n	8000e04 <__aeabi_ddiv+0x50c>
 8000dfa:	d000      	beq.n	8000dfe <__aeabi_ddiv+0x506>
 8000dfc:	e65e      	b.n	8000abc <__aeabi_ddiv+0x1c4>
 8000dfe:	42ae      	cmp	r6, r5
 8000e00:	d800      	bhi.n	8000e04 <__aeabi_ddiv+0x50c>
 8000e02:	e65b      	b.n	8000abc <__aeabi_ddiv+0x1c4>
 8000e04:	2302      	movs	r3, #2
 8000e06:	425b      	negs	r3, r3
 8000e08:	469c      	mov	ip, r3
 8000e0a:	9b00      	ldr	r3, [sp, #0]
 8000e0c:	44e0      	add	r8, ip
 8000e0e:	469c      	mov	ip, r3
 8000e10:	4465      	add	r5, ip
 8000e12:	429d      	cmp	r5, r3
 8000e14:	419b      	sbcs	r3, r3
 8000e16:	425b      	negs	r3, r3
 8000e18:	191b      	adds	r3, r3, r4
 8000e1a:	18c0      	adds	r0, r0, r3
 8000e1c:	e64f      	b.n	8000abe <__aeabi_ddiv+0x1c6>
 8000e1e:	42b2      	cmp	r2, r6
 8000e20:	d800      	bhi.n	8000e24 <__aeabi_ddiv+0x52c>
 8000e22:	e612      	b.n	8000a4a <__aeabi_ddiv+0x152>
 8000e24:	1e83      	subs	r3, r0, #2
 8000e26:	1936      	adds	r6, r6, r4
 8000e28:	e60f      	b.n	8000a4a <__aeabi_ddiv+0x152>
 8000e2a:	428a      	cmp	r2, r1
 8000e2c:	d800      	bhi.n	8000e30 <__aeabi_ddiv+0x538>
 8000e2e:	e5fa      	b.n	8000a26 <__aeabi_ddiv+0x12e>
 8000e30:	1e83      	subs	r3, r0, #2
 8000e32:	4698      	mov	r8, r3
 8000e34:	1909      	adds	r1, r1, r4
 8000e36:	e5f6      	b.n	8000a26 <__aeabi_ddiv+0x12e>
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <__aeabi_ddiv+0x5d4>)
 8000e3a:	0028      	movs	r0, r5
 8000e3c:	445b      	add	r3, fp
 8000e3e:	4641      	mov	r1, r8
 8000e40:	409d      	lsls	r5, r3
 8000e42:	4099      	lsls	r1, r3
 8000e44:	40d0      	lsrs	r0, r2
 8000e46:	1e6b      	subs	r3, r5, #1
 8000e48:	419d      	sbcs	r5, r3
 8000e4a:	4643      	mov	r3, r8
 8000e4c:	4301      	orrs	r1, r0
 8000e4e:	4329      	orrs	r1, r5
 8000e50:	40d3      	lsrs	r3, r2
 8000e52:	074a      	lsls	r2, r1, #29
 8000e54:	d100      	bne.n	8000e58 <__aeabi_ddiv+0x560>
 8000e56:	e755      	b.n	8000d04 <__aeabi_ddiv+0x40c>
 8000e58:	220f      	movs	r2, #15
 8000e5a:	400a      	ands	r2, r1
 8000e5c:	2a04      	cmp	r2, #4
 8000e5e:	d000      	beq.n	8000e62 <__aeabi_ddiv+0x56a>
 8000e60:	e74a      	b.n	8000cf8 <__aeabi_ddiv+0x400>
 8000e62:	e74f      	b.n	8000d04 <__aeabi_ddiv+0x40c>
 8000e64:	0015      	movs	r5, r2
 8000e66:	4286      	cmp	r6, r0
 8000e68:	d000      	beq.n	8000e6c <__aeabi_ddiv+0x574>
 8000e6a:	e66d      	b.n	8000b48 <__aeabi_ddiv+0x250>
 8000e6c:	9a00      	ldr	r2, [sp, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d000      	beq.n	8000e74 <__aeabi_ddiv+0x57c>
 8000e72:	e669      	b.n	8000b48 <__aeabi_ddiv+0x250>
 8000e74:	e66a      	b.n	8000b4c <__aeabi_ddiv+0x254>
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <__aeabi_ddiv+0x5d8>)
 8000e78:	445b      	add	r3, fp
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	dc00      	bgt.n	8000e80 <__aeabi_ddiv+0x588>
 8000e7e:	e713      	b.n	8000ca8 <__aeabi_ddiv+0x3b0>
 8000e80:	2501      	movs	r5, #1
 8000e82:	2100      	movs	r1, #0
 8000e84:	44a8      	add	r8, r5
 8000e86:	e66a      	b.n	8000b5e <__aeabi_ddiv+0x266>
 8000e88:	075d      	lsls	r5, r3, #29
 8000e8a:	025b      	lsls	r3, r3, #9
 8000e8c:	0b1a      	lsrs	r2, r3, #12
 8000e8e:	08c9      	lsrs	r1, r1, #3
 8000e90:	2300      	movs	r3, #0
 8000e92:	430d      	orrs	r5, r1
 8000e94:	e587      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000e96:	9900      	ldr	r1, [sp, #0]
 8000e98:	3d02      	subs	r5, #2
 8000e9a:	004a      	lsls	r2, r1, #1
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	41bf      	sbcs	r7, r7
 8000ea0:	427f      	negs	r7, r7
 8000ea2:	193f      	adds	r7, r7, r4
 8000ea4:	19f6      	adds	r6, r6, r7
 8000ea6:	9200      	str	r2, [sp, #0]
 8000ea8:	e7dd      	b.n	8000e66 <__aeabi_ddiv+0x56e>
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	4643      	mov	r3, r8
 8000eae:	0312      	lsls	r2, r2, #12
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	0312      	lsls	r2, r2, #12
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <__aeabi_ddiv+0x5cc>)
 8000eb6:	0b12      	lsrs	r2, r2, #12
 8000eb8:	e575      	b.n	80009a6 <__aeabi_ddiv+0xae>
 8000eba:	9900      	ldr	r1, [sp, #0]
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d3ea      	bcc.n	8000e96 <__aeabi_ddiv+0x59e>
 8000ec0:	0015      	movs	r5, r2
 8000ec2:	e7d3      	b.n	8000e6c <__aeabi_ddiv+0x574>
 8000ec4:	000007ff 	.word	0x000007ff
 8000ec8:	0000043e 	.word	0x0000043e
 8000ecc:	0000041e 	.word	0x0000041e
 8000ed0:	000003ff 	.word	0x000003ff

08000ed4 <__aeabi_dmul>:
 8000ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed6:	4645      	mov	r5, r8
 8000ed8:	46de      	mov	lr, fp
 8000eda:	4657      	mov	r7, sl
 8000edc:	464e      	mov	r6, r9
 8000ede:	b5e0      	push	{r5, r6, r7, lr}
 8000ee0:	001f      	movs	r7, r3
 8000ee2:	030b      	lsls	r3, r1, #12
 8000ee4:	0b1b      	lsrs	r3, r3, #12
 8000ee6:	469b      	mov	fp, r3
 8000ee8:	004d      	lsls	r5, r1, #1
 8000eea:	0fcb      	lsrs	r3, r1, #31
 8000eec:	0004      	movs	r4, r0
 8000eee:	4691      	mov	r9, r2
 8000ef0:	4698      	mov	r8, r3
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	0d6d      	lsrs	r5, r5, #21
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dmul+0x26>
 8000ef8:	e1cd      	b.n	8001296 <__aeabi_dmul+0x3c2>
 8000efa:	4bce      	ldr	r3, [pc, #824]	; (8001234 <__aeabi_dmul+0x360>)
 8000efc:	429d      	cmp	r5, r3
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dmul+0x2e>
 8000f00:	e1e9      	b.n	80012d6 <__aeabi_dmul+0x402>
 8000f02:	465a      	mov	r2, fp
 8000f04:	0f43      	lsrs	r3, r0, #29
 8000f06:	00d2      	lsls	r2, r2, #3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	0412      	lsls	r2, r2, #16
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	00c3      	lsls	r3, r0, #3
 8000f12:	469a      	mov	sl, r3
 8000f14:	4bc8      	ldr	r3, [pc, #800]	; (8001238 <__aeabi_dmul+0x364>)
 8000f16:	4693      	mov	fp, r2
 8000f18:	469c      	mov	ip, r3
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2600      	movs	r6, #0
 8000f1e:	4465      	add	r5, ip
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	033c      	lsls	r4, r7, #12
 8000f24:	007b      	lsls	r3, r7, #1
 8000f26:	4648      	mov	r0, r9
 8000f28:	0b24      	lsrs	r4, r4, #12
 8000f2a:	0d5b      	lsrs	r3, r3, #21
 8000f2c:	0fff      	lsrs	r7, r7, #31
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dmul+0x60>
 8000f32:	e189      	b.n	8001248 <__aeabi_dmul+0x374>
 8000f34:	4abf      	ldr	r2, [pc, #764]	; (8001234 <__aeabi_dmul+0x360>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <__aeabi_dmul+0x9a>
 8000f3a:	0f42      	lsrs	r2, r0, #29
 8000f3c:	00e4      	lsls	r4, r4, #3
 8000f3e:	4322      	orrs	r2, r4
 8000f40:	2480      	movs	r4, #128	; 0x80
 8000f42:	0424      	lsls	r4, r4, #16
 8000f44:	4314      	orrs	r4, r2
 8000f46:	4abc      	ldr	r2, [pc, #752]	; (8001238 <__aeabi_dmul+0x364>)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4694      	mov	ip, r2
 8000f4c:	4642      	mov	r2, r8
 8000f4e:	4463      	add	r3, ip
 8000f50:	195b      	adds	r3, r3, r5
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	9b01      	ldr	r3, [sp, #4]
 8000f56:	407a      	eors	r2, r7
 8000f58:	3301      	adds	r3, #1
 8000f5a:	00c0      	lsls	r0, r0, #3
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	2e0a      	cmp	r6, #10
 8000f62:	dd1c      	ble.n	8000f9e <__aeabi_dmul+0xca>
 8000f64:	003a      	movs	r2, r7
 8000f66:	2e0b      	cmp	r6, #11
 8000f68:	d05e      	beq.n	8001028 <__aeabi_dmul+0x154>
 8000f6a:	4647      	mov	r7, r8
 8000f6c:	e056      	b.n	800101c <__aeabi_dmul+0x148>
 8000f6e:	4649      	mov	r1, r9
 8000f70:	4bb0      	ldr	r3, [pc, #704]	; (8001234 <__aeabi_dmul+0x360>)
 8000f72:	4321      	orrs	r1, r4
 8000f74:	18eb      	adds	r3, r5, r3
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	d12a      	bne.n	8000fd2 <__aeabi_dmul+0xfe>
 8000f7c:	2080      	movs	r0, #128	; 0x80
 8000f7e:	2202      	movs	r2, #2
 8000f80:	0100      	lsls	r0, r0, #4
 8000f82:	002b      	movs	r3, r5
 8000f84:	4684      	mov	ip, r0
 8000f86:	4316      	orrs	r6, r2
 8000f88:	4642      	mov	r2, r8
 8000f8a:	4463      	add	r3, ip
 8000f8c:	407a      	eors	r2, r7
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2e0a      	cmp	r6, #10
 8000f94:	dd00      	ble.n	8000f98 <__aeabi_dmul+0xc4>
 8000f96:	e231      	b.n	80013fc <__aeabi_dmul+0x528>
 8000f98:	2000      	movs	r0, #0
 8000f9a:	2400      	movs	r4, #0
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	2e02      	cmp	r6, #2
 8000fa0:	dc26      	bgt.n	8000ff0 <__aeabi_dmul+0x11c>
 8000fa2:	3e01      	subs	r6, #1
 8000fa4:	2e01      	cmp	r6, #1
 8000fa6:	d852      	bhi.n	800104e <__aeabi_dmul+0x17a>
 8000fa8:	2902      	cmp	r1, #2
 8000faa:	d04c      	beq.n	8001046 <__aeabi_dmul+0x172>
 8000fac:	2901      	cmp	r1, #1
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_dmul+0xde>
 8000fb0:	e118      	b.n	80011e4 <__aeabi_dmul+0x310>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	2400      	movs	r4, #0
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	051b      	lsls	r3, r3, #20
 8000fba:	4323      	orrs	r3, r4
 8000fbc:	07d2      	lsls	r2, r2, #31
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	0028      	movs	r0, r5
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	b007      	add	sp, #28
 8000fc6:	bcf0      	pop	{r4, r5, r6, r7}
 8000fc8:	46bb      	mov	fp, r7
 8000fca:	46b2      	mov	sl, r6
 8000fcc:	46a9      	mov	r9, r5
 8000fce:	46a0      	mov	r8, r4
 8000fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	0109      	lsls	r1, r1, #4
 8000fd8:	002b      	movs	r3, r5
 8000fda:	468c      	mov	ip, r1
 8000fdc:	4316      	orrs	r6, r2
 8000fde:	4642      	mov	r2, r8
 8000fe0:	4463      	add	r3, ip
 8000fe2:	407a      	eors	r2, r7
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2e0a      	cmp	r6, #10
 8000fea:	dd00      	ble.n	8000fee <__aeabi_dmul+0x11a>
 8000fec:	e228      	b.n	8001440 <__aeabi_dmul+0x56c>
 8000fee:	2103      	movs	r1, #3
 8000ff0:	2501      	movs	r5, #1
 8000ff2:	40b5      	lsls	r5, r6
 8000ff4:	46ac      	mov	ip, r5
 8000ff6:	26a6      	movs	r6, #166	; 0xa6
 8000ff8:	4663      	mov	r3, ip
 8000ffa:	00f6      	lsls	r6, r6, #3
 8000ffc:	4035      	ands	r5, r6
 8000ffe:	4233      	tst	r3, r6
 8001000:	d10b      	bne.n	800101a <__aeabi_dmul+0x146>
 8001002:	2690      	movs	r6, #144	; 0x90
 8001004:	00b6      	lsls	r6, r6, #2
 8001006:	4233      	tst	r3, r6
 8001008:	d118      	bne.n	800103c <__aeabi_dmul+0x168>
 800100a:	3eb9      	subs	r6, #185	; 0xb9
 800100c:	3eff      	subs	r6, #255	; 0xff
 800100e:	421e      	tst	r6, r3
 8001010:	d01d      	beq.n	800104e <__aeabi_dmul+0x17a>
 8001012:	46a3      	mov	fp, r4
 8001014:	4682      	mov	sl, r0
 8001016:	9100      	str	r1, [sp, #0]
 8001018:	e000      	b.n	800101c <__aeabi_dmul+0x148>
 800101a:	0017      	movs	r7, r2
 800101c:	9900      	ldr	r1, [sp, #0]
 800101e:	003a      	movs	r2, r7
 8001020:	2902      	cmp	r1, #2
 8001022:	d010      	beq.n	8001046 <__aeabi_dmul+0x172>
 8001024:	465c      	mov	r4, fp
 8001026:	4650      	mov	r0, sl
 8001028:	2903      	cmp	r1, #3
 800102a:	d1bf      	bne.n	8000fac <__aeabi_dmul+0xd8>
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	031b      	lsls	r3, r3, #12
 8001030:	431c      	orrs	r4, r3
 8001032:	0324      	lsls	r4, r4, #12
 8001034:	0005      	movs	r5, r0
 8001036:	4b7f      	ldr	r3, [pc, #508]	; (8001234 <__aeabi_dmul+0x360>)
 8001038:	0b24      	lsrs	r4, r4, #12
 800103a:	e7bd      	b.n	8000fb8 <__aeabi_dmul+0xe4>
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	2200      	movs	r2, #0
 8001040:	4b7c      	ldr	r3, [pc, #496]	; (8001234 <__aeabi_dmul+0x360>)
 8001042:	0324      	lsls	r4, r4, #12
 8001044:	e7b8      	b.n	8000fb8 <__aeabi_dmul+0xe4>
 8001046:	2400      	movs	r4, #0
 8001048:	2500      	movs	r5, #0
 800104a:	4b7a      	ldr	r3, [pc, #488]	; (8001234 <__aeabi_dmul+0x360>)
 800104c:	e7b4      	b.n	8000fb8 <__aeabi_dmul+0xe4>
 800104e:	4653      	mov	r3, sl
 8001050:	041e      	lsls	r6, r3, #16
 8001052:	0c36      	lsrs	r6, r6, #16
 8001054:	0c1f      	lsrs	r7, r3, #16
 8001056:	0033      	movs	r3, r6
 8001058:	0c01      	lsrs	r1, r0, #16
 800105a:	0400      	lsls	r0, r0, #16
 800105c:	0c00      	lsrs	r0, r0, #16
 800105e:	4343      	muls	r3, r0
 8001060:	4698      	mov	r8, r3
 8001062:	0003      	movs	r3, r0
 8001064:	437b      	muls	r3, r7
 8001066:	4699      	mov	r9, r3
 8001068:	0033      	movs	r3, r6
 800106a:	434b      	muls	r3, r1
 800106c:	469c      	mov	ip, r3
 800106e:	4643      	mov	r3, r8
 8001070:	000d      	movs	r5, r1
 8001072:	0c1b      	lsrs	r3, r3, #16
 8001074:	469a      	mov	sl, r3
 8001076:	437d      	muls	r5, r7
 8001078:	44cc      	add	ip, r9
 800107a:	44d4      	add	ip, sl
 800107c:	9500      	str	r5, [sp, #0]
 800107e:	45e1      	cmp	r9, ip
 8001080:	d904      	bls.n	800108c <__aeabi_dmul+0x1b8>
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	025b      	lsls	r3, r3, #9
 8001086:	4699      	mov	r9, r3
 8001088:	444d      	add	r5, r9
 800108a:	9500      	str	r5, [sp, #0]
 800108c:	4663      	mov	r3, ip
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	001d      	movs	r5, r3
 8001092:	4663      	mov	r3, ip
 8001094:	041b      	lsls	r3, r3, #16
 8001096:	469c      	mov	ip, r3
 8001098:	4643      	mov	r3, r8
 800109a:	041b      	lsls	r3, r3, #16
 800109c:	0c1b      	lsrs	r3, r3, #16
 800109e:	4698      	mov	r8, r3
 80010a0:	4663      	mov	r3, ip
 80010a2:	4443      	add	r3, r8
 80010a4:	9303      	str	r3, [sp, #12]
 80010a6:	0c23      	lsrs	r3, r4, #16
 80010a8:	4698      	mov	r8, r3
 80010aa:	0033      	movs	r3, r6
 80010ac:	0424      	lsls	r4, r4, #16
 80010ae:	0c24      	lsrs	r4, r4, #16
 80010b0:	4363      	muls	r3, r4
 80010b2:	469c      	mov	ip, r3
 80010b4:	0023      	movs	r3, r4
 80010b6:	437b      	muls	r3, r7
 80010b8:	4699      	mov	r9, r3
 80010ba:	4643      	mov	r3, r8
 80010bc:	435e      	muls	r6, r3
 80010be:	435f      	muls	r7, r3
 80010c0:	444e      	add	r6, r9
 80010c2:	4663      	mov	r3, ip
 80010c4:	46b2      	mov	sl, r6
 80010c6:	0c1e      	lsrs	r6, r3, #16
 80010c8:	4456      	add	r6, sl
 80010ca:	45b1      	cmp	r9, r6
 80010cc:	d903      	bls.n	80010d6 <__aeabi_dmul+0x202>
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	025b      	lsls	r3, r3, #9
 80010d2:	4699      	mov	r9, r3
 80010d4:	444f      	add	r7, r9
 80010d6:	0c33      	lsrs	r3, r6, #16
 80010d8:	4699      	mov	r9, r3
 80010da:	003b      	movs	r3, r7
 80010dc:	444b      	add	r3, r9
 80010de:	9305      	str	r3, [sp, #20]
 80010e0:	4663      	mov	r3, ip
 80010e2:	46ac      	mov	ip, r5
 80010e4:	041f      	lsls	r7, r3, #16
 80010e6:	0c3f      	lsrs	r7, r7, #16
 80010e8:	0436      	lsls	r6, r6, #16
 80010ea:	19f6      	adds	r6, r6, r7
 80010ec:	44b4      	add	ip, r6
 80010ee:	4663      	mov	r3, ip
 80010f0:	9304      	str	r3, [sp, #16]
 80010f2:	465b      	mov	r3, fp
 80010f4:	0c1b      	lsrs	r3, r3, #16
 80010f6:	469c      	mov	ip, r3
 80010f8:	465b      	mov	r3, fp
 80010fa:	041f      	lsls	r7, r3, #16
 80010fc:	0c3f      	lsrs	r7, r7, #16
 80010fe:	003b      	movs	r3, r7
 8001100:	4343      	muls	r3, r0
 8001102:	4699      	mov	r9, r3
 8001104:	4663      	mov	r3, ip
 8001106:	4343      	muls	r3, r0
 8001108:	469a      	mov	sl, r3
 800110a:	464b      	mov	r3, r9
 800110c:	4660      	mov	r0, ip
 800110e:	0c1b      	lsrs	r3, r3, #16
 8001110:	469b      	mov	fp, r3
 8001112:	4348      	muls	r0, r1
 8001114:	4379      	muls	r1, r7
 8001116:	4451      	add	r1, sl
 8001118:	4459      	add	r1, fp
 800111a:	458a      	cmp	sl, r1
 800111c:	d903      	bls.n	8001126 <__aeabi_dmul+0x252>
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	025b      	lsls	r3, r3, #9
 8001122:	469a      	mov	sl, r3
 8001124:	4450      	add	r0, sl
 8001126:	0c0b      	lsrs	r3, r1, #16
 8001128:	469a      	mov	sl, r3
 800112a:	464b      	mov	r3, r9
 800112c:	041b      	lsls	r3, r3, #16
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	4699      	mov	r9, r3
 8001132:	003b      	movs	r3, r7
 8001134:	4363      	muls	r3, r4
 8001136:	0409      	lsls	r1, r1, #16
 8001138:	4645      	mov	r5, r8
 800113a:	4449      	add	r1, r9
 800113c:	4699      	mov	r9, r3
 800113e:	4663      	mov	r3, ip
 8001140:	435c      	muls	r4, r3
 8001142:	436b      	muls	r3, r5
 8001144:	469c      	mov	ip, r3
 8001146:	464b      	mov	r3, r9
 8001148:	0c1b      	lsrs	r3, r3, #16
 800114a:	4698      	mov	r8, r3
 800114c:	436f      	muls	r7, r5
 800114e:	193f      	adds	r7, r7, r4
 8001150:	4447      	add	r7, r8
 8001152:	4450      	add	r0, sl
 8001154:	42bc      	cmp	r4, r7
 8001156:	d903      	bls.n	8001160 <__aeabi_dmul+0x28c>
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	025b      	lsls	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	44c4      	add	ip, r8
 8001160:	9b04      	ldr	r3, [sp, #16]
 8001162:	9d00      	ldr	r5, [sp, #0]
 8001164:	4698      	mov	r8, r3
 8001166:	4445      	add	r5, r8
 8001168:	42b5      	cmp	r5, r6
 800116a:	41b6      	sbcs	r6, r6
 800116c:	4273      	negs	r3, r6
 800116e:	4698      	mov	r8, r3
 8001170:	464b      	mov	r3, r9
 8001172:	041e      	lsls	r6, r3, #16
 8001174:	9b05      	ldr	r3, [sp, #20]
 8001176:	043c      	lsls	r4, r7, #16
 8001178:	4699      	mov	r9, r3
 800117a:	0c36      	lsrs	r6, r6, #16
 800117c:	19a4      	adds	r4, r4, r6
 800117e:	444c      	add	r4, r9
 8001180:	46a1      	mov	r9, r4
 8001182:	4683      	mov	fp, r0
 8001184:	186e      	adds	r6, r5, r1
 8001186:	44c1      	add	r9, r8
 8001188:	428e      	cmp	r6, r1
 800118a:	4189      	sbcs	r1, r1
 800118c:	44cb      	add	fp, r9
 800118e:	465d      	mov	r5, fp
 8001190:	4249      	negs	r1, r1
 8001192:	186d      	adds	r5, r5, r1
 8001194:	429c      	cmp	r4, r3
 8001196:	41a4      	sbcs	r4, r4
 8001198:	45c1      	cmp	r9, r8
 800119a:	419b      	sbcs	r3, r3
 800119c:	4583      	cmp	fp, r0
 800119e:	4180      	sbcs	r0, r0
 80011a0:	428d      	cmp	r5, r1
 80011a2:	4189      	sbcs	r1, r1
 80011a4:	425b      	negs	r3, r3
 80011a6:	4264      	negs	r4, r4
 80011a8:	431c      	orrs	r4, r3
 80011aa:	4240      	negs	r0, r0
 80011ac:	9b03      	ldr	r3, [sp, #12]
 80011ae:	4249      	negs	r1, r1
 80011b0:	4301      	orrs	r1, r0
 80011b2:	0270      	lsls	r0, r6, #9
 80011b4:	0c3f      	lsrs	r7, r7, #16
 80011b6:	4318      	orrs	r0, r3
 80011b8:	19e4      	adds	r4, r4, r7
 80011ba:	1e47      	subs	r7, r0, #1
 80011bc:	41b8      	sbcs	r0, r7
 80011be:	1864      	adds	r4, r4, r1
 80011c0:	4464      	add	r4, ip
 80011c2:	0df6      	lsrs	r6, r6, #23
 80011c4:	0261      	lsls	r1, r4, #9
 80011c6:	4330      	orrs	r0, r6
 80011c8:	0dec      	lsrs	r4, r5, #23
 80011ca:	026e      	lsls	r6, r5, #9
 80011cc:	430c      	orrs	r4, r1
 80011ce:	4330      	orrs	r0, r6
 80011d0:	01c9      	lsls	r1, r1, #7
 80011d2:	d400      	bmi.n	80011d6 <__aeabi_dmul+0x302>
 80011d4:	e0f1      	b.n	80013ba <__aeabi_dmul+0x4e6>
 80011d6:	2101      	movs	r1, #1
 80011d8:	0843      	lsrs	r3, r0, #1
 80011da:	4001      	ands	r1, r0
 80011dc:	430b      	orrs	r3, r1
 80011de:	07e0      	lsls	r0, r4, #31
 80011e0:	4318      	orrs	r0, r3
 80011e2:	0864      	lsrs	r4, r4, #1
 80011e4:	4915      	ldr	r1, [pc, #84]	; (800123c <__aeabi_dmul+0x368>)
 80011e6:	9b02      	ldr	r3, [sp, #8]
 80011e8:	468c      	mov	ip, r1
 80011ea:	4463      	add	r3, ip
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dc00      	bgt.n	80011f2 <__aeabi_dmul+0x31e>
 80011f0:	e097      	b.n	8001322 <__aeabi_dmul+0x44e>
 80011f2:	0741      	lsls	r1, r0, #29
 80011f4:	d009      	beq.n	800120a <__aeabi_dmul+0x336>
 80011f6:	210f      	movs	r1, #15
 80011f8:	4001      	ands	r1, r0
 80011fa:	2904      	cmp	r1, #4
 80011fc:	d005      	beq.n	800120a <__aeabi_dmul+0x336>
 80011fe:	1d01      	adds	r1, r0, #4
 8001200:	4281      	cmp	r1, r0
 8001202:	4180      	sbcs	r0, r0
 8001204:	4240      	negs	r0, r0
 8001206:	1824      	adds	r4, r4, r0
 8001208:	0008      	movs	r0, r1
 800120a:	01e1      	lsls	r1, r4, #7
 800120c:	d506      	bpl.n	800121c <__aeabi_dmul+0x348>
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	00c9      	lsls	r1, r1, #3
 8001212:	468c      	mov	ip, r1
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <__aeabi_dmul+0x36c>)
 8001216:	401c      	ands	r4, r3
 8001218:	9b02      	ldr	r3, [sp, #8]
 800121a:	4463      	add	r3, ip
 800121c:	4909      	ldr	r1, [pc, #36]	; (8001244 <__aeabi_dmul+0x370>)
 800121e:	428b      	cmp	r3, r1
 8001220:	dd00      	ble.n	8001224 <__aeabi_dmul+0x350>
 8001222:	e710      	b.n	8001046 <__aeabi_dmul+0x172>
 8001224:	0761      	lsls	r1, r4, #29
 8001226:	08c5      	lsrs	r5, r0, #3
 8001228:	0264      	lsls	r4, r4, #9
 800122a:	055b      	lsls	r3, r3, #21
 800122c:	430d      	orrs	r5, r1
 800122e:	0b24      	lsrs	r4, r4, #12
 8001230:	0d5b      	lsrs	r3, r3, #21
 8001232:	e6c1      	b.n	8000fb8 <__aeabi_dmul+0xe4>
 8001234:	000007ff 	.word	0x000007ff
 8001238:	fffffc01 	.word	0xfffffc01
 800123c:	000003ff 	.word	0x000003ff
 8001240:	feffffff 	.word	0xfeffffff
 8001244:	000007fe 	.word	0x000007fe
 8001248:	464b      	mov	r3, r9
 800124a:	4323      	orrs	r3, r4
 800124c:	d059      	beq.n	8001302 <__aeabi_dmul+0x42e>
 800124e:	2c00      	cmp	r4, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_dmul+0x380>
 8001252:	e0a3      	b.n	800139c <__aeabi_dmul+0x4c8>
 8001254:	0020      	movs	r0, r4
 8001256:	f000 fa07 	bl	8001668 <__clzsi2>
 800125a:	0001      	movs	r1, r0
 800125c:	0003      	movs	r3, r0
 800125e:	390b      	subs	r1, #11
 8001260:	221d      	movs	r2, #29
 8001262:	1a52      	subs	r2, r2, r1
 8001264:	4649      	mov	r1, r9
 8001266:	0018      	movs	r0, r3
 8001268:	40d1      	lsrs	r1, r2
 800126a:	464a      	mov	r2, r9
 800126c:	3808      	subs	r0, #8
 800126e:	4082      	lsls	r2, r0
 8001270:	4084      	lsls	r4, r0
 8001272:	0010      	movs	r0, r2
 8001274:	430c      	orrs	r4, r1
 8001276:	4a74      	ldr	r2, [pc, #464]	; (8001448 <__aeabi_dmul+0x574>)
 8001278:	1aeb      	subs	r3, r5, r3
 800127a:	4694      	mov	ip, r2
 800127c:	4642      	mov	r2, r8
 800127e:	4463      	add	r3, ip
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	9b01      	ldr	r3, [sp, #4]
 8001284:	407a      	eors	r2, r7
 8001286:	3301      	adds	r3, #1
 8001288:	2100      	movs	r1, #0
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2e0a      	cmp	r6, #10
 8001290:	dd00      	ble.n	8001294 <__aeabi_dmul+0x3c0>
 8001292:	e667      	b.n	8000f64 <__aeabi_dmul+0x90>
 8001294:	e683      	b.n	8000f9e <__aeabi_dmul+0xca>
 8001296:	465b      	mov	r3, fp
 8001298:	4303      	orrs	r3, r0
 800129a:	469a      	mov	sl, r3
 800129c:	d02a      	beq.n	80012f4 <__aeabi_dmul+0x420>
 800129e:	465b      	mov	r3, fp
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d06d      	beq.n	8001380 <__aeabi_dmul+0x4ac>
 80012a4:	4658      	mov	r0, fp
 80012a6:	f000 f9df 	bl	8001668 <__clzsi2>
 80012aa:	0001      	movs	r1, r0
 80012ac:	0003      	movs	r3, r0
 80012ae:	390b      	subs	r1, #11
 80012b0:	221d      	movs	r2, #29
 80012b2:	1a52      	subs	r2, r2, r1
 80012b4:	0021      	movs	r1, r4
 80012b6:	0018      	movs	r0, r3
 80012b8:	465d      	mov	r5, fp
 80012ba:	40d1      	lsrs	r1, r2
 80012bc:	3808      	subs	r0, #8
 80012be:	4085      	lsls	r5, r0
 80012c0:	000a      	movs	r2, r1
 80012c2:	4084      	lsls	r4, r0
 80012c4:	432a      	orrs	r2, r5
 80012c6:	4693      	mov	fp, r2
 80012c8:	46a2      	mov	sl, r4
 80012ca:	4d5f      	ldr	r5, [pc, #380]	; (8001448 <__aeabi_dmul+0x574>)
 80012cc:	2600      	movs	r6, #0
 80012ce:	1aed      	subs	r5, r5, r3
 80012d0:	2300      	movs	r3, #0
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	e625      	b.n	8000f22 <__aeabi_dmul+0x4e>
 80012d6:	465b      	mov	r3, fp
 80012d8:	4303      	orrs	r3, r0
 80012da:	469a      	mov	sl, r3
 80012dc:	d105      	bne.n	80012ea <__aeabi_dmul+0x416>
 80012de:	2300      	movs	r3, #0
 80012e0:	469b      	mov	fp, r3
 80012e2:	3302      	adds	r3, #2
 80012e4:	2608      	movs	r6, #8
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	e61b      	b.n	8000f22 <__aeabi_dmul+0x4e>
 80012ea:	2303      	movs	r3, #3
 80012ec:	4682      	mov	sl, r0
 80012ee:	260c      	movs	r6, #12
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	e616      	b.n	8000f22 <__aeabi_dmul+0x4e>
 80012f4:	2300      	movs	r3, #0
 80012f6:	469b      	mov	fp, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	2604      	movs	r6, #4
 80012fc:	2500      	movs	r5, #0
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	e60f      	b.n	8000f22 <__aeabi_dmul+0x4e>
 8001302:	4642      	mov	r2, r8
 8001304:	3301      	adds	r3, #1
 8001306:	9501      	str	r5, [sp, #4]
 8001308:	431e      	orrs	r6, r3
 800130a:	9b01      	ldr	r3, [sp, #4]
 800130c:	407a      	eors	r2, r7
 800130e:	3301      	adds	r3, #1
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2101      	movs	r1, #1
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2e0a      	cmp	r6, #10
 800131c:	dd00      	ble.n	8001320 <__aeabi_dmul+0x44c>
 800131e:	e621      	b.n	8000f64 <__aeabi_dmul+0x90>
 8001320:	e63d      	b.n	8000f9e <__aeabi_dmul+0xca>
 8001322:	2101      	movs	r1, #1
 8001324:	1ac9      	subs	r1, r1, r3
 8001326:	2938      	cmp	r1, #56	; 0x38
 8001328:	dd00      	ble.n	800132c <__aeabi_dmul+0x458>
 800132a:	e642      	b.n	8000fb2 <__aeabi_dmul+0xde>
 800132c:	291f      	cmp	r1, #31
 800132e:	dd47      	ble.n	80013c0 <__aeabi_dmul+0x4ec>
 8001330:	261f      	movs	r6, #31
 8001332:	0025      	movs	r5, r4
 8001334:	4276      	negs	r6, r6
 8001336:	1af3      	subs	r3, r6, r3
 8001338:	40dd      	lsrs	r5, r3
 800133a:	002b      	movs	r3, r5
 800133c:	2920      	cmp	r1, #32
 800133e:	d005      	beq.n	800134c <__aeabi_dmul+0x478>
 8001340:	4942      	ldr	r1, [pc, #264]	; (800144c <__aeabi_dmul+0x578>)
 8001342:	9d02      	ldr	r5, [sp, #8]
 8001344:	468c      	mov	ip, r1
 8001346:	4465      	add	r5, ip
 8001348:	40ac      	lsls	r4, r5
 800134a:	4320      	orrs	r0, r4
 800134c:	1e41      	subs	r1, r0, #1
 800134e:	4188      	sbcs	r0, r1
 8001350:	4318      	orrs	r0, r3
 8001352:	2307      	movs	r3, #7
 8001354:	001d      	movs	r5, r3
 8001356:	2400      	movs	r4, #0
 8001358:	4005      	ands	r5, r0
 800135a:	4203      	tst	r3, r0
 800135c:	d04a      	beq.n	80013f4 <__aeabi_dmul+0x520>
 800135e:	230f      	movs	r3, #15
 8001360:	2400      	movs	r4, #0
 8001362:	4003      	ands	r3, r0
 8001364:	2b04      	cmp	r3, #4
 8001366:	d042      	beq.n	80013ee <__aeabi_dmul+0x51a>
 8001368:	1d03      	adds	r3, r0, #4
 800136a:	4283      	cmp	r3, r0
 800136c:	4180      	sbcs	r0, r0
 800136e:	4240      	negs	r0, r0
 8001370:	1824      	adds	r4, r4, r0
 8001372:	0018      	movs	r0, r3
 8001374:	0223      	lsls	r3, r4, #8
 8001376:	d53a      	bpl.n	80013ee <__aeabi_dmul+0x51a>
 8001378:	2301      	movs	r3, #1
 800137a:	2400      	movs	r4, #0
 800137c:	2500      	movs	r5, #0
 800137e:	e61b      	b.n	8000fb8 <__aeabi_dmul+0xe4>
 8001380:	f000 f972 	bl	8001668 <__clzsi2>
 8001384:	0001      	movs	r1, r0
 8001386:	0003      	movs	r3, r0
 8001388:	3115      	adds	r1, #21
 800138a:	3320      	adds	r3, #32
 800138c:	291c      	cmp	r1, #28
 800138e:	dd8f      	ble.n	80012b0 <__aeabi_dmul+0x3dc>
 8001390:	3808      	subs	r0, #8
 8001392:	2200      	movs	r2, #0
 8001394:	4084      	lsls	r4, r0
 8001396:	4692      	mov	sl, r2
 8001398:	46a3      	mov	fp, r4
 800139a:	e796      	b.n	80012ca <__aeabi_dmul+0x3f6>
 800139c:	f000 f964 	bl	8001668 <__clzsi2>
 80013a0:	0001      	movs	r1, r0
 80013a2:	0003      	movs	r3, r0
 80013a4:	3115      	adds	r1, #21
 80013a6:	3320      	adds	r3, #32
 80013a8:	291c      	cmp	r1, #28
 80013aa:	dc00      	bgt.n	80013ae <__aeabi_dmul+0x4da>
 80013ac:	e758      	b.n	8001260 <__aeabi_dmul+0x38c>
 80013ae:	0002      	movs	r2, r0
 80013b0:	464c      	mov	r4, r9
 80013b2:	3a08      	subs	r2, #8
 80013b4:	2000      	movs	r0, #0
 80013b6:	4094      	lsls	r4, r2
 80013b8:	e75d      	b.n	8001276 <__aeabi_dmul+0x3a2>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	9302      	str	r3, [sp, #8]
 80013be:	e711      	b.n	80011e4 <__aeabi_dmul+0x310>
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <__aeabi_dmul+0x57c>)
 80013c2:	0026      	movs	r6, r4
 80013c4:	469c      	mov	ip, r3
 80013c6:	0003      	movs	r3, r0
 80013c8:	9d02      	ldr	r5, [sp, #8]
 80013ca:	40cb      	lsrs	r3, r1
 80013cc:	4465      	add	r5, ip
 80013ce:	40ae      	lsls	r6, r5
 80013d0:	431e      	orrs	r6, r3
 80013d2:	0003      	movs	r3, r0
 80013d4:	40ab      	lsls	r3, r5
 80013d6:	1e58      	subs	r0, r3, #1
 80013d8:	4183      	sbcs	r3, r0
 80013da:	0030      	movs	r0, r6
 80013dc:	4318      	orrs	r0, r3
 80013de:	40cc      	lsrs	r4, r1
 80013e0:	0743      	lsls	r3, r0, #29
 80013e2:	d0c7      	beq.n	8001374 <__aeabi_dmul+0x4a0>
 80013e4:	230f      	movs	r3, #15
 80013e6:	4003      	ands	r3, r0
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d1bd      	bne.n	8001368 <__aeabi_dmul+0x494>
 80013ec:	e7c2      	b.n	8001374 <__aeabi_dmul+0x4a0>
 80013ee:	0765      	lsls	r5, r4, #29
 80013f0:	0264      	lsls	r4, r4, #9
 80013f2:	0b24      	lsrs	r4, r4, #12
 80013f4:	08c0      	lsrs	r0, r0, #3
 80013f6:	2300      	movs	r3, #0
 80013f8:	4305      	orrs	r5, r0
 80013fa:	e5dd      	b.n	8000fb8 <__aeabi_dmul+0xe4>
 80013fc:	2500      	movs	r5, #0
 80013fe:	2302      	movs	r3, #2
 8001400:	2e0f      	cmp	r6, #15
 8001402:	d10c      	bne.n	800141e <__aeabi_dmul+0x54a>
 8001404:	2480      	movs	r4, #128	; 0x80
 8001406:	465b      	mov	r3, fp
 8001408:	0324      	lsls	r4, r4, #12
 800140a:	4223      	tst	r3, r4
 800140c:	d00e      	beq.n	800142c <__aeabi_dmul+0x558>
 800140e:	4221      	tst	r1, r4
 8001410:	d10c      	bne.n	800142c <__aeabi_dmul+0x558>
 8001412:	430c      	orrs	r4, r1
 8001414:	0324      	lsls	r4, r4, #12
 8001416:	003a      	movs	r2, r7
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <__aeabi_dmul+0x580>)
 800141a:	0b24      	lsrs	r4, r4, #12
 800141c:	e5cc      	b.n	8000fb8 <__aeabi_dmul+0xe4>
 800141e:	2e0b      	cmp	r6, #11
 8001420:	d000      	beq.n	8001424 <__aeabi_dmul+0x550>
 8001422:	e5a2      	b.n	8000f6a <__aeabi_dmul+0x96>
 8001424:	468b      	mov	fp, r1
 8001426:	46aa      	mov	sl, r5
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	e5f7      	b.n	800101c <__aeabi_dmul+0x148>
 800142c:	2480      	movs	r4, #128	; 0x80
 800142e:	465b      	mov	r3, fp
 8001430:	0324      	lsls	r4, r4, #12
 8001432:	431c      	orrs	r4, r3
 8001434:	0324      	lsls	r4, r4, #12
 8001436:	4642      	mov	r2, r8
 8001438:	4655      	mov	r5, sl
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <__aeabi_dmul+0x580>)
 800143c:	0b24      	lsrs	r4, r4, #12
 800143e:	e5bb      	b.n	8000fb8 <__aeabi_dmul+0xe4>
 8001440:	464d      	mov	r5, r9
 8001442:	0021      	movs	r1, r4
 8001444:	2303      	movs	r3, #3
 8001446:	e7db      	b.n	8001400 <__aeabi_dmul+0x52c>
 8001448:	fffffc0d 	.word	0xfffffc0d
 800144c:	0000043e 	.word	0x0000043e
 8001450:	0000041e 	.word	0x0000041e
 8001454:	000007ff 	.word	0x000007ff

08001458 <__aeabi_f2d>:
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	0242      	lsls	r2, r0, #9
 800145c:	0043      	lsls	r3, r0, #1
 800145e:	0fc4      	lsrs	r4, r0, #31
 8001460:	20fe      	movs	r0, #254	; 0xfe
 8001462:	0e1b      	lsrs	r3, r3, #24
 8001464:	1c59      	adds	r1, r3, #1
 8001466:	0a55      	lsrs	r5, r2, #9
 8001468:	4208      	tst	r0, r1
 800146a:	d00c      	beq.n	8001486 <__aeabi_f2d+0x2e>
 800146c:	21e0      	movs	r1, #224	; 0xe0
 800146e:	0089      	lsls	r1, r1, #2
 8001470:	468c      	mov	ip, r1
 8001472:	076d      	lsls	r5, r5, #29
 8001474:	0b12      	lsrs	r2, r2, #12
 8001476:	4463      	add	r3, ip
 8001478:	051b      	lsls	r3, r3, #20
 800147a:	4313      	orrs	r3, r2
 800147c:	07e4      	lsls	r4, r4, #31
 800147e:	4323      	orrs	r3, r4
 8001480:	0028      	movs	r0, r5
 8001482:	0019      	movs	r1, r3
 8001484:	bd70      	pop	{r4, r5, r6, pc}
 8001486:	2b00      	cmp	r3, #0
 8001488:	d114      	bne.n	80014b4 <__aeabi_f2d+0x5c>
 800148a:	2d00      	cmp	r5, #0
 800148c:	d01b      	beq.n	80014c6 <__aeabi_f2d+0x6e>
 800148e:	0028      	movs	r0, r5
 8001490:	f000 f8ea 	bl	8001668 <__clzsi2>
 8001494:	280a      	cmp	r0, #10
 8001496:	dc1c      	bgt.n	80014d2 <__aeabi_f2d+0x7a>
 8001498:	230b      	movs	r3, #11
 800149a:	002a      	movs	r2, r5
 800149c:	1a1b      	subs	r3, r3, r0
 800149e:	40da      	lsrs	r2, r3
 80014a0:	0003      	movs	r3, r0
 80014a2:	3315      	adds	r3, #21
 80014a4:	409d      	lsls	r5, r3
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <__aeabi_f2d+0x88>)
 80014a8:	0312      	lsls	r2, r2, #12
 80014aa:	1a1b      	subs	r3, r3, r0
 80014ac:	055b      	lsls	r3, r3, #21
 80014ae:	0b12      	lsrs	r2, r2, #12
 80014b0:	0d5b      	lsrs	r3, r3, #21
 80014b2:	e7e1      	b.n	8001478 <__aeabi_f2d+0x20>
 80014b4:	2d00      	cmp	r5, #0
 80014b6:	d009      	beq.n	80014cc <__aeabi_f2d+0x74>
 80014b8:	0b13      	lsrs	r3, r2, #12
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	0312      	lsls	r2, r2, #12
 80014be:	431a      	orrs	r2, r3
 80014c0:	076d      	lsls	r5, r5, #29
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <__aeabi_f2d+0x8c>)
 80014c4:	e7d8      	b.n	8001478 <__aeabi_f2d+0x20>
 80014c6:	2300      	movs	r3, #0
 80014c8:	2200      	movs	r2, #0
 80014ca:	e7d5      	b.n	8001478 <__aeabi_f2d+0x20>
 80014cc:	2200      	movs	r2, #0
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <__aeabi_f2d+0x8c>)
 80014d0:	e7d2      	b.n	8001478 <__aeabi_f2d+0x20>
 80014d2:	0003      	movs	r3, r0
 80014d4:	002a      	movs	r2, r5
 80014d6:	3b0b      	subs	r3, #11
 80014d8:	409a      	lsls	r2, r3
 80014da:	2500      	movs	r5, #0
 80014dc:	e7e3      	b.n	80014a6 <__aeabi_f2d+0x4e>
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	00000389 	.word	0x00000389
 80014e4:	000007ff 	.word	0x000007ff

080014e8 <__aeabi_d2f>:
 80014e8:	0002      	movs	r2, r0
 80014ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ec:	004b      	lsls	r3, r1, #1
 80014ee:	030d      	lsls	r5, r1, #12
 80014f0:	0f40      	lsrs	r0, r0, #29
 80014f2:	0d5b      	lsrs	r3, r3, #21
 80014f4:	0fcc      	lsrs	r4, r1, #31
 80014f6:	0a6d      	lsrs	r5, r5, #9
 80014f8:	493a      	ldr	r1, [pc, #232]	; (80015e4 <__aeabi_d2f+0xfc>)
 80014fa:	4305      	orrs	r5, r0
 80014fc:	1c58      	adds	r0, r3, #1
 80014fe:	00d7      	lsls	r7, r2, #3
 8001500:	4208      	tst	r0, r1
 8001502:	d00a      	beq.n	800151a <__aeabi_d2f+0x32>
 8001504:	4938      	ldr	r1, [pc, #224]	; (80015e8 <__aeabi_d2f+0x100>)
 8001506:	1859      	adds	r1, r3, r1
 8001508:	29fe      	cmp	r1, #254	; 0xfe
 800150a:	dd16      	ble.n	800153a <__aeabi_d2f+0x52>
 800150c:	20ff      	movs	r0, #255	; 0xff
 800150e:	2200      	movs	r2, #0
 8001510:	05c0      	lsls	r0, r0, #23
 8001512:	4310      	orrs	r0, r2
 8001514:	07e4      	lsls	r4, r4, #31
 8001516:	4320      	orrs	r0, r4
 8001518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <__aeabi_d2f+0x44>
 800151e:	433d      	orrs	r5, r7
 8001520:	d026      	beq.n	8001570 <__aeabi_d2f+0x88>
 8001522:	2205      	movs	r2, #5
 8001524:	0192      	lsls	r2, r2, #6
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	b2d8      	uxtb	r0, r3
 800152a:	e7f1      	b.n	8001510 <__aeabi_d2f+0x28>
 800152c:	432f      	orrs	r7, r5
 800152e:	d0ed      	beq.n	800150c <__aeabi_d2f+0x24>
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	03d2      	lsls	r2, r2, #15
 8001534:	20ff      	movs	r0, #255	; 0xff
 8001536:	432a      	orrs	r2, r5
 8001538:	e7ea      	b.n	8001510 <__aeabi_d2f+0x28>
 800153a:	2900      	cmp	r1, #0
 800153c:	dd1b      	ble.n	8001576 <__aeabi_d2f+0x8e>
 800153e:	0192      	lsls	r2, r2, #6
 8001540:	1e50      	subs	r0, r2, #1
 8001542:	4182      	sbcs	r2, r0
 8001544:	00ed      	lsls	r5, r5, #3
 8001546:	0f7f      	lsrs	r7, r7, #29
 8001548:	432a      	orrs	r2, r5
 800154a:	433a      	orrs	r2, r7
 800154c:	0753      	lsls	r3, r2, #29
 800154e:	d047      	beq.n	80015e0 <__aeabi_d2f+0xf8>
 8001550:	230f      	movs	r3, #15
 8001552:	4013      	ands	r3, r2
 8001554:	2b04      	cmp	r3, #4
 8001556:	d000      	beq.n	800155a <__aeabi_d2f+0x72>
 8001558:	3204      	adds	r2, #4
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	04db      	lsls	r3, r3, #19
 800155e:	4013      	ands	r3, r2
 8001560:	d03e      	beq.n	80015e0 <__aeabi_d2f+0xf8>
 8001562:	1c48      	adds	r0, r1, #1
 8001564:	29fe      	cmp	r1, #254	; 0xfe
 8001566:	d0d1      	beq.n	800150c <__aeabi_d2f+0x24>
 8001568:	0192      	lsls	r2, r2, #6
 800156a:	0a52      	lsrs	r2, r2, #9
 800156c:	b2c0      	uxtb	r0, r0
 800156e:	e7cf      	b.n	8001510 <__aeabi_d2f+0x28>
 8001570:	2000      	movs	r0, #0
 8001572:	2200      	movs	r2, #0
 8001574:	e7cc      	b.n	8001510 <__aeabi_d2f+0x28>
 8001576:	000a      	movs	r2, r1
 8001578:	3217      	adds	r2, #23
 800157a:	db2f      	blt.n	80015dc <__aeabi_d2f+0xf4>
 800157c:	2680      	movs	r6, #128	; 0x80
 800157e:	0436      	lsls	r6, r6, #16
 8001580:	432e      	orrs	r6, r5
 8001582:	251e      	movs	r5, #30
 8001584:	1a6d      	subs	r5, r5, r1
 8001586:	2d1f      	cmp	r5, #31
 8001588:	dd11      	ble.n	80015ae <__aeabi_d2f+0xc6>
 800158a:	2202      	movs	r2, #2
 800158c:	4252      	negs	r2, r2
 800158e:	1a52      	subs	r2, r2, r1
 8001590:	0031      	movs	r1, r6
 8001592:	40d1      	lsrs	r1, r2
 8001594:	2d20      	cmp	r5, #32
 8001596:	d004      	beq.n	80015a2 <__aeabi_d2f+0xba>
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <__aeabi_d2f+0x104>)
 800159a:	4694      	mov	ip, r2
 800159c:	4463      	add	r3, ip
 800159e:	409e      	lsls	r6, r3
 80015a0:	4337      	orrs	r7, r6
 80015a2:	003a      	movs	r2, r7
 80015a4:	1e53      	subs	r3, r2, #1
 80015a6:	419a      	sbcs	r2, r3
 80015a8:	430a      	orrs	r2, r1
 80015aa:	2100      	movs	r1, #0
 80015ac:	e7ce      	b.n	800154c <__aeabi_d2f+0x64>
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <__aeabi_d2f+0x108>)
 80015b0:	0038      	movs	r0, r7
 80015b2:	4694      	mov	ip, r2
 80015b4:	4463      	add	r3, ip
 80015b6:	4098      	lsls	r0, r3
 80015b8:	003a      	movs	r2, r7
 80015ba:	1e41      	subs	r1, r0, #1
 80015bc:	4188      	sbcs	r0, r1
 80015be:	409e      	lsls	r6, r3
 80015c0:	40ea      	lsrs	r2, r5
 80015c2:	4330      	orrs	r0, r6
 80015c4:	4302      	orrs	r2, r0
 80015c6:	2100      	movs	r1, #0
 80015c8:	0753      	lsls	r3, r2, #29
 80015ca:	d1c1      	bne.n	8001550 <__aeabi_d2f+0x68>
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	0013      	movs	r3, r2
 80015d0:	04c9      	lsls	r1, r1, #19
 80015d2:	2001      	movs	r0, #1
 80015d4:	400b      	ands	r3, r1
 80015d6:	420a      	tst	r2, r1
 80015d8:	d1c6      	bne.n	8001568 <__aeabi_d2f+0x80>
 80015da:	e7a3      	b.n	8001524 <__aeabi_d2f+0x3c>
 80015dc:	2300      	movs	r3, #0
 80015de:	e7a0      	b.n	8001522 <__aeabi_d2f+0x3a>
 80015e0:	000b      	movs	r3, r1
 80015e2:	e79f      	b.n	8001524 <__aeabi_d2f+0x3c>
 80015e4:	000007fe 	.word	0x000007fe
 80015e8:	fffffc80 	.word	0xfffffc80
 80015ec:	fffffca2 	.word	0xfffffca2
 80015f0:	fffffc82 	.word	0xfffffc82

080015f4 <__aeabi_cfrcmple>:
 80015f4:	4684      	mov	ip, r0
 80015f6:	0008      	movs	r0, r1
 80015f8:	4661      	mov	r1, ip
 80015fa:	e7ff      	b.n	80015fc <__aeabi_cfcmpeq>

080015fc <__aeabi_cfcmpeq>:
 80015fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80015fe:	f000 f8bd 	bl	800177c <__lesf2>
 8001602:	2800      	cmp	r0, #0
 8001604:	d401      	bmi.n	800160a <__aeabi_cfcmpeq+0xe>
 8001606:	2100      	movs	r1, #0
 8001608:	42c8      	cmn	r0, r1
 800160a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800160c <__aeabi_fcmpeq>:
 800160c:	b510      	push	{r4, lr}
 800160e:	f000 f849 	bl	80016a4 <__eqsf2>
 8001612:	4240      	negs	r0, r0
 8001614:	3001      	adds	r0, #1
 8001616:	bd10      	pop	{r4, pc}

08001618 <__aeabi_fcmplt>:
 8001618:	b510      	push	{r4, lr}
 800161a:	f000 f8af 	bl	800177c <__lesf2>
 800161e:	2800      	cmp	r0, #0
 8001620:	db01      	blt.n	8001626 <__aeabi_fcmplt+0xe>
 8001622:	2000      	movs	r0, #0
 8001624:	bd10      	pop	{r4, pc}
 8001626:	2001      	movs	r0, #1
 8001628:	bd10      	pop	{r4, pc}
 800162a:	46c0      	nop			; (mov r8, r8)

0800162c <__aeabi_fcmple>:
 800162c:	b510      	push	{r4, lr}
 800162e:	f000 f8a5 	bl	800177c <__lesf2>
 8001632:	2800      	cmp	r0, #0
 8001634:	dd01      	ble.n	800163a <__aeabi_fcmple+0xe>
 8001636:	2000      	movs	r0, #0
 8001638:	bd10      	pop	{r4, pc}
 800163a:	2001      	movs	r0, #1
 800163c:	bd10      	pop	{r4, pc}
 800163e:	46c0      	nop			; (mov r8, r8)

08001640 <__aeabi_fcmpgt>:
 8001640:	b510      	push	{r4, lr}
 8001642:	f000 f855 	bl	80016f0 <__gesf2>
 8001646:	2800      	cmp	r0, #0
 8001648:	dc01      	bgt.n	800164e <__aeabi_fcmpgt+0xe>
 800164a:	2000      	movs	r0, #0
 800164c:	bd10      	pop	{r4, pc}
 800164e:	2001      	movs	r0, #1
 8001650:	bd10      	pop	{r4, pc}
 8001652:	46c0      	nop			; (mov r8, r8)

08001654 <__aeabi_fcmpge>:
 8001654:	b510      	push	{r4, lr}
 8001656:	f000 f84b 	bl	80016f0 <__gesf2>
 800165a:	2800      	cmp	r0, #0
 800165c:	da01      	bge.n	8001662 <__aeabi_fcmpge+0xe>
 800165e:	2000      	movs	r0, #0
 8001660:	bd10      	pop	{r4, pc}
 8001662:	2001      	movs	r0, #1
 8001664:	bd10      	pop	{r4, pc}
 8001666:	46c0      	nop			; (mov r8, r8)

08001668 <__clzsi2>:
 8001668:	211c      	movs	r1, #28
 800166a:	2301      	movs	r3, #1
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	4298      	cmp	r0, r3
 8001670:	d301      	bcc.n	8001676 <__clzsi2+0xe>
 8001672:	0c00      	lsrs	r0, r0, #16
 8001674:	3910      	subs	r1, #16
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	4298      	cmp	r0, r3
 800167a:	d301      	bcc.n	8001680 <__clzsi2+0x18>
 800167c:	0a00      	lsrs	r0, r0, #8
 800167e:	3908      	subs	r1, #8
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	4298      	cmp	r0, r3
 8001684:	d301      	bcc.n	800168a <__clzsi2+0x22>
 8001686:	0900      	lsrs	r0, r0, #4
 8001688:	3904      	subs	r1, #4
 800168a:	a202      	add	r2, pc, #8	; (adr r2, 8001694 <__clzsi2+0x2c>)
 800168c:	5c10      	ldrb	r0, [r2, r0]
 800168e:	1840      	adds	r0, r0, r1
 8001690:	4770      	bx	lr
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	02020304 	.word	0x02020304
 8001698:	01010101 	.word	0x01010101
	...

080016a4 <__eqsf2>:
 80016a4:	b570      	push	{r4, r5, r6, lr}
 80016a6:	0042      	lsls	r2, r0, #1
 80016a8:	0245      	lsls	r5, r0, #9
 80016aa:	024e      	lsls	r6, r1, #9
 80016ac:	004c      	lsls	r4, r1, #1
 80016ae:	0fc3      	lsrs	r3, r0, #31
 80016b0:	0a6d      	lsrs	r5, r5, #9
 80016b2:	2001      	movs	r0, #1
 80016b4:	0e12      	lsrs	r2, r2, #24
 80016b6:	0a76      	lsrs	r6, r6, #9
 80016b8:	0e24      	lsrs	r4, r4, #24
 80016ba:	0fc9      	lsrs	r1, r1, #31
 80016bc:	2aff      	cmp	r2, #255	; 0xff
 80016be:	d006      	beq.n	80016ce <__eqsf2+0x2a>
 80016c0:	2cff      	cmp	r4, #255	; 0xff
 80016c2:	d003      	beq.n	80016cc <__eqsf2+0x28>
 80016c4:	42a2      	cmp	r2, r4
 80016c6:	d101      	bne.n	80016cc <__eqsf2+0x28>
 80016c8:	42b5      	cmp	r5, r6
 80016ca:	d006      	beq.n	80016da <__eqsf2+0x36>
 80016cc:	bd70      	pop	{r4, r5, r6, pc}
 80016ce:	2d00      	cmp	r5, #0
 80016d0:	d1fc      	bne.n	80016cc <__eqsf2+0x28>
 80016d2:	2cff      	cmp	r4, #255	; 0xff
 80016d4:	d1fa      	bne.n	80016cc <__eqsf2+0x28>
 80016d6:	2e00      	cmp	r6, #0
 80016d8:	d1f8      	bne.n	80016cc <__eqsf2+0x28>
 80016da:	428b      	cmp	r3, r1
 80016dc:	d006      	beq.n	80016ec <__eqsf2+0x48>
 80016de:	2001      	movs	r0, #1
 80016e0:	2a00      	cmp	r2, #0
 80016e2:	d1f3      	bne.n	80016cc <__eqsf2+0x28>
 80016e4:	0028      	movs	r0, r5
 80016e6:	1e43      	subs	r3, r0, #1
 80016e8:	4198      	sbcs	r0, r3
 80016ea:	e7ef      	b.n	80016cc <__eqsf2+0x28>
 80016ec:	2000      	movs	r0, #0
 80016ee:	e7ed      	b.n	80016cc <__eqsf2+0x28>

080016f0 <__gesf2>:
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	0042      	lsls	r2, r0, #1
 80016f4:	0245      	lsls	r5, r0, #9
 80016f6:	024e      	lsls	r6, r1, #9
 80016f8:	004c      	lsls	r4, r1, #1
 80016fa:	0fc3      	lsrs	r3, r0, #31
 80016fc:	0a6d      	lsrs	r5, r5, #9
 80016fe:	0e12      	lsrs	r2, r2, #24
 8001700:	0a76      	lsrs	r6, r6, #9
 8001702:	0e24      	lsrs	r4, r4, #24
 8001704:	0fc8      	lsrs	r0, r1, #31
 8001706:	2aff      	cmp	r2, #255	; 0xff
 8001708:	d01b      	beq.n	8001742 <__gesf2+0x52>
 800170a:	2cff      	cmp	r4, #255	; 0xff
 800170c:	d00e      	beq.n	800172c <__gesf2+0x3c>
 800170e:	2a00      	cmp	r2, #0
 8001710:	d11b      	bne.n	800174a <__gesf2+0x5a>
 8001712:	2c00      	cmp	r4, #0
 8001714:	d101      	bne.n	800171a <__gesf2+0x2a>
 8001716:	2e00      	cmp	r6, #0
 8001718:	d01c      	beq.n	8001754 <__gesf2+0x64>
 800171a:	2d00      	cmp	r5, #0
 800171c:	d00c      	beq.n	8001738 <__gesf2+0x48>
 800171e:	4283      	cmp	r3, r0
 8001720:	d01c      	beq.n	800175c <__gesf2+0x6c>
 8001722:	2102      	movs	r1, #2
 8001724:	1e58      	subs	r0, r3, #1
 8001726:	4008      	ands	r0, r1
 8001728:	3801      	subs	r0, #1
 800172a:	bd70      	pop	{r4, r5, r6, pc}
 800172c:	2e00      	cmp	r6, #0
 800172e:	d122      	bne.n	8001776 <__gesf2+0x86>
 8001730:	2a00      	cmp	r2, #0
 8001732:	d1f4      	bne.n	800171e <__gesf2+0x2e>
 8001734:	2d00      	cmp	r5, #0
 8001736:	d1f2      	bne.n	800171e <__gesf2+0x2e>
 8001738:	2800      	cmp	r0, #0
 800173a:	d1f6      	bne.n	800172a <__gesf2+0x3a>
 800173c:	2001      	movs	r0, #1
 800173e:	4240      	negs	r0, r0
 8001740:	e7f3      	b.n	800172a <__gesf2+0x3a>
 8001742:	2d00      	cmp	r5, #0
 8001744:	d117      	bne.n	8001776 <__gesf2+0x86>
 8001746:	2cff      	cmp	r4, #255	; 0xff
 8001748:	d0f0      	beq.n	800172c <__gesf2+0x3c>
 800174a:	2c00      	cmp	r4, #0
 800174c:	d1e7      	bne.n	800171e <__gesf2+0x2e>
 800174e:	2e00      	cmp	r6, #0
 8001750:	d1e5      	bne.n	800171e <__gesf2+0x2e>
 8001752:	e7e6      	b.n	8001722 <__gesf2+0x32>
 8001754:	2000      	movs	r0, #0
 8001756:	2d00      	cmp	r5, #0
 8001758:	d0e7      	beq.n	800172a <__gesf2+0x3a>
 800175a:	e7e2      	b.n	8001722 <__gesf2+0x32>
 800175c:	42a2      	cmp	r2, r4
 800175e:	dc05      	bgt.n	800176c <__gesf2+0x7c>
 8001760:	dbea      	blt.n	8001738 <__gesf2+0x48>
 8001762:	42b5      	cmp	r5, r6
 8001764:	d802      	bhi.n	800176c <__gesf2+0x7c>
 8001766:	d3e7      	bcc.n	8001738 <__gesf2+0x48>
 8001768:	2000      	movs	r0, #0
 800176a:	e7de      	b.n	800172a <__gesf2+0x3a>
 800176c:	4243      	negs	r3, r0
 800176e:	4158      	adcs	r0, r3
 8001770:	0040      	lsls	r0, r0, #1
 8001772:	3801      	subs	r0, #1
 8001774:	e7d9      	b.n	800172a <__gesf2+0x3a>
 8001776:	2002      	movs	r0, #2
 8001778:	4240      	negs	r0, r0
 800177a:	e7d6      	b.n	800172a <__gesf2+0x3a>

0800177c <__lesf2>:
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	0042      	lsls	r2, r0, #1
 8001780:	0245      	lsls	r5, r0, #9
 8001782:	024e      	lsls	r6, r1, #9
 8001784:	004c      	lsls	r4, r1, #1
 8001786:	0fc3      	lsrs	r3, r0, #31
 8001788:	0a6d      	lsrs	r5, r5, #9
 800178a:	0e12      	lsrs	r2, r2, #24
 800178c:	0a76      	lsrs	r6, r6, #9
 800178e:	0e24      	lsrs	r4, r4, #24
 8001790:	0fc8      	lsrs	r0, r1, #31
 8001792:	2aff      	cmp	r2, #255	; 0xff
 8001794:	d00b      	beq.n	80017ae <__lesf2+0x32>
 8001796:	2cff      	cmp	r4, #255	; 0xff
 8001798:	d00d      	beq.n	80017b6 <__lesf2+0x3a>
 800179a:	2a00      	cmp	r2, #0
 800179c:	d11f      	bne.n	80017de <__lesf2+0x62>
 800179e:	2c00      	cmp	r4, #0
 80017a0:	d116      	bne.n	80017d0 <__lesf2+0x54>
 80017a2:	2e00      	cmp	r6, #0
 80017a4:	d114      	bne.n	80017d0 <__lesf2+0x54>
 80017a6:	2000      	movs	r0, #0
 80017a8:	2d00      	cmp	r5, #0
 80017aa:	d010      	beq.n	80017ce <__lesf2+0x52>
 80017ac:	e009      	b.n	80017c2 <__lesf2+0x46>
 80017ae:	2d00      	cmp	r5, #0
 80017b0:	d10c      	bne.n	80017cc <__lesf2+0x50>
 80017b2:	2cff      	cmp	r4, #255	; 0xff
 80017b4:	d113      	bne.n	80017de <__lesf2+0x62>
 80017b6:	2e00      	cmp	r6, #0
 80017b8:	d108      	bne.n	80017cc <__lesf2+0x50>
 80017ba:	2a00      	cmp	r2, #0
 80017bc:	d008      	beq.n	80017d0 <__lesf2+0x54>
 80017be:	4283      	cmp	r3, r0
 80017c0:	d012      	beq.n	80017e8 <__lesf2+0x6c>
 80017c2:	2102      	movs	r1, #2
 80017c4:	1e58      	subs	r0, r3, #1
 80017c6:	4008      	ands	r0, r1
 80017c8:	3801      	subs	r0, #1
 80017ca:	e000      	b.n	80017ce <__lesf2+0x52>
 80017cc:	2002      	movs	r0, #2
 80017ce:	bd70      	pop	{r4, r5, r6, pc}
 80017d0:	2d00      	cmp	r5, #0
 80017d2:	d1f4      	bne.n	80017be <__lesf2+0x42>
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d1fa      	bne.n	80017ce <__lesf2+0x52>
 80017d8:	2001      	movs	r0, #1
 80017da:	4240      	negs	r0, r0
 80017dc:	e7f7      	b.n	80017ce <__lesf2+0x52>
 80017de:	2c00      	cmp	r4, #0
 80017e0:	d1ed      	bne.n	80017be <__lesf2+0x42>
 80017e2:	2e00      	cmp	r6, #0
 80017e4:	d1eb      	bne.n	80017be <__lesf2+0x42>
 80017e6:	e7ec      	b.n	80017c2 <__lesf2+0x46>
 80017e8:	42a2      	cmp	r2, r4
 80017ea:	dc05      	bgt.n	80017f8 <__lesf2+0x7c>
 80017ec:	dbf2      	blt.n	80017d4 <__lesf2+0x58>
 80017ee:	42b5      	cmp	r5, r6
 80017f0:	d802      	bhi.n	80017f8 <__lesf2+0x7c>
 80017f2:	d3ef      	bcc.n	80017d4 <__lesf2+0x58>
 80017f4:	2000      	movs	r0, #0
 80017f6:	e7ea      	b.n	80017ce <__lesf2+0x52>
 80017f8:	4243      	negs	r3, r0
 80017fa:	4158      	adcs	r0, r3
 80017fc:	0040      	lsls	r0, r0, #1
 80017fe:	3801      	subs	r0, #1
 8001800:	e7e5      	b.n	80017ce <__lesf2+0x52>
 8001802:	46c0      	nop			; (mov r8, r8)

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001808:	f000 fdfa 	bl	8002400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180c:	f000 f80d 	bl	800182a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001810:	f000 f9ba 	bl	8001b88 <MX_GPIO_Init>
  MX_TIM15_Init();
 8001814:	f000 f8c8 	bl	80019a8 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8001818:	f000 f986 	bl	8001b28 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800181c:	f000 f846 	bl	80018ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  rc_car_init();
 8001820:	f000 fa10 	bl	8001c44 <rc_car_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  rc_car_process();
 8001824:	f000 fa4e 	bl	8001cc4 <rc_car_process>
 8001828:	e7fc      	b.n	8001824 <main+0x20>

0800182a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182a:	b590      	push	{r4, r7, lr}
 800182c:	b091      	sub	sp, #68	; 0x44
 800182e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001830:	2410      	movs	r4, #16
 8001832:	193b      	adds	r3, r7, r4
 8001834:	0018      	movs	r0, r3
 8001836:	2330      	movs	r3, #48	; 0x30
 8001838:	001a      	movs	r2, r3
 800183a:	2100      	movs	r1, #0
 800183c:	f003 fe64 	bl	8005508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	003b      	movs	r3, r7
 8001842:	0018      	movs	r0, r3
 8001844:	2310      	movs	r3, #16
 8001846:	001a      	movs	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	f003 fe5d 	bl	8005508 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800184e:	0021      	movs	r1, r4
 8001850:	187b      	adds	r3, r7, r1
 8001852:	2202      	movs	r2, #2
 8001854:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001856:	187b      	adds	r3, r7, r1
 8001858:	2201      	movs	r2, #1
 800185a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800185c:	187b      	adds	r3, r7, r1
 800185e:	2210      	movs	r2, #16
 8001860:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001862:	187b      	adds	r3, r7, r1
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001868:	187b      	adds	r3, r7, r1
 800186a:	0018      	movs	r0, r3
 800186c:	f001 f920 	bl	8002ab0 <HAL_RCC_OscConfig>
 8001870:	1e03      	subs	r3, r0, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8001874:	f000 f9e0 	bl	8001c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001878:	003b      	movs	r3, r7
 800187a:	2207      	movs	r2, #7
 800187c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800187e:	003b      	movs	r3, r7
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001884:	003b      	movs	r3, r7
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800188a:	003b      	movs	r3, r7
 800188c:	22c0      	movs	r2, #192	; 0xc0
 800188e:	00d2      	lsls	r2, r2, #3
 8001890:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001892:	003b      	movs	r3, r7
 8001894:	2100      	movs	r1, #0
 8001896:	0018      	movs	r0, r3
 8001898:	f001 fc28 	bl	80030ec <HAL_RCC_ClockConfig>
 800189c:	1e03      	subs	r3, r0, #0
 800189e:	d001      	beq.n	80018a4 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80018a0:	f000 f9ca 	bl	8001c38 <Error_Handler>
  }
}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b011      	add	sp, #68	; 0x44
 80018aa:	bd90      	pop	{r4, r7, pc}

080018ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08e      	sub	sp, #56	; 0x38
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	2328      	movs	r3, #40	; 0x28
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	0018      	movs	r0, r3
 80018b8:	2310      	movs	r3, #16
 80018ba:	001a      	movs	r2, r3
 80018bc:	2100      	movs	r1, #0
 80018be:	f003 fe23 	bl	8005508 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c2:	2320      	movs	r3, #32
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	0018      	movs	r0, r3
 80018c8:	2308      	movs	r3, #8
 80018ca:	001a      	movs	r2, r3
 80018cc:	2100      	movs	r1, #0
 80018ce:	f003 fe1b 	bl	8005508 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	0018      	movs	r0, r3
 80018d6:	231c      	movs	r3, #28
 80018d8:	001a      	movs	r2, r3
 80018da:	2100      	movs	r1, #0
 80018dc:	f003 fe14 	bl	8005508 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018e0:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <MX_TIM3_Init+0xf4>)
 80018e2:	4a30      	ldr	r2, [pc, #192]	; (80019a4 <MX_TIM3_Init+0xf8>)
 80018e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <MX_TIM3_Init+0xf4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <MX_TIM3_Init+0xf4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <MX_TIM3_Init+0xf4>)
 80018f4:	2263      	movs	r2, #99	; 0x63
 80018f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f8:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <MX_TIM3_Init+0xf4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fe:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <MX_TIM3_Init+0xf4>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <MX_TIM3_Init+0xf4>)
 8001906:	0018      	movs	r0, r3
 8001908:	f001 fd36 	bl	8003378 <HAL_TIM_Base_Init>
 800190c:	1e03      	subs	r3, r0, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001910:	f000 f992 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001914:	2128      	movs	r1, #40	; 0x28
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	0152      	lsls	r2, r2, #5
 800191c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800191e:	187a      	adds	r2, r7, r1
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <MX_TIM3_Init+0xf4>)
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f001 ff47 	bl	80037b8 <HAL_TIM_ConfigClockSource>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800192e:	f000 f983 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001932:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <MX_TIM3_Init+0xf4>)
 8001934:	0018      	movs	r0, r3
 8001936:	f001 fd6f 	bl	8003418 <HAL_TIM_PWM_Init>
 800193a:	1e03      	subs	r3, r0, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800193e:	f000 f97b 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2120      	movs	r1, #32
 8001944:	187b      	adds	r3, r7, r1
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001950:	187a      	adds	r2, r7, r1
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <MX_TIM3_Init+0xf4>)
 8001954:	0011      	movs	r1, r2
 8001956:	0018      	movs	r0, r3
 8001958:	f002 fb32 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	1e03      	subs	r3, r0, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001960:	f000 f96a 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2260      	movs	r2, #96	; 0x60
 8001968:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50-1;
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2231      	movs	r2, #49	; 0x31
 800196e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800197c:	1d39      	adds	r1, r7, #4
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_TIM3_Init+0xf4>)
 8001980:	220c      	movs	r2, #12
 8001982:	0018      	movs	r0, r3
 8001984:	f001 fe52 	bl	800362c <HAL_TIM_PWM_ConfigChannel>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800198c:	f000 f954 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <MX_TIM3_Init+0xf4>)
 8001992:	0018      	movs	r0, r3
 8001994:	f000 fbf4 	bl	8002180 <HAL_TIM_MspPostInit>

}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b00e      	add	sp, #56	; 0x38
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000028 	.word	0x20000028
 80019a4:	40000400 	.word	0x40000400

080019a8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b096      	sub	sp, #88	; 0x58
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ae:	2348      	movs	r3, #72	; 0x48
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	0018      	movs	r0, r3
 80019b4:	2310      	movs	r3, #16
 80019b6:	001a      	movs	r2, r3
 80019b8:	2100      	movs	r1, #0
 80019ba:	f003 fda5 	bl	8005508 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019be:	2340      	movs	r3, #64	; 0x40
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	0018      	movs	r0, r3
 80019c4:	2308      	movs	r3, #8
 80019c6:	001a      	movs	r2, r3
 80019c8:	2100      	movs	r1, #0
 80019ca:	f003 fd9d 	bl	8005508 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ce:	2324      	movs	r3, #36	; 0x24
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	0018      	movs	r0, r3
 80019d4:	231c      	movs	r3, #28
 80019d6:	001a      	movs	r2, r3
 80019d8:	2100      	movs	r1, #0
 80019da:	f003 fd95 	bl	8005508 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	0018      	movs	r0, r3
 80019e2:	2320      	movs	r3, #32
 80019e4:	001a      	movs	r2, r3
 80019e6:	2100      	movs	r1, #0
 80019e8:	f003 fd8e 	bl	8005508 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019ec:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <MX_TIM15_Init+0x174>)
 80019ee:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <MX_TIM15_Init+0x178>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <MX_TIM15_Init+0x174>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b48      	ldr	r3, [pc, #288]	; (8001b1c <MX_TIM15_Init+0x174>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 40000-1;
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001a00:	4a48      	ldr	r2, [pc, #288]	; (8001b24 <MX_TIM15_Init+0x17c>)
 8001a02:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a04:	4b45      	ldr	r3, [pc, #276]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a0a:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a10:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f001 fcad 	bl	8003378 <HAL_TIM_Base_Init>
 8001a1e:	1e03      	subs	r3, r0, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8001a22:	f000 f909 	bl	8001c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a26:	2148      	movs	r1, #72	; 0x48
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	0152      	lsls	r2, r2, #5
 8001a2e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a30:	187a      	adds	r2, r7, r1
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001a34:	0011      	movs	r1, r2
 8001a36:	0018      	movs	r0, r3
 8001a38:	f001 febe 	bl	80037b8 <HAL_TIM_ConfigClockSource>
 8001a3c:	1e03      	subs	r3, r0, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001a40:	f000 f8fa 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a44:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001a46:	0018      	movs	r0, r3
 8001a48:	f001 fce6 	bl	8003418 <HAL_TIM_PWM_Init>
 8001a4c:	1e03      	subs	r3, r0, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8001a50:	f000 f8f2 	bl	8001c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a54:	2140      	movs	r1, #64	; 0x40
 8001a56:	187b      	adds	r3, r7, r1
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	2200      	movs	r2, #0
 8001a60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a62:	187a      	adds	r2, r7, r1
 8001a64:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001a66:	0011      	movs	r1, r2
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f002 faa9 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8001a72:	f000 f8e1 	bl	8001c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a76:	2124      	movs	r1, #36	; 0x24
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	2260      	movs	r2, #96	; 0x60
 8001a7c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa2:	1879      	adds	r1, r7, r1
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f001 fdbf 	bl	800362c <HAL_TIM_PWM_ConfigChannel>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001ab2:	f000 f8c1 	bl	8001c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab6:	2324      	movs	r3, #36	; 0x24
 8001ab8:	18f9      	adds	r1, r7, r3
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001abc:	2204      	movs	r2, #4
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f001 fdb4 	bl	800362c <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	1e03      	subs	r3, r0, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8001ac8:	f000 f8b6 	bl	8001c38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	0192      	lsls	r2, r2, #6
 8001af0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001af8:	1d3a      	adds	r2, r7, #4
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001afc:	0011      	movs	r1, r2
 8001afe:	0018      	movs	r0, r3
 8001b00:	f002 fab6 	bl	8004070 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 8001b08:	f000 f896 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <MX_TIM15_Init+0x174>)
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 fb36 	bl	8002180 <HAL_TIM_MspPostInit>

}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b016      	add	sp, #88	; 0x58
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000070 	.word	0x20000070
 8001b20:	40014000 	.word	0x40014000
 8001b24:	00009c3f 	.word	0x00009c3f

08001b28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_USART3_UART_Init+0x58>)
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <MX_USART3_UART_Init+0x5c>)
 8001b30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <MX_USART3_UART_Init+0x58>)
 8001b34:	2296      	movs	r2, #150	; 0x96
 8001b36:	0192      	lsls	r2, r2, #6
 8001b38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_USART3_UART_Init+0x58>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_USART3_UART_Init+0x58>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_USART3_UART_Init+0x58>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_USART3_UART_Init+0x58>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <MX_USART3_UART_Init+0x58>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_USART3_UART_Init+0x58>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <MX_USART3_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_USART3_UART_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <MX_USART3_UART_Init+0x58>)
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f002 fadd 	bl	800412c <HAL_UART_Init>
 8001b72:	1e03      	subs	r3, r0, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b76:	f000 f85f 	bl	8001c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200000b8 	.word	0x200000b8
 8001b84:	40004800 	.word	0x40004800

08001b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	240c      	movs	r4, #12
 8001b90:	193b      	adds	r3, r7, r4
 8001b92:	0018      	movs	r0, r3
 8001b94:	2314      	movs	r3, #20
 8001b96:	001a      	movs	r2, r3
 8001b98:	2100      	movs	r1, #0
 8001b9a:	f003 fcb5 	bl	8005508 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b9e:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <MX_GPIO_Init+0xac>)
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <MX_GPIO_Init+0xac>)
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	03c9      	lsls	r1, r1, #15
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	615a      	str	r2, [r3, #20]
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <MX_GPIO_Init+0xac>)
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	03db      	lsls	r3, r3, #15
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <MX_GPIO_Init+0xac>)
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_GPIO_Init+0xac>)
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	02c9      	lsls	r1, r1, #11
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_GPIO_Init+0xac>)
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	02db      	lsls	r3, r3, #11
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <MX_GPIO_Init+0xac>)
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_GPIO_Init+0xac>)
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	0289      	lsls	r1, r1, #10
 8001be0:	430a      	orrs	r2, r1
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_GPIO_Init+0xac>)
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	029b      	lsls	r3, r3, #10
 8001bec:	4013      	ands	r3, r2
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M_BACKWARD_Pin|M_FORWARD_Pin, GPIO_PIN_RESET);
 8001bf2:	23c0      	movs	r3, #192	; 0xc0
 8001bf4:	00d9      	lsls	r1, r3, #3
 8001bf6:	2390      	movs	r3, #144	; 0x90
 8001bf8:	05db      	lsls	r3, r3, #23
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 ff39 	bl	8002a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M_BACKWARD_Pin M_FORWARD_Pin */
  GPIO_InitStruct.Pin = M_BACKWARD_Pin|M_FORWARD_Pin;
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	22c0      	movs	r2, #192	; 0xc0
 8001c06:	00d2      	lsls	r2, r2, #3
 8001c08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	193b      	adds	r3, r7, r4
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	2202      	movs	r2, #2
 8001c14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	193a      	adds	r2, r7, r4
 8001c1e:	2390      	movs	r3, #144	; 0x90
 8001c20:	05db      	lsls	r3, r3, #23
 8001c22:	0011      	movs	r1, r2
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 fdb5 	bl	8002794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b009      	add	sp, #36	; 0x24
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	40021000 	.word	0x40021000

08001c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c3c:	b672      	cpsid	i
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <Error_Handler+0x8>
	...

08001c44 <rc_car_init>:
static void setBackward(void);
static void unpackedData(void);


void rc_car_init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0

	rcCar.newDataFlag = NO_NEW_DATA_AVAILABLE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <rc_car_init+0x6c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
	rcCar.pckReceived = 0;
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <rc_car_init+0x6c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	705a      	strb	r2, [r3, #1]
	rcCar.mode = MODE_NORM;	// Start in NORMAL mode
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <rc_car_init+0x6c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	709a      	strb	r2, [r3, #2]
	rcCar.angle = 0;
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <rc_car_init+0x6c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	715a      	strb	r2, [r3, #5]
	rcCar.speed = 0;
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <rc_car_init+0x6c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	70da      	strb	r2, [r3, #3]
	rcCar.direction = NONE;
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <rc_car_init+0x6c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	711a      	strb	r2, [r3, #4]

	rcCar.status = STOP;	// Start in STOP and wait for new command
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <rc_car_init+0x6c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	731a      	strb	r2, [r3, #12]

	// Enable peripherals
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <rc_car_init+0x70>)
 8001c74:	2100      	movs	r1, #0
 8001c76:	0018      	movs	r0, r3
 8001c78:	f001 fc26 	bl	80034c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <rc_car_init+0x70>)
 8001c7e:	2104      	movs	r1, #4
 8001c80:	0018      	movs	r0, r3
 8001c82:	f001 fc21 	bl	80034c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <rc_car_init+0x74>)
 8001c88:	210c      	movs	r1, #12
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f001 fc1c 	bl	80034c8 <HAL_TIM_PWM_Start>

	// Start with a stop condition
	stopCondition();
 8001c90:	f000 f8aa 	bl	8001de8 <stopCondition>

	// First reception enabled
	HAL_UART_Receive_IT(&huart3, &rcCar.pckReceived, 1);
 8001c94:	4909      	ldr	r1, [pc, #36]	; (8001cbc <rc_car_init+0x78>)
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <rc_car_init+0x7c>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f002 fa9a 	bl	80041d4 <HAL_UART_Receive_IT>

	// Timer initialization
	rcCar.WDtimer = getTimeMs();
 8001ca0:	f000 fb59 	bl	8002356 <getTimeMs>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <rc_car_init+0x6c>)
 8001ca8:	609a      	str	r2, [r3, #8]

}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000140 	.word	0x20000140
 8001cb4:	20000070 	.word	0x20000070
 8001cb8:	20000028 	.word	0x20000028
 8001cbc:	20000141 	.word	0x20000141
 8001cc0:	200000b8 	.word	0x200000b8

08001cc4 <rc_car_process>:


void rc_car_process(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0

	switch(rcCar.status)
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <rc_car_process+0xc0>)
 8001cca:	7b1b      	ldrb	r3, [r3, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <rc_car_process+0x12>
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d029      	beq.n	8001d28 <rc_car_process+0x64>

			break;

	}

}
 8001cd4:	e053      	b.n	8001d7e <rc_car_process+0xba>
			if(rcCar.newDataFlag == NEW_DATA_AVAILABLE)
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <rc_car_process+0xc0>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d110      	bne.n	8001d00 <rc_car_process+0x3c>
				if(rcCar.pckReceived == ERROR)
 8001cde:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <rc_car_process+0xc0>)
 8001ce0:	785b      	ldrb	r3, [r3, #1]
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	d108      	bne.n	8001cf8 <rc_car_process+0x34>
					rcCar.newDataFlag = NO_NEW_DATA_AVAILABLE;
 8001ce6:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <rc_car_process+0xc0>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
					stopCondition();
 8001cec:	f000 f87c 	bl	8001de8 <stopCondition>
					rcCar.status = STOP;
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <rc_car_process+0xc0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	731a      	strb	r2, [r3, #12]
			break;
 8001cf6:	e042      	b.n	8001d7e <rc_car_process+0xba>
					rcCar.status = RUN;
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <rc_car_process+0xc0>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	731a      	strb	r2, [r3, #12]
			break;
 8001cfe:	e03e      	b.n	8001d7e <rc_car_process+0xba>
				if(IS_MOTORS_RUNNING())
 8001d00:	2390      	movs	r3, #144	; 0x90
 8001d02:	05db      	lsls	r3, r3, #23
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d106      	bne.n	8001d1c <rc_car_process+0x58>
 8001d0e:	2390      	movs	r3, #144	; 0x90
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d001      	beq.n	8001d20 <rc_car_process+0x5c>
					stopCondition();
 8001d1c:	f000 f864 	bl	8001de8 <stopCondition>
				rcCar.status = STOP;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <rc_car_process+0xc0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	731a      	strb	r2, [r3, #12]
			break;
 8001d26:	e02a      	b.n	8001d7e <rc_car_process+0xba>
			if(rcCar.newDataFlag == NEW_DATA_AVAILABLE)
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <rc_car_process+0xc0>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d112      	bne.n	8001d56 <rc_car_process+0x92>
				rcCar.newDataFlag = NO_NEW_DATA_AVAILABLE;
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <rc_car_process+0xc0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
				if(rcCar.pckReceived == ERROR)
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <rc_car_process+0xc0>)
 8001d38:	785b      	ldrb	r3, [r3, #1]
 8001d3a:	2bff      	cmp	r3, #255	; 0xff
 8001d3c:	d105      	bne.n	8001d4a <rc_car_process+0x86>
					stopCondition();
 8001d3e:	f000 f853 	bl	8001de8 <stopCondition>
					rcCar.status = STOP;
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <rc_car_process+0xc0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	731a      	strb	r2, [r3, #12]
			break;
 8001d48:	e018      	b.n	8001d7c <rc_car_process+0xb8>
					motors_handler();
 8001d4a:	f000 f81d 	bl	8001d88 <motors_handler>
					rcCar.status = RUN;
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <rc_car_process+0xc0>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	731a      	strb	r2, [r3, #12]
			break;
 8001d54:	e012      	b.n	8001d7c <rc_car_process+0xb8>
				if(getDelayMs(rcCar.WDtimer) > MAX_DELAY)
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <rc_car_process+0xc0>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f000 fb07 	bl	800236e <getDelayMs>
 8001d60:	0002      	movs	r2, r0
 8001d62:	23fa      	movs	r3, #250	; 0xfa
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d905      	bls.n	8001d76 <rc_car_process+0xb2>
					stopCondition();
 8001d6a:	f000 f83d 	bl	8001de8 <stopCondition>
					rcCar.status = STOP;
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <rc_car_process+0xc0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	731a      	strb	r2, [r3, #12]
			break;
 8001d74:	e002      	b.n	8001d7c <rc_car_process+0xb8>
					rcCar.status = RUN;
 8001d76:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <rc_car_process+0xc0>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	731a      	strb	r2, [r3, #12]
			break;
 8001d7c:	46c0      	nop			; (mov r8, r8)
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000140 	.word	0x20000140

08001d88 <motors_handler>:

/********************** PRIVATE FUNCTIONS ********************************/

static void motors_handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0

	uint8_t directionOld = rcCar.direction;
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <motors_handler+0x5c>)
 8001d92:	7912      	ldrb	r2, [r2, #4]
 8001d94:	701a      	strb	r2, [r3, #0]
	uint8_t speedOld = rcCar.speed;
 8001d96:	1dbb      	adds	r3, r7, #6
 8001d98:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <motors_handler+0x5c>)
 8001d9a:	78d2      	ldrb	r2, [r2, #3]
 8001d9c:	701a      	strb	r2, [r3, #0]
	uint8_t angleOld = rcCar.angle;
 8001d9e:	1d7b      	adds	r3, r7, #5
 8001da0:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <motors_handler+0x5c>)
 8001da2:	7952      	ldrb	r2, [r2, #5]
 8001da4:	701a      	strb	r2, [r3, #0]


	unpackedData();
 8001da6:	f000 f8eb 	bl	8001f80 <unpackedData>

	if(rcCar.angle != angleOld)
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <motors_handler+0x5c>)
 8001dac:	795b      	ldrb	r3, [r3, #5]
 8001dae:	1d7a      	adds	r2, r7, #5
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d001      	beq.n	8001dba <motors_handler+0x32>
		// Evaluate new angle
		angle_control();
 8001db6:	f000 f849 	bl	8001e4c <angle_control>

	if(rcCar.direction != directionOld)
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <motors_handler+0x5c>)
 8001dbc:	791b      	ldrb	r3, [r3, #4]
 8001dbe:	1dfa      	adds	r2, r7, #7
 8001dc0:	7812      	ldrb	r2, [r2, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d001      	beq.n	8001dca <motors_handler+0x42>
		// Evaluate new direction
		direction_control();
 8001dc6:	f000 f829 	bl	8001e1c <direction_control>

	if(rcCar.speed != speedOld)
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <motors_handler+0x5c>)
 8001dcc:	78db      	ldrb	r3, [r3, #3]
 8001dce:	1dba      	adds	r2, r7, #6
 8001dd0:	7812      	ldrb	r2, [r2, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <motors_handler+0x52>
		// Evaluate new speed
		speed_control();
 8001dd6:	f000 f887 	bl	8001ee8 <speed_control>

}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	20000140 	.word	0x20000140

08001de8 <stopCondition>:


static void stopCondition(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

	// Default configuration

	rcCar.mode = MODE_NORM;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <stopCondition+0x30>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	709a      	strb	r2, [r3, #2]
	rcCar.direction = NONE;				// This will stop the motors
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <stopCondition+0x30>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	711a      	strb	r2, [r3, #4]
	rcCar.angle = ANGLE_STRAIGHT;
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <stopCondition+0x30>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	715a      	strb	r2, [r3, #5]
	rcCar.speed = SPEED_SLOWEST;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <stopCondition+0x30>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	70da      	strb	r2, [r3, #3]

	//motors_handler();

	angle_control();
 8001e04:	f000 f822 	bl	8001e4c <angle_control>
	direction_control();
 8001e08:	f000 f808 	bl	8001e1c <direction_control>
	speed_control();
 8001e0c:	f000 f86c 	bl	8001ee8 <speed_control>

	return;
 8001e10:	46c0      	nop			; (mov r8, r8)

}
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	20000140 	.word	0x20000140

08001e1c <direction_control>:


static void direction_control(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0

	if(rcCar.direction == FORWARD)
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <direction_control+0x2c>)
 8001e22:	791b      	ldrb	r3, [r3, #4]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d102      	bne.n	8001e2e <direction_control+0x12>
		setForward();
 8001e28:	f000 f8ea 	bl	8002000 <setForward>
	else if(rcCar.direction == BACKWARD)
		setBackward();
	else
		setStop();

}
 8001e2c:	e008      	b.n	8001e40 <direction_control+0x24>
	else if(rcCar.direction == BACKWARD)
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <direction_control+0x2c>)
 8001e30:	791b      	ldrb	r3, [r3, #4]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <direction_control+0x20>
		setBackward();
 8001e36:	f000 f8f8 	bl	800202a <setBackward>
}
 8001e3a:	e001      	b.n	8001e40 <direction_control+0x24>
		setStop();
 8001e3c:	f000 f90a 	bl	8002054 <setStop>
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	20000140 	.word	0x20000140

08001e4c <angle_control>:


static void angle_control(void)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0

	  float sm1 = SM1_DEFAULT;
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <angle_control+0x84>)
 8001e54:	607b      	str	r3, [r7, #4]
	  float sm2 = SM2_DEFAULT;
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <angle_control+0x88>)
 8001e58:	603b      	str	r3, [r7, #0]

	  if(rcCar.angle == ANGLE_TURN_RIGHT )
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <angle_control+0x8c>)
 8001e5c:	795b      	ldrb	r3, [r3, #5]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d104      	bne.n	8001e6c <angle_control+0x20>
	  {

		  // Turn right
		  sm1 = SM1_TURN;
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <angle_control+0x90>)
 8001e64:	607b      	str	r3, [r7, #4]
		  sm2 = SM2_DEFAULT;
 8001e66:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <angle_control+0x88>)
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	e007      	b.n	8001e7c <angle_control+0x30>

	  }
	  else if(rcCar.angle == ANGLE_TURN_LEFT)
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <angle_control+0x8c>)
 8001e6e:	795b      	ldrb	r3, [r3, #5]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d103      	bne.n	8001e7c <angle_control+0x30>
	  {

		  // Turn left
		  sm1 = SM1_DEFAULT;
 8001e74:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <angle_control+0x84>)
 8001e76:	607b      	str	r3, [r7, #4]
		  sm2 = SM2_TURN;
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <angle_control+0x94>)
 8001e7a:	603b      	str	r3, [r7, #0]

		  // Straight

	  }

	  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ( sm1 * htim15.Init.Period ));
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <angle_control+0x98>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7fe fcf1 	bl	8000868 <__aeabi_ui2f>
 8001e86:	1c03      	adds	r3, r0, #0
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	1c18      	adds	r0, r3, #0
 8001e8c:	f7fe f9de 	bl	800024c <__aeabi_fmul>
 8001e90:	1c03      	adds	r3, r0, #0
 8001e92:	1c1a      	adds	r2, r3, #0
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <angle_control+0x98>)
 8001e96:	681c      	ldr	r4, [r3, #0]
 8001e98:	1c10      	adds	r0, r2, #0
 8001e9a:	f7fe f9bf 	bl	800021c <__aeabi_f2uiz>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	6363      	str	r3, [r4, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, ( sm2 * htim15.Init.Period ));
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <angle_control+0x98>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7fe fcde 	bl	8000868 <__aeabi_ui2f>
 8001eac:	1c03      	adds	r3, r0, #0
 8001eae:	6839      	ldr	r1, [r7, #0]
 8001eb0:	1c18      	adds	r0, r3, #0
 8001eb2:	f7fe f9cb 	bl	800024c <__aeabi_fmul>
 8001eb6:	1c03      	adds	r3, r0, #0
 8001eb8:	1c1a      	adds	r2, r3, #0
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <angle_control+0x98>)
 8001ebc:	681c      	ldr	r4, [r3, #0]
 8001ebe:	1c10      	adds	r0, r2, #0
 8001ec0:	f7fe f9ac 	bl	800021c <__aeabi_f2uiz>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	63a3      	str	r3, [r4, #56]	; 0x38

}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b003      	add	sp, #12
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	3ca3d70a 	.word	0x3ca3d70a
 8001ed4:	3dd3a06d 	.word	0x3dd3a06d
 8001ed8:	20000140 	.word	0x20000140
 8001edc:	3db17e4b 	.word	0x3db17e4b
 8001ee0:	3d43b2a2 	.word	0x3d43b2a2
 8001ee4:	20000070 	.word	0x20000070

08001ee8 <speed_control>:


static void speed_control(void)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0

	float duty_perc = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]

	duty_perc = SPEED_TO_DUTY(rcCar.speed);
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <speed_control+0x84>)
 8001ef4:	78db      	ldrb	r3, [r3, #3]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f7fe fcb6 	bl	8000868 <__aeabi_ui2f>
 8001efc:	1c03      	adds	r3, r0, #0
 8001efe:	1c18      	adds	r0, r3, #0
 8001f00:	f7ff faaa 	bl	8001458 <__aeabi_f2d>
 8001f04:	2200      	movs	r2, #0
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <speed_control+0x88>)
 8001f08:	f7fe fcf6 	bl	80008f8 <__aeabi_ddiv>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	000b      	movs	r3, r1
 8001f10:	0010      	movs	r0, r2
 8001f12:	0019      	movs	r1, r3
 8001f14:	2200      	movs	r2, #0
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <speed_control+0x8c>)
 8001f18:	f7fe ffdc 	bl	8000ed4 <__aeabi_dmul>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	000b      	movs	r3, r1
 8001f20:	0010      	movs	r0, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	2200      	movs	r2, #0
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <speed_control+0x90>)
 8001f28:	f7fe fce6 	bl	80008f8 <__aeabi_ddiv>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	000b      	movs	r3, r1
 8001f30:	0010      	movs	r0, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	f7ff fad8 	bl	80014e8 <__aeabi_d2f>
 8001f38:	1c03      	adds	r3, r0, #0
 8001f3a:	607b      	str	r3, [r7, #4]


	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ( duty_perc * htim3.Init.Period ));
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <speed_control+0x94>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7fe fc91 	bl	8000868 <__aeabi_ui2f>
 8001f46:	1c03      	adds	r3, r0, #0
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	1c18      	adds	r0, r3, #0
 8001f4c:	f7fe f97e 	bl	800024c <__aeabi_fmul>
 8001f50:	1c03      	adds	r3, r0, #0
 8001f52:	1c1a      	adds	r2, r3, #0
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <speed_control+0x94>)
 8001f56:	681c      	ldr	r4, [r3, #0]
 8001f58:	1c10      	adds	r0, r2, #0
 8001f5a:	f7fe f95f 	bl	800021c <__aeabi_f2uiz>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	6423      	str	r3, [r4, #64]	; 0x40

}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b003      	add	sp, #12
 8001f68:	bd90      	pop	{r4, r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	20000140 	.word	0x20000140
 8001f70:	40280000 	.word	0x40280000
 8001f74:	40518000 	.word	0x40518000
 8001f78:	40590000 	.word	0x40590000
 8001f7c:	20000028 	.word	0x20000028

08001f80 <unpackedData>:


static void unpackedData(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0

	rcCar.mode = EXTRACT_MODE_FROM_PCK(rcCar.pckReceived);
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <unpackedData+0x7c>)
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	09db      	lsrs	r3, r3, #7
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <unpackedData+0x7c>)
 8001f8e:	709a      	strb	r2, [r3, #2]
	rcCar.angle = EXTRACT_ANGLE_FROM_PCK(rcCar.pckReceived);
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <unpackedData+0x7c>)
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	115b      	asrs	r3, r3, #5
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2203      	movs	r2, #3
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <unpackedData+0x7c>)
 8001fa0:	715a      	strb	r2, [r3, #5]
	rcCar.speed = EXTRACT_SPEED_FROM_PCK(rcCar.pckReceived);
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <unpackedData+0x7c>)
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	221f      	movs	r2, #31
 8001fa8:	4013      	ands	r3, r2
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <unpackedData+0x7c>)
 8001fae:	70da      	strb	r2, [r3, #3]

	if(rcCar.speed >= FORWARD_BORDER)
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <unpackedData+0x7c>)
 8001fb2:	78db      	ldrb	r3, [r3, #3]
 8001fb4:	2b12      	cmp	r3, #18
 8001fb6:	d909      	bls.n	8001fcc <unpackedData+0x4c>
	{

		rcCar.direction = FORWARD;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <unpackedData+0x7c>)
 8001fba:	2202      	movs	r2, #2
 8001fbc:	711a      	strb	r2, [r3, #4]

		// Normalize speed for 13 values
		rcCar.speed -= FORWARD_BORDER;		// 0-12
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <unpackedData+0x7c>)
 8001fc0:	78db      	ldrb	r3, [r3, #3]
 8001fc2:	3b13      	subs	r3, #19
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <unpackedData+0x7c>)
 8001fc8:	70da      	strb	r2, [r3, #3]

		rcCar.speed = SPEED_SLOWEST;

	}

}
 8001fca:	e014      	b.n	8001ff6 <unpackedData+0x76>
	else if(rcCar.speed <= BACKWARD_BORDER)
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <unpackedData+0x7c>)
 8001fce:	78db      	ldrb	r3, [r3, #3]
 8001fd0:	2b0c      	cmp	r3, #12
 8001fd2:	d80a      	bhi.n	8001fea <unpackedData+0x6a>
		rcCar.direction = BACKWARD;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <unpackedData+0x7c>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	711a      	strb	r2, [r3, #4]
		rcCar.speed = BACKWARD_BORDER - rcCar.speed;		// 0-12
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <unpackedData+0x7c>)
 8001fdc:	78db      	ldrb	r3, [r3, #3]
 8001fde:	220c      	movs	r2, #12
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <unpackedData+0x7c>)
 8001fe6:	70da      	strb	r2, [r3, #3]
}
 8001fe8:	e005      	b.n	8001ff6 <unpackedData+0x76>
		rcCar.direction = NONE;
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <unpackedData+0x7c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	711a      	strb	r2, [r3, #4]
		rcCar.speed = SPEED_SLOWEST;
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <unpackedData+0x7c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	70da      	strb	r2, [r3, #3]
}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000140 	.word	0x20000140

08002000 <setForward>:


static void setForward(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(M_BACKWARD_GPIO_Port, M_BACKWARD_Pin, 1);
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	0099      	lsls	r1, r3, #2
 8002008:	2390      	movs	r3, #144	; 0x90
 800200a:	05db      	lsls	r3, r3, #23
 800200c:	2201      	movs	r2, #1
 800200e:	0018      	movs	r0, r3
 8002010:	f000 fd30 	bl	8002a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_FORWARD_GPIO_Port, M_FORWARD_Pin, 0);
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	00d9      	lsls	r1, r3, #3
 8002018:	2390      	movs	r3, #144	; 0x90
 800201a:	05db      	lsls	r3, r3, #23
 800201c:	2200      	movs	r2, #0
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fd28 	bl	8002a74 <HAL_GPIO_WritePin>

}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <setBackward>:


static void setBackward(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(M_BACKWARD_GPIO_Port, M_BACKWARD_Pin, 0);
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	0099      	lsls	r1, r3, #2
 8002032:	2390      	movs	r3, #144	; 0x90
 8002034:	05db      	lsls	r3, r3, #23
 8002036:	2200      	movs	r2, #0
 8002038:	0018      	movs	r0, r3
 800203a:	f000 fd1b 	bl	8002a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_FORWARD_GPIO_Port, M_FORWARD_Pin, 1);
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	00d9      	lsls	r1, r3, #3
 8002042:	2390      	movs	r3, #144	; 0x90
 8002044:	05db      	lsls	r3, r3, #23
 8002046:	2201      	movs	r2, #1
 8002048:	0018      	movs	r0, r3
 800204a:	f000 fd13 	bl	8002a74 <HAL_GPIO_WritePin>

}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <setStop>:


static void setStop(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(M_BACKWARD_GPIO_Port, M_BACKWARD_Pin, 0);
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	0099      	lsls	r1, r3, #2
 800205c:	2390      	movs	r3, #144	; 0x90
 800205e:	05db      	lsls	r3, r3, #23
 8002060:	2200      	movs	r2, #0
 8002062:	0018      	movs	r0, r3
 8002064:	f000 fd06 	bl	8002a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_FORWARD_GPIO_Port, M_FORWARD_Pin, 0);
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	00d9      	lsls	r1, r3, #3
 800206c:	2390      	movs	r3, #144	; 0x90
 800206e:	05db      	lsls	r3, r3, #23
 8002070:	2200      	movs	r2, #0
 8002072:	0018      	movs	r0, r3
 8002074:	f000 fcfe 	bl	8002a74 <HAL_GPIO_WritePin>

}
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_UART_RxCpltCallback>:

/********************* INTERRUPT CALLBACKS ******************************/


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

	// Timer reset
	rcCar.WDtimer = getTimeMs();
 8002088:	f000 f965 	bl	8002356 <getTimeMs>
 800208c:	0002      	movs	r2, r0
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_UART_RxCpltCallback+0x44>)
 8002090:	609a      	str	r2, [r3, #8]

	// New data available
	rcCar.newDataFlag = NEW_DATA_AVAILABLE;
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_UART_RxCpltCallback+0x44>)
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]

	if(rcCar.pckReceived != ERROR)
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_UART_RxCpltCallback+0x44>)
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	2bff      	cmp	r3, #255	; 0xff
 800209e:	d003      	beq.n	80020a8 <HAL_UART_RxCpltCallback+0x28>
		// If no error occurs go into RUN mode
		rcCar.status = RUN;
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_UART_RxCpltCallback+0x44>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	731a      	strb	r2, [r3, #12]
 80020a6:	e002      	b.n	80020ae <HAL_UART_RxCpltCallback+0x2e>
	else
		// If error occurs go into STOP mode
		rcCar.status = STOP;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_UART_RxCpltCallback+0x44>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	731a      	strb	r2, [r3, #12]

	// Start a new reception
	HAL_UART_Receive_IT(&huart3, &rcCar.pckReceived, 1);
 80020ae:	4906      	ldr	r1, [pc, #24]	; (80020c8 <HAL_UART_RxCpltCallback+0x48>)
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_UART_RxCpltCallback+0x4c>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	0018      	movs	r0, r3
 80020b6:	f002 f88d 	bl	80041d4 <HAL_UART_Receive_IT>

}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	20000140 	.word	0x20000140
 80020c8:	20000141 	.word	0x20000141
 80020cc:	200000b8 	.word	0x200000b8

080020d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_MspInit+0x44>)
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_MspInit+0x44>)
 80020dc:	2101      	movs	r1, #1
 80020de:	430a      	orrs	r2, r1
 80020e0:	619a      	str	r2, [r3, #24]
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <HAL_MspInit+0x44>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2201      	movs	r2, #1
 80020e8:	4013      	ands	r3, r2
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_MspInit+0x44>)
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_MspInit+0x44>)
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	0549      	lsls	r1, r1, #21
 80020f8:	430a      	orrs	r2, r1
 80020fa:	61da      	str	r2, [r3, #28]
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_MspInit+0x44>)
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	055b      	lsls	r3, r3, #21
 8002104:	4013      	ands	r3, r2
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40021000 	.word	0x40021000

08002118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a13      	ldr	r2, [pc, #76]	; (8002174 <HAL_TIM_Base_MspInit+0x5c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10c      	bne.n	8002144 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_TIM_Base_MspInit+0x60>)
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_TIM_Base_MspInit+0x60>)
 8002130:	2102      	movs	r1, #2
 8002132:	430a      	orrs	r2, r1
 8002134:	61da      	str	r2, [r3, #28]
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_TIM_Base_MspInit+0x60>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2202      	movs	r2, #2
 800213c:	4013      	ands	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002142:	e012      	b.n	800216a <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM15)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_TIM_Base_MspInit+0x64>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d10d      	bne.n	800216a <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_TIM_Base_MspInit+0x60>)
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_TIM_Base_MspInit+0x60>)
 8002154:	2180      	movs	r1, #128	; 0x80
 8002156:	0249      	lsls	r1, r1, #9
 8002158:	430a      	orrs	r2, r1
 800215a:	619a      	str	r2, [r3, #24]
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_TIM_Base_MspInit+0x60>)
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	025b      	lsls	r3, r3, #9
 8002164:	4013      	ands	r3, r2
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	40000400 	.word	0x40000400
 8002178:	40021000 	.word	0x40021000
 800217c:	40014000 	.word	0x40014000

08002180 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b08b      	sub	sp, #44	; 0x2c
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	2414      	movs	r4, #20
 800218a:	193b      	adds	r3, r7, r4
 800218c:	0018      	movs	r0, r3
 800218e:	2314      	movs	r3, #20
 8002190:	001a      	movs	r2, r3
 8002192:	2100      	movs	r1, #0
 8002194:	f003 f9b8 	bl	8005508 <memset>
  if(htim->Instance==TIM3)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <HAL_TIM_MspPostInit+0xc8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d124      	bne.n	80021ec <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_TIM_MspPostInit+0xcc>)
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_TIM_MspPostInit+0xcc>)
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	02c9      	lsls	r1, r1, #11
 80021ac:	430a      	orrs	r2, r1
 80021ae:	615a      	str	r2, [r3, #20]
 80021b0:	4b26      	ldr	r3, [pc, #152]	; (800224c <HAL_TIM_MspPostInit+0xcc>)
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	02db      	lsls	r3, r3, #11
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = M_SPEED_Pin;
 80021be:	0021      	movs	r1, r4
 80021c0:	187b      	adds	r3, r7, r1
 80021c2:	2202      	movs	r2, #2
 80021c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	2202      	movs	r2, #2
 80021ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	2202      	movs	r2, #2
 80021d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	2200      	movs	r2, #0
 80021d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80021d8:	187b      	adds	r3, r7, r1
 80021da:	2201      	movs	r2, #1
 80021dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(M_SPEED_GPIO_Port, &GPIO_InitStruct);
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <HAL_TIM_MspPostInit+0xd0>)
 80021e2:	0019      	movs	r1, r3
 80021e4:	0010      	movs	r0, r2
 80021e6:	f000 fad5 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80021ea:	e029      	b.n	8002240 <HAL_TIM_MspPostInit+0xc0>
  else if(htim->Instance==TIM15)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_TIM_MspPostInit+0xd4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d124      	bne.n	8002240 <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_TIM_MspPostInit+0xcc>)
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_TIM_MspPostInit+0xcc>)
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	02c9      	lsls	r1, r1, #11
 8002200:	430a      	orrs	r2, r1
 8002202:	615a      	str	r2, [r3, #20]
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_TIM_MspPostInit+0xcc>)
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	02db      	lsls	r3, r3, #11
 800220c:	4013      	ands	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SM1_PWM_Pin|SM2_PWM_Pin;
 8002212:	2114      	movs	r1, #20
 8002214:	187b      	adds	r3, r7, r1
 8002216:	22c0      	movs	r2, #192	; 0xc0
 8002218:	0212      	lsls	r2, r2, #8
 800221a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	187b      	adds	r3, r7, r1
 800221e:	2202      	movs	r2, #2
 8002220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	187b      	adds	r3, r7, r1
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	187b      	adds	r3, r7, r1
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800222e:	187b      	adds	r3, r7, r1
 8002230:	2201      	movs	r2, #1
 8002232:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002234:	187b      	adds	r3, r7, r1
 8002236:	4a06      	ldr	r2, [pc, #24]	; (8002250 <HAL_TIM_MspPostInit+0xd0>)
 8002238:	0019      	movs	r1, r3
 800223a:	0010      	movs	r0, r2
 800223c:	f000 faaa 	bl	8002794 <HAL_GPIO_Init>
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b00b      	add	sp, #44	; 0x2c
 8002246:	bd90      	pop	{r4, r7, pc}
 8002248:	40000400 	.word	0x40000400
 800224c:	40021000 	.word	0x40021000
 8002250:	48000400 	.word	0x48000400
 8002254:	40014000 	.word	0x40014000

08002258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b08b      	sub	sp, #44	; 0x2c
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	2414      	movs	r4, #20
 8002262:	193b      	adds	r3, r7, r4
 8002264:	0018      	movs	r0, r3
 8002266:	2314      	movs	r3, #20
 8002268:	001a      	movs	r2, r3
 800226a:	2100      	movs	r1, #0
 800226c:	f003 f94c 	bl	8005508 <memset>
  if(huart->Instance==USART3)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <HAL_UART_MspInit+0xa0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d13a      	bne.n	80022f0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_UART_MspInit+0xa4>)
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <HAL_UART_MspInit+0xa4>)
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	02c9      	lsls	r1, r1, #11
 8002284:	430a      	orrs	r2, r1
 8002286:	61da      	str	r2, [r3, #28]
 8002288:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_UART_MspInit+0xa4>)
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	02db      	lsls	r3, r3, #11
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_UART_MspInit+0xa4>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_UART_MspInit+0xa4>)
 800229c:	2180      	movs	r1, #128	; 0x80
 800229e:	02c9      	lsls	r1, r1, #11
 80022a0:	430a      	orrs	r2, r1
 80022a2:	615a      	str	r2, [r3, #20]
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_UART_MspInit+0xa4>)
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	02db      	lsls	r3, r3, #11
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = LORA_TX_Pin|LORA_RX_Pin;
 80022b2:	193b      	adds	r3, r7, r4
 80022b4:	22c0      	movs	r2, #192	; 0xc0
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	0021      	movs	r1, r4
 80022bc:	187b      	adds	r3, r7, r1
 80022be:	2202      	movs	r2, #2
 80022c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	187b      	adds	r3, r7, r1
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c8:	187b      	adds	r3, r7, r1
 80022ca:	2203      	movs	r2, #3
 80022cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80022ce:	187b      	adds	r3, r7, r1
 80022d0:	2204      	movs	r2, #4
 80022d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	187b      	adds	r3, r7, r1
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_UART_MspInit+0xa8>)
 80022d8:	0019      	movs	r1, r3
 80022da:	0010      	movs	r0, r2
 80022dc:	f000 fa5a 	bl	8002794 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_6_IRQn, 0, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	201d      	movs	r0, #29
 80022e6:	f000 f9a5 	bl	8002634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_6_IRQn);
 80022ea:	201d      	movs	r0, #29
 80022ec:	f000 f9b7 	bl	800265e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022f0:	46c0      	nop			; (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b00b      	add	sp, #44	; 0x2c
 80022f6:	bd90      	pop	{r4, r7, pc}
 80022f8:	40004800 	.word	0x40004800
 80022fc:	40021000 	.word	0x40021000
 8002300:	48000400 	.word	0x48000400

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002308:	e7fe      	b.n	8002308 <NMI_Handler+0x4>

0800230a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <HardFault_Handler+0x4>

08002310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002328:	f000 f8b2 	bl	8002490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <USART3_6_IRQHandler>:

/**
  * @brief This function handles USART3 to USART6 global interrupts.
  */
void USART3_6_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_6_IRQn 0 */

  /* USER CODE END USART3_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <USART3_6_IRQHandler+0x14>)
 800233a:	0018      	movs	r0, r3
 800233c:	f001 ffa2 	bl	8004284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_6_IRQn 1 */

  /* USER CODE END USART3_6_IRQn 1 */
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	200000b8 	.word	0x200000b8

0800234c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <getTimeMs>:
/*
 *	@ Function; getDelayms
 *  @ Return; uint32_t -> current time in ms
 */
uint32_t getTimeMs(void)
{
 8002356:	b5b0      	push	{r4, r5, r7, lr}
 8002358:	af00      	add	r7, sp, #0

	// Tick frequency is by default 1kHz (1ms period)
	return ( HAL_GetTick() * HAL_GetTickFreq() );
 800235a:	f000 f8ab 	bl	80024b4 <HAL_GetTick>
 800235e:	0004      	movs	r4, r0
 8002360:	f000 f8b2 	bl	80024c8 <HAL_GetTickFreq>
 8002364:	0003      	movs	r3, r0
 8002366:	4363      	muls	r3, r4

}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bdb0      	pop	{r4, r5, r7, pc}

0800236e <getDelayMs>:
 *	@ Function; getDelayms
 * 	@ Par1; uint32_t timeStamp -> captured time
 *  @ Return; uint32_t tDiff -> time elapsed since timeStamp in ms
 */
uint32_t getDelayMs(uint32_t timeStamp)
{
 800236e:	b590      	push	{r4, r7, lr}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]

	uint32_t tDiff;
	uint32_t currentTime;

	currentTime = ( getTimeMs() * HAL_GetTickFreq() );
 8002376:	f7ff ffee 	bl	8002356 <getTimeMs>
 800237a:	0004      	movs	r4, r0
 800237c:	f000 f8a4 	bl	80024c8 <HAL_GetTickFreq>
 8002380:	0003      	movs	r3, r0
 8002382:	4363      	muls	r3, r4
 8002384:	60bb      	str	r3, [r7, #8]

	if(currentTime >= timeStamp)
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	d304      	bcc.n	8002398 <getDelayMs+0x2a>
		tDiff = currentTime - timeStamp;
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e003      	b.n	80023a0 <getDelayMs+0x32>
	else
		tDiff = timeStamp - currentTime;
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	60fb      	str	r3, [r7, #12]

	return tDiff;
 80023a0:	68fb      	ldr	r3, [r7, #12]

}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b005      	add	sp, #20
 80023a8:	bd90      	pop	{r4, r7, pc}
	...

080023ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023ac:	480d      	ldr	r0, [pc, #52]	; (80023e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023ae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023b0:	f7ff ffcc 	bl	800234c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80023b6:	490d      	ldr	r1, [pc, #52]	; (80023ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <LoopForever+0xe>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023cc:	4c0a      	ldr	r4, [pc, #40]	; (80023f8 <LoopForever+0x16>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023da:	f003 f89d 	bl	8005518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023de:	f7ff fa11 	bl	8001804 <main>

080023e2 <LoopForever>:

LoopForever:
    b LoopForever
 80023e2:	e7fe      	b.n	80023e2 <LoopForever>
  ldr   r0, =_estack
 80023e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80023f0:	080055f8 	.word	0x080055f8
  ldr r2, =_sbss
 80023f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80023f8:	20000154 	.word	0x20000154

080023fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023fc:	e7fe      	b.n	80023fc <ADC1_IRQHandler>
	...

08002400 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_Init+0x24>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_Init+0x24>)
 800240a:	2110      	movs	r1, #16
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002410:	2003      	movs	r0, #3
 8002412:	f000 f809 	bl	8002428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002416:	f7ff fe5b 	bl	80020d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	40022000 	.word	0x40022000

08002428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_InitTick+0x5c>)
 8002432:	681c      	ldr	r4, [r3, #0]
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_InitTick+0x60>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	0019      	movs	r1, r3
 800243a:	23fa      	movs	r3, #250	; 0xfa
 800243c:	0098      	lsls	r0, r3, #2
 800243e:	f7fd fe61 	bl	8000104 <__udivsi3>
 8002442:	0003      	movs	r3, r0
 8002444:	0019      	movs	r1, r3
 8002446:	0020      	movs	r0, r4
 8002448:	f7fd fe5c 	bl	8000104 <__udivsi3>
 800244c:	0003      	movs	r3, r0
 800244e:	0018      	movs	r0, r3
 8002450:	f000 f915 	bl	800267e <HAL_SYSTICK_Config>
 8002454:	1e03      	subs	r3, r0, #0
 8002456:	d001      	beq.n	800245c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e00f      	b.n	800247c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d80b      	bhi.n	800247a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	2301      	movs	r3, #1
 8002466:	425b      	negs	r3, r3
 8002468:	2200      	movs	r2, #0
 800246a:	0018      	movs	r0, r3
 800246c:	f000 f8e2 	bl	8002634 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_InitTick+0x64>)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b003      	add	sp, #12
 8002482:	bd90      	pop	{r4, r7, pc}
 8002484:	20000000 	.word	0x20000000
 8002488:	20000008 	.word	0x20000008
 800248c:	20000004 	.word	0x20000004

08002490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_IncTick+0x1c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	001a      	movs	r2, r3
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_IncTick+0x20>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	18d2      	adds	r2, r2, r3
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_IncTick+0x20>)
 80024a2:	601a      	str	r2, [r3, #0]
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	20000008 	.word	0x20000008
 80024b0:	20000150 	.word	0x20000150

080024b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  return uwTick;
 80024b8:	4b02      	ldr	r3, [pc, #8]	; (80024c4 <HAL_GetTick+0x10>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	20000150 	.word	0x20000150

080024c8 <HAL_GetTickFreq>:
  * @brief return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80024cc:	4b02      	ldr	r3, [pc, #8]	; (80024d8 <HAL_GetTickFreq+0x10>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	20000008 	.word	0x20000008

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	0002      	movs	r2, r0
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024e8:	1dfb      	adds	r3, r7, #7
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b7f      	cmp	r3, #127	; 0x7f
 80024ee:	d809      	bhi.n	8002504 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	001a      	movs	r2, r3
 80024f6:	231f      	movs	r3, #31
 80024f8:	401a      	ands	r2, r3
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <__NVIC_EnableIRQ+0x30>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	4091      	lsls	r1, r2
 8002500:	000a      	movs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]
  }
}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b002      	add	sp, #8
 800250a:	bd80      	pop	{r7, pc}
 800250c:	e000e100 	.word	0xe000e100

08002510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	0002      	movs	r2, r0
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	1dfb      	adds	r3, r7, #7
 800251c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b7f      	cmp	r3, #127	; 0x7f
 8002524:	d828      	bhi.n	8002578 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002526:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <__NVIC_SetPriority+0xd4>)
 8002528:	1dfb      	adds	r3, r7, #7
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b25b      	sxtb	r3, r3
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	33c0      	adds	r3, #192	; 0xc0
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	589b      	ldr	r3, [r3, r2]
 8002536:	1dfa      	adds	r2, r7, #7
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	0011      	movs	r1, r2
 800253c:	2203      	movs	r2, #3
 800253e:	400a      	ands	r2, r1
 8002540:	00d2      	lsls	r2, r2, #3
 8002542:	21ff      	movs	r1, #255	; 0xff
 8002544:	4091      	lsls	r1, r2
 8002546:	000a      	movs	r2, r1
 8002548:	43d2      	mvns	r2, r2
 800254a:	401a      	ands	r2, r3
 800254c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	019b      	lsls	r3, r3, #6
 8002552:	22ff      	movs	r2, #255	; 0xff
 8002554:	401a      	ands	r2, r3
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	0018      	movs	r0, r3
 800255c:	2303      	movs	r3, #3
 800255e:	4003      	ands	r3, r0
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002564:	481f      	ldr	r0, [pc, #124]	; (80025e4 <__NVIC_SetPriority+0xd4>)
 8002566:	1dfb      	adds	r3, r7, #7
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b25b      	sxtb	r3, r3
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	430a      	orrs	r2, r1
 8002570:	33c0      	adds	r3, #192	; 0xc0
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002576:	e031      	b.n	80025dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002578:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <__NVIC_SetPriority+0xd8>)
 800257a:	1dfb      	adds	r3, r7, #7
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	0019      	movs	r1, r3
 8002580:	230f      	movs	r3, #15
 8002582:	400b      	ands	r3, r1
 8002584:	3b08      	subs	r3, #8
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3306      	adds	r3, #6
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	18d3      	adds	r3, r2, r3
 800258e:	3304      	adds	r3, #4
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1dfa      	adds	r2, r7, #7
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	0011      	movs	r1, r2
 8002598:	2203      	movs	r2, #3
 800259a:	400a      	ands	r2, r1
 800259c:	00d2      	lsls	r2, r2, #3
 800259e:	21ff      	movs	r1, #255	; 0xff
 80025a0:	4091      	lsls	r1, r2
 80025a2:	000a      	movs	r2, r1
 80025a4:	43d2      	mvns	r2, r2
 80025a6:	401a      	ands	r2, r3
 80025a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	019b      	lsls	r3, r3, #6
 80025ae:	22ff      	movs	r2, #255	; 0xff
 80025b0:	401a      	ands	r2, r3
 80025b2:	1dfb      	adds	r3, r7, #7
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	0018      	movs	r0, r3
 80025b8:	2303      	movs	r3, #3
 80025ba:	4003      	ands	r3, r0
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025c0:	4809      	ldr	r0, [pc, #36]	; (80025e8 <__NVIC_SetPriority+0xd8>)
 80025c2:	1dfb      	adds	r3, r7, #7
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	001c      	movs	r4, r3
 80025c8:	230f      	movs	r3, #15
 80025ca:	4023      	ands	r3, r4
 80025cc:	3b08      	subs	r3, #8
 80025ce:	089b      	lsrs	r3, r3, #2
 80025d0:	430a      	orrs	r2, r1
 80025d2:	3306      	adds	r3, #6
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	18c3      	adds	r3, r0, r3
 80025d8:	3304      	adds	r3, #4
 80025da:	601a      	str	r2, [r3, #0]
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b003      	add	sp, #12
 80025e2:	bd90      	pop	{r4, r7, pc}
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	1e5a      	subs	r2, r3, #1
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	045b      	lsls	r3, r3, #17
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d301      	bcc.n	8002604 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002600:	2301      	movs	r3, #1
 8002602:	e010      	b.n	8002626 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <SysTick_Config+0x44>)
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	3a01      	subs	r2, #1
 800260a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260c:	2301      	movs	r3, #1
 800260e:	425b      	negs	r3, r3
 8002610:	2103      	movs	r1, #3
 8002612:	0018      	movs	r0, r3
 8002614:	f7ff ff7c 	bl	8002510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <SysTick_Config+0x44>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <SysTick_Config+0x44>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b002      	add	sp, #8
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	210f      	movs	r1, #15
 8002640:	187b      	adds	r3, r7, r1
 8002642:	1c02      	adds	r2, r0, #0
 8002644:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	187b      	adds	r3, r7, r1
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b25b      	sxtb	r3, r3
 800264e:	0011      	movs	r1, r2
 8002650:	0018      	movs	r0, r3
 8002652:	f7ff ff5d 	bl	8002510 <__NVIC_SetPriority>
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	0002      	movs	r2, r0
 8002666:	1dfb      	adds	r3, r7, #7
 8002668:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b25b      	sxtb	r3, r3
 8002670:	0018      	movs	r0, r3
 8002672:	f7ff ff33 	bl	80024dc <__NVIC_EnableIRQ>
}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	46bd      	mov	sp, r7
 800267a:	b002      	add	sp, #8
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	0018      	movs	r0, r3
 800268a:	f7ff ffaf 	bl	80025ec <SysTick_Config>
 800268e:	0003      	movs	r3, r0
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2221      	movs	r2, #33	; 0x21
 80026a4:	5c9b      	ldrb	r3, [r3, r2]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d008      	beq.n	80026be <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2204      	movs	r2, #4
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	2100      	movs	r1, #0
 80026b8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e020      	b.n	8002700 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	210e      	movs	r1, #14
 80026ca:	438a      	bics	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2101      	movs	r1, #1
 80026da:	438a      	bics	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e6:	2101      	movs	r1, #1
 80026e8:	4091      	lsls	r1, r2
 80026ea:	000a      	movs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2221      	movs	r2, #33	; 0x21
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	2100      	movs	r1, #0
 80026fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	210f      	movs	r1, #15
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2221      	movs	r2, #33	; 0x21
 800271c:	5c9b      	ldrb	r3, [r3, r2]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d006      	beq.n	8002732 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2204      	movs	r2, #4
 8002728:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800272a:	187b      	adds	r3, r7, r1
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e028      	b.n	8002784 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	210e      	movs	r1, #14
 800273e:	438a      	bics	r2, r1
 8002740:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	438a      	bics	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	2101      	movs	r1, #1
 800275c:	4091      	lsls	r1, r2
 800275e:	000a      	movs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2221      	movs	r2, #33	; 0x21
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	2100      	movs	r1, #0
 8002770:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	0010      	movs	r0, r2
 8002782:	4798      	blx	r3
    }
  }
  return status;
 8002784:	230f      	movs	r3, #15
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	781b      	ldrb	r3, [r3, #0]
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b004      	add	sp, #16
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a2:	e14f      	b.n	8002a44 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2101      	movs	r1, #1
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4091      	lsls	r1, r2
 80027ae:	000a      	movs	r2, r1
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d100      	bne.n	80027bc <HAL_GPIO_Init+0x28>
 80027ba:	e140      	b.n	8002a3e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d005      	beq.n	80027d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2203      	movs	r2, #3
 80027ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d130      	bne.n	8002836 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	409a      	lsls	r2, r3
 80027e2:	0013      	movs	r3, r2
 80027e4:	43da      	mvns	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	409a      	lsls	r2, r3
 80027f6:	0013      	movs	r3, r2
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800280a:	2201      	movs	r2, #1
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	409a      	lsls	r2, r3
 8002810:	0013      	movs	r3, r2
 8002812:	43da      	mvns	r2, r3
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	2201      	movs	r2, #1
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
 8002828:	0013      	movs	r3, r2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2203      	movs	r2, #3
 800283c:	4013      	ands	r3, r2
 800283e:	2b03      	cmp	r3, #3
 8002840:	d017      	beq.n	8002872 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	409a      	lsls	r2, r3
 8002850:	0013      	movs	r3, r2
 8002852:	43da      	mvns	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	409a      	lsls	r2, r3
 8002864:	0013      	movs	r3, r2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2203      	movs	r2, #3
 8002878:	4013      	ands	r3, r2
 800287a:	2b02      	cmp	r3, #2
 800287c:	d123      	bne.n	80028c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	58d3      	ldr	r3, [r2, r3]
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2207      	movs	r2, #7
 8002890:	4013      	ands	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	220f      	movs	r2, #15
 8002896:	409a      	lsls	r2, r3
 8002898:	0013      	movs	r3, r2
 800289a:	43da      	mvns	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2107      	movs	r1, #7
 80028aa:	400b      	ands	r3, r1
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	409a      	lsls	r2, r3
 80028b0:	0013      	movs	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	0092      	lsls	r2, r2, #2
 80028c2:	6939      	ldr	r1, [r7, #16]
 80028c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	409a      	lsls	r2, r3
 80028d4:	0013      	movs	r3, r2
 80028d6:	43da      	mvns	r2, r3
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2203      	movs	r2, #3
 80028e4:	401a      	ands	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	409a      	lsls	r2, r3
 80028ec:	0013      	movs	r3, r2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	23c0      	movs	r3, #192	; 0xc0
 8002900:	029b      	lsls	r3, r3, #10
 8002902:	4013      	ands	r3, r2
 8002904:	d100      	bne.n	8002908 <HAL_GPIO_Init+0x174>
 8002906:	e09a      	b.n	8002a3e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002908:	4b54      	ldr	r3, [pc, #336]	; (8002a5c <HAL_GPIO_Init+0x2c8>)
 800290a:	699a      	ldr	r2, [r3, #24]
 800290c:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <HAL_GPIO_Init+0x2c8>)
 800290e:	2101      	movs	r1, #1
 8002910:	430a      	orrs	r2, r1
 8002912:	619a      	str	r2, [r3, #24]
 8002914:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_GPIO_Init+0x2c8>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2201      	movs	r2, #1
 800291a:	4013      	ands	r3, r2
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002920:	4a4f      	ldr	r2, [pc, #316]	; (8002a60 <HAL_GPIO_Init+0x2cc>)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	589b      	ldr	r3, [r3, r2]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2203      	movs	r2, #3
 8002932:	4013      	ands	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	220f      	movs	r2, #15
 8002938:	409a      	lsls	r2, r3
 800293a:	0013      	movs	r3, r2
 800293c:	43da      	mvns	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	2390      	movs	r3, #144	; 0x90
 8002948:	05db      	lsls	r3, r3, #23
 800294a:	429a      	cmp	r2, r3
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x1e2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a44      	ldr	r2, [pc, #272]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x1de>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a43      	ldr	r2, [pc, #268]	; (8002a68 <HAL_GPIO_Init+0x2d4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x1da>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a42      	ldr	r2, [pc, #264]	; (8002a6c <HAL_GPIO_Init+0x2d8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x1d6>
 8002966:	2303      	movs	r3, #3
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x1e4>
 800296a:	2305      	movs	r3, #5
 800296c:	e004      	b.n	8002978 <HAL_GPIO_Init+0x1e4>
 800296e:	2302      	movs	r3, #2
 8002970:	e002      	b.n	8002978 <HAL_GPIO_Init+0x1e4>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_GPIO_Init+0x1e4>
 8002976:	2300      	movs	r3, #0
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	2103      	movs	r1, #3
 800297c:	400a      	ands	r2, r1
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	4093      	lsls	r3, r2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002988:	4935      	ldr	r1, [pc, #212]	; (8002a60 <HAL_GPIO_Init+0x2cc>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43da      	mvns	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	035b      	lsls	r3, r3, #13
 80029ae:	4013      	ands	r3, r2
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029ba:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80029c0:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43da      	mvns	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	039b      	lsls	r3, r3, #14
 80029d8:	4013      	ands	r3, r2
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80029ea:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43da      	mvns	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	029b      	lsls	r3, r3, #10
 8002a02:	4013      	ands	r3, r2
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a0e:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	025b      	lsls	r3, r3, #9
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3301      	adds	r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	40da      	lsrs	r2, r3
 8002a4c:	1e13      	subs	r3, r2, #0
 8002a4e:	d000      	beq.n	8002a52 <HAL_GPIO_Init+0x2be>
 8002a50:	e6a8      	b.n	80027a4 <HAL_GPIO_Init+0x10>
  } 
}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46c0      	nop			; (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b006      	add	sp, #24
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40010000 	.word	0x40010000
 8002a64:	48000400 	.word	0x48000400
 8002a68:	48000800 	.word	0x48000800
 8002a6c:	48000c00 	.word	0x48000c00
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	0008      	movs	r0, r1
 8002a7e:	0011      	movs	r1, r2
 8002a80:	1cbb      	adds	r3, r7, #2
 8002a82:	1c02      	adds	r2, r0, #0
 8002a84:	801a      	strh	r2, [r3, #0]
 8002a86:	1c7b      	adds	r3, r7, #1
 8002a88:	1c0a      	adds	r2, r1, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a8c:	1c7b      	adds	r3, r7, #1
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a94:	1cbb      	adds	r3, r7, #2
 8002a96:	881a      	ldrh	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a9e:	1cbb      	adds	r3, r7, #2
 8002aa0:	881a      	ldrh	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e305      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d100      	bne.n	8002ace <HAL_RCC_OscConfig+0x1e>
 8002acc:	e08d      	b.n	8002bea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ace:	4bc5      	ldr	r3, [pc, #788]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d00e      	beq.n	8002af8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ada:	4bc2      	ldr	r3, [pc, #776]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	220c      	movs	r2, #12
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d116      	bne.n	8002b14 <HAL_RCC_OscConfig+0x64>
 8002ae6:	4bbf      	ldr	r3, [pc, #764]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	23c0      	movs	r3, #192	; 0xc0
 8002aec:	025b      	lsls	r3, r3, #9
 8002aee:	401a      	ands	r2, r3
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	025b      	lsls	r3, r3, #9
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d10d      	bne.n	8002b14 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	4bba      	ldr	r3, [pc, #744]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	029b      	lsls	r3, r3, #10
 8002b00:	4013      	ands	r3, r2
 8002b02:	d100      	bne.n	8002b06 <HAL_RCC_OscConfig+0x56>
 8002b04:	e070      	b.n	8002be8 <HAL_RCC_OscConfig+0x138>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d000      	beq.n	8002b10 <HAL_RCC_OscConfig+0x60>
 8002b0e:	e06b      	b.n	8002be8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e2dc      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_OscConfig+0x7c>
 8002b1c:	4bb1      	ldr	r3, [pc, #708]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4bb0      	ldr	r3, [pc, #704]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	0249      	lsls	r1, r1, #9
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	e02f      	b.n	8002b8c <HAL_RCC_OscConfig+0xdc>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x9e>
 8002b34:	4bab      	ldr	r3, [pc, #684]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4baa      	ldr	r3, [pc, #680]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b3a:	49ab      	ldr	r1, [pc, #684]	; (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	4ba8      	ldr	r3, [pc, #672]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4ba7      	ldr	r3, [pc, #668]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b46:	49a9      	ldr	r1, [pc, #676]	; (8002dec <HAL_RCC_OscConfig+0x33c>)
 8002b48:	400a      	ands	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e01e      	b.n	8002b8c <HAL_RCC_OscConfig+0xdc>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	d10e      	bne.n	8002b74 <HAL_RCC_OscConfig+0xc4>
 8002b56:	4ba3      	ldr	r3, [pc, #652]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4ba2      	ldr	r3, [pc, #648]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	02c9      	lsls	r1, r1, #11
 8002b60:	430a      	orrs	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	4b9f      	ldr	r3, [pc, #636]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b9e      	ldr	r3, [pc, #632]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b6a:	2180      	movs	r1, #128	; 0x80
 8002b6c:	0249      	lsls	r1, r1, #9
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0xdc>
 8002b74:	4b9b      	ldr	r3, [pc, #620]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b9a      	ldr	r3, [pc, #616]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b7a:	499b      	ldr	r1, [pc, #620]	; (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	4b98      	ldr	r3, [pc, #608]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b97      	ldr	r3, [pc, #604]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002b86:	4999      	ldr	r1, [pc, #612]	; (8002dec <HAL_RCC_OscConfig+0x33c>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d014      	beq.n	8002bbe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7ff fc8e 	bl	80024b4 <HAL_GetTick>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9e:	f7ff fc89 	bl	80024b4 <HAL_GetTick>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b64      	cmp	r3, #100	; 0x64
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e28e      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb0:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	029b      	lsls	r3, r3, #10
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0xee>
 8002bbc:	e015      	b.n	8002bea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7ff fc79 	bl	80024b4 <HAL_GetTick>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7ff fc74 	bl	80024b4 <HAL_GetTick>
 8002bcc:	0002      	movs	r2, r0
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e279      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	4b82      	ldr	r3, [pc, #520]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	029b      	lsls	r3, r3, #10
 8002be2:	4013      	ands	r3, r2
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x118>
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d100      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x146>
 8002bf4:	e06c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bf6:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d00e      	beq.n	8002c1e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c00:	4b78      	ldr	r3, [pc, #480]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	220c      	movs	r2, #12
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d11f      	bne.n	8002c4c <HAL_RCC_OscConfig+0x19c>
 8002c0c:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	23c0      	movs	r3, #192	; 0xc0
 8002c12:	025b      	lsls	r3, r3, #9
 8002c14:	401a      	ands	r2, r3
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d116      	bne.n	8002c4c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	4b71      	ldr	r3, [pc, #452]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2202      	movs	r2, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x184>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e24c      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b6b      	ldr	r3, [pc, #428]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	22f8      	movs	r2, #248	; 0xf8
 8002c3a:	4393      	bics	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00da      	lsls	r2, r3, #3
 8002c44:	4b67      	ldr	r3, [pc, #412]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002c46:	430a      	orrs	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	e041      	b.n	8002cd0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d024      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c54:	4b63      	ldr	r3, [pc, #396]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b62      	ldr	r3, [pc, #392]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff fc28 	bl	80024b4 <HAL_GetTick>
 8002c64:	0003      	movs	r3, r0
 8002c66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6a:	f7ff fc23 	bl	80024b4 <HAL_GetTick>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e228      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7c:	4b59      	ldr	r3, [pc, #356]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d0f1      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b57      	ldr	r3, [pc, #348]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	22f8      	movs	r2, #248	; 0xf8
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	0019      	movs	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	00da      	lsls	r2, r3, #3
 8002c96:	4b53      	ldr	r3, [pc, #332]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e018      	b.n	8002cd0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9e:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4b50      	ldr	r3, [pc, #320]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	438a      	bics	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002caa:	f7ff fc03 	bl	80024b4 <HAL_GetTick>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7ff fbfe 	bl	80024b4 <HAL_GetTick>
 8002cb8:	0002      	movs	r2, r0
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e203      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc6:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d1f1      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d036      	beq.n	8002d48 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d019      	beq.n	8002d16 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce2:	4b40      	ldr	r3, [pc, #256]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	430a      	orrs	r2, r1
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cee:	f7ff fbe1 	bl	80024b4 <HAL_GetTick>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7ff fbdc 	bl	80024b4 <HAL_GetTick>
 8002cfc:	0002      	movs	r2, r0
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1e1      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	2202      	movs	r2, #2
 8002d10:	4013      	ands	r3, r2
 8002d12:	d0f1      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x248>
 8002d14:	e018      	b.n	8002d48 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d16:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1a:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	438a      	bics	r2, r1
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d22:	f7ff fbc7 	bl	80024b4 <HAL_GetTick>
 8002d26:	0003      	movs	r3, r0
 8002d28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7ff fbc2 	bl	80024b4 <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1c7      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3e:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	2202      	movs	r2, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	d1f1      	bne.n	8002d2c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d100      	bne.n	8002d54 <HAL_RCC_OscConfig+0x2a4>
 8002d52:	e0b5      	b.n	8002ec0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d54:	201f      	movs	r0, #31
 8002d56:	183b      	adds	r3, r7, r0
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	055b      	lsls	r3, r3, #21
 8002d64:	4013      	ands	r3, r2
 8002d66:	d110      	bne.n	8002d8a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	0549      	lsls	r1, r1, #21
 8002d72:	430a      	orrs	r2, r1
 8002d74:	61da      	str	r2, [r3, #28]
 8002d76:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	055b      	lsls	r3, r3, #21
 8002d7e:	4013      	ands	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d84:	183b      	adds	r3, r7, r0
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RCC_OscConfig+0x340>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4013      	ands	r3, r2
 8002d94:	d11a      	bne.n	8002dcc <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <HAL_RCC_OscConfig+0x340>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <HAL_RCC_OscConfig+0x340>)
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	0049      	lsls	r1, r1, #1
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da4:	f7ff fb86 	bl	80024b4 <HAL_GetTick>
 8002da8:	0003      	movs	r3, r0
 8002daa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7ff fb81 	bl	80024b4 <HAL_GetTick>
 8002db2:	0002      	movs	r2, r0
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e186      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_OscConfig+0x340>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d10f      	bne.n	8002df4 <HAL_RCC_OscConfig+0x344>
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	4b02      	ldr	r3, [pc, #8]	; (8002de4 <HAL_RCC_OscConfig+0x334>)
 8002dda:	2101      	movs	r1, #1
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	621a      	str	r2, [r3, #32]
 8002de0:	e036      	b.n	8002e50 <HAL_RCC_OscConfig+0x3a0>
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	40021000 	.word	0x40021000
 8002de8:	fffeffff 	.word	0xfffeffff
 8002dec:	fffbffff 	.word	0xfffbffff
 8002df0:	40007000 	.word	0x40007000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x366>
 8002dfc:	4bb6      	ldr	r3, [pc, #728]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002dfe:	6a1a      	ldr	r2, [r3, #32]
 8002e00:	4bb5      	ldr	r3, [pc, #724]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e02:	2101      	movs	r1, #1
 8002e04:	438a      	bics	r2, r1
 8002e06:	621a      	str	r2, [r3, #32]
 8002e08:	4bb3      	ldr	r3, [pc, #716]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e0a:	6a1a      	ldr	r2, [r3, #32]
 8002e0c:	4bb2      	ldr	r3, [pc, #712]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e0e:	2104      	movs	r1, #4
 8002e10:	438a      	bics	r2, r1
 8002e12:	621a      	str	r2, [r3, #32]
 8002e14:	e01c      	b.n	8002e50 <HAL_RCC_OscConfig+0x3a0>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x388>
 8002e1e:	4bae      	ldr	r3, [pc, #696]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e20:	6a1a      	ldr	r2, [r3, #32]
 8002e22:	4bad      	ldr	r3, [pc, #692]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e24:	2104      	movs	r1, #4
 8002e26:	430a      	orrs	r2, r1
 8002e28:	621a      	str	r2, [r3, #32]
 8002e2a:	4bab      	ldr	r3, [pc, #684]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e2c:	6a1a      	ldr	r2, [r3, #32]
 8002e2e:	4baa      	ldr	r3, [pc, #680]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e30:	2101      	movs	r1, #1
 8002e32:	430a      	orrs	r2, r1
 8002e34:	621a      	str	r2, [r3, #32]
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0x3a0>
 8002e38:	4ba7      	ldr	r3, [pc, #668]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e3a:	6a1a      	ldr	r2, [r3, #32]
 8002e3c:	4ba6      	ldr	r3, [pc, #664]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e3e:	2101      	movs	r1, #1
 8002e40:	438a      	bics	r2, r1
 8002e42:	621a      	str	r2, [r3, #32]
 8002e44:	4ba4      	ldr	r3, [pc, #656]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	4ba3      	ldr	r3, [pc, #652]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e4a:	2104      	movs	r1, #4
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d014      	beq.n	8002e82 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e58:	f7ff fb2c 	bl	80024b4 <HAL_GetTick>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e60:	e009      	b.n	8002e76 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7ff fb27 	bl	80024b4 <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	4a9b      	ldr	r2, [pc, #620]	; (80030dc <HAL_RCC_OscConfig+0x62c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e12b      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	4b98      	ldr	r3, [pc, #608]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x3b2>
 8002e80:	e013      	b.n	8002eaa <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7ff fb17 	bl	80024b4 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8a:	e009      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7ff fb12 	bl	80024b4 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	4a91      	ldr	r2, [pc, #580]	; (80030dc <HAL_RCC_OscConfig+0x62c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e116      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea0:	4b8d      	ldr	r3, [pc, #564]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eaa:	231f      	movs	r3, #31
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb4:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002eb6:	69da      	ldr	r2, [r3, #28]
 8002eb8:	4b87      	ldr	r3, [pc, #540]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002eba:	4989      	ldr	r1, [pc, #548]	; (80030e0 <HAL_RCC_OscConfig+0x630>)
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d063      	beq.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d12a      	bne.n	8002f28 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ed2:	4b81      	ldr	r3, [pc, #516]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed6:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002ed8:	2104      	movs	r1, #4
 8002eda:	430a      	orrs	r2, r1
 8002edc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002ede:	4b7e      	ldr	r3, [pc, #504]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee2:	4b7d      	ldr	r3, [pc, #500]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7ff fae3 	bl	80024b4 <HAL_GetTick>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ef4:	f7ff fade 	bl	80024b4 <HAL_GetTick>
 8002ef8:	0002      	movs	r2, r0
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e0e3      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f06:	4b74      	ldr	r3, [pc, #464]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d0f1      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f10:	4b71      	ldr	r3, [pc, #452]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	22f8      	movs	r2, #248	; 0xf8
 8002f16:	4393      	bics	r3, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	00da      	lsls	r2, r3, #3
 8002f20:	4b6d      	ldr	r3, [pc, #436]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f22:	430a      	orrs	r2, r1
 8002f24:	635a      	str	r2, [r3, #52]	; 0x34
 8002f26:	e034      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	3305      	adds	r3, #5
 8002f2e:	d111      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002f30:	4b69      	ldr	r3, [pc, #420]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f34:	4b68      	ldr	r3, [pc, #416]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f36:	2104      	movs	r1, #4
 8002f38:	438a      	bics	r2, r1
 8002f3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f3c:	4b66      	ldr	r3, [pc, #408]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	22f8      	movs	r2, #248	; 0xf8
 8002f42:	4393      	bics	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	00da      	lsls	r2, r3, #3
 8002f4c:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34
 8002f52:	e01e      	b.n	8002f92 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f54:	4b60      	ldr	r3, [pc, #384]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f58:	4b5f      	ldr	r3, [pc, #380]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f5a:	2104      	movs	r1, #4
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f60:	4b5d      	ldr	r3, [pc, #372]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f64:	4b5c      	ldr	r3, [pc, #368]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	438a      	bics	r2, r1
 8002f6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7ff faa2 	bl	80024b4 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
 8002f72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f76:	f7ff fa9d 	bl	80024b4 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0a2      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f88:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d1f1      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d100      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4ec>
 8002f9a:	e097      	b.n	80030cc <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f9c:	4b4e      	ldr	r3, [pc, #312]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	220c      	movs	r2, #12
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d100      	bne.n	8002faa <HAL_RCC_OscConfig+0x4fa>
 8002fa8:	e06b      	b.n	8003082 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d14c      	bne.n	800304c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb2:	4b49      	ldr	r3, [pc, #292]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002fb8:	494a      	ldr	r1, [pc, #296]	; (80030e4 <HAL_RCC_OscConfig+0x634>)
 8002fba:	400a      	ands	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7ff fa79 	bl	80024b4 <HAL_GetTick>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7ff fa74 	bl	80024b4 <HAL_GetTick>
 8002fcc:	0002      	movs	r2, r0
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e079      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fda:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	049b      	lsls	r3, r3, #18
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe6:	4b3c      	ldr	r3, [pc, #240]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	220f      	movs	r2, #15
 8002fec:	4393      	bics	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff4:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a3a      	ldr	r2, [pc, #232]	; (80030e8 <HAL_RCC_OscConfig+0x638>)
 8003000:	4013      	ands	r3, r2
 8003002:	0019      	movs	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	431a      	orrs	r2, r3
 800300e:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003014:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	0449      	lsls	r1, r1, #17
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7ff fa47 	bl	80024b4 <HAL_GetTick>
 8003026:	0003      	movs	r3, r0
 8003028:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7ff fa42 	bl	80024b4 <HAL_GetTick>
 8003030:	0002      	movs	r2, r0
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e047      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	049b      	lsls	r3, r3, #18
 8003046:	4013      	ands	r3, r2
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x57c>
 800304a:	e03f      	b.n	80030cc <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304c:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8003052:	4924      	ldr	r1, [pc, #144]	; (80030e4 <HAL_RCC_OscConfig+0x634>)
 8003054:	400a      	ands	r2, r1
 8003056:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7ff fa2c 	bl	80024b4 <HAL_GetTick>
 800305c:	0003      	movs	r3, r0
 800305e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003062:	f7ff fa27 	bl	80024b4 <HAL_GetTick>
 8003066:	0002      	movs	r2, r0
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e02c      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003074:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	049b      	lsls	r3, r3, #18
 800307c:	4013      	ands	r3, r2
 800307e:	d1f0      	bne.n	8003062 <HAL_RCC_OscConfig+0x5b2>
 8003080:	e024      	b.n	80030cc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e01f      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_OscConfig+0x628>)
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	23c0      	movs	r3, #192	; 0xc0
 800309e:	025b      	lsls	r3, r3, #9
 80030a0:	401a      	ands	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d10e      	bne.n	80030c8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	220f      	movs	r2, #15
 80030ae:	401a      	ands	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	23f0      	movs	r3, #240	; 0xf0
 80030bc:	039b      	lsls	r3, r3, #14
 80030be:	401a      	ands	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b008      	add	sp, #32
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	40021000 	.word	0x40021000
 80030dc:	00001388 	.word	0x00001388
 80030e0:	efffffff 	.word	0xefffffff
 80030e4:	feffffff 	.word	0xfeffffff
 80030e8:	ffc27fff 	.word	0xffc27fff

080030ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0b3      	b.n	8003268 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003100:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <HAL_RCC_ClockConfig+0x184>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	4013      	ands	r3, r2
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d911      	bls.n	8003132 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b58      	ldr	r3, [pc, #352]	; (8003270 <HAL_RCC_ClockConfig+0x184>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	4393      	bics	r3, r2
 8003116:	0019      	movs	r1, r3
 8003118:	4b55      	ldr	r3, [pc, #340]	; (8003270 <HAL_RCC_ClockConfig+0x184>)
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_ClockConfig+0x184>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	4013      	ands	r3, r2
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d001      	beq.n	8003132 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e09a      	b.n	8003268 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2202      	movs	r2, #2
 8003138:	4013      	ands	r3, r2
 800313a:	d015      	beq.n	8003168 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2204      	movs	r2, #4
 8003142:	4013      	ands	r3, r2
 8003144:	d006      	beq.n	8003154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003146:	4b4b      	ldr	r3, [pc, #300]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4b4a      	ldr	r3, [pc, #296]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 800314c:	21e0      	movs	r1, #224	; 0xe0
 800314e:	00c9      	lsls	r1, r1, #3
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	22f0      	movs	r2, #240	; 0xf0
 800315a:	4393      	bics	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	4b44      	ldr	r3, [pc, #272]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2201      	movs	r2, #1
 800316e:	4013      	ands	r3, r2
 8003170:	d040      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	029b      	lsls	r3, r3, #10
 8003182:	4013      	ands	r3, r2
 8003184:	d114      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e06e      	b.n	8003268 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b38      	ldr	r3, [pc, #224]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	049b      	lsls	r3, r3, #18
 800319a:	4013      	ands	r3, r2
 800319c:	d108      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e062      	b.n	8003268 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2202      	movs	r2, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e05b      	b.n	8003268 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b0:	4b30      	ldr	r3, [pc, #192]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2203      	movs	r2, #3
 80031b6:	4393      	bics	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c4:	f7ff f976 	bl	80024b4 <HAL_GetTick>
 80031c8:	0003      	movs	r3, r0
 80031ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031cc:	e009      	b.n	80031e2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ce:	f7ff f971 	bl	80024b4 <HAL_GetTick>
 80031d2:	0002      	movs	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	4a27      	ldr	r2, [pc, #156]	; (8003278 <HAL_RCC_ClockConfig+0x18c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e042      	b.n	8003268 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	220c      	movs	r2, #12
 80031e8:	401a      	ands	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1ec      	bne.n	80031ce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_RCC_ClockConfig+0x184>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2201      	movs	r2, #1
 80031fa:	4013      	ands	r3, r2
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d211      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_RCC_ClockConfig+0x184>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2201      	movs	r2, #1
 8003208:	4393      	bics	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_RCC_ClockConfig+0x184>)
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003214:	4b16      	ldr	r3, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x184>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	4013      	ands	r3, r2
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d001      	beq.n	8003226 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e020      	b.n	8003268 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2204      	movs	r2, #4
 800322c:	4013      	ands	r3, r2
 800322e:	d009      	beq.n	8003244 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b10      	ldr	r3, [pc, #64]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a11      	ldr	r2, [pc, #68]	; (800327c <HAL_RCC_ClockConfig+0x190>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003244:	f000 f820 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8003248:	0001      	movs	r1, r0
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x188>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	220f      	movs	r2, #15
 8003252:	4013      	ands	r3, r2
 8003254:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x194>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	000a      	movs	r2, r1
 800325a:	40da      	lsrs	r2, r3
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x198>)
 800325e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003260:	2003      	movs	r0, #3
 8003262:	f7ff f8e1 	bl	8002428 <HAL_InitTick>
  
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b004      	add	sp, #16
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40022000 	.word	0x40022000
 8003274:	40021000 	.word	0x40021000
 8003278:	00001388 	.word	0x00001388
 800327c:	fffff8ff 	.word	0xfffff8ff
 8003280:	080055b8 	.word	0x080055b8
 8003284:	20000000 	.word	0x20000000

08003288 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80032a2:	4b21      	ldr	r3, [pc, #132]	; (8003328 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	220c      	movs	r2, #12
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d002      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x30>
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d003      	beq.n	80032be <HAL_RCC_GetSysClockFreq+0x36>
 80032b6:	e02e      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <HAL_RCC_GetSysClockFreq+0xa4>)
 80032ba:	613b      	str	r3, [r7, #16]
      break;
 80032bc:	e02e      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	0c9b      	lsrs	r3, r3, #18
 80032c2:	220f      	movs	r2, #15
 80032c4:	4013      	ands	r3, r2
 80032c6:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <HAL_RCC_GetSysClockFreq+0xa8>)
 80032c8:	5cd3      	ldrb	r3, [r2, r3]
 80032ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	220f      	movs	r2, #15
 80032d2:	4013      	ands	r3, r2
 80032d4:	4a17      	ldr	r2, [pc, #92]	; (8003334 <HAL_RCC_GetSysClockFreq+0xac>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	23c0      	movs	r3, #192	; 0xc0
 80032de:	025b      	lsls	r3, r3, #9
 80032e0:	401a      	ands	r2, r3
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	025b      	lsls	r3, r3, #9
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	480f      	ldr	r0, [pc, #60]	; (800332c <HAL_RCC_GetSysClockFreq+0xa4>)
 80032ee:	f7fc ff09 	bl	8000104 <__udivsi3>
 80032f2:	0003      	movs	r3, r0
 80032f4:	001a      	movs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4353      	muls	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	e008      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	480a      	ldr	r0, [pc, #40]	; (800332c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003302:	f7fc feff 	bl	8000104 <__udivsi3>
 8003306:	0003      	movs	r3, r0
 8003308:	001a      	movs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4353      	muls	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	613b      	str	r3, [r7, #16]
      break;
 8003314:	e002      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003318:	613b      	str	r3, [r7, #16]
      break;
 800331a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800331c:	693b      	ldr	r3, [r7, #16]
}
 800331e:	0018      	movs	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	b006      	add	sp, #24
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	40021000 	.word	0x40021000
 800332c:	007a1200 	.word	0x007a1200
 8003330:	080055d0 	.word	0x080055d0
 8003334:	080055e0 	.word	0x080055e0

08003338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <HAL_RCC_GetHCLKFreq+0x10>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	20000000 	.word	0x20000000

0800334c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003350:	f7ff fff2 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003354:	0001      	movs	r1, r0
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	2207      	movs	r2, #7
 800335e:	4013      	ands	r3, r2
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	40d9      	lsrs	r1, r3
 8003366:	000b      	movs	r3, r1
}    
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	40021000 	.word	0x40021000
 8003374:	080055c8 	.word	0x080055c8

08003378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e042      	b.n	8003410 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	223d      	movs	r2, #61	; 0x3d
 800338e:	5c9b      	ldrb	r3, [r3, r2]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d107      	bne.n	80033a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	223c      	movs	r2, #60	; 0x3c
 800339a:	2100      	movs	r1, #0
 800339c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7fe feb9 	bl	8002118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	223d      	movs	r2, #61	; 0x3d
 80033aa:	2102      	movs	r1, #2
 80033ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
 80033b6:	0019      	movs	r1, r3
 80033b8:	0010      	movs	r0, r2
 80033ba:	f000 fad1 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2246      	movs	r2, #70	; 0x46
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	223e      	movs	r2, #62	; 0x3e
 80033ca:	2101      	movs	r1, #1
 80033cc:	5499      	strb	r1, [r3, r2]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	223f      	movs	r2, #63	; 0x3f
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	2101      	movs	r1, #1
 80033dc:	5499      	strb	r1, [r3, r2]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2241      	movs	r2, #65	; 0x41
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2242      	movs	r2, #66	; 0x42
 80033ea:	2101      	movs	r1, #1
 80033ec:	5499      	strb	r1, [r3, r2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2243      	movs	r2, #67	; 0x43
 80033f2:	2101      	movs	r1, #1
 80033f4:	5499      	strb	r1, [r3, r2]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2244      	movs	r2, #68	; 0x44
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2245      	movs	r2, #69	; 0x45
 8003402:	2101      	movs	r1, #1
 8003404:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	223d      	movs	r2, #61	; 0x3d
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e042      	b.n	80034b0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	223d      	movs	r2, #61	; 0x3d
 800342e:	5c9b      	ldrb	r3, [r3, r2]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d107      	bne.n	8003446 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223c      	movs	r2, #60	; 0x3c
 800343a:	2100      	movs	r1, #0
 800343c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f000 f839 	bl	80034b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	223d      	movs	r2, #61	; 0x3d
 800344a:	2102      	movs	r1, #2
 800344c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	0019      	movs	r1, r3
 8003458:	0010      	movs	r0, r2
 800345a:	f000 fa81 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2246      	movs	r2, #70	; 0x46
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	223e      	movs	r2, #62	; 0x3e
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	223f      	movs	r2, #63	; 0x3f
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2240      	movs	r2, #64	; 0x40
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2241      	movs	r2, #65	; 0x41
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2242      	movs	r2, #66	; 0x42
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2243      	movs	r2, #67	; 0x43
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2244      	movs	r2, #68	; 0x44
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2245      	movs	r2, #69	; 0x45
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	223d      	movs	r2, #61	; 0x3d
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <HAL_TIM_PWM_Start+0x22>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	223e      	movs	r2, #62	; 0x3e
 80034dc:	5c9b      	ldrb	r3, [r3, r2]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	4193      	sbcs	r3, r2
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e01f      	b.n	800352a <HAL_TIM_PWM_Start+0x62>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d108      	bne.n	8003502 <HAL_TIM_PWM_Start+0x3a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	223f      	movs	r2, #63	; 0x3f
 80034f4:	5c9b      	ldrb	r3, [r3, r2]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	1e5a      	subs	r2, r3, #1
 80034fc:	4193      	sbcs	r3, r2
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e013      	b.n	800352a <HAL_TIM_PWM_Start+0x62>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d108      	bne.n	800351a <HAL_TIM_PWM_Start+0x52>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	5c9b      	ldrb	r3, [r3, r2]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	4193      	sbcs	r3, r2
 8003516:	b2db      	uxtb	r3, r3
 8003518:	e007      	b.n	800352a <HAL_TIM_PWM_Start+0x62>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2241      	movs	r2, #65	; 0x41
 800351e:	5c9b      	ldrb	r3, [r3, r2]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	1e5a      	subs	r2, r3, #1
 8003526:	4193      	sbcs	r3, r2
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e06e      	b.n	8003610 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <HAL_TIM_PWM_Start+0x7a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	223e      	movs	r2, #62	; 0x3e
 800353c:	2102      	movs	r1, #2
 800353e:	5499      	strb	r1, [r3, r2]
 8003540:	e013      	b.n	800356a <HAL_TIM_PWM_Start+0xa2>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d104      	bne.n	8003552 <HAL_TIM_PWM_Start+0x8a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	223f      	movs	r2, #63	; 0x3f
 800354c:	2102      	movs	r1, #2
 800354e:	5499      	strb	r1, [r3, r2]
 8003550:	e00b      	b.n	800356a <HAL_TIM_PWM_Start+0xa2>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d104      	bne.n	8003562 <HAL_TIM_PWM_Start+0x9a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2240      	movs	r2, #64	; 0x40
 800355c:	2102      	movs	r1, #2
 800355e:	5499      	strb	r1, [r3, r2]
 8003560:	e003      	b.n	800356a <HAL_TIM_PWM_Start+0xa2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2241      	movs	r2, #65	; 0x41
 8003566:	2102      	movs	r1, #2
 8003568:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6839      	ldr	r1, [r7, #0]
 8003570:	2201      	movs	r2, #1
 8003572:	0018      	movs	r0, r3
 8003574:	f000 fd00 	bl	8003f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <HAL_TIM_PWM_Start+0x150>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00e      	beq.n	80035a0 <HAL_TIM_PWM_Start+0xd8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a25      	ldr	r2, [pc, #148]	; (800361c <HAL_TIM_PWM_Start+0x154>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d009      	beq.n	80035a0 <HAL_TIM_PWM_Start+0xd8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a23      	ldr	r2, [pc, #140]	; (8003620 <HAL_TIM_PWM_Start+0x158>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_TIM_PWM_Start+0xd8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a22      	ldr	r2, [pc, #136]	; (8003624 <HAL_TIM_PWM_Start+0x15c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_PWM_Start+0xdc>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_TIM_PWM_Start+0xde>
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d008      	beq.n	80035bc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2180      	movs	r1, #128	; 0x80
 80035b6:	0209      	lsls	r1, r1, #8
 80035b8:	430a      	orrs	r2, r1
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a15      	ldr	r2, [pc, #84]	; (8003618 <HAL_TIM_PWM_Start+0x150>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d009      	beq.n	80035da <HAL_TIM_PWM_Start+0x112>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a17      	ldr	r2, [pc, #92]	; (8003628 <HAL_TIM_PWM_Start+0x160>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_TIM_PWM_Start+0x112>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a11      	ldr	r2, [pc, #68]	; (800361c <HAL_TIM_PWM_Start+0x154>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d111      	bne.n	80035fe <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2207      	movs	r2, #7
 80035e2:	4013      	ands	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b06      	cmp	r3, #6
 80035ea:	d010      	beq.n	800360e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2101      	movs	r1, #1
 80035f8:	430a      	orrs	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fc:	e007      	b.n	800360e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2101      	movs	r1, #1
 800360a:	430a      	orrs	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b004      	add	sp, #16
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800
 8003628:	40000400 	.word	0x40000400

0800362c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003638:	2317      	movs	r3, #23
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	223c      	movs	r2, #60	; 0x3c
 8003644:	5c9b      	ldrb	r3, [r3, r2]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_TIM_PWM_ConfigChannel+0x22>
 800364a:	2302      	movs	r3, #2
 800364c:	e0ad      	b.n	80037aa <HAL_TIM_PWM_ConfigChannel+0x17e>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	223c      	movs	r2, #60	; 0x3c
 8003652:	2101      	movs	r1, #1
 8003654:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b0c      	cmp	r3, #12
 800365a:	d100      	bne.n	800365e <HAL_TIM_PWM_ConfigChannel+0x32>
 800365c:	e076      	b.n	800374c <HAL_TIM_PWM_ConfigChannel+0x120>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d900      	bls.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003664:	e095      	b.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d04e      	beq.n	800370a <HAL_TIM_PWM_ConfigChannel+0xde>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b08      	cmp	r3, #8
 8003670:	d900      	bls.n	8003674 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003672:	e08e      	b.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_PWM_ConfigChannel+0x56>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d021      	beq.n	80036c4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003680:	e087      	b.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	0011      	movs	r1, r2
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f9de 	bl	8003a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2108      	movs	r1, #8
 800369c:	430a      	orrs	r2, r1
 800369e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2104      	movs	r1, #4
 80036ac:	438a      	bics	r2, r1
 80036ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6999      	ldr	r1, [r3, #24]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	619a      	str	r2, [r3, #24]
      break;
 80036c2:	e06b      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	0011      	movs	r1, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	f000 fa45 	bl	8003b5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2180      	movs	r1, #128	; 0x80
 80036de:	0109      	lsls	r1, r1, #4
 80036e0:	430a      	orrs	r2, r1
 80036e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4931      	ldr	r1, [pc, #196]	; (80037b4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80036f0:	400a      	ands	r2, r1
 80036f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6999      	ldr	r1, [r3, #24]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	021a      	lsls	r2, r3, #8
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	619a      	str	r2, [r3, #24]
      break;
 8003708:	e048      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	0011      	movs	r1, r2
 8003712:	0018      	movs	r0, r3
 8003714:	f000 faa6 	bl	8003c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69da      	ldr	r2, [r3, #28]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2108      	movs	r1, #8
 8003724:	430a      	orrs	r2, r1
 8003726:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2104      	movs	r1, #4
 8003734:	438a      	bics	r2, r1
 8003736:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69d9      	ldr	r1, [r3, #28]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	61da      	str	r2, [r3, #28]
      break;
 800374a:	e027      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	0011      	movs	r1, r2
 8003754:	0018      	movs	r0, r3
 8003756:	f000 fb0b 	bl	8003d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69da      	ldr	r2, [r3, #28]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	0109      	lsls	r1, r1, #4
 8003768:	430a      	orrs	r2, r1
 800376a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	490f      	ldr	r1, [pc, #60]	; (80037b4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003778:	400a      	ands	r2, r1
 800377a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69d9      	ldr	r1, [r3, #28]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	61da      	str	r2, [r3, #28]
      break;
 8003790:	e004      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003792:	2317      	movs	r3, #23
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
      break;
 800379a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	223c      	movs	r2, #60	; 0x3c
 80037a0:	2100      	movs	r1, #0
 80037a2:	5499      	strb	r1, [r3, r2]

  return status;
 80037a4:	2317      	movs	r3, #23
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	781b      	ldrb	r3, [r3, #0]
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b006      	add	sp, #24
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	fffffbff 	.word	0xfffffbff

080037b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037c2:	230f      	movs	r3, #15
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	223c      	movs	r2, #60	; 0x3c
 80037ce:	5c9b      	ldrb	r3, [r3, r2]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_TIM_ConfigClockSource+0x20>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e0bc      	b.n	8003952 <HAL_TIM_ConfigClockSource+0x19a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	223c      	movs	r2, #60	; 0x3c
 80037dc:	2101      	movs	r1, #1
 80037de:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	223d      	movs	r2, #61	; 0x3d
 80037e4:	2102      	movs	r1, #2
 80037e6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2277      	movs	r2, #119	; 0x77
 80037f4:	4393      	bics	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4a58      	ldr	r2, [pc, #352]	; (800395c <HAL_TIM_ConfigClockSource+0x1a4>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2280      	movs	r2, #128	; 0x80
 800380e:	0192      	lsls	r2, r2, #6
 8003810:	4293      	cmp	r3, r2
 8003812:	d040      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xde>
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	0192      	lsls	r2, r2, #6
 8003818:	4293      	cmp	r3, r2
 800381a:	d900      	bls.n	800381e <HAL_TIM_ConfigClockSource+0x66>
 800381c:	e088      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	0152      	lsls	r2, r2, #5
 8003822:	4293      	cmp	r3, r2
 8003824:	d100      	bne.n	8003828 <HAL_TIM_ConfigClockSource+0x70>
 8003826:	e088      	b.n	800393a <HAL_TIM_ConfigClockSource+0x182>
 8003828:	2280      	movs	r2, #128	; 0x80
 800382a:	0152      	lsls	r2, r2, #5
 800382c:	4293      	cmp	r3, r2
 800382e:	d900      	bls.n	8003832 <HAL_TIM_ConfigClockSource+0x7a>
 8003830:	e07e      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
 8003832:	2b70      	cmp	r3, #112	; 0x70
 8003834:	d018      	beq.n	8003868 <HAL_TIM_ConfigClockSource+0xb0>
 8003836:	d900      	bls.n	800383a <HAL_TIM_ConfigClockSource+0x82>
 8003838:	e07a      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
 800383a:	2b60      	cmp	r3, #96	; 0x60
 800383c:	d04f      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x126>
 800383e:	d900      	bls.n	8003842 <HAL_TIM_ConfigClockSource+0x8a>
 8003840:	e076      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
 8003842:	2b50      	cmp	r3, #80	; 0x50
 8003844:	d03b      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x106>
 8003846:	d900      	bls.n	800384a <HAL_TIM_ConfigClockSource+0x92>
 8003848:	e072      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d057      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x146>
 800384e:	d900      	bls.n	8003852 <HAL_TIM_ConfigClockSource+0x9a>
 8003850:	e06e      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
 8003852:	2b30      	cmp	r3, #48	; 0x30
 8003854:	d063      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x166>
 8003856:	d86b      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
 8003858:	2b20      	cmp	r3, #32
 800385a:	d060      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x166>
 800385c:	d868      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d05d      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x166>
 8003862:	2b10      	cmp	r3, #16
 8003864:	d05b      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x166>
 8003866:	e063      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003878:	f000 fb5e 	bl	8003f38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2277      	movs	r2, #119	; 0x77
 8003888:	4313      	orrs	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]
      break;
 8003894:	e052      	b.n	800393c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038a6:	f000 fb47 	bl	8003f38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	01c9      	lsls	r1, r1, #7
 80038b8:	430a      	orrs	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]
      break;
 80038bc:	e03e      	b.n	800393c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ca:	001a      	movs	r2, r3
 80038cc:	f000 faba 	bl	8003e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2150      	movs	r1, #80	; 0x50
 80038d6:	0018      	movs	r0, r3
 80038d8:	f000 fb14 	bl	8003f04 <TIM_ITRx_SetConfig>
      break;
 80038dc:	e02e      	b.n	800393c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ea:	001a      	movs	r2, r3
 80038ec:	f000 fad8 	bl	8003ea0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2160      	movs	r1, #96	; 0x60
 80038f6:	0018      	movs	r0, r3
 80038f8:	f000 fb04 	bl	8003f04 <TIM_ITRx_SetConfig>
      break;
 80038fc:	e01e      	b.n	800393c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800390a:	001a      	movs	r2, r3
 800390c:	f000 fa9a 	bl	8003e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2140      	movs	r1, #64	; 0x40
 8003916:	0018      	movs	r0, r3
 8003918:	f000 faf4 	bl	8003f04 <TIM_ITRx_SetConfig>
      break;
 800391c:	e00e      	b.n	800393c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	0019      	movs	r1, r3
 8003928:	0010      	movs	r0, r2
 800392a:	f000 faeb 	bl	8003f04 <TIM_ITRx_SetConfig>
      break;
 800392e:	e005      	b.n	800393c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003930:	230f      	movs	r3, #15
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
      break;
 8003938:	e000      	b.n	800393c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800393a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	223d      	movs	r2, #61	; 0x3d
 8003940:	2101      	movs	r1, #1
 8003942:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	223c      	movs	r2, #60	; 0x3c
 8003948:	2100      	movs	r1, #0
 800394a:	5499      	strb	r1, [r3, r2]

  return status;
 800394c:	230f      	movs	r3, #15
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	781b      	ldrb	r3, [r3, #0]
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b004      	add	sp, #16
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	ffff00ff 	.word	0xffff00ff

08003960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a2f      	ldr	r2, [pc, #188]	; (8003a30 <TIM_Base_SetConfig+0xd0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x20>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a2e      	ldr	r2, [pc, #184]	; (8003a34 <TIM_Base_SetConfig+0xd4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2270      	movs	r2, #112	; 0x70
 8003984:	4393      	bics	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a26      	ldr	r2, [pc, #152]	; (8003a30 <TIM_Base_SetConfig+0xd0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <TIM_Base_SetConfig+0x62>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a25      	ldr	r2, [pc, #148]	; (8003a34 <TIM_Base_SetConfig+0xd4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_Base_SetConfig+0x62>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a24      	ldr	r2, [pc, #144]	; (8003a38 <TIM_Base_SetConfig+0xd8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0x62>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a23      	ldr	r2, [pc, #140]	; (8003a3c <TIM_Base_SetConfig+0xdc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0x62>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <TIM_Base_SetConfig+0xe0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0x62>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <TIM_Base_SetConfig+0xe4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4a20      	ldr	r2, [pc, #128]	; (8003a48 <TIM_Base_SetConfig+0xe8>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2280      	movs	r2, #128	; 0x80
 80039d8:	4393      	bics	r3, r2
 80039da:	001a      	movs	r2, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <TIM_Base_SetConfig+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <TIM_Base_SetConfig+0xba>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <TIM_Base_SetConfig+0xdc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0xba>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a0c      	ldr	r2, [pc, #48]	; (8003a40 <TIM_Base_SetConfig+0xe0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0xba>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <TIM_Base_SetConfig+0xe4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d103      	bne.n	8003a22 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	615a      	str	r2, [r3, #20]
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b004      	add	sp, #16
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40002000 	.word	0x40002000
 8003a3c:	40014000 	.word	0x40014000
 8003a40:	40014400 	.word	0x40014400
 8003a44:	40014800 	.word	0x40014800
 8003a48:	fffffcff 	.word	0xfffffcff

08003a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	001a      	movs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2270      	movs	r2, #112	; 0x70
 8003a7a:	4393      	bics	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2203      	movs	r2, #3
 8003a82:	4393      	bics	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2202      	movs	r2, #2
 8003a94:	4393      	bics	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <TIM_OC1_SetConfig+0xf8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00b      	beq.n	8003ac2 <TIM_OC1_SetConfig+0x76>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a26      	ldr	r2, [pc, #152]	; (8003b48 <TIM_OC1_SetConfig+0xfc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d007      	beq.n	8003ac2 <TIM_OC1_SetConfig+0x76>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a25      	ldr	r2, [pc, #148]	; (8003b4c <TIM_OC1_SetConfig+0x100>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_OC1_SetConfig+0x76>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a24      	ldr	r2, [pc, #144]	; (8003b50 <TIM_OC1_SetConfig+0x104>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10c      	bne.n	8003adc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	4393      	bics	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	4393      	bics	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <TIM_OC1_SetConfig+0xf8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00b      	beq.n	8003afc <TIM_OC1_SetConfig+0xb0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <TIM_OC1_SetConfig+0xfc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d007      	beq.n	8003afc <TIM_OC1_SetConfig+0xb0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a17      	ldr	r2, [pc, #92]	; (8003b4c <TIM_OC1_SetConfig+0x100>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_OC1_SetConfig+0xb0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <TIM_OC1_SetConfig+0x104>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d111      	bne.n	8003b20 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <TIM_OC1_SetConfig+0x108>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <TIM_OC1_SetConfig+0x10c>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b006      	add	sp, #24
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800
 8003b54:	fffffeff 	.word	0xfffffeff
 8003b58:	fffffdff 	.word	0xfffffdff

08003b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	4393      	bics	r3, r2
 8003b6e:	001a      	movs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a2e      	ldr	r2, [pc, #184]	; (8003c44 <TIM_OC2_SetConfig+0xe8>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a2d      	ldr	r2, [pc, #180]	; (8003c48 <TIM_OC2_SetConfig+0xec>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	4393      	bics	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a24      	ldr	r2, [pc, #144]	; (8003c4c <TIM_OC2_SetConfig+0xf0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d10d      	bne.n	8003bda <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2280      	movs	r2, #128	; 0x80
 8003bc2:	4393      	bics	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2240      	movs	r2, #64	; 0x40
 8003bd6:	4393      	bics	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1b      	ldr	r2, [pc, #108]	; (8003c4c <TIM_OC2_SetConfig+0xf0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00b      	beq.n	8003bfa <TIM_OC2_SetConfig+0x9e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1a      	ldr	r2, [pc, #104]	; (8003c50 <TIM_OC2_SetConfig+0xf4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <TIM_OC2_SetConfig+0x9e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <TIM_OC2_SetConfig+0xf8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_OC2_SetConfig+0x9e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <TIM_OC2_SetConfig+0xfc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d113      	bne.n	8003c22 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <TIM_OC2_SetConfig+0x100>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <TIM_OC2_SetConfig+0x104>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b006      	add	sp, #24
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	ffff8fff 	.word	0xffff8fff
 8003c48:	fffffcff 	.word	0xfffffcff
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800
 8003c5c:	fffffbff 	.word	0xfffffbff
 8003c60:	fffff7ff 	.word	0xfffff7ff

08003c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	4a35      	ldr	r2, [pc, #212]	; (8003d48 <TIM_OC3_SetConfig+0xe4>)
 8003c74:	401a      	ands	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2270      	movs	r2, #112	; 0x70
 8003c90:	4393      	bics	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2203      	movs	r2, #3
 8003c98:	4393      	bics	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	4a28      	ldr	r2, [pc, #160]	; (8003d4c <TIM_OC3_SetConfig+0xe8>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a24      	ldr	r2, [pc, #144]	; (8003d50 <TIM_OC3_SetConfig+0xec>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10d      	bne.n	8003cde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <TIM_OC3_SetConfig+0xf0>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <TIM_OC3_SetConfig+0xf4>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <TIM_OC3_SetConfig+0xec>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00b      	beq.n	8003cfe <TIM_OC3_SetConfig+0x9a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <TIM_OC3_SetConfig+0xf8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <TIM_OC3_SetConfig+0x9a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1b      	ldr	r2, [pc, #108]	; (8003d60 <TIM_OC3_SetConfig+0xfc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_OC3_SetConfig+0x9a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <TIM_OC3_SetConfig+0x100>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d113      	bne.n	8003d26 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <TIM_OC3_SetConfig+0x104>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <TIM_OC3_SetConfig+0x108>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	621a      	str	r2, [r3, #32]
}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b006      	add	sp, #24
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	fffffeff 	.word	0xfffffeff
 8003d4c:	fffffdff 	.word	0xfffffdff
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	fffff7ff 	.word	0xfffff7ff
 8003d58:	fffffbff 	.word	0xfffffbff
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40014400 	.word	0x40014400
 8003d64:	40014800 	.word	0x40014800
 8003d68:	ffffefff 	.word	0xffffefff
 8003d6c:	ffffdfff 	.word	0xffffdfff

08003d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a28      	ldr	r2, [pc, #160]	; (8003e20 <TIM_OC4_SetConfig+0xb0>)
 8003d80:	401a      	ands	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <TIM_OC4_SetConfig+0xb4>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <TIM_OC4_SetConfig+0xb8>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <TIM_OC4_SetConfig+0xbc>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	031b      	lsls	r3, r3, #12
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <TIM_OC4_SetConfig+0xc0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00b      	beq.n	8003de8 <TIM_OC4_SetConfig+0x78>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <TIM_OC4_SetConfig+0xc4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <TIM_OC4_SetConfig+0x78>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <TIM_OC4_SetConfig+0xc8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_OC4_SetConfig+0x78>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <TIM_OC4_SetConfig+0xcc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d109      	bne.n	8003dfc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <TIM_OC4_SetConfig+0xd0>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b006      	add	sp, #24
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	ffffefff 	.word	0xffffefff
 8003e24:	ffff8fff 	.word	0xffff8fff
 8003e28:	fffffcff 	.word	0xfffffcff
 8003e2c:	ffffdfff 	.word	0xffffdfff
 8003e30:	40012c00 	.word	0x40012c00
 8003e34:	40014000 	.word	0x40014000
 8003e38:	40014400 	.word	0x40014400
 8003e3c:	40014800 	.word	0x40014800
 8003e40:	ffffbfff 	.word	0xffffbfff

08003e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4393      	bics	r3, r2
 8003e5e:	001a      	movs	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	22f0      	movs	r2, #240	; 0xf0
 8003e6e:	4393      	bics	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	220a      	movs	r2, #10
 8003e80:	4393      	bics	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	621a      	str	r2, [r3, #32]
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b006      	add	sp, #24
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	4393      	bics	r3, r2
 8003eb4:	001a      	movs	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <TIM_TI2_ConfigInputStage+0x60>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	031b      	lsls	r3, r3, #12
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	22a0      	movs	r2, #160	; 0xa0
 8003edc:	4393      	bics	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b006      	add	sp, #24
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	ffff0fff 	.word	0xffff0fff

08003f04 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2270      	movs	r2, #112	; 0x70
 8003f18:	4393      	bics	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	2207      	movs	r2, #7
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	609a      	str	r2, [r3, #8]
}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b004      	add	sp, #16
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <TIM_ETR_SetConfig+0x3c>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b006      	add	sp, #24
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	ffff00ff 	.word	0xffff00ff

08003f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	221f      	movs	r2, #31
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	0013      	movs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	43d2      	mvns	r2, r2
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1a      	ldr	r2, [r3, #32]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	211f      	movs	r1, #31
 8003fa8:	400b      	ands	r3, r1
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4099      	lsls	r1, r3
 8003fae:	000b      	movs	r3, r1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b006      	add	sp, #24
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	223c      	movs	r2, #60	; 0x3c
 8003fce:	5c9b      	ldrb	r3, [r3, r2]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e041      	b.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	223c      	movs	r2, #60	; 0x3c
 8003fdc:	2101      	movs	r1, #1
 8003fde:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	223d      	movs	r2, #61	; 0x3d
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2270      	movs	r2, #112	; 0x70
 8003ffc:	4393      	bics	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a13      	ldr	r2, [pc, #76]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a11      	ldr	r2, [pc, #68]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a10      	ldr	r2, [pc, #64]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10c      	bne.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	4393      	bics	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	4313      	orrs	r3, r2
 8004040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	223d      	movs	r2, #61	; 0x3d
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	223c      	movs	r2, #60	; 0x3c
 8004056:	2100      	movs	r1, #0
 8004058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b004      	add	sp, #16
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40000400 	.word	0x40000400
 800406c:	40014000 	.word	0x40014000

08004070 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	223c      	movs	r2, #60	; 0x3c
 8004082:	5c9b      	ldrb	r3, [r3, r2]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004088:	2302      	movs	r3, #2
 800408a:	e03e      	b.n	800410a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	223c      	movs	r2, #60	; 0x3c
 8004090:	2101      	movs	r1, #1
 8004092:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	22ff      	movs	r2, #255	; 0xff
 8004098:	4393      	bics	r3, r2
 800409a:	001a      	movs	r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80040a8:	401a      	ands	r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a18      	ldr	r2, [pc, #96]	; (8004118 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80040b6:	401a      	ands	r2, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a16      	ldr	r2, [pc, #88]	; (800411c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80040c4:	401a      	ands	r2, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a13      	ldr	r2, [pc, #76]	; (8004120 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80040d2:	401a      	ands	r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a11      	ldr	r2, [pc, #68]	; (8004124 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80040e0:	401a      	ands	r2, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a0e      	ldr	r2, [pc, #56]	; (8004128 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80040ee:	401a      	ands	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	223c      	movs	r2, #60	; 0x3c
 8004104:	2100      	movs	r1, #0
 8004106:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b004      	add	sp, #16
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	fffffcff 	.word	0xfffffcff
 8004118:	fffffbff 	.word	0xfffffbff
 800411c:	fffff7ff 	.word	0xfffff7ff
 8004120:	ffffefff 	.word	0xffffefff
 8004124:	ffffdfff 	.word	0xffffdfff
 8004128:	ffffbfff 	.word	0xffffbfff

0800412c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e044      	b.n	80041c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d107      	bne.n	8004156 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2278      	movs	r2, #120	; 0x78
 800414a:	2100      	movs	r1, #0
 800414c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0018      	movs	r0, r3
 8004152:	f7fe f881 	bl	8002258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2224      	movs	r2, #36	; 0x24
 800415a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2101      	movs	r1, #1
 8004168:	438a      	bics	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	0018      	movs	r0, r3
 8004170:	f000 fb6c 	bl	800484c <UART_SetConfig>
 8004174:	0003      	movs	r3, r0
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e024      	b.n	80041c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	0018      	movs	r0, r3
 800418a:	f000 fccf 	bl	8004b2c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	490d      	ldr	r1, [pc, #52]	; (80041d0 <HAL_UART_Init+0xa4>)
 800419a:	400a      	ands	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2108      	movs	r1, #8
 80041aa:	438a      	bics	r2, r1
 80041ac:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2101      	movs	r1, #1
 80041ba:	430a      	orrs	r2, r1
 80041bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 fd67 	bl	8004c94 <UART_CheckIdleState>
 80041c6:	0003      	movs	r3, r0
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	fffff7ff 	.word	0xfffff7ff

080041d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	1dbb      	adds	r3, r7, #6
 80041e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2280      	movs	r2, #128	; 0x80
 80041e6:	589b      	ldr	r3, [r3, r2]
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d145      	bne.n	8004278 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_UART_Receive_IT+0x26>
 80041f2:	1dbb      	adds	r3, r7, #6
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e03d      	b.n	800427a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	015b      	lsls	r3, r3, #5
 8004206:	429a      	cmp	r2, r3
 8004208:	d109      	bne.n	800421e <HAL_UART_Receive_IT+0x4a>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d105      	bne.n	800421e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2201      	movs	r2, #1
 8004216:	4013      	ands	r3, r2
 8004218:	d001      	beq.n	800421e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e02d      	b.n	800427a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	041b      	lsls	r3, r3, #16
 800422e:	4013      	ands	r3, r2
 8004230:	d019      	beq.n	8004266 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004232:	f3ef 8310 	mrs	r3, PRIMASK
 8004236:	613b      	str	r3, [r7, #16]
  return(result);
 8004238:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	2301      	movs	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f383 8810 	msr	PRIMASK, r3
}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	04c9      	lsls	r1, r1, #19
 8004256:	430a      	orrs	r2, r1
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f383 8810 	msr	PRIMASK, r3
}
 8004264:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004266:	1dbb      	adds	r3, r7, #6
 8004268:	881a      	ldrh	r2, [r3, #0]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	0018      	movs	r0, r3
 8004270:	f000 fe22 	bl	8004eb8 <UART_Start_Receive_IT>
 8004274:	0003      	movs	r3, r0
 8004276:	e000      	b.n	800427a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
  }
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b008      	add	sp, #32
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b0ab      	sub	sp, #172	; 0xac
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	22a4      	movs	r2, #164	; 0xa4
 8004294:	18b9      	adds	r1, r7, r2
 8004296:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	20a0      	movs	r0, #160	; 0xa0
 80042a0:	1839      	adds	r1, r7, r0
 80042a2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	219c      	movs	r1, #156	; 0x9c
 80042ac:	1879      	adds	r1, r7, r1
 80042ae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042b0:	0011      	movs	r1, r2
 80042b2:	18bb      	adds	r3, r7, r2
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a99      	ldr	r2, [pc, #612]	; (800451c <HAL_UART_IRQHandler+0x298>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	2298      	movs	r2, #152	; 0x98
 80042bc:	18bc      	adds	r4, r7, r2
 80042be:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80042c0:	18bb      	adds	r3, r7, r2
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d114      	bne.n	80042f2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042c8:	187b      	adds	r3, r7, r1
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2220      	movs	r2, #32
 80042ce:	4013      	ands	r3, r2
 80042d0:	d00f      	beq.n	80042f2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042d2:	183b      	adds	r3, r7, r0
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2220      	movs	r2, #32
 80042d8:	4013      	ands	r3, r2
 80042da:	d00a      	beq.n	80042f2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d100      	bne.n	80042e6 <HAL_UART_IRQHandler+0x62>
 80042e4:	e286      	b.n	80047f4 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	0010      	movs	r0, r2
 80042ee:	4798      	blx	r3
      }
      return;
 80042f0:	e280      	b.n	80047f4 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042f2:	2398      	movs	r3, #152	; 0x98
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d100      	bne.n	80042fe <HAL_UART_IRQHandler+0x7a>
 80042fc:	e114      	b.n	8004528 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042fe:	239c      	movs	r3, #156	; 0x9c
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	4013      	ands	r3, r2
 8004308:	d106      	bne.n	8004318 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800430a:	23a0      	movs	r3, #160	; 0xa0
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a83      	ldr	r2, [pc, #524]	; (8004520 <HAL_UART_IRQHandler+0x29c>)
 8004312:	4013      	ands	r3, r2
 8004314:	d100      	bne.n	8004318 <HAL_UART_IRQHandler+0x94>
 8004316:	e107      	b.n	8004528 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004318:	23a4      	movs	r3, #164	; 0xa4
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2201      	movs	r2, #1
 8004320:	4013      	ands	r3, r2
 8004322:	d012      	beq.n	800434a <HAL_UART_IRQHandler+0xc6>
 8004324:	23a0      	movs	r3, #160	; 0xa0
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4013      	ands	r3, r2
 8004330:	d00b      	beq.n	800434a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2201      	movs	r2, #1
 8004338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2284      	movs	r2, #132	; 0x84
 800433e:	589b      	ldr	r3, [r3, r2]
 8004340:	2201      	movs	r2, #1
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2184      	movs	r1, #132	; 0x84
 8004348:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800434a:	23a4      	movs	r3, #164	; 0xa4
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2202      	movs	r2, #2
 8004352:	4013      	ands	r3, r2
 8004354:	d011      	beq.n	800437a <HAL_UART_IRQHandler+0xf6>
 8004356:	239c      	movs	r3, #156	; 0x9c
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2201      	movs	r2, #1
 800435e:	4013      	ands	r3, r2
 8004360:	d00b      	beq.n	800437a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2202      	movs	r2, #2
 8004368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2284      	movs	r2, #132	; 0x84
 800436e:	589b      	ldr	r3, [r3, r2]
 8004370:	2204      	movs	r2, #4
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2184      	movs	r1, #132	; 0x84
 8004378:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800437a:	23a4      	movs	r3, #164	; 0xa4
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2204      	movs	r2, #4
 8004382:	4013      	ands	r3, r2
 8004384:	d011      	beq.n	80043aa <HAL_UART_IRQHandler+0x126>
 8004386:	239c      	movs	r3, #156	; 0x9c
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	4013      	ands	r3, r2
 8004390:	d00b      	beq.n	80043aa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2204      	movs	r2, #4
 8004398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2284      	movs	r2, #132	; 0x84
 800439e:	589b      	ldr	r3, [r3, r2]
 80043a0:	2202      	movs	r2, #2
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2184      	movs	r1, #132	; 0x84
 80043a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043aa:	23a4      	movs	r3, #164	; 0xa4
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2208      	movs	r2, #8
 80043b2:	4013      	ands	r3, r2
 80043b4:	d017      	beq.n	80043e6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043b6:	23a0      	movs	r3, #160	; 0xa0
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2220      	movs	r2, #32
 80043be:	4013      	ands	r3, r2
 80043c0:	d105      	bne.n	80043ce <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043c2:	239c      	movs	r3, #156	; 0x9c
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2201      	movs	r2, #1
 80043ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043cc:	d00b      	beq.n	80043e6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2208      	movs	r2, #8
 80043d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2284      	movs	r2, #132	; 0x84
 80043da:	589b      	ldr	r3, [r3, r2]
 80043dc:	2208      	movs	r2, #8
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2184      	movs	r1, #132	; 0x84
 80043e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043e6:	23a4      	movs	r3, #164	; 0xa4
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	4013      	ands	r3, r2
 80043f2:	d013      	beq.n	800441c <HAL_UART_IRQHandler+0x198>
 80043f4:	23a0      	movs	r3, #160	; 0xa0
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	04db      	lsls	r3, r3, #19
 80043fe:	4013      	ands	r3, r2
 8004400:	d00c      	beq.n	800441c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	0112      	lsls	r2, r2, #4
 800440a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2284      	movs	r2, #132	; 0x84
 8004410:	589b      	ldr	r3, [r3, r2]
 8004412:	2220      	movs	r2, #32
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2184      	movs	r1, #132	; 0x84
 800441a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2284      	movs	r2, #132	; 0x84
 8004420:	589b      	ldr	r3, [r3, r2]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d100      	bne.n	8004428 <HAL_UART_IRQHandler+0x1a4>
 8004426:	e1e7      	b.n	80047f8 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004428:	23a4      	movs	r3, #164	; 0xa4
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2220      	movs	r2, #32
 8004430:	4013      	ands	r3, r2
 8004432:	d00e      	beq.n	8004452 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004434:	23a0      	movs	r3, #160	; 0xa0
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2220      	movs	r2, #32
 800443c:	4013      	ands	r3, r2
 800443e:	d008      	beq.n	8004452 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	0010      	movs	r0, r2
 8004450:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2284      	movs	r2, #132	; 0x84
 8004456:	589b      	ldr	r3, [r3, r2]
 8004458:	2194      	movs	r1, #148	; 0x94
 800445a:	187a      	adds	r2, r7, r1
 800445c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2240      	movs	r2, #64	; 0x40
 8004466:	4013      	ands	r3, r2
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d004      	beq.n	8004476 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800446c:	187b      	adds	r3, r7, r1
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2228      	movs	r2, #40	; 0x28
 8004472:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004474:	d047      	beq.n	8004506 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	0018      	movs	r0, r3
 800447a:	f000 fde7 	bl	800504c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2240      	movs	r2, #64	; 0x40
 8004486:	4013      	ands	r3, r2
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d137      	bne.n	80044fc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448c:	f3ef 8310 	mrs	r3, PRIMASK
 8004490:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004494:	2090      	movs	r0, #144	; 0x90
 8004496:	183a      	adds	r2, r7, r0
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	2301      	movs	r3, #1
 800449c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044a0:	f383 8810 	msr	PRIMASK, r3
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2140      	movs	r1, #64	; 0x40
 80044b2:	438a      	bics	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]
 80044b6:	183b      	adds	r3, r7, r0
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044be:	f383 8810 	msr	PRIMASK, r3
}
 80044c2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d012      	beq.n	80044f2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d0:	4a14      	ldr	r2, [pc, #80]	; (8004524 <HAL_UART_IRQHandler+0x2a0>)
 80044d2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d8:	0018      	movs	r0, r3
 80044da:	f7fe f915 	bl	8002708 <HAL_DMA_Abort_IT>
 80044de:	1e03      	subs	r3, r0, #0
 80044e0:	d01a      	beq.n	8004518 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ec:	0018      	movs	r0, r3
 80044ee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f0:	e012      	b.n	8004518 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 f995 	bl	8004824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fa:	e00d      	b.n	8004518 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	0018      	movs	r0, r3
 8004500:	f000 f990 	bl	8004824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	e008      	b.n	8004518 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	0018      	movs	r0, r3
 800450a:	f000 f98b 	bl	8004824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2284      	movs	r2, #132	; 0x84
 8004512:	2100      	movs	r1, #0
 8004514:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004516:	e16f      	b.n	80047f8 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	46c0      	nop			; (mov r8, r8)
    return;
 800451a:	e16d      	b.n	80047f8 <HAL_UART_IRQHandler+0x574>
 800451c:	0000080f 	.word	0x0000080f
 8004520:	04000120 	.word	0x04000120
 8004524:	08005115 	.word	0x08005115

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452c:	2b01      	cmp	r3, #1
 800452e:	d000      	beq.n	8004532 <HAL_UART_IRQHandler+0x2ae>
 8004530:	e139      	b.n	80047a6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004532:	23a4      	movs	r3, #164	; 0xa4
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2210      	movs	r2, #16
 800453a:	4013      	ands	r3, r2
 800453c:	d100      	bne.n	8004540 <HAL_UART_IRQHandler+0x2bc>
 800453e:	e132      	b.n	80047a6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004540:	23a0      	movs	r3, #160	; 0xa0
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2210      	movs	r2, #16
 8004548:	4013      	ands	r3, r2
 800454a:	d100      	bne.n	800454e <HAL_UART_IRQHandler+0x2ca>
 800454c:	e12b      	b.n	80047a6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2210      	movs	r2, #16
 8004554:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2240      	movs	r2, #64	; 0x40
 800455e:	4013      	ands	r3, r2
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d000      	beq.n	8004566 <HAL_UART_IRQHandler+0x2e2>
 8004564:	e09f      	b.n	80046a6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	217e      	movs	r1, #126	; 0x7e
 8004570:	187b      	adds	r3, r7, r1
 8004572:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004574:	187b      	adds	r3, r7, r1
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d100      	bne.n	800457e <HAL_UART_IRQHandler+0x2fa>
 800457c:	e13e      	b.n	80047fc <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2258      	movs	r2, #88	; 0x58
 8004582:	5a9b      	ldrh	r3, [r3, r2]
 8004584:	187a      	adds	r2, r7, r1
 8004586:	8812      	ldrh	r2, [r2, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d300      	bcc.n	800458e <HAL_UART_IRQHandler+0x30a>
 800458c:	e136      	b.n	80047fc <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	187a      	adds	r2, r7, r1
 8004592:	215a      	movs	r1, #90	; 0x5a
 8004594:	8812      	ldrh	r2, [r2, #0]
 8004596:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d06f      	beq.n	8004682 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a2:	f3ef 8310 	mrs	r3, PRIMASK
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80045ac:	2301      	movs	r3, #1
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b2:	f383 8810 	msr	PRIMASK, r3
}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4992      	ldr	r1, [pc, #584]	; (800480c <HAL_UART_IRQHandler+0x588>)
 80045c4:	400a      	ands	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	f383 8810 	msr	PRIMASK, r3
}
 80045d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d4:	f3ef 8310 	mrs	r3, PRIMASK
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80045da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045dc:	677b      	str	r3, [r7, #116]	; 0x74
 80045de:	2301      	movs	r3, #1
 80045e0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e4:	f383 8810 	msr	PRIMASK, r3
}
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2101      	movs	r1, #1
 80045f6:	438a      	bics	r2, r1
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045fc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004600:	f383 8810 	msr	PRIMASK, r3
}
 8004604:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004606:	f3ef 8310 	mrs	r3, PRIMASK
 800460a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800460c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800460e:	673b      	str	r3, [r7, #112]	; 0x70
 8004610:	2301      	movs	r3, #1
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004616:	f383 8810 	msr	PRIMASK, r3
}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2140      	movs	r1, #64	; 0x40
 8004628:	438a      	bics	r2, r1
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800462e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004632:	f383 8810 	msr	PRIMASK, r3
}
 8004636:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	2120      	movs	r1, #32
 800463e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004646:	f3ef 8310 	mrs	r3, PRIMASK
 800464a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800464c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004650:	2301      	movs	r3, #1
 8004652:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004656:	f383 8810 	msr	PRIMASK, r3
}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2110      	movs	r1, #16
 8004668:	438a      	bics	r2, r1
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004672:	f383 8810 	msr	PRIMASK, r3
}
 8004676:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467c:	0018      	movs	r0, r3
 800467e:	f7fe f80b 	bl	8002698 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2258      	movs	r2, #88	; 0x58
 800468c:	5a9a      	ldrh	r2, [r3, r2]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	215a      	movs	r1, #90	; 0x5a
 8004692:	5a5b      	ldrh	r3, [r3, r1]
 8004694:	b29b      	uxth	r3, r3
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0011      	movs	r1, r2
 800469e:	0018      	movs	r0, r3
 80046a0:	f000 f8c8 	bl	8004834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046a4:	e0aa      	b.n	80047fc <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2258      	movs	r2, #88	; 0x58
 80046aa:	5a99      	ldrh	r1, [r3, r2]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	225a      	movs	r2, #90	; 0x5a
 80046b0:	5a9b      	ldrh	r3, [r3, r2]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	208e      	movs	r0, #142	; 0x8e
 80046b6:	183b      	adds	r3, r7, r0
 80046b8:	1a8a      	subs	r2, r1, r2
 80046ba:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	225a      	movs	r2, #90	; 0x5a
 80046c0:	5a9b      	ldrh	r3, [r3, r2]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d100      	bne.n	80046ca <HAL_UART_IRQHandler+0x446>
 80046c8:	e09a      	b.n	8004800 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80046ca:	183b      	adds	r3, r7, r0
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d100      	bne.n	80046d4 <HAL_UART_IRQHandler+0x450>
 80046d2:	e095      	b.n	8004800 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d4:	f3ef 8310 	mrs	r3, PRIMASK
 80046d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80046da:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046dc:	2488      	movs	r4, #136	; 0x88
 80046de:	193a      	adds	r2, r7, r4
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	2301      	movs	r3, #1
 80046e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f383 8810 	msr	PRIMASK, r3
}
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4945      	ldr	r1, [pc, #276]	; (8004810 <HAL_UART_IRQHandler+0x58c>)
 80046fa:	400a      	ands	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	193b      	adds	r3, r7, r4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f383 8810 	msr	PRIMASK, r3
}
 800470a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470c:	f3ef 8310 	mrs	r3, PRIMASK
 8004710:	61bb      	str	r3, [r7, #24]
  return(result);
 8004712:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004714:	2484      	movs	r4, #132	; 0x84
 8004716:	193a      	adds	r2, r7, r4
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	2301      	movs	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f383 8810 	msr	PRIMASK, r3
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	438a      	bics	r2, r1
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	193b      	adds	r3, r7, r4
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	f383 8810 	msr	PRIMASK, r3
}
 8004742:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2280      	movs	r2, #128	; 0x80
 8004748:	2120      	movs	r1, #32
 800474a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004758:	f3ef 8310 	mrs	r3, PRIMASK
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004760:	2480      	movs	r4, #128	; 0x80
 8004762:	193a      	adds	r2, r7, r4
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	2301      	movs	r3, #1
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			; (mov r8, r8)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2110      	movs	r1, #16
 800477e:	438a      	bics	r2, r1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	193b      	adds	r3, r7, r4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	f383 8810 	msr	PRIMASK, r3
}
 800478e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004796:	183b      	adds	r3, r7, r0
 8004798:	881a      	ldrh	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0011      	movs	r1, r2
 800479e:	0018      	movs	r0, r3
 80047a0:	f000 f848 	bl	8004834 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047a4:	e02c      	b.n	8004800 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80047a6:	23a4      	movs	r3, #164	; 0xa4
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2280      	movs	r2, #128	; 0x80
 80047ae:	4013      	ands	r3, r2
 80047b0:	d00f      	beq.n	80047d2 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80047b2:	23a0      	movs	r3, #160	; 0xa0
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2280      	movs	r2, #128	; 0x80
 80047ba:	4013      	ands	r3, r2
 80047bc:	d009      	beq.n	80047d2 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d01e      	beq.n	8004804 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	0010      	movs	r0, r2
 80047ce:	4798      	blx	r3
    }
    return;
 80047d0:	e018      	b.n	8004804 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047d2:	23a4      	movs	r3, #164	; 0xa4
 80047d4:	18fb      	adds	r3, r7, r3
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2240      	movs	r2, #64	; 0x40
 80047da:	4013      	ands	r3, r2
 80047dc:	d013      	beq.n	8004806 <HAL_UART_IRQHandler+0x582>
 80047de:	23a0      	movs	r3, #160	; 0xa0
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2240      	movs	r2, #64	; 0x40
 80047e6:	4013      	ands	r3, r2
 80047e8:	d00d      	beq.n	8004806 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f000 fca8 	bl	8005142 <UART_EndTransmit_IT>
    return;
 80047f2:	e008      	b.n	8004806 <HAL_UART_IRQHandler+0x582>
      return;
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	e006      	b.n	8004806 <HAL_UART_IRQHandler+0x582>
    return;
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	e004      	b.n	8004806 <HAL_UART_IRQHandler+0x582>
      return;
 80047fc:	46c0      	nop			; (mov r8, r8)
 80047fe:	e002      	b.n	8004806 <HAL_UART_IRQHandler+0x582>
      return;
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	e000      	b.n	8004806 <HAL_UART_IRQHandler+0x582>
    return;
 8004804:	46c0      	nop			; (mov r8, r8)
  }

}
 8004806:	46bd      	mov	sp, r7
 8004808:	b02b      	add	sp, #172	; 0xac
 800480a:	bd90      	pop	{r4, r7, pc}
 800480c:	fffffeff 	.word	0xfffffeff
 8004810:	fffffedf 	.word	0xfffffedf

08004814 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800481c:	46c0      	nop			; (mov r8, r8)
 800481e:	46bd      	mov	sp, r7
 8004820:	b002      	add	sp, #8
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b002      	add	sp, #8
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	000a      	movs	r2, r1
 800483e:	1cbb      	adds	r3, r7, #2
 8004840:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b002      	add	sp, #8
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004854:	231e      	movs	r3, #30
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4aa1      	ldr	r2, [pc, #644]	; (8004b00 <UART_SetConfig+0x2b4>)
 800487c:	4013      	ands	r3, r2
 800487e:	0019      	movs	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	430a      	orrs	r2, r1
 8004888:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a9c      	ldr	r2, [pc, #624]	; (8004b04 <UART_SetConfig+0x2b8>)
 8004892:	4013      	ands	r3, r2
 8004894:	0019      	movs	r1, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a93      	ldr	r2, [pc, #588]	; (8004b08 <UART_SetConfig+0x2bc>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	0019      	movs	r1, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a8f      	ldr	r2, [pc, #572]	; (8004b0c <UART_SetConfig+0x2c0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d127      	bne.n	8004922 <UART_SetConfig+0xd6>
 80048d2:	4b8f      	ldr	r3, [pc, #572]	; (8004b10 <UART_SetConfig+0x2c4>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	2203      	movs	r2, #3
 80048d8:	4013      	ands	r3, r2
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d00d      	beq.n	80048fa <UART_SetConfig+0xae>
 80048de:	d81b      	bhi.n	8004918 <UART_SetConfig+0xcc>
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d014      	beq.n	800490e <UART_SetConfig+0xc2>
 80048e4:	d818      	bhi.n	8004918 <UART_SetConfig+0xcc>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <UART_SetConfig+0xa4>
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d00a      	beq.n	8004904 <UART_SetConfig+0xb8>
 80048ee:	e013      	b.n	8004918 <UART_SetConfig+0xcc>
 80048f0:	231f      	movs	r3, #31
 80048f2:	18fb      	adds	r3, r7, r3
 80048f4:	2200      	movs	r2, #0
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e049      	b.n	800498e <UART_SetConfig+0x142>
 80048fa:	231f      	movs	r3, #31
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	2202      	movs	r2, #2
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e044      	b.n	800498e <UART_SetConfig+0x142>
 8004904:	231f      	movs	r3, #31
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	2204      	movs	r2, #4
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	e03f      	b.n	800498e <UART_SetConfig+0x142>
 800490e:	231f      	movs	r3, #31
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	2208      	movs	r2, #8
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e03a      	b.n	800498e <UART_SetConfig+0x142>
 8004918:	231f      	movs	r3, #31
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	2210      	movs	r2, #16
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	e035      	b.n	800498e <UART_SetConfig+0x142>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7b      	ldr	r2, [pc, #492]	; (8004b14 <UART_SetConfig+0x2c8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d104      	bne.n	8004936 <UART_SetConfig+0xea>
 800492c:	231f      	movs	r3, #31
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	e02b      	b.n	800498e <UART_SetConfig+0x142>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a77      	ldr	r2, [pc, #476]	; (8004b18 <UART_SetConfig+0x2cc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d104      	bne.n	800494a <UART_SetConfig+0xfe>
 8004940:	231f      	movs	r3, #31
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e021      	b.n	800498e <UART_SetConfig+0x142>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a73      	ldr	r2, [pc, #460]	; (8004b1c <UART_SetConfig+0x2d0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d104      	bne.n	800495e <UART_SetConfig+0x112>
 8004954:	231f      	movs	r3, #31
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e017      	b.n	800498e <UART_SetConfig+0x142>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a6f      	ldr	r2, [pc, #444]	; (8004b20 <UART_SetConfig+0x2d4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d104      	bne.n	8004972 <UART_SetConfig+0x126>
 8004968:	231f      	movs	r3, #31
 800496a:	18fb      	adds	r3, r7, r3
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	e00d      	b.n	800498e <UART_SetConfig+0x142>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a6b      	ldr	r2, [pc, #428]	; (8004b24 <UART_SetConfig+0x2d8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d104      	bne.n	8004986 <UART_SetConfig+0x13a>
 800497c:	231f      	movs	r3, #31
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
 8004984:	e003      	b.n	800498e <UART_SetConfig+0x142>
 8004986:	231f      	movs	r3, #31
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	2210      	movs	r2, #16
 800498c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69da      	ldr	r2, [r3, #28]
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	429a      	cmp	r2, r3
 8004998:	d15c      	bne.n	8004a54 <UART_SetConfig+0x208>
  {
    switch (clocksource)
 800499a:	231f      	movs	r3, #31
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d015      	beq.n	80049d0 <UART_SetConfig+0x184>
 80049a4:	dc18      	bgt.n	80049d8 <UART_SetConfig+0x18c>
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d00d      	beq.n	80049c6 <UART_SetConfig+0x17a>
 80049aa:	dc15      	bgt.n	80049d8 <UART_SetConfig+0x18c>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <UART_SetConfig+0x16a>
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d005      	beq.n	80049c0 <UART_SetConfig+0x174>
 80049b4:	e010      	b.n	80049d8 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b6:	f7fe fcc9 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 80049ba:	0003      	movs	r3, r0
 80049bc:	61bb      	str	r3, [r7, #24]
        break;
 80049be:	e012      	b.n	80049e6 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c0:	4b59      	ldr	r3, [pc, #356]	; (8004b28 <UART_SetConfig+0x2dc>)
 80049c2:	61bb      	str	r3, [r7, #24]
        break;
 80049c4:	e00f      	b.n	80049e6 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049c6:	f7fe fc5f 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 80049ca:	0003      	movs	r3, r0
 80049cc:	61bb      	str	r3, [r7, #24]
        break;
 80049ce:	e00a      	b.n	80049e6 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	61bb      	str	r3, [r7, #24]
        break;
 80049d6:	e006      	b.n	80049e6 <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049dc:	231e      	movs	r3, #30
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
        break;
 80049e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d100      	bne.n	80049ee <UART_SetConfig+0x1a2>
 80049ec:	e07a      	b.n	8004ae4 <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	005a      	lsls	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	18d2      	adds	r2, r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	0019      	movs	r1, r3
 8004a00:	0010      	movs	r0, r2
 8004a02:	f7fb fb7f 	bl	8000104 <__udivsi3>
 8004a06:	0003      	movs	r3, r0
 8004a08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b0f      	cmp	r3, #15
 8004a0e:	d91c      	bls.n	8004a4a <UART_SetConfig+0x1fe>
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	025b      	lsls	r3, r3, #9
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d217      	bcs.n	8004a4a <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	200e      	movs	r0, #14
 8004a20:	183b      	adds	r3, r7, r0
 8004a22:	210f      	movs	r1, #15
 8004a24:	438a      	bics	r2, r1
 8004a26:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2207      	movs	r2, #7
 8004a30:	4013      	ands	r3, r2
 8004a32:	b299      	uxth	r1, r3
 8004a34:	183b      	adds	r3, r7, r0
 8004a36:	183a      	adds	r2, r7, r0
 8004a38:	8812      	ldrh	r2, [r2, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	183a      	adds	r2, r7, r0
 8004a44:	8812      	ldrh	r2, [r2, #0]
 8004a46:	60da      	str	r2, [r3, #12]
 8004a48:	e04c      	b.n	8004ae4 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8004a4a:	231e      	movs	r3, #30
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	e047      	b.n	8004ae4 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a54:	231f      	movs	r3, #31
 8004a56:	18fb      	adds	r3, r7, r3
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d015      	beq.n	8004a8a <UART_SetConfig+0x23e>
 8004a5e:	dc18      	bgt.n	8004a92 <UART_SetConfig+0x246>
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d00d      	beq.n	8004a80 <UART_SetConfig+0x234>
 8004a64:	dc15      	bgt.n	8004a92 <UART_SetConfig+0x246>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <UART_SetConfig+0x224>
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d005      	beq.n	8004a7a <UART_SetConfig+0x22e>
 8004a6e:	e010      	b.n	8004a92 <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a70:	f7fe fc6c 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8004a74:	0003      	movs	r3, r0
 8004a76:	61bb      	str	r3, [r7, #24]
        break;
 8004a78:	e012      	b.n	8004aa0 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a7a:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <UART_SetConfig+0x2dc>)
 8004a7c:	61bb      	str	r3, [r7, #24]
        break;
 8004a7e:	e00f      	b.n	8004aa0 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a80:	f7fe fc02 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8004a84:	0003      	movs	r3, r0
 8004a86:	61bb      	str	r3, [r7, #24]
        break;
 8004a88:	e00a      	b.n	8004aa0 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8a:	2380      	movs	r3, #128	; 0x80
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	61bb      	str	r3, [r7, #24]
        break;
 8004a90:	e006      	b.n	8004aa0 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a96:	231e      	movs	r3, #30
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
        break;
 8004a9e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01e      	beq.n	8004ae4 <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	085a      	lsrs	r2, r3, #1
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	18d2      	adds	r2, r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	0010      	movs	r0, r2
 8004ab8:	f7fb fb24 	bl	8000104 <__udivsi3>
 8004abc:	0003      	movs	r3, r0
 8004abe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b0f      	cmp	r3, #15
 8004ac4:	d90a      	bls.n	8004adc <UART_SetConfig+0x290>
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	2380      	movs	r3, #128	; 0x80
 8004aca:	025b      	lsls	r3, r3, #9
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d205      	bcs.n	8004adc <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60da      	str	r2, [r3, #12]
 8004ada:	e003      	b.n	8004ae4 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8004adc:	231e      	movs	r3, #30
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004af0:	231e      	movs	r3, #30
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	781b      	ldrb	r3, [r3, #0]
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b008      	add	sp, #32
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	efff69f3 	.word	0xefff69f3
 8004b04:	ffffcfff 	.word	0xffffcfff
 8004b08:	fffff4ff 	.word	0xfffff4ff
 8004b0c:	40013800 	.word	0x40013800
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40004400 	.word	0x40004400
 8004b18:	40004800 	.word	0x40004800
 8004b1c:	40004c00 	.word	0x40004c00
 8004b20:	40005000 	.word	0x40005000
 8004b24:	40011400 	.word	0x40011400
 8004b28:	007a1200 	.word	0x007a1200

08004b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	2201      	movs	r2, #1
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d00b      	beq.n	8004b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	4a4a      	ldr	r2, [pc, #296]	; (8004c70 <UART_AdvFeatureConfig+0x144>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	0019      	movs	r1, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	4a43      	ldr	r2, [pc, #268]	; (8004c74 <UART_AdvFeatureConfig+0x148>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	4013      	ands	r3, r2
 8004b80:	d00b      	beq.n	8004b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4a3b      	ldr	r2, [pc, #236]	; (8004c78 <UART_AdvFeatureConfig+0x14c>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d00b      	beq.n	8004bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4a34      	ldr	r2, [pc, #208]	; (8004c7c <UART_AdvFeatureConfig+0x150>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	0019      	movs	r1, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d00b      	beq.n	8004bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4a2c      	ldr	r2, [pc, #176]	; (8004c80 <UART_AdvFeatureConfig+0x154>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2220      	movs	r2, #32
 8004be4:	4013      	ands	r3, r2
 8004be6:	d00b      	beq.n	8004c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	4a25      	ldr	r2, [pc, #148]	; (8004c84 <UART_AdvFeatureConfig+0x158>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	0019      	movs	r1, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	2240      	movs	r2, #64	; 0x40
 8004c06:	4013      	ands	r3, r2
 8004c08:	d01d      	beq.n	8004c46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <UART_AdvFeatureConfig+0x15c>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	0019      	movs	r1, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	035b      	lsls	r3, r3, #13
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d10b      	bne.n	8004c46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <UART_AdvFeatureConfig+0x160>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	0019      	movs	r1, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2280      	movs	r2, #128	; 0x80
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d00b      	beq.n	8004c68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <UART_AdvFeatureConfig+0x164>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }
}
 8004c68:	46c0      	nop			; (mov r8, r8)
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b002      	add	sp, #8
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	fffdffff 	.word	0xfffdffff
 8004c74:	fffeffff 	.word	0xfffeffff
 8004c78:	fffbffff 	.word	0xfffbffff
 8004c7c:	ffff7fff 	.word	0xffff7fff
 8004c80:	ffffefff 	.word	0xffffefff
 8004c84:	ffffdfff 	.word	0xffffdfff
 8004c88:	ffefffff 	.word	0xffefffff
 8004c8c:	ff9fffff 	.word	0xff9fffff
 8004c90:	fff7ffff 	.word	0xfff7ffff

08004c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b092      	sub	sp, #72	; 0x48
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2284      	movs	r2, #132	; 0x84
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ca4:	f7fd fc06 	bl	80024b4 <HAL_GetTick>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d12c      	bne.n	8004d14 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbc:	2280      	movs	r2, #128	; 0x80
 8004cbe:	0391      	lsls	r1, r2, #14
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4a46      	ldr	r2, [pc, #280]	; (8004ddc <UART_CheckIdleState+0x148>)
 8004cc4:	9200      	str	r2, [sp, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f000 f88c 	bl	8004de4 <UART_WaitOnFlagUntilTimeout>
 8004ccc:	1e03      	subs	r3, r0, #0
 8004cce:	d021      	beq.n	8004d14 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cda:	2301      	movs	r3, #1
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	f383 8810 	msr	PRIMASK, r3
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2180      	movs	r1, #128	; 0x80
 8004cf2:	438a      	bics	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	f383 8810 	msr	PRIMASK, r3
}
 8004d00:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2278      	movs	r2, #120	; 0x78
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e05f      	b.n	8004dd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d146      	bne.n	8004db0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d24:	2280      	movs	r2, #128	; 0x80
 8004d26:	03d1      	lsls	r1, r2, #15
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4a2c      	ldr	r2, [pc, #176]	; (8004ddc <UART_CheckIdleState+0x148>)
 8004d2c:	9200      	str	r2, [sp, #0]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f000 f858 	bl	8004de4 <UART_WaitOnFlagUntilTimeout>
 8004d34:	1e03      	subs	r3, r0, #0
 8004d36:	d03b      	beq.n	8004db0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d38:	f3ef 8310 	mrs	r3, PRIMASK
 8004d3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
 8004d42:	2301      	movs	r3, #1
 8004d44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f383 8810 	msr	PRIMASK, r3
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4921      	ldr	r1, [pc, #132]	; (8004de0 <UART_CheckIdleState+0x14c>)
 8004d5a:	400a      	ands	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f383 8810 	msr	PRIMASK, r3
}
 8004d68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d70:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d72:	633b      	str	r3, [r7, #48]	; 0x30
 8004d74:	2301      	movs	r3, #1
 8004d76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f383 8810 	msr	PRIMASK, r3
}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	438a      	bics	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	f383 8810 	msr	PRIMASK, r3
}
 8004d9a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2280      	movs	r2, #128	; 0x80
 8004da0:	2120      	movs	r1, #32
 8004da2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2278      	movs	r2, #120	; 0x78
 8004da8:	2100      	movs	r1, #0
 8004daa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e011      	b.n	8004dd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2280      	movs	r2, #128	; 0x80
 8004dba:	2120      	movs	r1, #32
 8004dbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2278      	movs	r2, #120	; 0x78
 8004dce:	2100      	movs	r1, #0
 8004dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b010      	add	sp, #64	; 0x40
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	01ffffff 	.word	0x01ffffff
 8004de0:	fffffedf 	.word	0xfffffedf

08004de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	1dfb      	adds	r3, r7, #7
 8004df2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df4:	e04b      	b.n	8004e8e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	d048      	beq.n	8004e8e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfc:	f7fd fb5a 	bl	80024b4 <HAL_GetTick>
 8004e00:	0002      	movs	r2, r0
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e04b      	b.n	8004eae <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d035      	beq.n	8004e8e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d111      	bne.n	8004e54 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2208      	movs	r2, #8
 8004e36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f000 f906 	bl	800504c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2284      	movs	r2, #132	; 0x84
 8004e44:	2108      	movs	r1, #8
 8004e46:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2278      	movs	r2, #120	; 0x78
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e02c      	b.n	8004eae <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	2380      	movs	r3, #128	; 0x80
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	401a      	ands	r2, r3
 8004e60:	2380      	movs	r3, #128	; 0x80
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d112      	bne.n	8004e8e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2280      	movs	r2, #128	; 0x80
 8004e6e:	0112      	lsls	r2, r2, #4
 8004e70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	0018      	movs	r0, r3
 8004e76:	f000 f8e9 	bl	800504c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2284      	movs	r2, #132	; 0x84
 8004e7e:	2120      	movs	r1, #32
 8004e80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2278      	movs	r2, #120	; 0x78
 8004e86:	2100      	movs	r1, #0
 8004e88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e00f      	b.n	8004eae <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	4013      	ands	r3, r2
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	425a      	negs	r2, r3
 8004e9e:	4153      	adcs	r3, r2
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	1dfb      	adds	r3, r7, #7
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d0a4      	beq.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b004      	add	sp, #16
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b090      	sub	sp, #64	; 0x40
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	1dbb      	adds	r3, r7, #6
 8004ec4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1dba      	adds	r2, r7, #6
 8004ed0:	2158      	movs	r1, #88	; 0x58
 8004ed2:	8812      	ldrh	r2, [r2, #0]
 8004ed4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1dba      	adds	r2, r7, #6
 8004eda:	215a      	movs	r1, #90	; 0x5a
 8004edc:	8812      	ldrh	r2, [r2, #0]
 8004ede:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	015b      	lsls	r3, r3, #5
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d10d      	bne.n	8004f0e <UART_Start_Receive_IT+0x56>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d104      	bne.n	8004f04 <UART_Start_Receive_IT+0x4c>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	225c      	movs	r2, #92	; 0x5c
 8004efe:	4950      	ldr	r1, [pc, #320]	; (8005040 <UART_Start_Receive_IT+0x188>)
 8004f00:	5299      	strh	r1, [r3, r2]
 8004f02:	e02e      	b.n	8004f62 <UART_Start_Receive_IT+0xaa>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	225c      	movs	r2, #92	; 0x5c
 8004f08:	21ff      	movs	r1, #255	; 0xff
 8004f0a:	5299      	strh	r1, [r3, r2]
 8004f0c:	e029      	b.n	8004f62 <UART_Start_Receive_IT+0xaa>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10d      	bne.n	8004f32 <UART_Start_Receive_IT+0x7a>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d104      	bne.n	8004f28 <UART_Start_Receive_IT+0x70>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	225c      	movs	r2, #92	; 0x5c
 8004f22:	21ff      	movs	r1, #255	; 0xff
 8004f24:	5299      	strh	r1, [r3, r2]
 8004f26:	e01c      	b.n	8004f62 <UART_Start_Receive_IT+0xaa>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	225c      	movs	r2, #92	; 0x5c
 8004f2c:	217f      	movs	r1, #127	; 0x7f
 8004f2e:	5299      	strh	r1, [r3, r2]
 8004f30:	e017      	b.n	8004f62 <UART_Start_Receive_IT+0xaa>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	2380      	movs	r3, #128	; 0x80
 8004f38:	055b      	lsls	r3, r3, #21
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d10d      	bne.n	8004f5a <UART_Start_Receive_IT+0xa2>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d104      	bne.n	8004f50 <UART_Start_Receive_IT+0x98>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	225c      	movs	r2, #92	; 0x5c
 8004f4a:	217f      	movs	r1, #127	; 0x7f
 8004f4c:	5299      	strh	r1, [r3, r2]
 8004f4e:	e008      	b.n	8004f62 <UART_Start_Receive_IT+0xaa>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	225c      	movs	r2, #92	; 0x5c
 8004f54:	213f      	movs	r1, #63	; 0x3f
 8004f56:	5299      	strh	r1, [r3, r2]
 8004f58:	e003      	b.n	8004f62 <UART_Start_Receive_IT+0xaa>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	225c      	movs	r2, #92	; 0x5c
 8004f5e:	2100      	movs	r1, #0
 8004f60:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2284      	movs	r2, #132	; 0x84
 8004f66:	2100      	movs	r1, #0
 8004f68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2280      	movs	r2, #128	; 0x80
 8004f6e:	2122      	movs	r1, #34	; 0x22
 8004f70:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f72:	f3ef 8310 	mrs	r3, PRIMASK
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	f383 8810 	msr	PRIMASK, r3
}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2101      	movs	r1, #1
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	f383 8810 	msr	PRIMASK, r3
}
 8004fa2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	015b      	lsls	r3, r3, #5
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d107      	bne.n	8004fc0 <UART_Start_Receive_IT+0x108>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d103      	bne.n	8004fc0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a22      	ldr	r2, [pc, #136]	; (8005044 <UART_Start_Receive_IT+0x18c>)
 8004fbc:	669a      	str	r2, [r3, #104]	; 0x68
 8004fbe:	e002      	b.n	8004fc6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4a21      	ldr	r2, [pc, #132]	; (8005048 <UART_Start_Receive_IT+0x190>)
 8004fc4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d019      	beq.n	8005002 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fce:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd2:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fd4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd8:	2301      	movs	r3, #1
 8004fda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	f383 8810 	msr	PRIMASK, r3
}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2190      	movs	r1, #144	; 0x90
 8004ff0:	0049      	lsls	r1, r1, #1
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	e018      	b.n	8005034 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005002:	f3ef 8310 	mrs	r3, PRIMASK
 8005006:	613b      	str	r3, [r7, #16]
  return(result);
 8005008:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800500a:	63bb      	str	r3, [r7, #56]	; 0x38
 800500c:	2301      	movs	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f383 8810 	msr	PRIMASK, r3
}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2120      	movs	r1, #32
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f383 8810 	msr	PRIMASK, r3
}
 8005032:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b010      	add	sp, #64	; 0x40
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	000001ff 	.word	0x000001ff
 8005044:	08005351 	.word	0x08005351
 8005048:	08005199 	.word	0x08005199

0800504c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08e      	sub	sp, #56	; 0x38
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005054:	f3ef 8310 	mrs	r3, PRIMASK
 8005058:	617b      	str	r3, [r7, #20]
  return(result);
 800505a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
 800505e:	2301      	movs	r3, #1
 8005060:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	f383 8810 	msr	PRIMASK, r3
}
 8005068:	46c0      	nop			; (mov r8, r8)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4926      	ldr	r1, [pc, #152]	; (8005110 <UART_EndRxTransfer+0xc4>)
 8005076:	400a      	ands	r2, r1
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	f383 8810 	msr	PRIMASK, r3
}
 8005084:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005086:	f3ef 8310 	mrs	r3, PRIMASK
 800508a:	623b      	str	r3, [r7, #32]
  return(result);
 800508c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	633b      	str	r3, [r7, #48]	; 0x30
 8005090:	2301      	movs	r3, #1
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	f383 8810 	msr	PRIMASK, r3
}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2101      	movs	r1, #1
 80050a8:	438a      	bics	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	f383 8810 	msr	PRIMASK, r3
}
 80050b6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d118      	bne.n	80050f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c0:	f3ef 8310 	mrs	r3, PRIMASK
 80050c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80050c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ca:	2301      	movs	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f383 8810 	msr	PRIMASK, r3
}
 80050d4:	46c0      	nop			; (mov r8, r8)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2110      	movs	r1, #16
 80050e2:	438a      	bics	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f383 8810 	msr	PRIMASK, r3
}
 80050f0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2280      	movs	r2, #128	; 0x80
 80050f6:	2120      	movs	r1, #32
 80050f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	46bd      	mov	sp, r7
 800510a:	b00e      	add	sp, #56	; 0x38
 800510c:	bd80      	pop	{r7, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	fffffedf 	.word	0xfffffedf

08005114 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	225a      	movs	r2, #90	; 0x5a
 8005126:	2100      	movs	r1, #0
 8005128:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2252      	movs	r2, #82	; 0x52
 800512e:	2100      	movs	r1, #0
 8005130:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	0018      	movs	r0, r3
 8005136:	f7ff fb75 	bl	8004824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	46bd      	mov	sp, r7
 800513e:	b004      	add	sp, #16
 8005140:	bd80      	pop	{r7, pc}

08005142 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b086      	sub	sp, #24
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514a:	f3ef 8310 	mrs	r3, PRIMASK
 800514e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005150:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	2301      	movs	r3, #1
 8005156:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f383 8810 	msr	PRIMASK, r3
}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2140      	movs	r1, #64	; 0x40
 800516c:	438a      	bics	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	0018      	movs	r0, r3
 800518c:	f7ff fb42 	bl	8004814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005190:	46c0      	nop			; (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	b006      	add	sp, #24
 8005196:	bd80      	pop	{r7, pc}

08005198 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b094      	sub	sp, #80	; 0x50
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051a0:	204e      	movs	r0, #78	; 0x4e
 80051a2:	183b      	adds	r3, r7, r0
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	215c      	movs	r1, #92	; 0x5c
 80051a8:	5a52      	ldrh	r2, [r2, r1]
 80051aa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2280      	movs	r2, #128	; 0x80
 80051b0:	589b      	ldr	r3, [r3, r2]
 80051b2:	2b22      	cmp	r3, #34	; 0x22
 80051b4:	d000      	beq.n	80051b8 <UART_RxISR_8BIT+0x20>
 80051b6:	e0ba      	b.n	800532e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	214c      	movs	r1, #76	; 0x4c
 80051be:	187b      	adds	r3, r7, r1
 80051c0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80051c2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051c4:	187b      	adds	r3, r7, r1
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	183b      	adds	r3, r7, r0
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b2d9      	uxtb	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d4:	400a      	ands	r2, r1
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	225a      	movs	r2, #90	; 0x5a
 80051e8:	5a9b      	ldrh	r3, [r3, r2]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b299      	uxth	r1, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	225a      	movs	r2, #90	; 0x5a
 80051f4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	225a      	movs	r2, #90	; 0x5a
 80051fa:	5a9b      	ldrh	r3, [r3, r2]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d000      	beq.n	8005204 <UART_RxISR_8BIT+0x6c>
 8005202:	e09c      	b.n	800533e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005204:	f3ef 8310 	mrs	r3, PRIMASK
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520c:	64bb      	str	r3, [r7, #72]	; 0x48
 800520e:	2301      	movs	r3, #1
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	f383 8810 	msr	PRIMASK, r3
}
 8005218:	46c0      	nop			; (mov r8, r8)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4948      	ldr	r1, [pc, #288]	; (8005348 <UART_RxISR_8BIT+0x1b0>)
 8005226:	400a      	ands	r2, r1
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	f383 8810 	msr	PRIMASK, r3
}
 8005234:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005236:	f3ef 8310 	mrs	r3, PRIMASK
 800523a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	647b      	str	r3, [r7, #68]	; 0x44
 8005240:	2301      	movs	r3, #1
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005246:	f383 8810 	msr	PRIMASK, r3
}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2101      	movs	r1, #1
 8005258:	438a      	bics	r2, r1
 800525a:	609a      	str	r2, [r3, #8]
 800525c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	f383 8810 	msr	PRIMASK, r3
}
 8005266:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2280      	movs	r2, #128	; 0x80
 800526c:	2120      	movs	r1, #32
 800526e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	041b      	lsls	r3, r3, #16
 8005286:	4013      	ands	r3, r2
 8005288:	d018      	beq.n	80052bc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528a:	f3ef 8310 	mrs	r3, PRIMASK
 800528e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005290:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005292:	643b      	str	r3, [r7, #64]	; 0x40
 8005294:	2301      	movs	r3, #1
 8005296:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f383 8810 	msr	PRIMASK, r3
}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4928      	ldr	r1, [pc, #160]	; (800534c <UART_RxISR_8BIT+0x1b4>)
 80052ac:	400a      	ands	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	f383 8810 	msr	PRIMASK, r3
}
 80052ba:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d12f      	bne.n	8005324 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ca:	f3ef 8310 	mrs	r3, PRIMASK
 80052ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80052d0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d4:	2301      	movs	r3, #1
 80052d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f383 8810 	msr	PRIMASK, r3
}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2110      	movs	r1, #16
 80052ec:	438a      	bics	r2, r1
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f383 8810 	msr	PRIMASK, r3
}
 80052fa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	2210      	movs	r2, #16
 8005304:	4013      	ands	r3, r2
 8005306:	2b10      	cmp	r3, #16
 8005308:	d103      	bne.n	8005312 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2210      	movs	r2, #16
 8005310:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2258      	movs	r2, #88	; 0x58
 8005316:	5a9a      	ldrh	r2, [r3, r2]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	0011      	movs	r1, r2
 800531c:	0018      	movs	r0, r3
 800531e:	f7ff fa89 	bl	8004834 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005322:	e00c      	b.n	800533e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	0018      	movs	r0, r3
 8005328:	f7fc feaa 	bl	8002080 <HAL_UART_RxCpltCallback>
}
 800532c:	e007      	b.n	800533e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2108      	movs	r1, #8
 800533a:	430a      	orrs	r2, r1
 800533c:	619a      	str	r2, [r3, #24]
}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	46bd      	mov	sp, r7
 8005342:	b014      	add	sp, #80	; 0x50
 8005344:	bd80      	pop	{r7, pc}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	fffffedf 	.word	0xfffffedf
 800534c:	fbffffff 	.word	0xfbffffff

08005350 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b094      	sub	sp, #80	; 0x50
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005358:	204e      	movs	r0, #78	; 0x4e
 800535a:	183b      	adds	r3, r7, r0
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	215c      	movs	r1, #92	; 0x5c
 8005360:	5a52      	ldrh	r2, [r2, r1]
 8005362:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2280      	movs	r2, #128	; 0x80
 8005368:	589b      	ldr	r3, [r3, r2]
 800536a:	2b22      	cmp	r3, #34	; 0x22
 800536c:	d000      	beq.n	8005370 <UART_RxISR_16BIT+0x20>
 800536e:	e0ba      	b.n	80054e6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	214c      	movs	r1, #76	; 0x4c
 8005376:	187b      	adds	r3, r7, r1
 8005378:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800537a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005382:	187b      	adds	r3, r7, r1
 8005384:	183a      	adds	r2, r7, r0
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	8812      	ldrh	r2, [r2, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	b29a      	uxth	r2, r3
 800538e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005390:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	1c9a      	adds	r2, r3, #2
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	225a      	movs	r2, #90	; 0x5a
 80053a0:	5a9b      	ldrh	r3, [r3, r2]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b299      	uxth	r1, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	225a      	movs	r2, #90	; 0x5a
 80053ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	225a      	movs	r2, #90	; 0x5a
 80053b2:	5a9b      	ldrh	r3, [r3, r2]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d000      	beq.n	80053bc <UART_RxISR_16BIT+0x6c>
 80053ba:	e09c      	b.n	80054f6 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053bc:	f3ef 8310 	mrs	r3, PRIMASK
 80053c0:	623b      	str	r3, [r7, #32]
  return(result);
 80053c2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c4:	647b      	str	r3, [r7, #68]	; 0x44
 80053c6:	2301      	movs	r3, #1
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	f383 8810 	msr	PRIMASK, r3
}
 80053d0:	46c0      	nop			; (mov r8, r8)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4948      	ldr	r1, [pc, #288]	; (8005500 <UART_RxISR_16BIT+0x1b0>)
 80053de:	400a      	ands	r2, r1
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	f383 8810 	msr	PRIMASK, r3
}
 80053ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ee:	f3ef 8310 	mrs	r3, PRIMASK
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80053f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f6:	643b      	str	r3, [r7, #64]	; 0x40
 80053f8:	2301      	movs	r3, #1
 80053fa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	f383 8810 	msr	PRIMASK, r3
}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2101      	movs	r1, #1
 8005410:	438a      	bics	r2, r1
 8005412:	609a      	str	r2, [r3, #8]
 8005414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541a:	f383 8810 	msr	PRIMASK, r3
}
 800541e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2280      	movs	r2, #128	; 0x80
 8005424:	2120      	movs	r1, #32
 8005426:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	041b      	lsls	r3, r3, #16
 800543e:	4013      	ands	r3, r2
 8005440:	d018      	beq.n	8005474 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005442:	f3ef 8310 	mrs	r3, PRIMASK
 8005446:	617b      	str	r3, [r7, #20]
  return(result);
 8005448:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800544a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800544c:	2301      	movs	r3, #1
 800544e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f383 8810 	msr	PRIMASK, r3
}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4928      	ldr	r1, [pc, #160]	; (8005504 <UART_RxISR_16BIT+0x1b4>)
 8005464:	400a      	ands	r2, r1
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f383 8810 	msr	PRIMASK, r3
}
 8005472:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005478:	2b01      	cmp	r3, #1
 800547a:	d12f      	bne.n	80054dc <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005482:	f3ef 8310 	mrs	r3, PRIMASK
 8005486:	60bb      	str	r3, [r7, #8]
  return(result);
 8005488:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548a:	63bb      	str	r3, [r7, #56]	; 0x38
 800548c:	2301      	movs	r3, #1
 800548e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f383 8810 	msr	PRIMASK, r3
}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2110      	movs	r1, #16
 80054a4:	438a      	bics	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f383 8810 	msr	PRIMASK, r3
}
 80054b2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	2210      	movs	r2, #16
 80054bc:	4013      	ands	r3, r2
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d103      	bne.n	80054ca <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2210      	movs	r2, #16
 80054c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2258      	movs	r2, #88	; 0x58
 80054ce:	5a9a      	ldrh	r2, [r3, r2]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	0011      	movs	r1, r2
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7ff f9ad 	bl	8004834 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054da:	e00c      	b.n	80054f6 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	0018      	movs	r0, r3
 80054e0:	f7fc fdce 	bl	8002080 <HAL_UART_RxCpltCallback>
}
 80054e4:	e007      	b.n	80054f6 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2108      	movs	r1, #8
 80054f2:	430a      	orrs	r2, r1
 80054f4:	619a      	str	r2, [r3, #24]
}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b014      	add	sp, #80	; 0x50
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	fffffedf 	.word	0xfffffedf
 8005504:	fbffffff 	.word	0xfbffffff

08005508 <memset>:
 8005508:	0003      	movs	r3, r0
 800550a:	1882      	adds	r2, r0, r2
 800550c:	4293      	cmp	r3, r2
 800550e:	d100      	bne.n	8005512 <memset+0xa>
 8005510:	4770      	bx	lr
 8005512:	7019      	strb	r1, [r3, #0]
 8005514:	3301      	adds	r3, #1
 8005516:	e7f9      	b.n	800550c <memset+0x4>

08005518 <__libc_init_array>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	2600      	movs	r6, #0
 800551c:	4c0c      	ldr	r4, [pc, #48]	; (8005550 <__libc_init_array+0x38>)
 800551e:	4d0d      	ldr	r5, [pc, #52]	; (8005554 <__libc_init_array+0x3c>)
 8005520:	1b64      	subs	r4, r4, r5
 8005522:	10a4      	asrs	r4, r4, #2
 8005524:	42a6      	cmp	r6, r4
 8005526:	d109      	bne.n	800553c <__libc_init_array+0x24>
 8005528:	2600      	movs	r6, #0
 800552a:	f000 f819 	bl	8005560 <_init>
 800552e:	4c0a      	ldr	r4, [pc, #40]	; (8005558 <__libc_init_array+0x40>)
 8005530:	4d0a      	ldr	r5, [pc, #40]	; (800555c <__libc_init_array+0x44>)
 8005532:	1b64      	subs	r4, r4, r5
 8005534:	10a4      	asrs	r4, r4, #2
 8005536:	42a6      	cmp	r6, r4
 8005538:	d105      	bne.n	8005546 <__libc_init_array+0x2e>
 800553a:	bd70      	pop	{r4, r5, r6, pc}
 800553c:	00b3      	lsls	r3, r6, #2
 800553e:	58eb      	ldr	r3, [r5, r3]
 8005540:	4798      	blx	r3
 8005542:	3601      	adds	r6, #1
 8005544:	e7ee      	b.n	8005524 <__libc_init_array+0xc>
 8005546:	00b3      	lsls	r3, r6, #2
 8005548:	58eb      	ldr	r3, [r5, r3]
 800554a:	4798      	blx	r3
 800554c:	3601      	adds	r6, #1
 800554e:	e7f2      	b.n	8005536 <__libc_init_array+0x1e>
 8005550:	080055f0 	.word	0x080055f0
 8005554:	080055f0 	.word	0x080055f0
 8005558:	080055f4 	.word	0x080055f4
 800555c:	080055f0 	.word	0x080055f0

08005560 <_init>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005566:	bc08      	pop	{r3}
 8005568:	469e      	mov	lr, r3
 800556a:	4770      	bx	lr

0800556c <_fini>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005572:	bc08      	pop	{r3}
 8005574:	469e      	mov	lr, r3
 8005576:	4770      	bx	lr
