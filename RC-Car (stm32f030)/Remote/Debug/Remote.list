
Remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e08  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f3c  08003f3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f3c  08003f3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f3c  08003f3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f3c  08003f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003f50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003f50  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008996  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016a1  00000000  00000000  00028a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  0002a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054e  00000000  00000000  0002a798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010029  00000000  00000000  0002ace6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009c8e  00000000  00000000  0003ad0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00062886  00000000  00000000  0004499d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001924  00000000  00000000  000a7224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000a8b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003eac 	.word	0x08003eac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003eac 	.word	0x08003eac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f001 fa43 	bl	80016b0 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f001 f98b 	bl	800154c <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 fe02 	bl	8000e48 <__aeabi_dsub>
 8000244:	f001 f982 	bl	800154c <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_ui2f>:
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	1e04      	subs	r4, r0, #0
 800025c:	d00e      	beq.n	800027c <__aeabi_ui2f+0x24>
 800025e:	f001 fa31 	bl	80016c4 <__clzsi2>
 8000262:	239e      	movs	r3, #158	; 0x9e
 8000264:	0001      	movs	r1, r0
 8000266:	1a1b      	subs	r3, r3, r0
 8000268:	2b96      	cmp	r3, #150	; 0x96
 800026a:	dc0c      	bgt.n	8000286 <__aeabi_ui2f+0x2e>
 800026c:	2808      	cmp	r0, #8
 800026e:	d02c      	beq.n	80002ca <__aeabi_ui2f+0x72>
 8000270:	3908      	subs	r1, #8
 8000272:	408c      	lsls	r4, r1
 8000274:	0264      	lsls	r4, r4, #9
 8000276:	0a64      	lsrs	r4, r4, #9
 8000278:	b2d8      	uxtb	r0, r3
 800027a:	e001      	b.n	8000280 <__aeabi_ui2f+0x28>
 800027c:	2000      	movs	r0, #0
 800027e:	2400      	movs	r4, #0
 8000280:	05c0      	lsls	r0, r0, #23
 8000282:	4320      	orrs	r0, r4
 8000284:	bd70      	pop	{r4, r5, r6, pc}
 8000286:	2b99      	cmp	r3, #153	; 0x99
 8000288:	dd0a      	ble.n	80002a0 <__aeabi_ui2f+0x48>
 800028a:	0002      	movs	r2, r0
 800028c:	0020      	movs	r0, r4
 800028e:	321b      	adds	r2, #27
 8000290:	4090      	lsls	r0, r2
 8000292:	0002      	movs	r2, r0
 8000294:	1e50      	subs	r0, r2, #1
 8000296:	4182      	sbcs	r2, r0
 8000298:	2005      	movs	r0, #5
 800029a:	1a40      	subs	r0, r0, r1
 800029c:	40c4      	lsrs	r4, r0
 800029e:	4314      	orrs	r4, r2
 80002a0:	2905      	cmp	r1, #5
 80002a2:	dc16      	bgt.n	80002d2 <__aeabi_ui2f+0x7a>
 80002a4:	0022      	movs	r2, r4
 80002a6:	480f      	ldr	r0, [pc, #60]	; (80002e4 <__aeabi_ui2f+0x8c>)
 80002a8:	4002      	ands	r2, r0
 80002aa:	0765      	lsls	r5, r4, #29
 80002ac:	d009      	beq.n	80002c2 <__aeabi_ui2f+0x6a>
 80002ae:	250f      	movs	r5, #15
 80002b0:	402c      	ands	r4, r5
 80002b2:	2c04      	cmp	r4, #4
 80002b4:	d005      	beq.n	80002c2 <__aeabi_ui2f+0x6a>
 80002b6:	3204      	adds	r2, #4
 80002b8:	0154      	lsls	r4, r2, #5
 80002ba:	d502      	bpl.n	80002c2 <__aeabi_ui2f+0x6a>
 80002bc:	239f      	movs	r3, #159	; 0x9f
 80002be:	4002      	ands	r2, r0
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	0192      	lsls	r2, r2, #6
 80002c4:	0a54      	lsrs	r4, r2, #9
 80002c6:	b2d8      	uxtb	r0, r3
 80002c8:	e7da      	b.n	8000280 <__aeabi_ui2f+0x28>
 80002ca:	0264      	lsls	r4, r4, #9
 80002cc:	2096      	movs	r0, #150	; 0x96
 80002ce:	0a64      	lsrs	r4, r4, #9
 80002d0:	e7d6      	b.n	8000280 <__aeabi_ui2f+0x28>
 80002d2:	1f4a      	subs	r2, r1, #5
 80002d4:	4094      	lsls	r4, r2
 80002d6:	0022      	movs	r2, r4
 80002d8:	4802      	ldr	r0, [pc, #8]	; (80002e4 <__aeabi_ui2f+0x8c>)
 80002da:	4002      	ands	r2, r0
 80002dc:	0765      	lsls	r5, r4, #29
 80002de:	d0f0      	beq.n	80002c2 <__aeabi_ui2f+0x6a>
 80002e0:	e7e5      	b.n	80002ae <__aeabi_ui2f+0x56>
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	fbffffff 	.word	0xfbffffff

080002e8 <__aeabi_ddiv>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	4657      	mov	r7, sl
 80002ec:	464e      	mov	r6, r9
 80002ee:	4645      	mov	r5, r8
 80002f0:	46de      	mov	lr, fp
 80002f2:	b5e0      	push	{r5, r6, r7, lr}
 80002f4:	030c      	lsls	r4, r1, #12
 80002f6:	001f      	movs	r7, r3
 80002f8:	004b      	lsls	r3, r1, #1
 80002fa:	4681      	mov	r9, r0
 80002fc:	4692      	mov	sl, r2
 80002fe:	0005      	movs	r5, r0
 8000300:	b085      	sub	sp, #20
 8000302:	0b24      	lsrs	r4, r4, #12
 8000304:	0d5b      	lsrs	r3, r3, #21
 8000306:	0fce      	lsrs	r6, r1, #31
 8000308:	2b00      	cmp	r3, #0
 800030a:	d100      	bne.n	800030e <__aeabi_ddiv+0x26>
 800030c:	e152      	b.n	80005b4 <__aeabi_ddiv+0x2cc>
 800030e:	4ad2      	ldr	r2, [pc, #840]	; (8000658 <__aeabi_ddiv+0x370>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d100      	bne.n	8000316 <__aeabi_ddiv+0x2e>
 8000314:	e16e      	b.n	80005f4 <__aeabi_ddiv+0x30c>
 8000316:	0f42      	lsrs	r2, r0, #29
 8000318:	00e4      	lsls	r4, r4, #3
 800031a:	4314      	orrs	r4, r2
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	0412      	lsls	r2, r2, #16
 8000320:	4322      	orrs	r2, r4
 8000322:	4690      	mov	r8, r2
 8000324:	4acd      	ldr	r2, [pc, #820]	; (800065c <__aeabi_ddiv+0x374>)
 8000326:	00c5      	lsls	r5, r0, #3
 8000328:	4693      	mov	fp, r2
 800032a:	449b      	add	fp, r3
 800032c:	2300      	movs	r3, #0
 800032e:	4699      	mov	r9, r3
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	033c      	lsls	r4, r7, #12
 8000334:	007b      	lsls	r3, r7, #1
 8000336:	4650      	mov	r0, sl
 8000338:	0b24      	lsrs	r4, r4, #12
 800033a:	0d5b      	lsrs	r3, r3, #21
 800033c:	0fff      	lsrs	r7, r7, #31
 800033e:	2b00      	cmp	r3, #0
 8000340:	d100      	bne.n	8000344 <__aeabi_ddiv+0x5c>
 8000342:	e11a      	b.n	800057a <__aeabi_ddiv+0x292>
 8000344:	4ac4      	ldr	r2, [pc, #784]	; (8000658 <__aeabi_ddiv+0x370>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d100      	bne.n	800034c <__aeabi_ddiv+0x64>
 800034a:	e15e      	b.n	800060a <__aeabi_ddiv+0x322>
 800034c:	0f42      	lsrs	r2, r0, #29
 800034e:	00e4      	lsls	r4, r4, #3
 8000350:	4322      	orrs	r2, r4
 8000352:	2480      	movs	r4, #128	; 0x80
 8000354:	0424      	lsls	r4, r4, #16
 8000356:	4314      	orrs	r4, r2
 8000358:	4ac0      	ldr	r2, [pc, #768]	; (800065c <__aeabi_ddiv+0x374>)
 800035a:	00c1      	lsls	r1, r0, #3
 800035c:	4694      	mov	ip, r2
 800035e:	465a      	mov	r2, fp
 8000360:	4463      	add	r3, ip
 8000362:	1ad3      	subs	r3, r2, r3
 8000364:	469b      	mov	fp, r3
 8000366:	2000      	movs	r0, #0
 8000368:	0033      	movs	r3, r6
 800036a:	407b      	eors	r3, r7
 800036c:	469a      	mov	sl, r3
 800036e:	464b      	mov	r3, r9
 8000370:	2b0f      	cmp	r3, #15
 8000372:	d827      	bhi.n	80003c4 <__aeabi_ddiv+0xdc>
 8000374:	4aba      	ldr	r2, [pc, #744]	; (8000660 <__aeabi_ddiv+0x378>)
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	58d3      	ldr	r3, [r2, r3]
 800037a:	469f      	mov	pc, r3
 800037c:	46b2      	mov	sl, r6
 800037e:	9b00      	ldr	r3, [sp, #0]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d016      	beq.n	80003b2 <__aeabi_ddiv+0xca>
 8000384:	2b03      	cmp	r3, #3
 8000386:	d100      	bne.n	800038a <__aeabi_ddiv+0xa2>
 8000388:	e287      	b.n	800089a <__aeabi_ddiv+0x5b2>
 800038a:	2b01      	cmp	r3, #1
 800038c:	d000      	beq.n	8000390 <__aeabi_ddiv+0xa8>
 800038e:	e0d5      	b.n	800053c <__aeabi_ddiv+0x254>
 8000390:	2300      	movs	r3, #0
 8000392:	2200      	movs	r2, #0
 8000394:	2500      	movs	r5, #0
 8000396:	051b      	lsls	r3, r3, #20
 8000398:	4313      	orrs	r3, r2
 800039a:	4652      	mov	r2, sl
 800039c:	07d2      	lsls	r2, r2, #31
 800039e:	4313      	orrs	r3, r2
 80003a0:	0028      	movs	r0, r5
 80003a2:	0019      	movs	r1, r3
 80003a4:	b005      	add	sp, #20
 80003a6:	bcf0      	pop	{r4, r5, r6, r7}
 80003a8:	46bb      	mov	fp, r7
 80003aa:	46b2      	mov	sl, r6
 80003ac:	46a9      	mov	r9, r5
 80003ae:	46a0      	mov	r8, r4
 80003b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b2:	2200      	movs	r2, #0
 80003b4:	2500      	movs	r5, #0
 80003b6:	4ba8      	ldr	r3, [pc, #672]	; (8000658 <__aeabi_ddiv+0x370>)
 80003b8:	e7ed      	b.n	8000396 <__aeabi_ddiv+0xae>
 80003ba:	46ba      	mov	sl, r7
 80003bc:	46a0      	mov	r8, r4
 80003be:	000d      	movs	r5, r1
 80003c0:	9000      	str	r0, [sp, #0]
 80003c2:	e7dc      	b.n	800037e <__aeabi_ddiv+0x96>
 80003c4:	4544      	cmp	r4, r8
 80003c6:	d200      	bcs.n	80003ca <__aeabi_ddiv+0xe2>
 80003c8:	e1c4      	b.n	8000754 <__aeabi_ddiv+0x46c>
 80003ca:	d100      	bne.n	80003ce <__aeabi_ddiv+0xe6>
 80003cc:	e1bf      	b.n	800074e <__aeabi_ddiv+0x466>
 80003ce:	2301      	movs	r3, #1
 80003d0:	425b      	negs	r3, r3
 80003d2:	469c      	mov	ip, r3
 80003d4:	002e      	movs	r6, r5
 80003d6:	4640      	mov	r0, r8
 80003d8:	2500      	movs	r5, #0
 80003da:	44e3      	add	fp, ip
 80003dc:	0223      	lsls	r3, r4, #8
 80003de:	0e0c      	lsrs	r4, r1, #24
 80003e0:	431c      	orrs	r4, r3
 80003e2:	0c1b      	lsrs	r3, r3, #16
 80003e4:	4699      	mov	r9, r3
 80003e6:	0423      	lsls	r3, r4, #16
 80003e8:	020a      	lsls	r2, r1, #8
 80003ea:	0c1f      	lsrs	r7, r3, #16
 80003ec:	4649      	mov	r1, r9
 80003ee:	9200      	str	r2, [sp, #0]
 80003f0:	9701      	str	r7, [sp, #4]
 80003f2:	f7ff ff0d 	bl	8000210 <__aeabi_uidivmod>
 80003f6:	0002      	movs	r2, r0
 80003f8:	437a      	muls	r2, r7
 80003fa:	040b      	lsls	r3, r1, #16
 80003fc:	0c31      	lsrs	r1, r6, #16
 80003fe:	4680      	mov	r8, r0
 8000400:	4319      	orrs	r1, r3
 8000402:	428a      	cmp	r2, r1
 8000404:	d907      	bls.n	8000416 <__aeabi_ddiv+0x12e>
 8000406:	2301      	movs	r3, #1
 8000408:	425b      	negs	r3, r3
 800040a:	469c      	mov	ip, r3
 800040c:	1909      	adds	r1, r1, r4
 800040e:	44e0      	add	r8, ip
 8000410:	428c      	cmp	r4, r1
 8000412:	d800      	bhi.n	8000416 <__aeabi_ddiv+0x12e>
 8000414:	e201      	b.n	800081a <__aeabi_ddiv+0x532>
 8000416:	1a88      	subs	r0, r1, r2
 8000418:	4649      	mov	r1, r9
 800041a:	f7ff fef9 	bl	8000210 <__aeabi_uidivmod>
 800041e:	9a01      	ldr	r2, [sp, #4]
 8000420:	0436      	lsls	r6, r6, #16
 8000422:	4342      	muls	r2, r0
 8000424:	0409      	lsls	r1, r1, #16
 8000426:	0c36      	lsrs	r6, r6, #16
 8000428:	0003      	movs	r3, r0
 800042a:	430e      	orrs	r6, r1
 800042c:	42b2      	cmp	r2, r6
 800042e:	d904      	bls.n	800043a <__aeabi_ddiv+0x152>
 8000430:	1936      	adds	r6, r6, r4
 8000432:	3b01      	subs	r3, #1
 8000434:	42b4      	cmp	r4, r6
 8000436:	d800      	bhi.n	800043a <__aeabi_ddiv+0x152>
 8000438:	e1e9      	b.n	800080e <__aeabi_ddiv+0x526>
 800043a:	1ab0      	subs	r0, r6, r2
 800043c:	4642      	mov	r2, r8
 800043e:	9e00      	ldr	r6, [sp, #0]
 8000440:	0412      	lsls	r2, r2, #16
 8000442:	431a      	orrs	r2, r3
 8000444:	0c33      	lsrs	r3, r6, #16
 8000446:	001f      	movs	r7, r3
 8000448:	0c11      	lsrs	r1, r2, #16
 800044a:	4690      	mov	r8, r2
 800044c:	9302      	str	r3, [sp, #8]
 800044e:	0413      	lsls	r3, r2, #16
 8000450:	0432      	lsls	r2, r6, #16
 8000452:	0c16      	lsrs	r6, r2, #16
 8000454:	0032      	movs	r2, r6
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	435a      	muls	r2, r3
 800045a:	9603      	str	r6, [sp, #12]
 800045c:	437b      	muls	r3, r7
 800045e:	434e      	muls	r6, r1
 8000460:	4379      	muls	r1, r7
 8000462:	0c17      	lsrs	r7, r2, #16
 8000464:	46bc      	mov	ip, r7
 8000466:	199b      	adds	r3, r3, r6
 8000468:	4463      	add	r3, ip
 800046a:	429e      	cmp	r6, r3
 800046c:	d903      	bls.n	8000476 <__aeabi_ddiv+0x18e>
 800046e:	2680      	movs	r6, #128	; 0x80
 8000470:	0276      	lsls	r6, r6, #9
 8000472:	46b4      	mov	ip, r6
 8000474:	4461      	add	r1, ip
 8000476:	0c1e      	lsrs	r6, r3, #16
 8000478:	1871      	adds	r1, r6, r1
 800047a:	0416      	lsls	r6, r2, #16
 800047c:	041b      	lsls	r3, r3, #16
 800047e:	0c36      	lsrs	r6, r6, #16
 8000480:	199e      	adds	r6, r3, r6
 8000482:	4288      	cmp	r0, r1
 8000484:	d302      	bcc.n	800048c <__aeabi_ddiv+0x1a4>
 8000486:	d112      	bne.n	80004ae <__aeabi_ddiv+0x1c6>
 8000488:	42b5      	cmp	r5, r6
 800048a:	d210      	bcs.n	80004ae <__aeabi_ddiv+0x1c6>
 800048c:	4643      	mov	r3, r8
 800048e:	1e5a      	subs	r2, r3, #1
 8000490:	9b00      	ldr	r3, [sp, #0]
 8000492:	469c      	mov	ip, r3
 8000494:	4465      	add	r5, ip
 8000496:	001f      	movs	r7, r3
 8000498:	429d      	cmp	r5, r3
 800049a:	419b      	sbcs	r3, r3
 800049c:	425b      	negs	r3, r3
 800049e:	191b      	adds	r3, r3, r4
 80004a0:	18c0      	adds	r0, r0, r3
 80004a2:	4284      	cmp	r4, r0
 80004a4:	d200      	bcs.n	80004a8 <__aeabi_ddiv+0x1c0>
 80004a6:	e19e      	b.n	80007e6 <__aeabi_ddiv+0x4fe>
 80004a8:	d100      	bne.n	80004ac <__aeabi_ddiv+0x1c4>
 80004aa:	e199      	b.n	80007e0 <__aeabi_ddiv+0x4f8>
 80004ac:	4690      	mov	r8, r2
 80004ae:	1bae      	subs	r6, r5, r6
 80004b0:	42b5      	cmp	r5, r6
 80004b2:	41ad      	sbcs	r5, r5
 80004b4:	1a40      	subs	r0, r0, r1
 80004b6:	426d      	negs	r5, r5
 80004b8:	1b40      	subs	r0, r0, r5
 80004ba:	4284      	cmp	r4, r0
 80004bc:	d100      	bne.n	80004c0 <__aeabi_ddiv+0x1d8>
 80004be:	e1d2      	b.n	8000866 <__aeabi_ddiv+0x57e>
 80004c0:	4649      	mov	r1, r9
 80004c2:	f7ff fea5 	bl	8000210 <__aeabi_uidivmod>
 80004c6:	9a01      	ldr	r2, [sp, #4]
 80004c8:	040b      	lsls	r3, r1, #16
 80004ca:	4342      	muls	r2, r0
 80004cc:	0c31      	lsrs	r1, r6, #16
 80004ce:	0005      	movs	r5, r0
 80004d0:	4319      	orrs	r1, r3
 80004d2:	428a      	cmp	r2, r1
 80004d4:	d900      	bls.n	80004d8 <__aeabi_ddiv+0x1f0>
 80004d6:	e16c      	b.n	80007b2 <__aeabi_ddiv+0x4ca>
 80004d8:	1a88      	subs	r0, r1, r2
 80004da:	4649      	mov	r1, r9
 80004dc:	f7ff fe98 	bl	8000210 <__aeabi_uidivmod>
 80004e0:	9a01      	ldr	r2, [sp, #4]
 80004e2:	0436      	lsls	r6, r6, #16
 80004e4:	4342      	muls	r2, r0
 80004e6:	0409      	lsls	r1, r1, #16
 80004e8:	0c36      	lsrs	r6, r6, #16
 80004ea:	0003      	movs	r3, r0
 80004ec:	430e      	orrs	r6, r1
 80004ee:	42b2      	cmp	r2, r6
 80004f0:	d900      	bls.n	80004f4 <__aeabi_ddiv+0x20c>
 80004f2:	e153      	b.n	800079c <__aeabi_ddiv+0x4b4>
 80004f4:	9803      	ldr	r0, [sp, #12]
 80004f6:	1ab6      	subs	r6, r6, r2
 80004f8:	0002      	movs	r2, r0
 80004fa:	042d      	lsls	r5, r5, #16
 80004fc:	431d      	orrs	r5, r3
 80004fe:	9f02      	ldr	r7, [sp, #8]
 8000500:	042b      	lsls	r3, r5, #16
 8000502:	0c1b      	lsrs	r3, r3, #16
 8000504:	435a      	muls	r2, r3
 8000506:	437b      	muls	r3, r7
 8000508:	469c      	mov	ip, r3
 800050a:	0c29      	lsrs	r1, r5, #16
 800050c:	4348      	muls	r0, r1
 800050e:	0c13      	lsrs	r3, r2, #16
 8000510:	4484      	add	ip, r0
 8000512:	4463      	add	r3, ip
 8000514:	4379      	muls	r1, r7
 8000516:	4298      	cmp	r0, r3
 8000518:	d903      	bls.n	8000522 <__aeabi_ddiv+0x23a>
 800051a:	2080      	movs	r0, #128	; 0x80
 800051c:	0240      	lsls	r0, r0, #9
 800051e:	4684      	mov	ip, r0
 8000520:	4461      	add	r1, ip
 8000522:	0c18      	lsrs	r0, r3, #16
 8000524:	0412      	lsls	r2, r2, #16
 8000526:	041b      	lsls	r3, r3, #16
 8000528:	0c12      	lsrs	r2, r2, #16
 800052a:	1840      	adds	r0, r0, r1
 800052c:	189b      	adds	r3, r3, r2
 800052e:	4286      	cmp	r6, r0
 8000530:	d200      	bcs.n	8000534 <__aeabi_ddiv+0x24c>
 8000532:	e100      	b.n	8000736 <__aeabi_ddiv+0x44e>
 8000534:	d100      	bne.n	8000538 <__aeabi_ddiv+0x250>
 8000536:	e0fb      	b.n	8000730 <__aeabi_ddiv+0x448>
 8000538:	2301      	movs	r3, #1
 800053a:	431d      	orrs	r5, r3
 800053c:	4b49      	ldr	r3, [pc, #292]	; (8000664 <__aeabi_ddiv+0x37c>)
 800053e:	445b      	add	r3, fp
 8000540:	2b00      	cmp	r3, #0
 8000542:	dc00      	bgt.n	8000546 <__aeabi_ddiv+0x25e>
 8000544:	e0aa      	b.n	800069c <__aeabi_ddiv+0x3b4>
 8000546:	076a      	lsls	r2, r5, #29
 8000548:	d000      	beq.n	800054c <__aeabi_ddiv+0x264>
 800054a:	e13d      	b.n	80007c8 <__aeabi_ddiv+0x4e0>
 800054c:	08e9      	lsrs	r1, r5, #3
 800054e:	4642      	mov	r2, r8
 8000550:	01d2      	lsls	r2, r2, #7
 8000552:	d506      	bpl.n	8000562 <__aeabi_ddiv+0x27a>
 8000554:	4642      	mov	r2, r8
 8000556:	4b44      	ldr	r3, [pc, #272]	; (8000668 <__aeabi_ddiv+0x380>)
 8000558:	401a      	ands	r2, r3
 800055a:	2380      	movs	r3, #128	; 0x80
 800055c:	4690      	mov	r8, r2
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	445b      	add	r3, fp
 8000562:	4a42      	ldr	r2, [pc, #264]	; (800066c <__aeabi_ddiv+0x384>)
 8000564:	4293      	cmp	r3, r2
 8000566:	dd00      	ble.n	800056a <__aeabi_ddiv+0x282>
 8000568:	e723      	b.n	80003b2 <__aeabi_ddiv+0xca>
 800056a:	4642      	mov	r2, r8
 800056c:	055b      	lsls	r3, r3, #21
 800056e:	0755      	lsls	r5, r2, #29
 8000570:	0252      	lsls	r2, r2, #9
 8000572:	430d      	orrs	r5, r1
 8000574:	0b12      	lsrs	r2, r2, #12
 8000576:	0d5b      	lsrs	r3, r3, #21
 8000578:	e70d      	b.n	8000396 <__aeabi_ddiv+0xae>
 800057a:	4651      	mov	r1, sl
 800057c:	4321      	orrs	r1, r4
 800057e:	d100      	bne.n	8000582 <__aeabi_ddiv+0x29a>
 8000580:	e07c      	b.n	800067c <__aeabi_ddiv+0x394>
 8000582:	2c00      	cmp	r4, #0
 8000584:	d100      	bne.n	8000588 <__aeabi_ddiv+0x2a0>
 8000586:	e0fb      	b.n	8000780 <__aeabi_ddiv+0x498>
 8000588:	0020      	movs	r0, r4
 800058a:	f001 f89b 	bl	80016c4 <__clzsi2>
 800058e:	0002      	movs	r2, r0
 8000590:	3a0b      	subs	r2, #11
 8000592:	231d      	movs	r3, #29
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	4652      	mov	r2, sl
 8000598:	0001      	movs	r1, r0
 800059a:	40da      	lsrs	r2, r3
 800059c:	4653      	mov	r3, sl
 800059e:	3908      	subs	r1, #8
 80005a0:	408b      	lsls	r3, r1
 80005a2:	408c      	lsls	r4, r1
 80005a4:	0019      	movs	r1, r3
 80005a6:	4314      	orrs	r4, r2
 80005a8:	4b31      	ldr	r3, [pc, #196]	; (8000670 <__aeabi_ddiv+0x388>)
 80005aa:	4458      	add	r0, fp
 80005ac:	469b      	mov	fp, r3
 80005ae:	4483      	add	fp, r0
 80005b0:	2000      	movs	r0, #0
 80005b2:	e6d9      	b.n	8000368 <__aeabi_ddiv+0x80>
 80005b4:	0003      	movs	r3, r0
 80005b6:	4323      	orrs	r3, r4
 80005b8:	4698      	mov	r8, r3
 80005ba:	d044      	beq.n	8000646 <__aeabi_ddiv+0x35e>
 80005bc:	2c00      	cmp	r4, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_ddiv+0x2da>
 80005c0:	e0cf      	b.n	8000762 <__aeabi_ddiv+0x47a>
 80005c2:	0020      	movs	r0, r4
 80005c4:	f001 f87e 	bl	80016c4 <__clzsi2>
 80005c8:	0001      	movs	r1, r0
 80005ca:	0002      	movs	r2, r0
 80005cc:	390b      	subs	r1, #11
 80005ce:	231d      	movs	r3, #29
 80005d0:	1a5b      	subs	r3, r3, r1
 80005d2:	4649      	mov	r1, r9
 80005d4:	0010      	movs	r0, r2
 80005d6:	40d9      	lsrs	r1, r3
 80005d8:	3808      	subs	r0, #8
 80005da:	4084      	lsls	r4, r0
 80005dc:	000b      	movs	r3, r1
 80005de:	464d      	mov	r5, r9
 80005e0:	4323      	orrs	r3, r4
 80005e2:	4698      	mov	r8, r3
 80005e4:	4085      	lsls	r5, r0
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <__aeabi_ddiv+0x38c>)
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	469b      	mov	fp, r3
 80005ec:	2300      	movs	r3, #0
 80005ee:	4699      	mov	r9, r3
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	e69e      	b.n	8000332 <__aeabi_ddiv+0x4a>
 80005f4:	0002      	movs	r2, r0
 80005f6:	4322      	orrs	r2, r4
 80005f8:	4690      	mov	r8, r2
 80005fa:	d11d      	bne.n	8000638 <__aeabi_ddiv+0x350>
 80005fc:	2208      	movs	r2, #8
 80005fe:	469b      	mov	fp, r3
 8000600:	2302      	movs	r3, #2
 8000602:	2500      	movs	r5, #0
 8000604:	4691      	mov	r9, r2
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	e693      	b.n	8000332 <__aeabi_ddiv+0x4a>
 800060a:	4651      	mov	r1, sl
 800060c:	4321      	orrs	r1, r4
 800060e:	d109      	bne.n	8000624 <__aeabi_ddiv+0x33c>
 8000610:	2302      	movs	r3, #2
 8000612:	464a      	mov	r2, r9
 8000614:	431a      	orrs	r2, r3
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <__aeabi_ddiv+0x390>)
 8000618:	4691      	mov	r9, r2
 800061a:	469c      	mov	ip, r3
 800061c:	2400      	movs	r4, #0
 800061e:	2002      	movs	r0, #2
 8000620:	44e3      	add	fp, ip
 8000622:	e6a1      	b.n	8000368 <__aeabi_ddiv+0x80>
 8000624:	2303      	movs	r3, #3
 8000626:	464a      	mov	r2, r9
 8000628:	431a      	orrs	r2, r3
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <__aeabi_ddiv+0x390>)
 800062c:	4691      	mov	r9, r2
 800062e:	469c      	mov	ip, r3
 8000630:	4651      	mov	r1, sl
 8000632:	2003      	movs	r0, #3
 8000634:	44e3      	add	fp, ip
 8000636:	e697      	b.n	8000368 <__aeabi_ddiv+0x80>
 8000638:	220c      	movs	r2, #12
 800063a:	469b      	mov	fp, r3
 800063c:	2303      	movs	r3, #3
 800063e:	46a0      	mov	r8, r4
 8000640:	4691      	mov	r9, r2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	e675      	b.n	8000332 <__aeabi_ddiv+0x4a>
 8000646:	2304      	movs	r3, #4
 8000648:	4699      	mov	r9, r3
 800064a:	2300      	movs	r3, #0
 800064c:	469b      	mov	fp, r3
 800064e:	3301      	adds	r3, #1
 8000650:	2500      	movs	r5, #0
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	e66d      	b.n	8000332 <__aeabi_ddiv+0x4a>
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	000007ff 	.word	0x000007ff
 800065c:	fffffc01 	.word	0xfffffc01
 8000660:	08003ec4 	.word	0x08003ec4
 8000664:	000003ff 	.word	0x000003ff
 8000668:	feffffff 	.word	0xfeffffff
 800066c:	000007fe 	.word	0x000007fe
 8000670:	000003f3 	.word	0x000003f3
 8000674:	fffffc0d 	.word	0xfffffc0d
 8000678:	fffff801 	.word	0xfffff801
 800067c:	464a      	mov	r2, r9
 800067e:	2301      	movs	r3, #1
 8000680:	431a      	orrs	r2, r3
 8000682:	4691      	mov	r9, r2
 8000684:	2400      	movs	r4, #0
 8000686:	2001      	movs	r0, #1
 8000688:	e66e      	b.n	8000368 <__aeabi_ddiv+0x80>
 800068a:	2300      	movs	r3, #0
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	469a      	mov	sl, r3
 8000690:	2500      	movs	r5, #0
 8000692:	4b88      	ldr	r3, [pc, #544]	; (80008b4 <__aeabi_ddiv+0x5cc>)
 8000694:	0312      	lsls	r2, r2, #12
 8000696:	e67e      	b.n	8000396 <__aeabi_ddiv+0xae>
 8000698:	2501      	movs	r5, #1
 800069a:	426d      	negs	r5, r5
 800069c:	2201      	movs	r2, #1
 800069e:	1ad2      	subs	r2, r2, r3
 80006a0:	2a38      	cmp	r2, #56	; 0x38
 80006a2:	dd00      	ble.n	80006a6 <__aeabi_ddiv+0x3be>
 80006a4:	e674      	b.n	8000390 <__aeabi_ddiv+0xa8>
 80006a6:	2a1f      	cmp	r2, #31
 80006a8:	dc00      	bgt.n	80006ac <__aeabi_ddiv+0x3c4>
 80006aa:	e0bd      	b.n	8000828 <__aeabi_ddiv+0x540>
 80006ac:	211f      	movs	r1, #31
 80006ae:	4249      	negs	r1, r1
 80006b0:	1acb      	subs	r3, r1, r3
 80006b2:	4641      	mov	r1, r8
 80006b4:	40d9      	lsrs	r1, r3
 80006b6:	000b      	movs	r3, r1
 80006b8:	2a20      	cmp	r2, #32
 80006ba:	d004      	beq.n	80006c6 <__aeabi_ddiv+0x3de>
 80006bc:	4641      	mov	r1, r8
 80006be:	4a7e      	ldr	r2, [pc, #504]	; (80008b8 <__aeabi_ddiv+0x5d0>)
 80006c0:	445a      	add	r2, fp
 80006c2:	4091      	lsls	r1, r2
 80006c4:	430d      	orrs	r5, r1
 80006c6:	0029      	movs	r1, r5
 80006c8:	1e4a      	subs	r2, r1, #1
 80006ca:	4191      	sbcs	r1, r2
 80006cc:	4319      	orrs	r1, r3
 80006ce:	2307      	movs	r3, #7
 80006d0:	001d      	movs	r5, r3
 80006d2:	2200      	movs	r2, #0
 80006d4:	400d      	ands	r5, r1
 80006d6:	420b      	tst	r3, r1
 80006d8:	d100      	bne.n	80006dc <__aeabi_ddiv+0x3f4>
 80006da:	e0d0      	b.n	800087e <__aeabi_ddiv+0x596>
 80006dc:	220f      	movs	r2, #15
 80006de:	2300      	movs	r3, #0
 80006e0:	400a      	ands	r2, r1
 80006e2:	2a04      	cmp	r2, #4
 80006e4:	d100      	bne.n	80006e8 <__aeabi_ddiv+0x400>
 80006e6:	e0c7      	b.n	8000878 <__aeabi_ddiv+0x590>
 80006e8:	1d0a      	adds	r2, r1, #4
 80006ea:	428a      	cmp	r2, r1
 80006ec:	4189      	sbcs	r1, r1
 80006ee:	4249      	negs	r1, r1
 80006f0:	185b      	adds	r3, r3, r1
 80006f2:	0011      	movs	r1, r2
 80006f4:	021a      	lsls	r2, r3, #8
 80006f6:	d400      	bmi.n	80006fa <__aeabi_ddiv+0x412>
 80006f8:	e0be      	b.n	8000878 <__aeabi_ddiv+0x590>
 80006fa:	2301      	movs	r3, #1
 80006fc:	2200      	movs	r2, #0
 80006fe:	2500      	movs	r5, #0
 8000700:	e649      	b.n	8000396 <__aeabi_ddiv+0xae>
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	4643      	mov	r3, r8
 8000706:	0312      	lsls	r2, r2, #12
 8000708:	4213      	tst	r3, r2
 800070a:	d008      	beq.n	800071e <__aeabi_ddiv+0x436>
 800070c:	4214      	tst	r4, r2
 800070e:	d106      	bne.n	800071e <__aeabi_ddiv+0x436>
 8000710:	4322      	orrs	r2, r4
 8000712:	0312      	lsls	r2, r2, #12
 8000714:	46ba      	mov	sl, r7
 8000716:	000d      	movs	r5, r1
 8000718:	4b66      	ldr	r3, [pc, #408]	; (80008b4 <__aeabi_ddiv+0x5cc>)
 800071a:	0b12      	lsrs	r2, r2, #12
 800071c:	e63b      	b.n	8000396 <__aeabi_ddiv+0xae>
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	4643      	mov	r3, r8
 8000722:	0312      	lsls	r2, r2, #12
 8000724:	431a      	orrs	r2, r3
 8000726:	0312      	lsls	r2, r2, #12
 8000728:	46b2      	mov	sl, r6
 800072a:	4b62      	ldr	r3, [pc, #392]	; (80008b4 <__aeabi_ddiv+0x5cc>)
 800072c:	0b12      	lsrs	r2, r2, #12
 800072e:	e632      	b.n	8000396 <__aeabi_ddiv+0xae>
 8000730:	2b00      	cmp	r3, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_ddiv+0x44e>
 8000734:	e702      	b.n	800053c <__aeabi_ddiv+0x254>
 8000736:	19a6      	adds	r6, r4, r6
 8000738:	1e6a      	subs	r2, r5, #1
 800073a:	42a6      	cmp	r6, r4
 800073c:	d200      	bcs.n	8000740 <__aeabi_ddiv+0x458>
 800073e:	e089      	b.n	8000854 <__aeabi_ddiv+0x56c>
 8000740:	4286      	cmp	r6, r0
 8000742:	d200      	bcs.n	8000746 <__aeabi_ddiv+0x45e>
 8000744:	e09f      	b.n	8000886 <__aeabi_ddiv+0x59e>
 8000746:	d100      	bne.n	800074a <__aeabi_ddiv+0x462>
 8000748:	e0af      	b.n	80008aa <__aeabi_ddiv+0x5c2>
 800074a:	0015      	movs	r5, r2
 800074c:	e6f4      	b.n	8000538 <__aeabi_ddiv+0x250>
 800074e:	42a9      	cmp	r1, r5
 8000750:	d900      	bls.n	8000754 <__aeabi_ddiv+0x46c>
 8000752:	e63c      	b.n	80003ce <__aeabi_ddiv+0xe6>
 8000754:	4643      	mov	r3, r8
 8000756:	07de      	lsls	r6, r3, #31
 8000758:	0858      	lsrs	r0, r3, #1
 800075a:	086b      	lsrs	r3, r5, #1
 800075c:	431e      	orrs	r6, r3
 800075e:	07ed      	lsls	r5, r5, #31
 8000760:	e63c      	b.n	80003dc <__aeabi_ddiv+0xf4>
 8000762:	f000 ffaf 	bl	80016c4 <__clzsi2>
 8000766:	0001      	movs	r1, r0
 8000768:	0002      	movs	r2, r0
 800076a:	3115      	adds	r1, #21
 800076c:	3220      	adds	r2, #32
 800076e:	291c      	cmp	r1, #28
 8000770:	dc00      	bgt.n	8000774 <__aeabi_ddiv+0x48c>
 8000772:	e72c      	b.n	80005ce <__aeabi_ddiv+0x2e6>
 8000774:	464b      	mov	r3, r9
 8000776:	3808      	subs	r0, #8
 8000778:	4083      	lsls	r3, r0
 800077a:	2500      	movs	r5, #0
 800077c:	4698      	mov	r8, r3
 800077e:	e732      	b.n	80005e6 <__aeabi_ddiv+0x2fe>
 8000780:	f000 ffa0 	bl	80016c4 <__clzsi2>
 8000784:	0003      	movs	r3, r0
 8000786:	001a      	movs	r2, r3
 8000788:	3215      	adds	r2, #21
 800078a:	3020      	adds	r0, #32
 800078c:	2a1c      	cmp	r2, #28
 800078e:	dc00      	bgt.n	8000792 <__aeabi_ddiv+0x4aa>
 8000790:	e6ff      	b.n	8000592 <__aeabi_ddiv+0x2aa>
 8000792:	4654      	mov	r4, sl
 8000794:	3b08      	subs	r3, #8
 8000796:	2100      	movs	r1, #0
 8000798:	409c      	lsls	r4, r3
 800079a:	e705      	b.n	80005a8 <__aeabi_ddiv+0x2c0>
 800079c:	1936      	adds	r6, r6, r4
 800079e:	3b01      	subs	r3, #1
 80007a0:	42b4      	cmp	r4, r6
 80007a2:	d900      	bls.n	80007a6 <__aeabi_ddiv+0x4be>
 80007a4:	e6a6      	b.n	80004f4 <__aeabi_ddiv+0x20c>
 80007a6:	42b2      	cmp	r2, r6
 80007a8:	d800      	bhi.n	80007ac <__aeabi_ddiv+0x4c4>
 80007aa:	e6a3      	b.n	80004f4 <__aeabi_ddiv+0x20c>
 80007ac:	1e83      	subs	r3, r0, #2
 80007ae:	1936      	adds	r6, r6, r4
 80007b0:	e6a0      	b.n	80004f4 <__aeabi_ddiv+0x20c>
 80007b2:	1909      	adds	r1, r1, r4
 80007b4:	3d01      	subs	r5, #1
 80007b6:	428c      	cmp	r4, r1
 80007b8:	d900      	bls.n	80007bc <__aeabi_ddiv+0x4d4>
 80007ba:	e68d      	b.n	80004d8 <__aeabi_ddiv+0x1f0>
 80007bc:	428a      	cmp	r2, r1
 80007be:	d800      	bhi.n	80007c2 <__aeabi_ddiv+0x4da>
 80007c0:	e68a      	b.n	80004d8 <__aeabi_ddiv+0x1f0>
 80007c2:	1e85      	subs	r5, r0, #2
 80007c4:	1909      	adds	r1, r1, r4
 80007c6:	e687      	b.n	80004d8 <__aeabi_ddiv+0x1f0>
 80007c8:	220f      	movs	r2, #15
 80007ca:	402a      	ands	r2, r5
 80007cc:	2a04      	cmp	r2, #4
 80007ce:	d100      	bne.n	80007d2 <__aeabi_ddiv+0x4ea>
 80007d0:	e6bc      	b.n	800054c <__aeabi_ddiv+0x264>
 80007d2:	1d29      	adds	r1, r5, #4
 80007d4:	42a9      	cmp	r1, r5
 80007d6:	41ad      	sbcs	r5, r5
 80007d8:	426d      	negs	r5, r5
 80007da:	08c9      	lsrs	r1, r1, #3
 80007dc:	44a8      	add	r8, r5
 80007de:	e6b6      	b.n	800054e <__aeabi_ddiv+0x266>
 80007e0:	42af      	cmp	r7, r5
 80007e2:	d900      	bls.n	80007e6 <__aeabi_ddiv+0x4fe>
 80007e4:	e662      	b.n	80004ac <__aeabi_ddiv+0x1c4>
 80007e6:	4281      	cmp	r1, r0
 80007e8:	d804      	bhi.n	80007f4 <__aeabi_ddiv+0x50c>
 80007ea:	d000      	beq.n	80007ee <__aeabi_ddiv+0x506>
 80007ec:	e65e      	b.n	80004ac <__aeabi_ddiv+0x1c4>
 80007ee:	42ae      	cmp	r6, r5
 80007f0:	d800      	bhi.n	80007f4 <__aeabi_ddiv+0x50c>
 80007f2:	e65b      	b.n	80004ac <__aeabi_ddiv+0x1c4>
 80007f4:	2302      	movs	r3, #2
 80007f6:	425b      	negs	r3, r3
 80007f8:	469c      	mov	ip, r3
 80007fa:	9b00      	ldr	r3, [sp, #0]
 80007fc:	44e0      	add	r8, ip
 80007fe:	469c      	mov	ip, r3
 8000800:	4465      	add	r5, ip
 8000802:	429d      	cmp	r5, r3
 8000804:	419b      	sbcs	r3, r3
 8000806:	425b      	negs	r3, r3
 8000808:	191b      	adds	r3, r3, r4
 800080a:	18c0      	adds	r0, r0, r3
 800080c:	e64f      	b.n	80004ae <__aeabi_ddiv+0x1c6>
 800080e:	42b2      	cmp	r2, r6
 8000810:	d800      	bhi.n	8000814 <__aeabi_ddiv+0x52c>
 8000812:	e612      	b.n	800043a <__aeabi_ddiv+0x152>
 8000814:	1e83      	subs	r3, r0, #2
 8000816:	1936      	adds	r6, r6, r4
 8000818:	e60f      	b.n	800043a <__aeabi_ddiv+0x152>
 800081a:	428a      	cmp	r2, r1
 800081c:	d800      	bhi.n	8000820 <__aeabi_ddiv+0x538>
 800081e:	e5fa      	b.n	8000416 <__aeabi_ddiv+0x12e>
 8000820:	1e83      	subs	r3, r0, #2
 8000822:	4698      	mov	r8, r3
 8000824:	1909      	adds	r1, r1, r4
 8000826:	e5f6      	b.n	8000416 <__aeabi_ddiv+0x12e>
 8000828:	4b24      	ldr	r3, [pc, #144]	; (80008bc <__aeabi_ddiv+0x5d4>)
 800082a:	0028      	movs	r0, r5
 800082c:	445b      	add	r3, fp
 800082e:	4641      	mov	r1, r8
 8000830:	409d      	lsls	r5, r3
 8000832:	4099      	lsls	r1, r3
 8000834:	40d0      	lsrs	r0, r2
 8000836:	1e6b      	subs	r3, r5, #1
 8000838:	419d      	sbcs	r5, r3
 800083a:	4643      	mov	r3, r8
 800083c:	4301      	orrs	r1, r0
 800083e:	4329      	orrs	r1, r5
 8000840:	40d3      	lsrs	r3, r2
 8000842:	074a      	lsls	r2, r1, #29
 8000844:	d100      	bne.n	8000848 <__aeabi_ddiv+0x560>
 8000846:	e755      	b.n	80006f4 <__aeabi_ddiv+0x40c>
 8000848:	220f      	movs	r2, #15
 800084a:	400a      	ands	r2, r1
 800084c:	2a04      	cmp	r2, #4
 800084e:	d000      	beq.n	8000852 <__aeabi_ddiv+0x56a>
 8000850:	e74a      	b.n	80006e8 <__aeabi_ddiv+0x400>
 8000852:	e74f      	b.n	80006f4 <__aeabi_ddiv+0x40c>
 8000854:	0015      	movs	r5, r2
 8000856:	4286      	cmp	r6, r0
 8000858:	d000      	beq.n	800085c <__aeabi_ddiv+0x574>
 800085a:	e66d      	b.n	8000538 <__aeabi_ddiv+0x250>
 800085c:	9a00      	ldr	r2, [sp, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d000      	beq.n	8000864 <__aeabi_ddiv+0x57c>
 8000862:	e669      	b.n	8000538 <__aeabi_ddiv+0x250>
 8000864:	e66a      	b.n	800053c <__aeabi_ddiv+0x254>
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <__aeabi_ddiv+0x5d8>)
 8000868:	445b      	add	r3, fp
 800086a:	2b00      	cmp	r3, #0
 800086c:	dc00      	bgt.n	8000870 <__aeabi_ddiv+0x588>
 800086e:	e713      	b.n	8000698 <__aeabi_ddiv+0x3b0>
 8000870:	2501      	movs	r5, #1
 8000872:	2100      	movs	r1, #0
 8000874:	44a8      	add	r8, r5
 8000876:	e66a      	b.n	800054e <__aeabi_ddiv+0x266>
 8000878:	075d      	lsls	r5, r3, #29
 800087a:	025b      	lsls	r3, r3, #9
 800087c:	0b1a      	lsrs	r2, r3, #12
 800087e:	08c9      	lsrs	r1, r1, #3
 8000880:	2300      	movs	r3, #0
 8000882:	430d      	orrs	r5, r1
 8000884:	e587      	b.n	8000396 <__aeabi_ddiv+0xae>
 8000886:	9900      	ldr	r1, [sp, #0]
 8000888:	3d02      	subs	r5, #2
 800088a:	004a      	lsls	r2, r1, #1
 800088c:	428a      	cmp	r2, r1
 800088e:	41bf      	sbcs	r7, r7
 8000890:	427f      	negs	r7, r7
 8000892:	193f      	adds	r7, r7, r4
 8000894:	19f6      	adds	r6, r6, r7
 8000896:	9200      	str	r2, [sp, #0]
 8000898:	e7dd      	b.n	8000856 <__aeabi_ddiv+0x56e>
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	4643      	mov	r3, r8
 800089e:	0312      	lsls	r2, r2, #12
 80008a0:	431a      	orrs	r2, r3
 80008a2:	0312      	lsls	r2, r2, #12
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <__aeabi_ddiv+0x5cc>)
 80008a6:	0b12      	lsrs	r2, r2, #12
 80008a8:	e575      	b.n	8000396 <__aeabi_ddiv+0xae>
 80008aa:	9900      	ldr	r1, [sp, #0]
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d3ea      	bcc.n	8000886 <__aeabi_ddiv+0x59e>
 80008b0:	0015      	movs	r5, r2
 80008b2:	e7d3      	b.n	800085c <__aeabi_ddiv+0x574>
 80008b4:	000007ff 	.word	0x000007ff
 80008b8:	0000043e 	.word	0x0000043e
 80008bc:	0000041e 	.word	0x0000041e
 80008c0:	000003ff 	.word	0x000003ff

080008c4 <__aeabi_dmul>:
 80008c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c6:	4645      	mov	r5, r8
 80008c8:	46de      	mov	lr, fp
 80008ca:	4657      	mov	r7, sl
 80008cc:	464e      	mov	r6, r9
 80008ce:	b5e0      	push	{r5, r6, r7, lr}
 80008d0:	001f      	movs	r7, r3
 80008d2:	030b      	lsls	r3, r1, #12
 80008d4:	0b1b      	lsrs	r3, r3, #12
 80008d6:	469b      	mov	fp, r3
 80008d8:	004d      	lsls	r5, r1, #1
 80008da:	0fcb      	lsrs	r3, r1, #31
 80008dc:	0004      	movs	r4, r0
 80008de:	4691      	mov	r9, r2
 80008e0:	4698      	mov	r8, r3
 80008e2:	b087      	sub	sp, #28
 80008e4:	0d6d      	lsrs	r5, r5, #21
 80008e6:	d100      	bne.n	80008ea <__aeabi_dmul+0x26>
 80008e8:	e1cd      	b.n	8000c86 <__aeabi_dmul+0x3c2>
 80008ea:	4bce      	ldr	r3, [pc, #824]	; (8000c24 <__aeabi_dmul+0x360>)
 80008ec:	429d      	cmp	r5, r3
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dmul+0x2e>
 80008f0:	e1e9      	b.n	8000cc6 <__aeabi_dmul+0x402>
 80008f2:	465a      	mov	r2, fp
 80008f4:	0f43      	lsrs	r3, r0, #29
 80008f6:	00d2      	lsls	r2, r2, #3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	0412      	lsls	r2, r2, #16
 80008fe:	431a      	orrs	r2, r3
 8000900:	00c3      	lsls	r3, r0, #3
 8000902:	469a      	mov	sl, r3
 8000904:	4bc8      	ldr	r3, [pc, #800]	; (8000c28 <__aeabi_dmul+0x364>)
 8000906:	4693      	mov	fp, r2
 8000908:	469c      	mov	ip, r3
 800090a:	2300      	movs	r3, #0
 800090c:	2600      	movs	r6, #0
 800090e:	4465      	add	r5, ip
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	033c      	lsls	r4, r7, #12
 8000914:	007b      	lsls	r3, r7, #1
 8000916:	4648      	mov	r0, r9
 8000918:	0b24      	lsrs	r4, r4, #12
 800091a:	0d5b      	lsrs	r3, r3, #21
 800091c:	0fff      	lsrs	r7, r7, #31
 800091e:	2b00      	cmp	r3, #0
 8000920:	d100      	bne.n	8000924 <__aeabi_dmul+0x60>
 8000922:	e189      	b.n	8000c38 <__aeabi_dmul+0x374>
 8000924:	4abf      	ldr	r2, [pc, #764]	; (8000c24 <__aeabi_dmul+0x360>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d019      	beq.n	800095e <__aeabi_dmul+0x9a>
 800092a:	0f42      	lsrs	r2, r0, #29
 800092c:	00e4      	lsls	r4, r4, #3
 800092e:	4322      	orrs	r2, r4
 8000930:	2480      	movs	r4, #128	; 0x80
 8000932:	0424      	lsls	r4, r4, #16
 8000934:	4314      	orrs	r4, r2
 8000936:	4abc      	ldr	r2, [pc, #752]	; (8000c28 <__aeabi_dmul+0x364>)
 8000938:	2100      	movs	r1, #0
 800093a:	4694      	mov	ip, r2
 800093c:	4642      	mov	r2, r8
 800093e:	4463      	add	r3, ip
 8000940:	195b      	adds	r3, r3, r5
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	9b01      	ldr	r3, [sp, #4]
 8000946:	407a      	eors	r2, r7
 8000948:	3301      	adds	r3, #1
 800094a:	00c0      	lsls	r0, r0, #3
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	9302      	str	r3, [sp, #8]
 8000950:	2e0a      	cmp	r6, #10
 8000952:	dd1c      	ble.n	800098e <__aeabi_dmul+0xca>
 8000954:	003a      	movs	r2, r7
 8000956:	2e0b      	cmp	r6, #11
 8000958:	d05e      	beq.n	8000a18 <__aeabi_dmul+0x154>
 800095a:	4647      	mov	r7, r8
 800095c:	e056      	b.n	8000a0c <__aeabi_dmul+0x148>
 800095e:	4649      	mov	r1, r9
 8000960:	4bb0      	ldr	r3, [pc, #704]	; (8000c24 <__aeabi_dmul+0x360>)
 8000962:	4321      	orrs	r1, r4
 8000964:	18eb      	adds	r3, r5, r3
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	2900      	cmp	r1, #0
 800096a:	d12a      	bne.n	80009c2 <__aeabi_dmul+0xfe>
 800096c:	2080      	movs	r0, #128	; 0x80
 800096e:	2202      	movs	r2, #2
 8000970:	0100      	lsls	r0, r0, #4
 8000972:	002b      	movs	r3, r5
 8000974:	4684      	mov	ip, r0
 8000976:	4316      	orrs	r6, r2
 8000978:	4642      	mov	r2, r8
 800097a:	4463      	add	r3, ip
 800097c:	407a      	eors	r2, r7
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	2e0a      	cmp	r6, #10
 8000984:	dd00      	ble.n	8000988 <__aeabi_dmul+0xc4>
 8000986:	e231      	b.n	8000dec <__aeabi_dmul+0x528>
 8000988:	2000      	movs	r0, #0
 800098a:	2400      	movs	r4, #0
 800098c:	2102      	movs	r1, #2
 800098e:	2e02      	cmp	r6, #2
 8000990:	dc26      	bgt.n	80009e0 <__aeabi_dmul+0x11c>
 8000992:	3e01      	subs	r6, #1
 8000994:	2e01      	cmp	r6, #1
 8000996:	d852      	bhi.n	8000a3e <__aeabi_dmul+0x17a>
 8000998:	2902      	cmp	r1, #2
 800099a:	d04c      	beq.n	8000a36 <__aeabi_dmul+0x172>
 800099c:	2901      	cmp	r1, #1
 800099e:	d000      	beq.n	80009a2 <__aeabi_dmul+0xde>
 80009a0:	e118      	b.n	8000bd4 <__aeabi_dmul+0x310>
 80009a2:	2300      	movs	r3, #0
 80009a4:	2400      	movs	r4, #0
 80009a6:	2500      	movs	r5, #0
 80009a8:	051b      	lsls	r3, r3, #20
 80009aa:	4323      	orrs	r3, r4
 80009ac:	07d2      	lsls	r2, r2, #31
 80009ae:	4313      	orrs	r3, r2
 80009b0:	0028      	movs	r0, r5
 80009b2:	0019      	movs	r1, r3
 80009b4:	b007      	add	sp, #28
 80009b6:	bcf0      	pop	{r4, r5, r6, r7}
 80009b8:	46bb      	mov	fp, r7
 80009ba:	46b2      	mov	sl, r6
 80009bc:	46a9      	mov	r9, r5
 80009be:	46a0      	mov	r8, r4
 80009c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c2:	2180      	movs	r1, #128	; 0x80
 80009c4:	2203      	movs	r2, #3
 80009c6:	0109      	lsls	r1, r1, #4
 80009c8:	002b      	movs	r3, r5
 80009ca:	468c      	mov	ip, r1
 80009cc:	4316      	orrs	r6, r2
 80009ce:	4642      	mov	r2, r8
 80009d0:	4463      	add	r3, ip
 80009d2:	407a      	eors	r2, r7
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	9302      	str	r3, [sp, #8]
 80009d8:	2e0a      	cmp	r6, #10
 80009da:	dd00      	ble.n	80009de <__aeabi_dmul+0x11a>
 80009dc:	e228      	b.n	8000e30 <__aeabi_dmul+0x56c>
 80009de:	2103      	movs	r1, #3
 80009e0:	2501      	movs	r5, #1
 80009e2:	40b5      	lsls	r5, r6
 80009e4:	46ac      	mov	ip, r5
 80009e6:	26a6      	movs	r6, #166	; 0xa6
 80009e8:	4663      	mov	r3, ip
 80009ea:	00f6      	lsls	r6, r6, #3
 80009ec:	4035      	ands	r5, r6
 80009ee:	4233      	tst	r3, r6
 80009f0:	d10b      	bne.n	8000a0a <__aeabi_dmul+0x146>
 80009f2:	2690      	movs	r6, #144	; 0x90
 80009f4:	00b6      	lsls	r6, r6, #2
 80009f6:	4233      	tst	r3, r6
 80009f8:	d118      	bne.n	8000a2c <__aeabi_dmul+0x168>
 80009fa:	3eb9      	subs	r6, #185	; 0xb9
 80009fc:	3eff      	subs	r6, #255	; 0xff
 80009fe:	421e      	tst	r6, r3
 8000a00:	d01d      	beq.n	8000a3e <__aeabi_dmul+0x17a>
 8000a02:	46a3      	mov	fp, r4
 8000a04:	4682      	mov	sl, r0
 8000a06:	9100      	str	r1, [sp, #0]
 8000a08:	e000      	b.n	8000a0c <__aeabi_dmul+0x148>
 8000a0a:	0017      	movs	r7, r2
 8000a0c:	9900      	ldr	r1, [sp, #0]
 8000a0e:	003a      	movs	r2, r7
 8000a10:	2902      	cmp	r1, #2
 8000a12:	d010      	beq.n	8000a36 <__aeabi_dmul+0x172>
 8000a14:	465c      	mov	r4, fp
 8000a16:	4650      	mov	r0, sl
 8000a18:	2903      	cmp	r1, #3
 8000a1a:	d1bf      	bne.n	800099c <__aeabi_dmul+0xd8>
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	031b      	lsls	r3, r3, #12
 8000a20:	431c      	orrs	r4, r3
 8000a22:	0324      	lsls	r4, r4, #12
 8000a24:	0005      	movs	r5, r0
 8000a26:	4b7f      	ldr	r3, [pc, #508]	; (8000c24 <__aeabi_dmul+0x360>)
 8000a28:	0b24      	lsrs	r4, r4, #12
 8000a2a:	e7bd      	b.n	80009a8 <__aeabi_dmul+0xe4>
 8000a2c:	2480      	movs	r4, #128	; 0x80
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4b7c      	ldr	r3, [pc, #496]	; (8000c24 <__aeabi_dmul+0x360>)
 8000a32:	0324      	lsls	r4, r4, #12
 8000a34:	e7b8      	b.n	80009a8 <__aeabi_dmul+0xe4>
 8000a36:	2400      	movs	r4, #0
 8000a38:	2500      	movs	r5, #0
 8000a3a:	4b7a      	ldr	r3, [pc, #488]	; (8000c24 <__aeabi_dmul+0x360>)
 8000a3c:	e7b4      	b.n	80009a8 <__aeabi_dmul+0xe4>
 8000a3e:	4653      	mov	r3, sl
 8000a40:	041e      	lsls	r6, r3, #16
 8000a42:	0c36      	lsrs	r6, r6, #16
 8000a44:	0c1f      	lsrs	r7, r3, #16
 8000a46:	0033      	movs	r3, r6
 8000a48:	0c01      	lsrs	r1, r0, #16
 8000a4a:	0400      	lsls	r0, r0, #16
 8000a4c:	0c00      	lsrs	r0, r0, #16
 8000a4e:	4343      	muls	r3, r0
 8000a50:	4698      	mov	r8, r3
 8000a52:	0003      	movs	r3, r0
 8000a54:	437b      	muls	r3, r7
 8000a56:	4699      	mov	r9, r3
 8000a58:	0033      	movs	r3, r6
 8000a5a:	434b      	muls	r3, r1
 8000a5c:	469c      	mov	ip, r3
 8000a5e:	4643      	mov	r3, r8
 8000a60:	000d      	movs	r5, r1
 8000a62:	0c1b      	lsrs	r3, r3, #16
 8000a64:	469a      	mov	sl, r3
 8000a66:	437d      	muls	r5, r7
 8000a68:	44cc      	add	ip, r9
 8000a6a:	44d4      	add	ip, sl
 8000a6c:	9500      	str	r5, [sp, #0]
 8000a6e:	45e1      	cmp	r9, ip
 8000a70:	d904      	bls.n	8000a7c <__aeabi_dmul+0x1b8>
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	025b      	lsls	r3, r3, #9
 8000a76:	4699      	mov	r9, r3
 8000a78:	444d      	add	r5, r9
 8000a7a:	9500      	str	r5, [sp, #0]
 8000a7c:	4663      	mov	r3, ip
 8000a7e:	0c1b      	lsrs	r3, r3, #16
 8000a80:	001d      	movs	r5, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	041b      	lsls	r3, r3, #16
 8000a86:	469c      	mov	ip, r3
 8000a88:	4643      	mov	r3, r8
 8000a8a:	041b      	lsls	r3, r3, #16
 8000a8c:	0c1b      	lsrs	r3, r3, #16
 8000a8e:	4698      	mov	r8, r3
 8000a90:	4663      	mov	r3, ip
 8000a92:	4443      	add	r3, r8
 8000a94:	9303      	str	r3, [sp, #12]
 8000a96:	0c23      	lsrs	r3, r4, #16
 8000a98:	4698      	mov	r8, r3
 8000a9a:	0033      	movs	r3, r6
 8000a9c:	0424      	lsls	r4, r4, #16
 8000a9e:	0c24      	lsrs	r4, r4, #16
 8000aa0:	4363      	muls	r3, r4
 8000aa2:	469c      	mov	ip, r3
 8000aa4:	0023      	movs	r3, r4
 8000aa6:	437b      	muls	r3, r7
 8000aa8:	4699      	mov	r9, r3
 8000aaa:	4643      	mov	r3, r8
 8000aac:	435e      	muls	r6, r3
 8000aae:	435f      	muls	r7, r3
 8000ab0:	444e      	add	r6, r9
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	46b2      	mov	sl, r6
 8000ab6:	0c1e      	lsrs	r6, r3, #16
 8000ab8:	4456      	add	r6, sl
 8000aba:	45b1      	cmp	r9, r6
 8000abc:	d903      	bls.n	8000ac6 <__aeabi_dmul+0x202>
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	025b      	lsls	r3, r3, #9
 8000ac2:	4699      	mov	r9, r3
 8000ac4:	444f      	add	r7, r9
 8000ac6:	0c33      	lsrs	r3, r6, #16
 8000ac8:	4699      	mov	r9, r3
 8000aca:	003b      	movs	r3, r7
 8000acc:	444b      	add	r3, r9
 8000ace:	9305      	str	r3, [sp, #20]
 8000ad0:	4663      	mov	r3, ip
 8000ad2:	46ac      	mov	ip, r5
 8000ad4:	041f      	lsls	r7, r3, #16
 8000ad6:	0c3f      	lsrs	r7, r7, #16
 8000ad8:	0436      	lsls	r6, r6, #16
 8000ada:	19f6      	adds	r6, r6, r7
 8000adc:	44b4      	add	ip, r6
 8000ade:	4663      	mov	r3, ip
 8000ae0:	9304      	str	r3, [sp, #16]
 8000ae2:	465b      	mov	r3, fp
 8000ae4:	0c1b      	lsrs	r3, r3, #16
 8000ae6:	469c      	mov	ip, r3
 8000ae8:	465b      	mov	r3, fp
 8000aea:	041f      	lsls	r7, r3, #16
 8000aec:	0c3f      	lsrs	r7, r7, #16
 8000aee:	003b      	movs	r3, r7
 8000af0:	4343      	muls	r3, r0
 8000af2:	4699      	mov	r9, r3
 8000af4:	4663      	mov	r3, ip
 8000af6:	4343      	muls	r3, r0
 8000af8:	469a      	mov	sl, r3
 8000afa:	464b      	mov	r3, r9
 8000afc:	4660      	mov	r0, ip
 8000afe:	0c1b      	lsrs	r3, r3, #16
 8000b00:	469b      	mov	fp, r3
 8000b02:	4348      	muls	r0, r1
 8000b04:	4379      	muls	r1, r7
 8000b06:	4451      	add	r1, sl
 8000b08:	4459      	add	r1, fp
 8000b0a:	458a      	cmp	sl, r1
 8000b0c:	d903      	bls.n	8000b16 <__aeabi_dmul+0x252>
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	025b      	lsls	r3, r3, #9
 8000b12:	469a      	mov	sl, r3
 8000b14:	4450      	add	r0, sl
 8000b16:	0c0b      	lsrs	r3, r1, #16
 8000b18:	469a      	mov	sl, r3
 8000b1a:	464b      	mov	r3, r9
 8000b1c:	041b      	lsls	r3, r3, #16
 8000b1e:	0c1b      	lsrs	r3, r3, #16
 8000b20:	4699      	mov	r9, r3
 8000b22:	003b      	movs	r3, r7
 8000b24:	4363      	muls	r3, r4
 8000b26:	0409      	lsls	r1, r1, #16
 8000b28:	4645      	mov	r5, r8
 8000b2a:	4449      	add	r1, r9
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	4663      	mov	r3, ip
 8000b30:	435c      	muls	r4, r3
 8000b32:	436b      	muls	r3, r5
 8000b34:	469c      	mov	ip, r3
 8000b36:	464b      	mov	r3, r9
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	4698      	mov	r8, r3
 8000b3c:	436f      	muls	r7, r5
 8000b3e:	193f      	adds	r7, r7, r4
 8000b40:	4447      	add	r7, r8
 8000b42:	4450      	add	r0, sl
 8000b44:	42bc      	cmp	r4, r7
 8000b46:	d903      	bls.n	8000b50 <__aeabi_dmul+0x28c>
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	025b      	lsls	r3, r3, #9
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	44c4      	add	ip, r8
 8000b50:	9b04      	ldr	r3, [sp, #16]
 8000b52:	9d00      	ldr	r5, [sp, #0]
 8000b54:	4698      	mov	r8, r3
 8000b56:	4445      	add	r5, r8
 8000b58:	42b5      	cmp	r5, r6
 8000b5a:	41b6      	sbcs	r6, r6
 8000b5c:	4273      	negs	r3, r6
 8000b5e:	4698      	mov	r8, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	041e      	lsls	r6, r3, #16
 8000b64:	9b05      	ldr	r3, [sp, #20]
 8000b66:	043c      	lsls	r4, r7, #16
 8000b68:	4699      	mov	r9, r3
 8000b6a:	0c36      	lsrs	r6, r6, #16
 8000b6c:	19a4      	adds	r4, r4, r6
 8000b6e:	444c      	add	r4, r9
 8000b70:	46a1      	mov	r9, r4
 8000b72:	4683      	mov	fp, r0
 8000b74:	186e      	adds	r6, r5, r1
 8000b76:	44c1      	add	r9, r8
 8000b78:	428e      	cmp	r6, r1
 8000b7a:	4189      	sbcs	r1, r1
 8000b7c:	44cb      	add	fp, r9
 8000b7e:	465d      	mov	r5, fp
 8000b80:	4249      	negs	r1, r1
 8000b82:	186d      	adds	r5, r5, r1
 8000b84:	429c      	cmp	r4, r3
 8000b86:	41a4      	sbcs	r4, r4
 8000b88:	45c1      	cmp	r9, r8
 8000b8a:	419b      	sbcs	r3, r3
 8000b8c:	4583      	cmp	fp, r0
 8000b8e:	4180      	sbcs	r0, r0
 8000b90:	428d      	cmp	r5, r1
 8000b92:	4189      	sbcs	r1, r1
 8000b94:	425b      	negs	r3, r3
 8000b96:	4264      	negs	r4, r4
 8000b98:	431c      	orrs	r4, r3
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	9b03      	ldr	r3, [sp, #12]
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	4301      	orrs	r1, r0
 8000ba2:	0270      	lsls	r0, r6, #9
 8000ba4:	0c3f      	lsrs	r7, r7, #16
 8000ba6:	4318      	orrs	r0, r3
 8000ba8:	19e4      	adds	r4, r4, r7
 8000baa:	1e47      	subs	r7, r0, #1
 8000bac:	41b8      	sbcs	r0, r7
 8000bae:	1864      	adds	r4, r4, r1
 8000bb0:	4464      	add	r4, ip
 8000bb2:	0df6      	lsrs	r6, r6, #23
 8000bb4:	0261      	lsls	r1, r4, #9
 8000bb6:	4330      	orrs	r0, r6
 8000bb8:	0dec      	lsrs	r4, r5, #23
 8000bba:	026e      	lsls	r6, r5, #9
 8000bbc:	430c      	orrs	r4, r1
 8000bbe:	4330      	orrs	r0, r6
 8000bc0:	01c9      	lsls	r1, r1, #7
 8000bc2:	d400      	bmi.n	8000bc6 <__aeabi_dmul+0x302>
 8000bc4:	e0f1      	b.n	8000daa <__aeabi_dmul+0x4e6>
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	0843      	lsrs	r3, r0, #1
 8000bca:	4001      	ands	r1, r0
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	07e0      	lsls	r0, r4, #31
 8000bd0:	4318      	orrs	r0, r3
 8000bd2:	0864      	lsrs	r4, r4, #1
 8000bd4:	4915      	ldr	r1, [pc, #84]	; (8000c2c <__aeabi_dmul+0x368>)
 8000bd6:	9b02      	ldr	r3, [sp, #8]
 8000bd8:	468c      	mov	ip, r1
 8000bda:	4463      	add	r3, ip
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dc00      	bgt.n	8000be2 <__aeabi_dmul+0x31e>
 8000be0:	e097      	b.n	8000d12 <__aeabi_dmul+0x44e>
 8000be2:	0741      	lsls	r1, r0, #29
 8000be4:	d009      	beq.n	8000bfa <__aeabi_dmul+0x336>
 8000be6:	210f      	movs	r1, #15
 8000be8:	4001      	ands	r1, r0
 8000bea:	2904      	cmp	r1, #4
 8000bec:	d005      	beq.n	8000bfa <__aeabi_dmul+0x336>
 8000bee:	1d01      	adds	r1, r0, #4
 8000bf0:	4281      	cmp	r1, r0
 8000bf2:	4180      	sbcs	r0, r0
 8000bf4:	4240      	negs	r0, r0
 8000bf6:	1824      	adds	r4, r4, r0
 8000bf8:	0008      	movs	r0, r1
 8000bfa:	01e1      	lsls	r1, r4, #7
 8000bfc:	d506      	bpl.n	8000c0c <__aeabi_dmul+0x348>
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	00c9      	lsls	r1, r1, #3
 8000c02:	468c      	mov	ip, r1
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <__aeabi_dmul+0x36c>)
 8000c06:	401c      	ands	r4, r3
 8000c08:	9b02      	ldr	r3, [sp, #8]
 8000c0a:	4463      	add	r3, ip
 8000c0c:	4909      	ldr	r1, [pc, #36]	; (8000c34 <__aeabi_dmul+0x370>)
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_dmul+0x350>
 8000c12:	e710      	b.n	8000a36 <__aeabi_dmul+0x172>
 8000c14:	0761      	lsls	r1, r4, #29
 8000c16:	08c5      	lsrs	r5, r0, #3
 8000c18:	0264      	lsls	r4, r4, #9
 8000c1a:	055b      	lsls	r3, r3, #21
 8000c1c:	430d      	orrs	r5, r1
 8000c1e:	0b24      	lsrs	r4, r4, #12
 8000c20:	0d5b      	lsrs	r3, r3, #21
 8000c22:	e6c1      	b.n	80009a8 <__aeabi_dmul+0xe4>
 8000c24:	000007ff 	.word	0x000007ff
 8000c28:	fffffc01 	.word	0xfffffc01
 8000c2c:	000003ff 	.word	0x000003ff
 8000c30:	feffffff 	.word	0xfeffffff
 8000c34:	000007fe 	.word	0x000007fe
 8000c38:	464b      	mov	r3, r9
 8000c3a:	4323      	orrs	r3, r4
 8000c3c:	d059      	beq.n	8000cf2 <__aeabi_dmul+0x42e>
 8000c3e:	2c00      	cmp	r4, #0
 8000c40:	d100      	bne.n	8000c44 <__aeabi_dmul+0x380>
 8000c42:	e0a3      	b.n	8000d8c <__aeabi_dmul+0x4c8>
 8000c44:	0020      	movs	r0, r4
 8000c46:	f000 fd3d 	bl	80016c4 <__clzsi2>
 8000c4a:	0001      	movs	r1, r0
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	390b      	subs	r1, #11
 8000c50:	221d      	movs	r2, #29
 8000c52:	1a52      	subs	r2, r2, r1
 8000c54:	4649      	mov	r1, r9
 8000c56:	0018      	movs	r0, r3
 8000c58:	40d1      	lsrs	r1, r2
 8000c5a:	464a      	mov	r2, r9
 8000c5c:	3808      	subs	r0, #8
 8000c5e:	4082      	lsls	r2, r0
 8000c60:	4084      	lsls	r4, r0
 8000c62:	0010      	movs	r0, r2
 8000c64:	430c      	orrs	r4, r1
 8000c66:	4a74      	ldr	r2, [pc, #464]	; (8000e38 <__aeabi_dmul+0x574>)
 8000c68:	1aeb      	subs	r3, r5, r3
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	4463      	add	r3, ip
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	9b01      	ldr	r3, [sp, #4]
 8000c74:	407a      	eors	r2, r7
 8000c76:	3301      	adds	r3, #1
 8000c78:	2100      	movs	r1, #0
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	2e0a      	cmp	r6, #10
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_dmul+0x3c0>
 8000c82:	e667      	b.n	8000954 <__aeabi_dmul+0x90>
 8000c84:	e683      	b.n	800098e <__aeabi_dmul+0xca>
 8000c86:	465b      	mov	r3, fp
 8000c88:	4303      	orrs	r3, r0
 8000c8a:	469a      	mov	sl, r3
 8000c8c:	d02a      	beq.n	8000ce4 <__aeabi_dmul+0x420>
 8000c8e:	465b      	mov	r3, fp
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d06d      	beq.n	8000d70 <__aeabi_dmul+0x4ac>
 8000c94:	4658      	mov	r0, fp
 8000c96:	f000 fd15 	bl	80016c4 <__clzsi2>
 8000c9a:	0001      	movs	r1, r0
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	390b      	subs	r1, #11
 8000ca0:	221d      	movs	r2, #29
 8000ca2:	1a52      	subs	r2, r2, r1
 8000ca4:	0021      	movs	r1, r4
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	465d      	mov	r5, fp
 8000caa:	40d1      	lsrs	r1, r2
 8000cac:	3808      	subs	r0, #8
 8000cae:	4085      	lsls	r5, r0
 8000cb0:	000a      	movs	r2, r1
 8000cb2:	4084      	lsls	r4, r0
 8000cb4:	432a      	orrs	r2, r5
 8000cb6:	4693      	mov	fp, r2
 8000cb8:	46a2      	mov	sl, r4
 8000cba:	4d5f      	ldr	r5, [pc, #380]	; (8000e38 <__aeabi_dmul+0x574>)
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	1aed      	subs	r5, r5, r3
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	e625      	b.n	8000912 <__aeabi_dmul+0x4e>
 8000cc6:	465b      	mov	r3, fp
 8000cc8:	4303      	orrs	r3, r0
 8000cca:	469a      	mov	sl, r3
 8000ccc:	d105      	bne.n	8000cda <__aeabi_dmul+0x416>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	469b      	mov	fp, r3
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	2608      	movs	r6, #8
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	e61b      	b.n	8000912 <__aeabi_dmul+0x4e>
 8000cda:	2303      	movs	r3, #3
 8000cdc:	4682      	mov	sl, r0
 8000cde:	260c      	movs	r6, #12
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	e616      	b.n	8000912 <__aeabi_dmul+0x4e>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	469b      	mov	fp, r3
 8000ce8:	3301      	adds	r3, #1
 8000cea:	2604      	movs	r6, #4
 8000cec:	2500      	movs	r5, #0
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	e60f      	b.n	8000912 <__aeabi_dmul+0x4e>
 8000cf2:	4642      	mov	r2, r8
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	9501      	str	r5, [sp, #4]
 8000cf8:	431e      	orrs	r6, r3
 8000cfa:	9b01      	ldr	r3, [sp, #4]
 8000cfc:	407a      	eors	r2, r7
 8000cfe:	3301      	adds	r3, #1
 8000d00:	2400      	movs	r4, #0
 8000d02:	2000      	movs	r0, #0
 8000d04:	2101      	movs	r1, #1
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	2e0a      	cmp	r6, #10
 8000d0c:	dd00      	ble.n	8000d10 <__aeabi_dmul+0x44c>
 8000d0e:	e621      	b.n	8000954 <__aeabi_dmul+0x90>
 8000d10:	e63d      	b.n	800098e <__aeabi_dmul+0xca>
 8000d12:	2101      	movs	r1, #1
 8000d14:	1ac9      	subs	r1, r1, r3
 8000d16:	2938      	cmp	r1, #56	; 0x38
 8000d18:	dd00      	ble.n	8000d1c <__aeabi_dmul+0x458>
 8000d1a:	e642      	b.n	80009a2 <__aeabi_dmul+0xde>
 8000d1c:	291f      	cmp	r1, #31
 8000d1e:	dd47      	ble.n	8000db0 <__aeabi_dmul+0x4ec>
 8000d20:	261f      	movs	r6, #31
 8000d22:	0025      	movs	r5, r4
 8000d24:	4276      	negs	r6, r6
 8000d26:	1af3      	subs	r3, r6, r3
 8000d28:	40dd      	lsrs	r5, r3
 8000d2a:	002b      	movs	r3, r5
 8000d2c:	2920      	cmp	r1, #32
 8000d2e:	d005      	beq.n	8000d3c <__aeabi_dmul+0x478>
 8000d30:	4942      	ldr	r1, [pc, #264]	; (8000e3c <__aeabi_dmul+0x578>)
 8000d32:	9d02      	ldr	r5, [sp, #8]
 8000d34:	468c      	mov	ip, r1
 8000d36:	4465      	add	r5, ip
 8000d38:	40ac      	lsls	r4, r5
 8000d3a:	4320      	orrs	r0, r4
 8000d3c:	1e41      	subs	r1, r0, #1
 8000d3e:	4188      	sbcs	r0, r1
 8000d40:	4318      	orrs	r0, r3
 8000d42:	2307      	movs	r3, #7
 8000d44:	001d      	movs	r5, r3
 8000d46:	2400      	movs	r4, #0
 8000d48:	4005      	ands	r5, r0
 8000d4a:	4203      	tst	r3, r0
 8000d4c:	d04a      	beq.n	8000de4 <__aeabi_dmul+0x520>
 8000d4e:	230f      	movs	r3, #15
 8000d50:	2400      	movs	r4, #0
 8000d52:	4003      	ands	r3, r0
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d042      	beq.n	8000dde <__aeabi_dmul+0x51a>
 8000d58:	1d03      	adds	r3, r0, #4
 8000d5a:	4283      	cmp	r3, r0
 8000d5c:	4180      	sbcs	r0, r0
 8000d5e:	4240      	negs	r0, r0
 8000d60:	1824      	adds	r4, r4, r0
 8000d62:	0018      	movs	r0, r3
 8000d64:	0223      	lsls	r3, r4, #8
 8000d66:	d53a      	bpl.n	8000dde <__aeabi_dmul+0x51a>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	2400      	movs	r4, #0
 8000d6c:	2500      	movs	r5, #0
 8000d6e:	e61b      	b.n	80009a8 <__aeabi_dmul+0xe4>
 8000d70:	f000 fca8 	bl	80016c4 <__clzsi2>
 8000d74:	0001      	movs	r1, r0
 8000d76:	0003      	movs	r3, r0
 8000d78:	3115      	adds	r1, #21
 8000d7a:	3320      	adds	r3, #32
 8000d7c:	291c      	cmp	r1, #28
 8000d7e:	dd8f      	ble.n	8000ca0 <__aeabi_dmul+0x3dc>
 8000d80:	3808      	subs	r0, #8
 8000d82:	2200      	movs	r2, #0
 8000d84:	4084      	lsls	r4, r0
 8000d86:	4692      	mov	sl, r2
 8000d88:	46a3      	mov	fp, r4
 8000d8a:	e796      	b.n	8000cba <__aeabi_dmul+0x3f6>
 8000d8c:	f000 fc9a 	bl	80016c4 <__clzsi2>
 8000d90:	0001      	movs	r1, r0
 8000d92:	0003      	movs	r3, r0
 8000d94:	3115      	adds	r1, #21
 8000d96:	3320      	adds	r3, #32
 8000d98:	291c      	cmp	r1, #28
 8000d9a:	dc00      	bgt.n	8000d9e <__aeabi_dmul+0x4da>
 8000d9c:	e758      	b.n	8000c50 <__aeabi_dmul+0x38c>
 8000d9e:	0002      	movs	r2, r0
 8000da0:	464c      	mov	r4, r9
 8000da2:	3a08      	subs	r2, #8
 8000da4:	2000      	movs	r0, #0
 8000da6:	4094      	lsls	r4, r2
 8000da8:	e75d      	b.n	8000c66 <__aeabi_dmul+0x3a2>
 8000daa:	9b01      	ldr	r3, [sp, #4]
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	e711      	b.n	8000bd4 <__aeabi_dmul+0x310>
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <__aeabi_dmul+0x57c>)
 8000db2:	0026      	movs	r6, r4
 8000db4:	469c      	mov	ip, r3
 8000db6:	0003      	movs	r3, r0
 8000db8:	9d02      	ldr	r5, [sp, #8]
 8000dba:	40cb      	lsrs	r3, r1
 8000dbc:	4465      	add	r5, ip
 8000dbe:	40ae      	lsls	r6, r5
 8000dc0:	431e      	orrs	r6, r3
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	40ab      	lsls	r3, r5
 8000dc6:	1e58      	subs	r0, r3, #1
 8000dc8:	4183      	sbcs	r3, r0
 8000dca:	0030      	movs	r0, r6
 8000dcc:	4318      	orrs	r0, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	0743      	lsls	r3, r0, #29
 8000dd2:	d0c7      	beq.n	8000d64 <__aeabi_dmul+0x4a0>
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	4003      	ands	r3, r0
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	d1bd      	bne.n	8000d58 <__aeabi_dmul+0x494>
 8000ddc:	e7c2      	b.n	8000d64 <__aeabi_dmul+0x4a0>
 8000dde:	0765      	lsls	r5, r4, #29
 8000de0:	0264      	lsls	r4, r4, #9
 8000de2:	0b24      	lsrs	r4, r4, #12
 8000de4:	08c0      	lsrs	r0, r0, #3
 8000de6:	2300      	movs	r3, #0
 8000de8:	4305      	orrs	r5, r0
 8000dea:	e5dd      	b.n	80009a8 <__aeabi_dmul+0xe4>
 8000dec:	2500      	movs	r5, #0
 8000dee:	2302      	movs	r3, #2
 8000df0:	2e0f      	cmp	r6, #15
 8000df2:	d10c      	bne.n	8000e0e <__aeabi_dmul+0x54a>
 8000df4:	2480      	movs	r4, #128	; 0x80
 8000df6:	465b      	mov	r3, fp
 8000df8:	0324      	lsls	r4, r4, #12
 8000dfa:	4223      	tst	r3, r4
 8000dfc:	d00e      	beq.n	8000e1c <__aeabi_dmul+0x558>
 8000dfe:	4221      	tst	r1, r4
 8000e00:	d10c      	bne.n	8000e1c <__aeabi_dmul+0x558>
 8000e02:	430c      	orrs	r4, r1
 8000e04:	0324      	lsls	r4, r4, #12
 8000e06:	003a      	movs	r2, r7
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <__aeabi_dmul+0x580>)
 8000e0a:	0b24      	lsrs	r4, r4, #12
 8000e0c:	e5cc      	b.n	80009a8 <__aeabi_dmul+0xe4>
 8000e0e:	2e0b      	cmp	r6, #11
 8000e10:	d000      	beq.n	8000e14 <__aeabi_dmul+0x550>
 8000e12:	e5a2      	b.n	800095a <__aeabi_dmul+0x96>
 8000e14:	468b      	mov	fp, r1
 8000e16:	46aa      	mov	sl, r5
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	e5f7      	b.n	8000a0c <__aeabi_dmul+0x148>
 8000e1c:	2480      	movs	r4, #128	; 0x80
 8000e1e:	465b      	mov	r3, fp
 8000e20:	0324      	lsls	r4, r4, #12
 8000e22:	431c      	orrs	r4, r3
 8000e24:	0324      	lsls	r4, r4, #12
 8000e26:	4642      	mov	r2, r8
 8000e28:	4655      	mov	r5, sl
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <__aeabi_dmul+0x580>)
 8000e2c:	0b24      	lsrs	r4, r4, #12
 8000e2e:	e5bb      	b.n	80009a8 <__aeabi_dmul+0xe4>
 8000e30:	464d      	mov	r5, r9
 8000e32:	0021      	movs	r1, r4
 8000e34:	2303      	movs	r3, #3
 8000e36:	e7db      	b.n	8000df0 <__aeabi_dmul+0x52c>
 8000e38:	fffffc0d 	.word	0xfffffc0d
 8000e3c:	0000043e 	.word	0x0000043e
 8000e40:	0000041e 	.word	0x0000041e
 8000e44:	000007ff 	.word	0x000007ff

08000e48 <__aeabi_dsub>:
 8000e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4a:	4657      	mov	r7, sl
 8000e4c:	464e      	mov	r6, r9
 8000e4e:	4645      	mov	r5, r8
 8000e50:	46de      	mov	lr, fp
 8000e52:	b5e0      	push	{r5, r6, r7, lr}
 8000e54:	000d      	movs	r5, r1
 8000e56:	0004      	movs	r4, r0
 8000e58:	0019      	movs	r1, r3
 8000e5a:	0010      	movs	r0, r2
 8000e5c:	032b      	lsls	r3, r5, #12
 8000e5e:	0a5b      	lsrs	r3, r3, #9
 8000e60:	0f62      	lsrs	r2, r4, #29
 8000e62:	431a      	orrs	r2, r3
 8000e64:	00e3      	lsls	r3, r4, #3
 8000e66:	030c      	lsls	r4, r1, #12
 8000e68:	0a64      	lsrs	r4, r4, #9
 8000e6a:	0f47      	lsrs	r7, r0, #29
 8000e6c:	4327      	orrs	r7, r4
 8000e6e:	4cd0      	ldr	r4, [pc, #832]	; (80011b0 <__aeabi_dsub+0x368>)
 8000e70:	006e      	lsls	r6, r5, #1
 8000e72:	4691      	mov	r9, r2
 8000e74:	b083      	sub	sp, #12
 8000e76:	004a      	lsls	r2, r1, #1
 8000e78:	00c0      	lsls	r0, r0, #3
 8000e7a:	4698      	mov	r8, r3
 8000e7c:	46a2      	mov	sl, r4
 8000e7e:	0d76      	lsrs	r6, r6, #21
 8000e80:	0fed      	lsrs	r5, r5, #31
 8000e82:	0d52      	lsrs	r2, r2, #21
 8000e84:	0fc9      	lsrs	r1, r1, #31
 8000e86:	9001      	str	r0, [sp, #4]
 8000e88:	42a2      	cmp	r2, r4
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_dsub+0x46>
 8000e8c:	e0b9      	b.n	8001002 <__aeabi_dsub+0x1ba>
 8000e8e:	2401      	movs	r4, #1
 8000e90:	4061      	eors	r1, r4
 8000e92:	468b      	mov	fp, r1
 8000e94:	428d      	cmp	r5, r1
 8000e96:	d100      	bne.n	8000e9a <__aeabi_dsub+0x52>
 8000e98:	e08d      	b.n	8000fb6 <__aeabi_dsub+0x16e>
 8000e9a:	1ab4      	subs	r4, r6, r2
 8000e9c:	46a4      	mov	ip, r4
 8000e9e:	2c00      	cmp	r4, #0
 8000ea0:	dc00      	bgt.n	8000ea4 <__aeabi_dsub+0x5c>
 8000ea2:	e0b7      	b.n	8001014 <__aeabi_dsub+0x1cc>
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_dsub+0x62>
 8000ea8:	e0cb      	b.n	8001042 <__aeabi_dsub+0x1fa>
 8000eaa:	4ac1      	ldr	r2, [pc, #772]	; (80011b0 <__aeabi_dsub+0x368>)
 8000eac:	4296      	cmp	r6, r2
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_dsub+0x6a>
 8000eb0:	e186      	b.n	80011c0 <__aeabi_dsub+0x378>
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	0412      	lsls	r2, r2, #16
 8000eb6:	4317      	orrs	r7, r2
 8000eb8:	4662      	mov	r2, ip
 8000eba:	2a38      	cmp	r2, #56	; 0x38
 8000ebc:	dd00      	ble.n	8000ec0 <__aeabi_dsub+0x78>
 8000ebe:	e1a4      	b.n	800120a <__aeabi_dsub+0x3c2>
 8000ec0:	2a1f      	cmp	r2, #31
 8000ec2:	dd00      	ble.n	8000ec6 <__aeabi_dsub+0x7e>
 8000ec4:	e21d      	b.n	8001302 <__aeabi_dsub+0x4ba>
 8000ec6:	4661      	mov	r1, ip
 8000ec8:	2220      	movs	r2, #32
 8000eca:	003c      	movs	r4, r7
 8000ecc:	1a52      	subs	r2, r2, r1
 8000ece:	0001      	movs	r1, r0
 8000ed0:	4090      	lsls	r0, r2
 8000ed2:	4094      	lsls	r4, r2
 8000ed4:	1e42      	subs	r2, r0, #1
 8000ed6:	4190      	sbcs	r0, r2
 8000ed8:	4662      	mov	r2, ip
 8000eda:	46a0      	mov	r8, r4
 8000edc:	4664      	mov	r4, ip
 8000ede:	40d7      	lsrs	r7, r2
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	40e1      	lsrs	r1, r4
 8000ee4:	4644      	mov	r4, r8
 8000ee6:	1bd2      	subs	r2, r2, r7
 8000ee8:	4691      	mov	r9, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	4304      	orrs	r4, r0
 8000eee:	1b1c      	subs	r4, r3, r4
 8000ef0:	42a3      	cmp	r3, r4
 8000ef2:	4192      	sbcs	r2, r2
 8000ef4:	464b      	mov	r3, r9
 8000ef6:	4252      	negs	r2, r2
 8000ef8:	1a9b      	subs	r3, r3, r2
 8000efa:	469a      	mov	sl, r3
 8000efc:	4653      	mov	r3, sl
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	d400      	bmi.n	8000f04 <__aeabi_dsub+0xbc>
 8000f02:	e12b      	b.n	800115c <__aeabi_dsub+0x314>
 8000f04:	4653      	mov	r3, sl
 8000f06:	025a      	lsls	r2, r3, #9
 8000f08:	0a53      	lsrs	r3, r2, #9
 8000f0a:	469a      	mov	sl, r3
 8000f0c:	4653      	mov	r3, sl
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dsub+0xcc>
 8000f12:	e166      	b.n	80011e2 <__aeabi_dsub+0x39a>
 8000f14:	4650      	mov	r0, sl
 8000f16:	f000 fbd5 	bl	80016c4 <__clzsi2>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	3b08      	subs	r3, #8
 8000f1e:	2220      	movs	r2, #32
 8000f20:	0020      	movs	r0, r4
 8000f22:	1ad2      	subs	r2, r2, r3
 8000f24:	4651      	mov	r1, sl
 8000f26:	40d0      	lsrs	r0, r2
 8000f28:	4099      	lsls	r1, r3
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	409c      	lsls	r4, r3
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	429e      	cmp	r6, r3
 8000f32:	dd00      	ble.n	8000f36 <__aeabi_dsub+0xee>
 8000f34:	e164      	b.n	8001200 <__aeabi_dsub+0x3b8>
 8000f36:	1b9b      	subs	r3, r3, r6
 8000f38:	1c59      	adds	r1, r3, #1
 8000f3a:	291f      	cmp	r1, #31
 8000f3c:	dd00      	ble.n	8000f40 <__aeabi_dsub+0xf8>
 8000f3e:	e0fe      	b.n	800113e <__aeabi_dsub+0x2f6>
 8000f40:	2320      	movs	r3, #32
 8000f42:	0010      	movs	r0, r2
 8000f44:	0026      	movs	r6, r4
 8000f46:	1a5b      	subs	r3, r3, r1
 8000f48:	409c      	lsls	r4, r3
 8000f4a:	4098      	lsls	r0, r3
 8000f4c:	40ce      	lsrs	r6, r1
 8000f4e:	40ca      	lsrs	r2, r1
 8000f50:	1e63      	subs	r3, r4, #1
 8000f52:	419c      	sbcs	r4, r3
 8000f54:	4330      	orrs	r0, r6
 8000f56:	4692      	mov	sl, r2
 8000f58:	2600      	movs	r6, #0
 8000f5a:	4304      	orrs	r4, r0
 8000f5c:	0763      	lsls	r3, r4, #29
 8000f5e:	d009      	beq.n	8000f74 <__aeabi_dsub+0x12c>
 8000f60:	230f      	movs	r3, #15
 8000f62:	4023      	ands	r3, r4
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d005      	beq.n	8000f74 <__aeabi_dsub+0x12c>
 8000f68:	1d23      	adds	r3, r4, #4
 8000f6a:	42a3      	cmp	r3, r4
 8000f6c:	41a4      	sbcs	r4, r4
 8000f6e:	4264      	negs	r4, r4
 8000f70:	44a2      	add	sl, r4
 8000f72:	001c      	movs	r4, r3
 8000f74:	4653      	mov	r3, sl
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	d400      	bmi.n	8000f7c <__aeabi_dsub+0x134>
 8000f7a:	e0f2      	b.n	8001162 <__aeabi_dsub+0x31a>
 8000f7c:	4b8c      	ldr	r3, [pc, #560]	; (80011b0 <__aeabi_dsub+0x368>)
 8000f7e:	3601      	adds	r6, #1
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d100      	bne.n	8000f86 <__aeabi_dsub+0x13e>
 8000f84:	e10f      	b.n	80011a6 <__aeabi_dsub+0x35e>
 8000f86:	4653      	mov	r3, sl
 8000f88:	498a      	ldr	r1, [pc, #552]	; (80011b4 <__aeabi_dsub+0x36c>)
 8000f8a:	08e4      	lsrs	r4, r4, #3
 8000f8c:	400b      	ands	r3, r1
 8000f8e:	0019      	movs	r1, r3
 8000f90:	075b      	lsls	r3, r3, #29
 8000f92:	4323      	orrs	r3, r4
 8000f94:	0572      	lsls	r2, r6, #21
 8000f96:	024c      	lsls	r4, r1, #9
 8000f98:	0b24      	lsrs	r4, r4, #12
 8000f9a:	0d52      	lsrs	r2, r2, #21
 8000f9c:	0512      	lsls	r2, r2, #20
 8000f9e:	4322      	orrs	r2, r4
 8000fa0:	07ed      	lsls	r5, r5, #31
 8000fa2:	432a      	orrs	r2, r5
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	b003      	add	sp, #12
 8000faa:	bcf0      	pop	{r4, r5, r6, r7}
 8000fac:	46bb      	mov	fp, r7
 8000fae:	46b2      	mov	sl, r6
 8000fb0:	46a9      	mov	r9, r5
 8000fb2:	46a0      	mov	r8, r4
 8000fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb6:	1ab4      	subs	r4, r6, r2
 8000fb8:	46a4      	mov	ip, r4
 8000fba:	2c00      	cmp	r4, #0
 8000fbc:	dd59      	ble.n	8001072 <__aeabi_dsub+0x22a>
 8000fbe:	2a00      	cmp	r2, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_dsub+0x17c>
 8000fc2:	e0b0      	b.n	8001126 <__aeabi_dsub+0x2de>
 8000fc4:	4556      	cmp	r6, sl
 8000fc6:	d100      	bne.n	8000fca <__aeabi_dsub+0x182>
 8000fc8:	e0fa      	b.n	80011c0 <__aeabi_dsub+0x378>
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	0412      	lsls	r2, r2, #16
 8000fce:	4317      	orrs	r7, r2
 8000fd0:	4662      	mov	r2, ip
 8000fd2:	2a38      	cmp	r2, #56	; 0x38
 8000fd4:	dd00      	ble.n	8000fd8 <__aeabi_dsub+0x190>
 8000fd6:	e0d4      	b.n	8001182 <__aeabi_dsub+0x33a>
 8000fd8:	2a1f      	cmp	r2, #31
 8000fda:	dc00      	bgt.n	8000fde <__aeabi_dsub+0x196>
 8000fdc:	e1c0      	b.n	8001360 <__aeabi_dsub+0x518>
 8000fde:	0039      	movs	r1, r7
 8000fe0:	3a20      	subs	r2, #32
 8000fe2:	40d1      	lsrs	r1, r2
 8000fe4:	4662      	mov	r2, ip
 8000fe6:	2a20      	cmp	r2, #32
 8000fe8:	d006      	beq.n	8000ff8 <__aeabi_dsub+0x1b0>
 8000fea:	4664      	mov	r4, ip
 8000fec:	2240      	movs	r2, #64	; 0x40
 8000fee:	1b12      	subs	r2, r2, r4
 8000ff0:	003c      	movs	r4, r7
 8000ff2:	4094      	lsls	r4, r2
 8000ff4:	4304      	orrs	r4, r0
 8000ff6:	9401      	str	r4, [sp, #4]
 8000ff8:	9c01      	ldr	r4, [sp, #4]
 8000ffa:	1e62      	subs	r2, r4, #1
 8000ffc:	4194      	sbcs	r4, r2
 8000ffe:	430c      	orrs	r4, r1
 8001000:	e0c3      	b.n	800118a <__aeabi_dsub+0x342>
 8001002:	003c      	movs	r4, r7
 8001004:	4304      	orrs	r4, r0
 8001006:	d02b      	beq.n	8001060 <__aeabi_dsub+0x218>
 8001008:	468b      	mov	fp, r1
 800100a:	428d      	cmp	r5, r1
 800100c:	d02e      	beq.n	800106c <__aeabi_dsub+0x224>
 800100e:	4c6a      	ldr	r4, [pc, #424]	; (80011b8 <__aeabi_dsub+0x370>)
 8001010:	46a4      	mov	ip, r4
 8001012:	44b4      	add	ip, r6
 8001014:	4664      	mov	r4, ip
 8001016:	2c00      	cmp	r4, #0
 8001018:	d05f      	beq.n	80010da <__aeabi_dsub+0x292>
 800101a:	1b94      	subs	r4, r2, r6
 800101c:	46a4      	mov	ip, r4
 800101e:	2e00      	cmp	r6, #0
 8001020:	d000      	beq.n	8001024 <__aeabi_dsub+0x1dc>
 8001022:	e120      	b.n	8001266 <__aeabi_dsub+0x41e>
 8001024:	464c      	mov	r4, r9
 8001026:	431c      	orrs	r4, r3
 8001028:	d100      	bne.n	800102c <__aeabi_dsub+0x1e4>
 800102a:	e1c7      	b.n	80013bc <__aeabi_dsub+0x574>
 800102c:	4661      	mov	r1, ip
 800102e:	1e4c      	subs	r4, r1, #1
 8001030:	2901      	cmp	r1, #1
 8001032:	d100      	bne.n	8001036 <__aeabi_dsub+0x1ee>
 8001034:	e223      	b.n	800147e <__aeabi_dsub+0x636>
 8001036:	4d5e      	ldr	r5, [pc, #376]	; (80011b0 <__aeabi_dsub+0x368>)
 8001038:	45ac      	cmp	ip, r5
 800103a:	d100      	bne.n	800103e <__aeabi_dsub+0x1f6>
 800103c:	e1d8      	b.n	80013f0 <__aeabi_dsub+0x5a8>
 800103e:	46a4      	mov	ip, r4
 8001040:	e11a      	b.n	8001278 <__aeabi_dsub+0x430>
 8001042:	003a      	movs	r2, r7
 8001044:	4302      	orrs	r2, r0
 8001046:	d100      	bne.n	800104a <__aeabi_dsub+0x202>
 8001048:	e0e4      	b.n	8001214 <__aeabi_dsub+0x3cc>
 800104a:	0022      	movs	r2, r4
 800104c:	3a01      	subs	r2, #1
 800104e:	2c01      	cmp	r4, #1
 8001050:	d100      	bne.n	8001054 <__aeabi_dsub+0x20c>
 8001052:	e1c3      	b.n	80013dc <__aeabi_dsub+0x594>
 8001054:	4956      	ldr	r1, [pc, #344]	; (80011b0 <__aeabi_dsub+0x368>)
 8001056:	428c      	cmp	r4, r1
 8001058:	d100      	bne.n	800105c <__aeabi_dsub+0x214>
 800105a:	e0b1      	b.n	80011c0 <__aeabi_dsub+0x378>
 800105c:	4694      	mov	ip, r2
 800105e:	e72b      	b.n	8000eb8 <__aeabi_dsub+0x70>
 8001060:	2401      	movs	r4, #1
 8001062:	4061      	eors	r1, r4
 8001064:	468b      	mov	fp, r1
 8001066:	428d      	cmp	r5, r1
 8001068:	d000      	beq.n	800106c <__aeabi_dsub+0x224>
 800106a:	e716      	b.n	8000e9a <__aeabi_dsub+0x52>
 800106c:	4952      	ldr	r1, [pc, #328]	; (80011b8 <__aeabi_dsub+0x370>)
 800106e:	468c      	mov	ip, r1
 8001070:	44b4      	add	ip, r6
 8001072:	4664      	mov	r4, ip
 8001074:	2c00      	cmp	r4, #0
 8001076:	d100      	bne.n	800107a <__aeabi_dsub+0x232>
 8001078:	e0d3      	b.n	8001222 <__aeabi_dsub+0x3da>
 800107a:	1b91      	subs	r1, r2, r6
 800107c:	468c      	mov	ip, r1
 800107e:	2e00      	cmp	r6, #0
 8001080:	d100      	bne.n	8001084 <__aeabi_dsub+0x23c>
 8001082:	e15e      	b.n	8001342 <__aeabi_dsub+0x4fa>
 8001084:	494a      	ldr	r1, [pc, #296]	; (80011b0 <__aeabi_dsub+0x368>)
 8001086:	428a      	cmp	r2, r1
 8001088:	d100      	bne.n	800108c <__aeabi_dsub+0x244>
 800108a:	e1be      	b.n	800140a <__aeabi_dsub+0x5c2>
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	464c      	mov	r4, r9
 8001090:	0409      	lsls	r1, r1, #16
 8001092:	430c      	orrs	r4, r1
 8001094:	46a1      	mov	r9, r4
 8001096:	4661      	mov	r1, ip
 8001098:	2938      	cmp	r1, #56	; 0x38
 800109a:	dd00      	ble.n	800109e <__aeabi_dsub+0x256>
 800109c:	e1ba      	b.n	8001414 <__aeabi_dsub+0x5cc>
 800109e:	291f      	cmp	r1, #31
 80010a0:	dd00      	ble.n	80010a4 <__aeabi_dsub+0x25c>
 80010a2:	e227      	b.n	80014f4 <__aeabi_dsub+0x6ac>
 80010a4:	2420      	movs	r4, #32
 80010a6:	1a64      	subs	r4, r4, r1
 80010a8:	4649      	mov	r1, r9
 80010aa:	40a1      	lsls	r1, r4
 80010ac:	001e      	movs	r6, r3
 80010ae:	4688      	mov	r8, r1
 80010b0:	4661      	mov	r1, ip
 80010b2:	40a3      	lsls	r3, r4
 80010b4:	40ce      	lsrs	r6, r1
 80010b6:	4641      	mov	r1, r8
 80010b8:	1e5c      	subs	r4, r3, #1
 80010ba:	41a3      	sbcs	r3, r4
 80010bc:	4331      	orrs	r1, r6
 80010be:	4319      	orrs	r1, r3
 80010c0:	000c      	movs	r4, r1
 80010c2:	4663      	mov	r3, ip
 80010c4:	4649      	mov	r1, r9
 80010c6:	40d9      	lsrs	r1, r3
 80010c8:	187f      	adds	r7, r7, r1
 80010ca:	1824      	adds	r4, r4, r0
 80010cc:	4284      	cmp	r4, r0
 80010ce:	419b      	sbcs	r3, r3
 80010d0:	425b      	negs	r3, r3
 80010d2:	469a      	mov	sl, r3
 80010d4:	0016      	movs	r6, r2
 80010d6:	44ba      	add	sl, r7
 80010d8:	e05d      	b.n	8001196 <__aeabi_dsub+0x34e>
 80010da:	4c38      	ldr	r4, [pc, #224]	; (80011bc <__aeabi_dsub+0x374>)
 80010dc:	1c72      	adds	r2, r6, #1
 80010de:	4222      	tst	r2, r4
 80010e0:	d000      	beq.n	80010e4 <__aeabi_dsub+0x29c>
 80010e2:	e0df      	b.n	80012a4 <__aeabi_dsub+0x45c>
 80010e4:	464a      	mov	r2, r9
 80010e6:	431a      	orrs	r2, r3
 80010e8:	2e00      	cmp	r6, #0
 80010ea:	d000      	beq.n	80010ee <__aeabi_dsub+0x2a6>
 80010ec:	e15c      	b.n	80013a8 <__aeabi_dsub+0x560>
 80010ee:	2a00      	cmp	r2, #0
 80010f0:	d100      	bne.n	80010f4 <__aeabi_dsub+0x2ac>
 80010f2:	e1cf      	b.n	8001494 <__aeabi_dsub+0x64c>
 80010f4:	003a      	movs	r2, r7
 80010f6:	4302      	orrs	r2, r0
 80010f8:	d100      	bne.n	80010fc <__aeabi_dsub+0x2b4>
 80010fa:	e17f      	b.n	80013fc <__aeabi_dsub+0x5b4>
 80010fc:	1a1c      	subs	r4, r3, r0
 80010fe:	464a      	mov	r2, r9
 8001100:	42a3      	cmp	r3, r4
 8001102:	4189      	sbcs	r1, r1
 8001104:	1bd2      	subs	r2, r2, r7
 8001106:	4249      	negs	r1, r1
 8001108:	1a52      	subs	r2, r2, r1
 800110a:	4692      	mov	sl, r2
 800110c:	0212      	lsls	r2, r2, #8
 800110e:	d400      	bmi.n	8001112 <__aeabi_dsub+0x2ca>
 8001110:	e20a      	b.n	8001528 <__aeabi_dsub+0x6e0>
 8001112:	1ac4      	subs	r4, r0, r3
 8001114:	42a0      	cmp	r0, r4
 8001116:	4180      	sbcs	r0, r0
 8001118:	464b      	mov	r3, r9
 800111a:	4240      	negs	r0, r0
 800111c:	1aff      	subs	r7, r7, r3
 800111e:	1a3b      	subs	r3, r7, r0
 8001120:	469a      	mov	sl, r3
 8001122:	465d      	mov	r5, fp
 8001124:	e71a      	b.n	8000f5c <__aeabi_dsub+0x114>
 8001126:	003a      	movs	r2, r7
 8001128:	4302      	orrs	r2, r0
 800112a:	d073      	beq.n	8001214 <__aeabi_dsub+0x3cc>
 800112c:	0022      	movs	r2, r4
 800112e:	3a01      	subs	r2, #1
 8001130:	2c01      	cmp	r4, #1
 8001132:	d100      	bne.n	8001136 <__aeabi_dsub+0x2ee>
 8001134:	e0cb      	b.n	80012ce <__aeabi_dsub+0x486>
 8001136:	4554      	cmp	r4, sl
 8001138:	d042      	beq.n	80011c0 <__aeabi_dsub+0x378>
 800113a:	4694      	mov	ip, r2
 800113c:	e748      	b.n	8000fd0 <__aeabi_dsub+0x188>
 800113e:	0010      	movs	r0, r2
 8001140:	3b1f      	subs	r3, #31
 8001142:	40d8      	lsrs	r0, r3
 8001144:	2920      	cmp	r1, #32
 8001146:	d003      	beq.n	8001150 <__aeabi_dsub+0x308>
 8001148:	2340      	movs	r3, #64	; 0x40
 800114a:	1a5b      	subs	r3, r3, r1
 800114c:	409a      	lsls	r2, r3
 800114e:	4314      	orrs	r4, r2
 8001150:	1e63      	subs	r3, r4, #1
 8001152:	419c      	sbcs	r4, r3
 8001154:	2300      	movs	r3, #0
 8001156:	2600      	movs	r6, #0
 8001158:	469a      	mov	sl, r3
 800115a:	4304      	orrs	r4, r0
 800115c:	0763      	lsls	r3, r4, #29
 800115e:	d000      	beq.n	8001162 <__aeabi_dsub+0x31a>
 8001160:	e6fe      	b.n	8000f60 <__aeabi_dsub+0x118>
 8001162:	4652      	mov	r2, sl
 8001164:	08e3      	lsrs	r3, r4, #3
 8001166:	0752      	lsls	r2, r2, #29
 8001168:	4313      	orrs	r3, r2
 800116a:	4652      	mov	r2, sl
 800116c:	46b4      	mov	ip, r6
 800116e:	08d2      	lsrs	r2, r2, #3
 8001170:	490f      	ldr	r1, [pc, #60]	; (80011b0 <__aeabi_dsub+0x368>)
 8001172:	458c      	cmp	ip, r1
 8001174:	d02a      	beq.n	80011cc <__aeabi_dsub+0x384>
 8001176:	0312      	lsls	r2, r2, #12
 8001178:	0b14      	lsrs	r4, r2, #12
 800117a:	4662      	mov	r2, ip
 800117c:	0552      	lsls	r2, r2, #21
 800117e:	0d52      	lsrs	r2, r2, #21
 8001180:	e70c      	b.n	8000f9c <__aeabi_dsub+0x154>
 8001182:	003c      	movs	r4, r7
 8001184:	4304      	orrs	r4, r0
 8001186:	1e62      	subs	r2, r4, #1
 8001188:	4194      	sbcs	r4, r2
 800118a:	18e4      	adds	r4, r4, r3
 800118c:	429c      	cmp	r4, r3
 800118e:	4192      	sbcs	r2, r2
 8001190:	4252      	negs	r2, r2
 8001192:	444a      	add	r2, r9
 8001194:	4692      	mov	sl, r2
 8001196:	4653      	mov	r3, sl
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	d5df      	bpl.n	800115c <__aeabi_dsub+0x314>
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__aeabi_dsub+0x368>)
 800119e:	3601      	adds	r6, #1
 80011a0:	429e      	cmp	r6, r3
 80011a2:	d000      	beq.n	80011a6 <__aeabi_dsub+0x35e>
 80011a4:	e0a0      	b.n	80012e8 <__aeabi_dsub+0x4a0>
 80011a6:	0032      	movs	r2, r6
 80011a8:	2400      	movs	r4, #0
 80011aa:	2300      	movs	r3, #0
 80011ac:	e6f6      	b.n	8000f9c <__aeabi_dsub+0x154>
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	000007ff 	.word	0x000007ff
 80011b4:	ff7fffff 	.word	0xff7fffff
 80011b8:	fffff801 	.word	0xfffff801
 80011bc:	000007fe 	.word	0x000007fe
 80011c0:	08db      	lsrs	r3, r3, #3
 80011c2:	464a      	mov	r2, r9
 80011c4:	0752      	lsls	r2, r2, #29
 80011c6:	4313      	orrs	r3, r2
 80011c8:	464a      	mov	r2, r9
 80011ca:	08d2      	lsrs	r2, r2, #3
 80011cc:	0019      	movs	r1, r3
 80011ce:	4311      	orrs	r1, r2
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dsub+0x38c>
 80011d2:	e1b5      	b.n	8001540 <__aeabi_dsub+0x6f8>
 80011d4:	2480      	movs	r4, #128	; 0x80
 80011d6:	0324      	lsls	r4, r4, #12
 80011d8:	4314      	orrs	r4, r2
 80011da:	0324      	lsls	r4, r4, #12
 80011dc:	4ad5      	ldr	r2, [pc, #852]	; (8001534 <__aeabi_dsub+0x6ec>)
 80011de:	0b24      	lsrs	r4, r4, #12
 80011e0:	e6dc      	b.n	8000f9c <__aeabi_dsub+0x154>
 80011e2:	0020      	movs	r0, r4
 80011e4:	f000 fa6e 	bl	80016c4 <__clzsi2>
 80011e8:	0003      	movs	r3, r0
 80011ea:	3318      	adds	r3, #24
 80011ec:	2b1f      	cmp	r3, #31
 80011ee:	dc00      	bgt.n	80011f2 <__aeabi_dsub+0x3aa>
 80011f0:	e695      	b.n	8000f1e <__aeabi_dsub+0xd6>
 80011f2:	0022      	movs	r2, r4
 80011f4:	3808      	subs	r0, #8
 80011f6:	4082      	lsls	r2, r0
 80011f8:	2400      	movs	r4, #0
 80011fa:	429e      	cmp	r6, r3
 80011fc:	dc00      	bgt.n	8001200 <__aeabi_dsub+0x3b8>
 80011fe:	e69a      	b.n	8000f36 <__aeabi_dsub+0xee>
 8001200:	1af6      	subs	r6, r6, r3
 8001202:	4bcd      	ldr	r3, [pc, #820]	; (8001538 <__aeabi_dsub+0x6f0>)
 8001204:	401a      	ands	r2, r3
 8001206:	4692      	mov	sl, r2
 8001208:	e6a8      	b.n	8000f5c <__aeabi_dsub+0x114>
 800120a:	003c      	movs	r4, r7
 800120c:	4304      	orrs	r4, r0
 800120e:	1e62      	subs	r2, r4, #1
 8001210:	4194      	sbcs	r4, r2
 8001212:	e66c      	b.n	8000eee <__aeabi_dsub+0xa6>
 8001214:	464a      	mov	r2, r9
 8001216:	08db      	lsrs	r3, r3, #3
 8001218:	0752      	lsls	r2, r2, #29
 800121a:	4313      	orrs	r3, r2
 800121c:	464a      	mov	r2, r9
 800121e:	08d2      	lsrs	r2, r2, #3
 8001220:	e7a6      	b.n	8001170 <__aeabi_dsub+0x328>
 8001222:	4cc6      	ldr	r4, [pc, #792]	; (800153c <__aeabi_dsub+0x6f4>)
 8001224:	1c72      	adds	r2, r6, #1
 8001226:	4222      	tst	r2, r4
 8001228:	d000      	beq.n	800122c <__aeabi_dsub+0x3e4>
 800122a:	e0ac      	b.n	8001386 <__aeabi_dsub+0x53e>
 800122c:	464a      	mov	r2, r9
 800122e:	431a      	orrs	r2, r3
 8001230:	2e00      	cmp	r6, #0
 8001232:	d000      	beq.n	8001236 <__aeabi_dsub+0x3ee>
 8001234:	e105      	b.n	8001442 <__aeabi_dsub+0x5fa>
 8001236:	2a00      	cmp	r2, #0
 8001238:	d100      	bne.n	800123c <__aeabi_dsub+0x3f4>
 800123a:	e156      	b.n	80014ea <__aeabi_dsub+0x6a2>
 800123c:	003a      	movs	r2, r7
 800123e:	4302      	orrs	r2, r0
 8001240:	d100      	bne.n	8001244 <__aeabi_dsub+0x3fc>
 8001242:	e0db      	b.n	80013fc <__aeabi_dsub+0x5b4>
 8001244:	181c      	adds	r4, r3, r0
 8001246:	429c      	cmp	r4, r3
 8001248:	419b      	sbcs	r3, r3
 800124a:	444f      	add	r7, r9
 800124c:	46ba      	mov	sl, r7
 800124e:	425b      	negs	r3, r3
 8001250:	449a      	add	sl, r3
 8001252:	4653      	mov	r3, sl
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	d400      	bmi.n	800125a <__aeabi_dsub+0x412>
 8001258:	e780      	b.n	800115c <__aeabi_dsub+0x314>
 800125a:	4652      	mov	r2, sl
 800125c:	4bb6      	ldr	r3, [pc, #728]	; (8001538 <__aeabi_dsub+0x6f0>)
 800125e:	2601      	movs	r6, #1
 8001260:	401a      	ands	r2, r3
 8001262:	4692      	mov	sl, r2
 8001264:	e77a      	b.n	800115c <__aeabi_dsub+0x314>
 8001266:	4cb3      	ldr	r4, [pc, #716]	; (8001534 <__aeabi_dsub+0x6ec>)
 8001268:	42a2      	cmp	r2, r4
 800126a:	d100      	bne.n	800126e <__aeabi_dsub+0x426>
 800126c:	e0c0      	b.n	80013f0 <__aeabi_dsub+0x5a8>
 800126e:	2480      	movs	r4, #128	; 0x80
 8001270:	464d      	mov	r5, r9
 8001272:	0424      	lsls	r4, r4, #16
 8001274:	4325      	orrs	r5, r4
 8001276:	46a9      	mov	r9, r5
 8001278:	4664      	mov	r4, ip
 800127a:	2c38      	cmp	r4, #56	; 0x38
 800127c:	dc53      	bgt.n	8001326 <__aeabi_dsub+0x4de>
 800127e:	4661      	mov	r1, ip
 8001280:	2c1f      	cmp	r4, #31
 8001282:	dd00      	ble.n	8001286 <__aeabi_dsub+0x43e>
 8001284:	e0cd      	b.n	8001422 <__aeabi_dsub+0x5da>
 8001286:	2520      	movs	r5, #32
 8001288:	001e      	movs	r6, r3
 800128a:	1b2d      	subs	r5, r5, r4
 800128c:	464c      	mov	r4, r9
 800128e:	40ab      	lsls	r3, r5
 8001290:	40ac      	lsls	r4, r5
 8001292:	40ce      	lsrs	r6, r1
 8001294:	1e5d      	subs	r5, r3, #1
 8001296:	41ab      	sbcs	r3, r5
 8001298:	4334      	orrs	r4, r6
 800129a:	4323      	orrs	r3, r4
 800129c:	464c      	mov	r4, r9
 800129e:	40cc      	lsrs	r4, r1
 80012a0:	1b3f      	subs	r7, r7, r4
 80012a2:	e045      	b.n	8001330 <__aeabi_dsub+0x4e8>
 80012a4:	464a      	mov	r2, r9
 80012a6:	1a1c      	subs	r4, r3, r0
 80012a8:	1bd1      	subs	r1, r2, r7
 80012aa:	42a3      	cmp	r3, r4
 80012ac:	4192      	sbcs	r2, r2
 80012ae:	4252      	negs	r2, r2
 80012b0:	4692      	mov	sl, r2
 80012b2:	000a      	movs	r2, r1
 80012b4:	4651      	mov	r1, sl
 80012b6:	1a52      	subs	r2, r2, r1
 80012b8:	4692      	mov	sl, r2
 80012ba:	0212      	lsls	r2, r2, #8
 80012bc:	d500      	bpl.n	80012c0 <__aeabi_dsub+0x478>
 80012be:	e083      	b.n	80013c8 <__aeabi_dsub+0x580>
 80012c0:	4653      	mov	r3, sl
 80012c2:	4323      	orrs	r3, r4
 80012c4:	d000      	beq.n	80012c8 <__aeabi_dsub+0x480>
 80012c6:	e621      	b.n	8000f0c <__aeabi_dsub+0xc4>
 80012c8:	2200      	movs	r2, #0
 80012ca:	2500      	movs	r5, #0
 80012cc:	e753      	b.n	8001176 <__aeabi_dsub+0x32e>
 80012ce:	181c      	adds	r4, r3, r0
 80012d0:	429c      	cmp	r4, r3
 80012d2:	419b      	sbcs	r3, r3
 80012d4:	444f      	add	r7, r9
 80012d6:	46ba      	mov	sl, r7
 80012d8:	425b      	negs	r3, r3
 80012da:	449a      	add	sl, r3
 80012dc:	4653      	mov	r3, sl
 80012de:	2601      	movs	r6, #1
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	d400      	bmi.n	80012e6 <__aeabi_dsub+0x49e>
 80012e4:	e73a      	b.n	800115c <__aeabi_dsub+0x314>
 80012e6:	2602      	movs	r6, #2
 80012e8:	4652      	mov	r2, sl
 80012ea:	4b93      	ldr	r3, [pc, #588]	; (8001538 <__aeabi_dsub+0x6f0>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	401a      	ands	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	4021      	ands	r1, r4
 80012f4:	0862      	lsrs	r2, r4, #1
 80012f6:	430a      	orrs	r2, r1
 80012f8:	07dc      	lsls	r4, r3, #31
 80012fa:	085b      	lsrs	r3, r3, #1
 80012fc:	469a      	mov	sl, r3
 80012fe:	4314      	orrs	r4, r2
 8001300:	e62c      	b.n	8000f5c <__aeabi_dsub+0x114>
 8001302:	0039      	movs	r1, r7
 8001304:	3a20      	subs	r2, #32
 8001306:	40d1      	lsrs	r1, r2
 8001308:	4662      	mov	r2, ip
 800130a:	2a20      	cmp	r2, #32
 800130c:	d006      	beq.n	800131c <__aeabi_dsub+0x4d4>
 800130e:	4664      	mov	r4, ip
 8001310:	2240      	movs	r2, #64	; 0x40
 8001312:	1b12      	subs	r2, r2, r4
 8001314:	003c      	movs	r4, r7
 8001316:	4094      	lsls	r4, r2
 8001318:	4304      	orrs	r4, r0
 800131a:	9401      	str	r4, [sp, #4]
 800131c:	9c01      	ldr	r4, [sp, #4]
 800131e:	1e62      	subs	r2, r4, #1
 8001320:	4194      	sbcs	r4, r2
 8001322:	430c      	orrs	r4, r1
 8001324:	e5e3      	b.n	8000eee <__aeabi_dsub+0xa6>
 8001326:	4649      	mov	r1, r9
 8001328:	4319      	orrs	r1, r3
 800132a:	000b      	movs	r3, r1
 800132c:	1e5c      	subs	r4, r3, #1
 800132e:	41a3      	sbcs	r3, r4
 8001330:	1ac4      	subs	r4, r0, r3
 8001332:	42a0      	cmp	r0, r4
 8001334:	419b      	sbcs	r3, r3
 8001336:	425b      	negs	r3, r3
 8001338:	1afb      	subs	r3, r7, r3
 800133a:	469a      	mov	sl, r3
 800133c:	465d      	mov	r5, fp
 800133e:	0016      	movs	r6, r2
 8001340:	e5dc      	b.n	8000efc <__aeabi_dsub+0xb4>
 8001342:	4649      	mov	r1, r9
 8001344:	4319      	orrs	r1, r3
 8001346:	d100      	bne.n	800134a <__aeabi_dsub+0x502>
 8001348:	e0ae      	b.n	80014a8 <__aeabi_dsub+0x660>
 800134a:	4661      	mov	r1, ip
 800134c:	4664      	mov	r4, ip
 800134e:	3901      	subs	r1, #1
 8001350:	2c01      	cmp	r4, #1
 8001352:	d100      	bne.n	8001356 <__aeabi_dsub+0x50e>
 8001354:	e0e0      	b.n	8001518 <__aeabi_dsub+0x6d0>
 8001356:	4c77      	ldr	r4, [pc, #476]	; (8001534 <__aeabi_dsub+0x6ec>)
 8001358:	45a4      	cmp	ip, r4
 800135a:	d056      	beq.n	800140a <__aeabi_dsub+0x5c2>
 800135c:	468c      	mov	ip, r1
 800135e:	e69a      	b.n	8001096 <__aeabi_dsub+0x24e>
 8001360:	4661      	mov	r1, ip
 8001362:	2220      	movs	r2, #32
 8001364:	003c      	movs	r4, r7
 8001366:	1a52      	subs	r2, r2, r1
 8001368:	4094      	lsls	r4, r2
 800136a:	0001      	movs	r1, r0
 800136c:	4090      	lsls	r0, r2
 800136e:	46a0      	mov	r8, r4
 8001370:	4664      	mov	r4, ip
 8001372:	1e42      	subs	r2, r0, #1
 8001374:	4190      	sbcs	r0, r2
 8001376:	4662      	mov	r2, ip
 8001378:	40e1      	lsrs	r1, r4
 800137a:	4644      	mov	r4, r8
 800137c:	40d7      	lsrs	r7, r2
 800137e:	430c      	orrs	r4, r1
 8001380:	4304      	orrs	r4, r0
 8001382:	44b9      	add	r9, r7
 8001384:	e701      	b.n	800118a <__aeabi_dsub+0x342>
 8001386:	496b      	ldr	r1, [pc, #428]	; (8001534 <__aeabi_dsub+0x6ec>)
 8001388:	428a      	cmp	r2, r1
 800138a:	d100      	bne.n	800138e <__aeabi_dsub+0x546>
 800138c:	e70c      	b.n	80011a8 <__aeabi_dsub+0x360>
 800138e:	1818      	adds	r0, r3, r0
 8001390:	4298      	cmp	r0, r3
 8001392:	419b      	sbcs	r3, r3
 8001394:	444f      	add	r7, r9
 8001396:	425b      	negs	r3, r3
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	07dc      	lsls	r4, r3, #31
 800139c:	0840      	lsrs	r0, r0, #1
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	469a      	mov	sl, r3
 80013a2:	0016      	movs	r6, r2
 80013a4:	4304      	orrs	r4, r0
 80013a6:	e6d9      	b.n	800115c <__aeabi_dsub+0x314>
 80013a8:	2a00      	cmp	r2, #0
 80013aa:	d000      	beq.n	80013ae <__aeabi_dsub+0x566>
 80013ac:	e081      	b.n	80014b2 <__aeabi_dsub+0x66a>
 80013ae:	003b      	movs	r3, r7
 80013b0:	4303      	orrs	r3, r0
 80013b2:	d11d      	bne.n	80013f0 <__aeabi_dsub+0x5a8>
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	2500      	movs	r5, #0
 80013b8:	0312      	lsls	r2, r2, #12
 80013ba:	e70b      	b.n	80011d4 <__aeabi_dsub+0x38c>
 80013bc:	08c0      	lsrs	r0, r0, #3
 80013be:	077b      	lsls	r3, r7, #29
 80013c0:	465d      	mov	r5, fp
 80013c2:	4303      	orrs	r3, r0
 80013c4:	08fa      	lsrs	r2, r7, #3
 80013c6:	e6d3      	b.n	8001170 <__aeabi_dsub+0x328>
 80013c8:	1ac4      	subs	r4, r0, r3
 80013ca:	42a0      	cmp	r0, r4
 80013cc:	4180      	sbcs	r0, r0
 80013ce:	464b      	mov	r3, r9
 80013d0:	4240      	negs	r0, r0
 80013d2:	1aff      	subs	r7, r7, r3
 80013d4:	1a3b      	subs	r3, r7, r0
 80013d6:	469a      	mov	sl, r3
 80013d8:	465d      	mov	r5, fp
 80013da:	e597      	b.n	8000f0c <__aeabi_dsub+0xc4>
 80013dc:	1a1c      	subs	r4, r3, r0
 80013de:	464a      	mov	r2, r9
 80013e0:	42a3      	cmp	r3, r4
 80013e2:	419b      	sbcs	r3, r3
 80013e4:	1bd7      	subs	r7, r2, r7
 80013e6:	425b      	negs	r3, r3
 80013e8:	1afb      	subs	r3, r7, r3
 80013ea:	469a      	mov	sl, r3
 80013ec:	2601      	movs	r6, #1
 80013ee:	e585      	b.n	8000efc <__aeabi_dsub+0xb4>
 80013f0:	08c0      	lsrs	r0, r0, #3
 80013f2:	077b      	lsls	r3, r7, #29
 80013f4:	465d      	mov	r5, fp
 80013f6:	4303      	orrs	r3, r0
 80013f8:	08fa      	lsrs	r2, r7, #3
 80013fa:	e6e7      	b.n	80011cc <__aeabi_dsub+0x384>
 80013fc:	464a      	mov	r2, r9
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	0752      	lsls	r2, r2, #29
 8001402:	4313      	orrs	r3, r2
 8001404:	464a      	mov	r2, r9
 8001406:	08d2      	lsrs	r2, r2, #3
 8001408:	e6b5      	b.n	8001176 <__aeabi_dsub+0x32e>
 800140a:	08c0      	lsrs	r0, r0, #3
 800140c:	077b      	lsls	r3, r7, #29
 800140e:	4303      	orrs	r3, r0
 8001410:	08fa      	lsrs	r2, r7, #3
 8001412:	e6db      	b.n	80011cc <__aeabi_dsub+0x384>
 8001414:	4649      	mov	r1, r9
 8001416:	4319      	orrs	r1, r3
 8001418:	000b      	movs	r3, r1
 800141a:	1e59      	subs	r1, r3, #1
 800141c:	418b      	sbcs	r3, r1
 800141e:	001c      	movs	r4, r3
 8001420:	e653      	b.n	80010ca <__aeabi_dsub+0x282>
 8001422:	464d      	mov	r5, r9
 8001424:	3c20      	subs	r4, #32
 8001426:	40e5      	lsrs	r5, r4
 8001428:	2920      	cmp	r1, #32
 800142a:	d005      	beq.n	8001438 <__aeabi_dsub+0x5f0>
 800142c:	2440      	movs	r4, #64	; 0x40
 800142e:	1a64      	subs	r4, r4, r1
 8001430:	4649      	mov	r1, r9
 8001432:	40a1      	lsls	r1, r4
 8001434:	430b      	orrs	r3, r1
 8001436:	4698      	mov	r8, r3
 8001438:	4643      	mov	r3, r8
 800143a:	1e5c      	subs	r4, r3, #1
 800143c:	41a3      	sbcs	r3, r4
 800143e:	432b      	orrs	r3, r5
 8001440:	e776      	b.n	8001330 <__aeabi_dsub+0x4e8>
 8001442:	2a00      	cmp	r2, #0
 8001444:	d0e1      	beq.n	800140a <__aeabi_dsub+0x5c2>
 8001446:	003a      	movs	r2, r7
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	4302      	orrs	r2, r0
 800144c:	d100      	bne.n	8001450 <__aeabi_dsub+0x608>
 800144e:	e6b8      	b.n	80011c2 <__aeabi_dsub+0x37a>
 8001450:	464a      	mov	r2, r9
 8001452:	0752      	lsls	r2, r2, #29
 8001454:	2480      	movs	r4, #128	; 0x80
 8001456:	4313      	orrs	r3, r2
 8001458:	464a      	mov	r2, r9
 800145a:	0324      	lsls	r4, r4, #12
 800145c:	08d2      	lsrs	r2, r2, #3
 800145e:	4222      	tst	r2, r4
 8001460:	d007      	beq.n	8001472 <__aeabi_dsub+0x62a>
 8001462:	08fe      	lsrs	r6, r7, #3
 8001464:	4226      	tst	r6, r4
 8001466:	d104      	bne.n	8001472 <__aeabi_dsub+0x62a>
 8001468:	465d      	mov	r5, fp
 800146a:	0032      	movs	r2, r6
 800146c:	08c3      	lsrs	r3, r0, #3
 800146e:	077f      	lsls	r7, r7, #29
 8001470:	433b      	orrs	r3, r7
 8001472:	0f59      	lsrs	r1, r3, #29
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	0749      	lsls	r1, r1, #29
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	430b      	orrs	r3, r1
 800147c:	e6a6      	b.n	80011cc <__aeabi_dsub+0x384>
 800147e:	1ac4      	subs	r4, r0, r3
 8001480:	42a0      	cmp	r0, r4
 8001482:	4180      	sbcs	r0, r0
 8001484:	464b      	mov	r3, r9
 8001486:	4240      	negs	r0, r0
 8001488:	1aff      	subs	r7, r7, r3
 800148a:	1a3b      	subs	r3, r7, r0
 800148c:	469a      	mov	sl, r3
 800148e:	465d      	mov	r5, fp
 8001490:	2601      	movs	r6, #1
 8001492:	e533      	b.n	8000efc <__aeabi_dsub+0xb4>
 8001494:	003b      	movs	r3, r7
 8001496:	4303      	orrs	r3, r0
 8001498:	d100      	bne.n	800149c <__aeabi_dsub+0x654>
 800149a:	e715      	b.n	80012c8 <__aeabi_dsub+0x480>
 800149c:	08c0      	lsrs	r0, r0, #3
 800149e:	077b      	lsls	r3, r7, #29
 80014a0:	465d      	mov	r5, fp
 80014a2:	4303      	orrs	r3, r0
 80014a4:	08fa      	lsrs	r2, r7, #3
 80014a6:	e666      	b.n	8001176 <__aeabi_dsub+0x32e>
 80014a8:	08c0      	lsrs	r0, r0, #3
 80014aa:	077b      	lsls	r3, r7, #29
 80014ac:	4303      	orrs	r3, r0
 80014ae:	08fa      	lsrs	r2, r7, #3
 80014b0:	e65e      	b.n	8001170 <__aeabi_dsub+0x328>
 80014b2:	003a      	movs	r2, r7
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	4302      	orrs	r2, r0
 80014b8:	d100      	bne.n	80014bc <__aeabi_dsub+0x674>
 80014ba:	e682      	b.n	80011c2 <__aeabi_dsub+0x37a>
 80014bc:	464a      	mov	r2, r9
 80014be:	0752      	lsls	r2, r2, #29
 80014c0:	2480      	movs	r4, #128	; 0x80
 80014c2:	4313      	orrs	r3, r2
 80014c4:	464a      	mov	r2, r9
 80014c6:	0324      	lsls	r4, r4, #12
 80014c8:	08d2      	lsrs	r2, r2, #3
 80014ca:	4222      	tst	r2, r4
 80014cc:	d007      	beq.n	80014de <__aeabi_dsub+0x696>
 80014ce:	08fe      	lsrs	r6, r7, #3
 80014d0:	4226      	tst	r6, r4
 80014d2:	d104      	bne.n	80014de <__aeabi_dsub+0x696>
 80014d4:	465d      	mov	r5, fp
 80014d6:	0032      	movs	r2, r6
 80014d8:	08c3      	lsrs	r3, r0, #3
 80014da:	077f      	lsls	r7, r7, #29
 80014dc:	433b      	orrs	r3, r7
 80014de:	0f59      	lsrs	r1, r3, #29
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	08db      	lsrs	r3, r3, #3
 80014e4:	0749      	lsls	r1, r1, #29
 80014e6:	430b      	orrs	r3, r1
 80014e8:	e670      	b.n	80011cc <__aeabi_dsub+0x384>
 80014ea:	08c0      	lsrs	r0, r0, #3
 80014ec:	077b      	lsls	r3, r7, #29
 80014ee:	4303      	orrs	r3, r0
 80014f0:	08fa      	lsrs	r2, r7, #3
 80014f2:	e640      	b.n	8001176 <__aeabi_dsub+0x32e>
 80014f4:	464c      	mov	r4, r9
 80014f6:	3920      	subs	r1, #32
 80014f8:	40cc      	lsrs	r4, r1
 80014fa:	4661      	mov	r1, ip
 80014fc:	2920      	cmp	r1, #32
 80014fe:	d006      	beq.n	800150e <__aeabi_dsub+0x6c6>
 8001500:	4666      	mov	r6, ip
 8001502:	2140      	movs	r1, #64	; 0x40
 8001504:	1b89      	subs	r1, r1, r6
 8001506:	464e      	mov	r6, r9
 8001508:	408e      	lsls	r6, r1
 800150a:	4333      	orrs	r3, r6
 800150c:	4698      	mov	r8, r3
 800150e:	4643      	mov	r3, r8
 8001510:	1e59      	subs	r1, r3, #1
 8001512:	418b      	sbcs	r3, r1
 8001514:	431c      	orrs	r4, r3
 8001516:	e5d8      	b.n	80010ca <__aeabi_dsub+0x282>
 8001518:	181c      	adds	r4, r3, r0
 800151a:	4284      	cmp	r4, r0
 800151c:	4180      	sbcs	r0, r0
 800151e:	444f      	add	r7, r9
 8001520:	46ba      	mov	sl, r7
 8001522:	4240      	negs	r0, r0
 8001524:	4482      	add	sl, r0
 8001526:	e6d9      	b.n	80012dc <__aeabi_dsub+0x494>
 8001528:	4653      	mov	r3, sl
 800152a:	4323      	orrs	r3, r4
 800152c:	d100      	bne.n	8001530 <__aeabi_dsub+0x6e8>
 800152e:	e6cb      	b.n	80012c8 <__aeabi_dsub+0x480>
 8001530:	e614      	b.n	800115c <__aeabi_dsub+0x314>
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	000007ff 	.word	0x000007ff
 8001538:	ff7fffff 	.word	0xff7fffff
 800153c:	000007fe 	.word	0x000007fe
 8001540:	2300      	movs	r3, #0
 8001542:	4a01      	ldr	r2, [pc, #4]	; (8001548 <__aeabi_dsub+0x700>)
 8001544:	001c      	movs	r4, r3
 8001546:	e529      	b.n	8000f9c <__aeabi_dsub+0x154>
 8001548:	000007ff 	.word	0x000007ff

0800154c <__aeabi_d2iz>:
 800154c:	000a      	movs	r2, r1
 800154e:	b530      	push	{r4, r5, lr}
 8001550:	4c13      	ldr	r4, [pc, #76]	; (80015a0 <__aeabi_d2iz+0x54>)
 8001552:	0053      	lsls	r3, r2, #1
 8001554:	0309      	lsls	r1, r1, #12
 8001556:	0005      	movs	r5, r0
 8001558:	0b09      	lsrs	r1, r1, #12
 800155a:	2000      	movs	r0, #0
 800155c:	0d5b      	lsrs	r3, r3, #21
 800155e:	0fd2      	lsrs	r2, r2, #31
 8001560:	42a3      	cmp	r3, r4
 8001562:	dd04      	ble.n	800156e <__aeabi_d2iz+0x22>
 8001564:	480f      	ldr	r0, [pc, #60]	; (80015a4 <__aeabi_d2iz+0x58>)
 8001566:	4283      	cmp	r3, r0
 8001568:	dd02      	ble.n	8001570 <__aeabi_d2iz+0x24>
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <__aeabi_d2iz+0x5c>)
 800156c:	18d0      	adds	r0, r2, r3
 800156e:	bd30      	pop	{r4, r5, pc}
 8001570:	2080      	movs	r0, #128	; 0x80
 8001572:	0340      	lsls	r0, r0, #13
 8001574:	4301      	orrs	r1, r0
 8001576:	480d      	ldr	r0, [pc, #52]	; (80015ac <__aeabi_d2iz+0x60>)
 8001578:	1ac0      	subs	r0, r0, r3
 800157a:	281f      	cmp	r0, #31
 800157c:	dd08      	ble.n	8001590 <__aeabi_d2iz+0x44>
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <__aeabi_d2iz+0x64>)
 8001580:	1ac3      	subs	r3, r0, r3
 8001582:	40d9      	lsrs	r1, r3
 8001584:	000b      	movs	r3, r1
 8001586:	4258      	negs	r0, r3
 8001588:	2a00      	cmp	r2, #0
 800158a:	d1f0      	bne.n	800156e <__aeabi_d2iz+0x22>
 800158c:	0018      	movs	r0, r3
 800158e:	e7ee      	b.n	800156e <__aeabi_d2iz+0x22>
 8001590:	4c08      	ldr	r4, [pc, #32]	; (80015b4 <__aeabi_d2iz+0x68>)
 8001592:	40c5      	lsrs	r5, r0
 8001594:	46a4      	mov	ip, r4
 8001596:	4463      	add	r3, ip
 8001598:	4099      	lsls	r1, r3
 800159a:	000b      	movs	r3, r1
 800159c:	432b      	orrs	r3, r5
 800159e:	e7f2      	b.n	8001586 <__aeabi_d2iz+0x3a>
 80015a0:	000003fe 	.word	0x000003fe
 80015a4:	0000041d 	.word	0x0000041d
 80015a8:	7fffffff 	.word	0x7fffffff
 80015ac:	00000433 	.word	0x00000433
 80015b0:	00000413 	.word	0x00000413
 80015b4:	fffffbed 	.word	0xfffffbed

080015b8 <__aeabi_f2d>:
 80015b8:	b570      	push	{r4, r5, r6, lr}
 80015ba:	0242      	lsls	r2, r0, #9
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	0fc4      	lsrs	r4, r0, #31
 80015c0:	20fe      	movs	r0, #254	; 0xfe
 80015c2:	0e1b      	lsrs	r3, r3, #24
 80015c4:	1c59      	adds	r1, r3, #1
 80015c6:	0a55      	lsrs	r5, r2, #9
 80015c8:	4208      	tst	r0, r1
 80015ca:	d00c      	beq.n	80015e6 <__aeabi_f2d+0x2e>
 80015cc:	21e0      	movs	r1, #224	; 0xe0
 80015ce:	0089      	lsls	r1, r1, #2
 80015d0:	468c      	mov	ip, r1
 80015d2:	076d      	lsls	r5, r5, #29
 80015d4:	0b12      	lsrs	r2, r2, #12
 80015d6:	4463      	add	r3, ip
 80015d8:	051b      	lsls	r3, r3, #20
 80015da:	4313      	orrs	r3, r2
 80015dc:	07e4      	lsls	r4, r4, #31
 80015de:	4323      	orrs	r3, r4
 80015e0:	0028      	movs	r0, r5
 80015e2:	0019      	movs	r1, r3
 80015e4:	bd70      	pop	{r4, r5, r6, pc}
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d114      	bne.n	8001614 <__aeabi_f2d+0x5c>
 80015ea:	2d00      	cmp	r5, #0
 80015ec:	d01b      	beq.n	8001626 <__aeabi_f2d+0x6e>
 80015ee:	0028      	movs	r0, r5
 80015f0:	f000 f868 	bl	80016c4 <__clzsi2>
 80015f4:	280a      	cmp	r0, #10
 80015f6:	dc1c      	bgt.n	8001632 <__aeabi_f2d+0x7a>
 80015f8:	230b      	movs	r3, #11
 80015fa:	002a      	movs	r2, r5
 80015fc:	1a1b      	subs	r3, r3, r0
 80015fe:	40da      	lsrs	r2, r3
 8001600:	0003      	movs	r3, r0
 8001602:	3315      	adds	r3, #21
 8001604:	409d      	lsls	r5, r3
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <__aeabi_f2d+0x88>)
 8001608:	0312      	lsls	r2, r2, #12
 800160a:	1a1b      	subs	r3, r3, r0
 800160c:	055b      	lsls	r3, r3, #21
 800160e:	0b12      	lsrs	r2, r2, #12
 8001610:	0d5b      	lsrs	r3, r3, #21
 8001612:	e7e1      	b.n	80015d8 <__aeabi_f2d+0x20>
 8001614:	2d00      	cmp	r5, #0
 8001616:	d009      	beq.n	800162c <__aeabi_f2d+0x74>
 8001618:	0b13      	lsrs	r3, r2, #12
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	0312      	lsls	r2, r2, #12
 800161e:	431a      	orrs	r2, r3
 8001620:	076d      	lsls	r5, r5, #29
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <__aeabi_f2d+0x8c>)
 8001624:	e7d8      	b.n	80015d8 <__aeabi_f2d+0x20>
 8001626:	2300      	movs	r3, #0
 8001628:	2200      	movs	r2, #0
 800162a:	e7d5      	b.n	80015d8 <__aeabi_f2d+0x20>
 800162c:	2200      	movs	r2, #0
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <__aeabi_f2d+0x8c>)
 8001630:	e7d2      	b.n	80015d8 <__aeabi_f2d+0x20>
 8001632:	0003      	movs	r3, r0
 8001634:	002a      	movs	r2, r5
 8001636:	3b0b      	subs	r3, #11
 8001638:	409a      	lsls	r2, r3
 800163a:	2500      	movs	r5, #0
 800163c:	e7e3      	b.n	8001606 <__aeabi_f2d+0x4e>
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	00000389 	.word	0x00000389
 8001644:	000007ff 	.word	0x000007ff

08001648 <__aeabi_cdrcmple>:
 8001648:	4684      	mov	ip, r0
 800164a:	0010      	movs	r0, r2
 800164c:	4662      	mov	r2, ip
 800164e:	468c      	mov	ip, r1
 8001650:	0019      	movs	r1, r3
 8001652:	4663      	mov	r3, ip
 8001654:	e000      	b.n	8001658 <__aeabi_cdcmpeq>
 8001656:	46c0      	nop			; (mov r8, r8)

08001658 <__aeabi_cdcmpeq>:
 8001658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800165a:	f000 f8f9 	bl	8001850 <__ledf2>
 800165e:	2800      	cmp	r0, #0
 8001660:	d401      	bmi.n	8001666 <__aeabi_cdcmpeq+0xe>
 8001662:	2100      	movs	r1, #0
 8001664:	42c8      	cmn	r0, r1
 8001666:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001668 <__aeabi_dcmpeq>:
 8001668:	b510      	push	{r4, lr}
 800166a:	f000 f849 	bl	8001700 <__eqdf2>
 800166e:	4240      	negs	r0, r0
 8001670:	3001      	adds	r0, #1
 8001672:	bd10      	pop	{r4, pc}

08001674 <__aeabi_dcmplt>:
 8001674:	b510      	push	{r4, lr}
 8001676:	f000 f8eb 	bl	8001850 <__ledf2>
 800167a:	2800      	cmp	r0, #0
 800167c:	db01      	blt.n	8001682 <__aeabi_dcmplt+0xe>
 800167e:	2000      	movs	r0, #0
 8001680:	bd10      	pop	{r4, pc}
 8001682:	2001      	movs	r0, #1
 8001684:	bd10      	pop	{r4, pc}
 8001686:	46c0      	nop			; (mov r8, r8)

08001688 <__aeabi_dcmple>:
 8001688:	b510      	push	{r4, lr}
 800168a:	f000 f8e1 	bl	8001850 <__ledf2>
 800168e:	2800      	cmp	r0, #0
 8001690:	dd01      	ble.n	8001696 <__aeabi_dcmple+0xe>
 8001692:	2000      	movs	r0, #0
 8001694:	bd10      	pop	{r4, pc}
 8001696:	2001      	movs	r0, #1
 8001698:	bd10      	pop	{r4, pc}
 800169a:	46c0      	nop			; (mov r8, r8)

0800169c <__aeabi_dcmpgt>:
 800169c:	b510      	push	{r4, lr}
 800169e:	f000 f871 	bl	8001784 <__gedf2>
 80016a2:	2800      	cmp	r0, #0
 80016a4:	dc01      	bgt.n	80016aa <__aeabi_dcmpgt+0xe>
 80016a6:	2000      	movs	r0, #0
 80016a8:	bd10      	pop	{r4, pc}
 80016aa:	2001      	movs	r0, #1
 80016ac:	bd10      	pop	{r4, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)

080016b0 <__aeabi_dcmpge>:
 80016b0:	b510      	push	{r4, lr}
 80016b2:	f000 f867 	bl	8001784 <__gedf2>
 80016b6:	2800      	cmp	r0, #0
 80016b8:	da01      	bge.n	80016be <__aeabi_dcmpge+0xe>
 80016ba:	2000      	movs	r0, #0
 80016bc:	bd10      	pop	{r4, pc}
 80016be:	2001      	movs	r0, #1
 80016c0:	bd10      	pop	{r4, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)

080016c4 <__clzsi2>:
 80016c4:	211c      	movs	r1, #28
 80016c6:	2301      	movs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	4298      	cmp	r0, r3
 80016cc:	d301      	bcc.n	80016d2 <__clzsi2+0xe>
 80016ce:	0c00      	lsrs	r0, r0, #16
 80016d0:	3910      	subs	r1, #16
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	4298      	cmp	r0, r3
 80016d6:	d301      	bcc.n	80016dc <__clzsi2+0x18>
 80016d8:	0a00      	lsrs	r0, r0, #8
 80016da:	3908      	subs	r1, #8
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	4298      	cmp	r0, r3
 80016e0:	d301      	bcc.n	80016e6 <__clzsi2+0x22>
 80016e2:	0900      	lsrs	r0, r0, #4
 80016e4:	3904      	subs	r1, #4
 80016e6:	a202      	add	r2, pc, #8	; (adr r2, 80016f0 <__clzsi2+0x2c>)
 80016e8:	5c10      	ldrb	r0, [r2, r0]
 80016ea:	1840      	adds	r0, r0, r1
 80016ec:	4770      	bx	lr
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	02020304 	.word	0x02020304
 80016f4:	01010101 	.word	0x01010101
	...

08001700 <__eqdf2>:
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	464e      	mov	r6, r9
 8001704:	4645      	mov	r5, r8
 8001706:	46de      	mov	lr, fp
 8001708:	4657      	mov	r7, sl
 800170a:	4690      	mov	r8, r2
 800170c:	b5e0      	push	{r5, r6, r7, lr}
 800170e:	0017      	movs	r7, r2
 8001710:	031a      	lsls	r2, r3, #12
 8001712:	0b12      	lsrs	r2, r2, #12
 8001714:	0005      	movs	r5, r0
 8001716:	4684      	mov	ip, r0
 8001718:	4819      	ldr	r0, [pc, #100]	; (8001780 <__eqdf2+0x80>)
 800171a:	030e      	lsls	r6, r1, #12
 800171c:	004c      	lsls	r4, r1, #1
 800171e:	4691      	mov	r9, r2
 8001720:	005a      	lsls	r2, r3, #1
 8001722:	0fdb      	lsrs	r3, r3, #31
 8001724:	469b      	mov	fp, r3
 8001726:	0b36      	lsrs	r6, r6, #12
 8001728:	0d64      	lsrs	r4, r4, #21
 800172a:	0fc9      	lsrs	r1, r1, #31
 800172c:	0d52      	lsrs	r2, r2, #21
 800172e:	4284      	cmp	r4, r0
 8001730:	d019      	beq.n	8001766 <__eqdf2+0x66>
 8001732:	4282      	cmp	r2, r0
 8001734:	d010      	beq.n	8001758 <__eqdf2+0x58>
 8001736:	2001      	movs	r0, #1
 8001738:	4294      	cmp	r4, r2
 800173a:	d10e      	bne.n	800175a <__eqdf2+0x5a>
 800173c:	454e      	cmp	r6, r9
 800173e:	d10c      	bne.n	800175a <__eqdf2+0x5a>
 8001740:	2001      	movs	r0, #1
 8001742:	45c4      	cmp	ip, r8
 8001744:	d109      	bne.n	800175a <__eqdf2+0x5a>
 8001746:	4559      	cmp	r1, fp
 8001748:	d017      	beq.n	800177a <__eqdf2+0x7a>
 800174a:	2c00      	cmp	r4, #0
 800174c:	d105      	bne.n	800175a <__eqdf2+0x5a>
 800174e:	0030      	movs	r0, r6
 8001750:	4328      	orrs	r0, r5
 8001752:	1e43      	subs	r3, r0, #1
 8001754:	4198      	sbcs	r0, r3
 8001756:	e000      	b.n	800175a <__eqdf2+0x5a>
 8001758:	2001      	movs	r0, #1
 800175a:	bcf0      	pop	{r4, r5, r6, r7}
 800175c:	46bb      	mov	fp, r7
 800175e:	46b2      	mov	sl, r6
 8001760:	46a9      	mov	r9, r5
 8001762:	46a0      	mov	r8, r4
 8001764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001766:	0033      	movs	r3, r6
 8001768:	2001      	movs	r0, #1
 800176a:	432b      	orrs	r3, r5
 800176c:	d1f5      	bne.n	800175a <__eqdf2+0x5a>
 800176e:	42a2      	cmp	r2, r4
 8001770:	d1f3      	bne.n	800175a <__eqdf2+0x5a>
 8001772:	464b      	mov	r3, r9
 8001774:	433b      	orrs	r3, r7
 8001776:	d1f0      	bne.n	800175a <__eqdf2+0x5a>
 8001778:	e7e2      	b.n	8001740 <__eqdf2+0x40>
 800177a:	2000      	movs	r0, #0
 800177c:	e7ed      	b.n	800175a <__eqdf2+0x5a>
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	000007ff 	.word	0x000007ff

08001784 <__gedf2>:
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001786:	4647      	mov	r7, r8
 8001788:	46ce      	mov	lr, r9
 800178a:	0004      	movs	r4, r0
 800178c:	0018      	movs	r0, r3
 800178e:	0016      	movs	r6, r2
 8001790:	031b      	lsls	r3, r3, #12
 8001792:	0b1b      	lsrs	r3, r3, #12
 8001794:	4d2d      	ldr	r5, [pc, #180]	; (800184c <__gedf2+0xc8>)
 8001796:	004a      	lsls	r2, r1, #1
 8001798:	4699      	mov	r9, r3
 800179a:	b580      	push	{r7, lr}
 800179c:	0043      	lsls	r3, r0, #1
 800179e:	030f      	lsls	r7, r1, #12
 80017a0:	46a4      	mov	ip, r4
 80017a2:	46b0      	mov	r8, r6
 80017a4:	0b3f      	lsrs	r7, r7, #12
 80017a6:	0d52      	lsrs	r2, r2, #21
 80017a8:	0fc9      	lsrs	r1, r1, #31
 80017aa:	0d5b      	lsrs	r3, r3, #21
 80017ac:	0fc0      	lsrs	r0, r0, #31
 80017ae:	42aa      	cmp	r2, r5
 80017b0:	d021      	beq.n	80017f6 <__gedf2+0x72>
 80017b2:	42ab      	cmp	r3, r5
 80017b4:	d013      	beq.n	80017de <__gedf2+0x5a>
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	d122      	bne.n	8001800 <__gedf2+0x7c>
 80017ba:	433c      	orrs	r4, r7
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <__gedf2+0x42>
 80017c0:	464d      	mov	r5, r9
 80017c2:	432e      	orrs	r6, r5
 80017c4:	d022      	beq.n	800180c <__gedf2+0x88>
 80017c6:	2c00      	cmp	r4, #0
 80017c8:	d010      	beq.n	80017ec <__gedf2+0x68>
 80017ca:	4281      	cmp	r1, r0
 80017cc:	d022      	beq.n	8001814 <__gedf2+0x90>
 80017ce:	2002      	movs	r0, #2
 80017d0:	3901      	subs	r1, #1
 80017d2:	4008      	ands	r0, r1
 80017d4:	3801      	subs	r0, #1
 80017d6:	bcc0      	pop	{r6, r7}
 80017d8:	46b9      	mov	r9, r7
 80017da:	46b0      	mov	r8, r6
 80017dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017de:	464d      	mov	r5, r9
 80017e0:	432e      	orrs	r6, r5
 80017e2:	d129      	bne.n	8001838 <__gedf2+0xb4>
 80017e4:	2a00      	cmp	r2, #0
 80017e6:	d1f0      	bne.n	80017ca <__gedf2+0x46>
 80017e8:	433c      	orrs	r4, r7
 80017ea:	d1ee      	bne.n	80017ca <__gedf2+0x46>
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d1f2      	bne.n	80017d6 <__gedf2+0x52>
 80017f0:	2001      	movs	r0, #1
 80017f2:	4240      	negs	r0, r0
 80017f4:	e7ef      	b.n	80017d6 <__gedf2+0x52>
 80017f6:	003d      	movs	r5, r7
 80017f8:	4325      	orrs	r5, r4
 80017fa:	d11d      	bne.n	8001838 <__gedf2+0xb4>
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d0ee      	beq.n	80017de <__gedf2+0x5a>
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1e2      	bne.n	80017ca <__gedf2+0x46>
 8001804:	464c      	mov	r4, r9
 8001806:	4326      	orrs	r6, r4
 8001808:	d1df      	bne.n	80017ca <__gedf2+0x46>
 800180a:	e7e0      	b.n	80017ce <__gedf2+0x4a>
 800180c:	2000      	movs	r0, #0
 800180e:	2c00      	cmp	r4, #0
 8001810:	d0e1      	beq.n	80017d6 <__gedf2+0x52>
 8001812:	e7dc      	b.n	80017ce <__gedf2+0x4a>
 8001814:	429a      	cmp	r2, r3
 8001816:	dc0a      	bgt.n	800182e <__gedf2+0xaa>
 8001818:	dbe8      	blt.n	80017ec <__gedf2+0x68>
 800181a:	454f      	cmp	r7, r9
 800181c:	d8d7      	bhi.n	80017ce <__gedf2+0x4a>
 800181e:	d00e      	beq.n	800183e <__gedf2+0xba>
 8001820:	2000      	movs	r0, #0
 8001822:	454f      	cmp	r7, r9
 8001824:	d2d7      	bcs.n	80017d6 <__gedf2+0x52>
 8001826:	2900      	cmp	r1, #0
 8001828:	d0e2      	beq.n	80017f0 <__gedf2+0x6c>
 800182a:	0008      	movs	r0, r1
 800182c:	e7d3      	b.n	80017d6 <__gedf2+0x52>
 800182e:	4243      	negs	r3, r0
 8001830:	4158      	adcs	r0, r3
 8001832:	0040      	lsls	r0, r0, #1
 8001834:	3801      	subs	r0, #1
 8001836:	e7ce      	b.n	80017d6 <__gedf2+0x52>
 8001838:	2002      	movs	r0, #2
 800183a:	4240      	negs	r0, r0
 800183c:	e7cb      	b.n	80017d6 <__gedf2+0x52>
 800183e:	45c4      	cmp	ip, r8
 8001840:	d8c5      	bhi.n	80017ce <__gedf2+0x4a>
 8001842:	2000      	movs	r0, #0
 8001844:	45c4      	cmp	ip, r8
 8001846:	d2c6      	bcs.n	80017d6 <__gedf2+0x52>
 8001848:	e7ed      	b.n	8001826 <__gedf2+0xa2>
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	000007ff 	.word	0x000007ff

08001850 <__ledf2>:
 8001850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001852:	4647      	mov	r7, r8
 8001854:	46ce      	mov	lr, r9
 8001856:	0004      	movs	r4, r0
 8001858:	0018      	movs	r0, r3
 800185a:	0016      	movs	r6, r2
 800185c:	031b      	lsls	r3, r3, #12
 800185e:	0b1b      	lsrs	r3, r3, #12
 8001860:	4d2c      	ldr	r5, [pc, #176]	; (8001914 <__ledf2+0xc4>)
 8001862:	004a      	lsls	r2, r1, #1
 8001864:	4699      	mov	r9, r3
 8001866:	b580      	push	{r7, lr}
 8001868:	0043      	lsls	r3, r0, #1
 800186a:	030f      	lsls	r7, r1, #12
 800186c:	46a4      	mov	ip, r4
 800186e:	46b0      	mov	r8, r6
 8001870:	0b3f      	lsrs	r7, r7, #12
 8001872:	0d52      	lsrs	r2, r2, #21
 8001874:	0fc9      	lsrs	r1, r1, #31
 8001876:	0d5b      	lsrs	r3, r3, #21
 8001878:	0fc0      	lsrs	r0, r0, #31
 800187a:	42aa      	cmp	r2, r5
 800187c:	d00d      	beq.n	800189a <__ledf2+0x4a>
 800187e:	42ab      	cmp	r3, r5
 8001880:	d010      	beq.n	80018a4 <__ledf2+0x54>
 8001882:	2a00      	cmp	r2, #0
 8001884:	d127      	bne.n	80018d6 <__ledf2+0x86>
 8001886:	433c      	orrs	r4, r7
 8001888:	2b00      	cmp	r3, #0
 800188a:	d111      	bne.n	80018b0 <__ledf2+0x60>
 800188c:	464d      	mov	r5, r9
 800188e:	432e      	orrs	r6, r5
 8001890:	d10e      	bne.n	80018b0 <__ledf2+0x60>
 8001892:	2000      	movs	r0, #0
 8001894:	2c00      	cmp	r4, #0
 8001896:	d015      	beq.n	80018c4 <__ledf2+0x74>
 8001898:	e00e      	b.n	80018b8 <__ledf2+0x68>
 800189a:	003d      	movs	r5, r7
 800189c:	4325      	orrs	r5, r4
 800189e:	d110      	bne.n	80018c2 <__ledf2+0x72>
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d118      	bne.n	80018d6 <__ledf2+0x86>
 80018a4:	464d      	mov	r5, r9
 80018a6:	432e      	orrs	r6, r5
 80018a8:	d10b      	bne.n	80018c2 <__ledf2+0x72>
 80018aa:	2a00      	cmp	r2, #0
 80018ac:	d102      	bne.n	80018b4 <__ledf2+0x64>
 80018ae:	433c      	orrs	r4, r7
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	d00b      	beq.n	80018cc <__ledf2+0x7c>
 80018b4:	4281      	cmp	r1, r0
 80018b6:	d014      	beq.n	80018e2 <__ledf2+0x92>
 80018b8:	2002      	movs	r0, #2
 80018ba:	3901      	subs	r1, #1
 80018bc:	4008      	ands	r0, r1
 80018be:	3801      	subs	r0, #1
 80018c0:	e000      	b.n	80018c4 <__ledf2+0x74>
 80018c2:	2002      	movs	r0, #2
 80018c4:	bcc0      	pop	{r6, r7}
 80018c6:	46b9      	mov	r9, r7
 80018c8:	46b0      	mov	r8, r6
 80018ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018cc:	2800      	cmp	r0, #0
 80018ce:	d1f9      	bne.n	80018c4 <__ledf2+0x74>
 80018d0:	2001      	movs	r0, #1
 80018d2:	4240      	negs	r0, r0
 80018d4:	e7f6      	b.n	80018c4 <__ledf2+0x74>
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ec      	bne.n	80018b4 <__ledf2+0x64>
 80018da:	464c      	mov	r4, r9
 80018dc:	4326      	orrs	r6, r4
 80018de:	d1e9      	bne.n	80018b4 <__ledf2+0x64>
 80018e0:	e7ea      	b.n	80018b8 <__ledf2+0x68>
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dd04      	ble.n	80018f0 <__ledf2+0xa0>
 80018e6:	4243      	negs	r3, r0
 80018e8:	4158      	adcs	r0, r3
 80018ea:	0040      	lsls	r0, r0, #1
 80018ec:	3801      	subs	r0, #1
 80018ee:	e7e9      	b.n	80018c4 <__ledf2+0x74>
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbeb      	blt.n	80018cc <__ledf2+0x7c>
 80018f4:	454f      	cmp	r7, r9
 80018f6:	d8df      	bhi.n	80018b8 <__ledf2+0x68>
 80018f8:	d006      	beq.n	8001908 <__ledf2+0xb8>
 80018fa:	2000      	movs	r0, #0
 80018fc:	454f      	cmp	r7, r9
 80018fe:	d2e1      	bcs.n	80018c4 <__ledf2+0x74>
 8001900:	2900      	cmp	r1, #0
 8001902:	d0e5      	beq.n	80018d0 <__ledf2+0x80>
 8001904:	0008      	movs	r0, r1
 8001906:	e7dd      	b.n	80018c4 <__ledf2+0x74>
 8001908:	45c4      	cmp	ip, r8
 800190a:	d8d5      	bhi.n	80018b8 <__ledf2+0x68>
 800190c:	2000      	movs	r0, #0
 800190e:	45c4      	cmp	ip, r8
 8001910:	d2d8      	bcs.n	80018c4 <__ledf2+0x74>
 8001912:	e7f5      	b.n	8001900 <__ledf2+0xb0>
 8001914:	000007ff 	.word	0x000007ff

08001918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191c:	f000 fb64 	bl	8001fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001920:	f000 f80b 	bl	800193a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001924:	f000 f8e8 	bl	8001af8 <MX_GPIO_Init>
  MX_ADC_Init();
 8001928:	f000 f84e 	bl	80019c8 <MX_ADC_Init>
  MX_USART3_UART_Init();
 800192c:	f000 f8b4 	bl	8001a98 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  remote_init();
 8001930:	f000 f90e 	bl	8001b50 <remote_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  remote_process();
 8001934:	f000 f922 	bl	8001b7c <remote_process>
 8001938:	e7fc      	b.n	8001934 <main+0x1c>

0800193a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193a:	b590      	push	{r4, r7, lr}
 800193c:	b091      	sub	sp, #68	; 0x44
 800193e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001940:	2410      	movs	r4, #16
 8001942:	193b      	adds	r3, r7, r4
 8001944:	0018      	movs	r0, r3
 8001946:	2330      	movs	r3, #48	; 0x30
 8001948:	001a      	movs	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	f002 fa82 	bl	8003e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	003b      	movs	r3, r7
 8001952:	0018      	movs	r0, r3
 8001954:	2310      	movs	r3, #16
 8001956:	001a      	movs	r2, r3
 8001958:	2100      	movs	r1, #0
 800195a:	f002 fa7b 	bl	8003e54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800195e:	0021      	movs	r1, r4
 8001960:	187b      	adds	r3, r7, r1
 8001962:	2212      	movs	r2, #18
 8001964:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001966:	187b      	adds	r3, r7, r1
 8001968:	2201      	movs	r2, #1
 800196a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2201      	movs	r2, #1
 8001970:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001972:	187b      	adds	r3, r7, r1
 8001974:	2210      	movs	r2, #16
 8001976:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2210      	movs	r2, #16
 800197c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001984:	187b      	adds	r3, r7, r1
 8001986:	0018      	movs	r0, r3
 8001988:	f001 f972 	bl	8002c70 <HAL_RCC_OscConfig>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001990:	f000 f8d8 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001994:	003b      	movs	r3, r7
 8001996:	2207      	movs	r2, #7
 8001998:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800199a:	003b      	movs	r3, r7
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a0:	003b      	movs	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a6:	003b      	movs	r3, r7
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019ac:	003b      	movs	r3, r7
 80019ae:	2100      	movs	r1, #0
 80019b0:	0018      	movs	r0, r3
 80019b2:	f001 fc7b 	bl	80032ac <HAL_RCC_ClockConfig>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0x84>
  {
    Error_Handler();
 80019ba:	f000 f8c3 	bl	8001b44 <Error_Handler>
  }
}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b011      	add	sp, #68	; 0x44
 80019c4:	bd90      	pop	{r4, r7, pc}
	...

080019c8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	0018      	movs	r0, r3
 80019d2:	230c      	movs	r3, #12
 80019d4:	001a      	movs	r2, r3
 80019d6:	2100      	movs	r1, #0
 80019d8:	f002 fa3c 	bl	8003e54 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80019dc:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <MX_ADC_Init+0xc8>)
 80019de:	4a2d      	ldr	r2, [pc, #180]	; (8001a94 <MX_ADC_Init+0xcc>)
 80019e0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <MX_ADC_Init+0xc8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80019e8:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <MX_ADC_Init+0xc8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <MX_ADC_Init+0xc8>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80019f4:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <MX_ADC_Init+0xc8>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <MX_ADC_Init+0xc8>)
 80019fc:	2204      	movs	r2, #4
 80019fe:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001a00:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <MX_ADC_Init+0xc8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001a06:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <MX_ADC_Init+0xc8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <MX_ADC_Init+0xc8>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <MX_ADC_Init+0xc8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_ADC_Init+0xc8>)
 8001a1a:	22c2      	movs	r2, #194	; 0xc2
 8001a1c:	32ff      	adds	r2, #255	; 0xff
 8001a1e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_ADC_Init+0xc8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_ADC_Init+0xc8>)
 8001a28:	2224      	movs	r2, #36	; 0x24
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <MX_ADC_Init+0xc8>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_ADC_Init+0xc8>)
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 fb44 	bl	80020c4 <HAL_ADC_Init>
 8001a3c:	1e03      	subs	r3, r0, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001a40:	f000 f880 	bl	8001b44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2205      	movs	r2, #5
 8001a48:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	0152      	lsls	r2, r2, #5
 8001a50:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2207      	movs	r2, #7
 8001a56:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001a58:	1d3a      	adds	r2, r7, #4
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <MX_ADC_Init+0xc8>)
 8001a5c:	0011      	movs	r1, r2
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 fd68 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001a64:	1e03      	subs	r3, r0, #0
 8001a66:	d001      	beq.n	8001a6c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001a68:	f000 f86c 	bl	8001b44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2207      	movs	r2, #7
 8001a70:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001a72:	1d3a      	adds	r2, r7, #4
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_ADC_Init+0xc8>)
 8001a76:	0011      	movs	r1, r2
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 fd5b 	bl	8002534 <HAL_ADC_ConfigChannel>
 8001a7e:	1e03      	subs	r3, r0, #0
 8001a80:	d001      	beq.n	8001a86 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001a82:	f000 f85f 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b004      	add	sp, #16
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	20000028 	.word	0x20000028
 8001a94:	40012400 	.word	0x40012400

08001a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <MX_USART3_UART_Init+0x5c>)
 8001aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001aa4:	2296      	movs	r2, #150	; 0x96
 8001aa6:	0192      	lsls	r2, r2, #6
 8001aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001abe:	220c      	movs	r2, #12
 8001ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <MX_USART3_UART_Init+0x58>)
 8001adc:	0018      	movs	r0, r3
 8001ade:	f001 fd2b 	bl	8003538 <HAL_UART_Init>
 8001ae2:	1e03      	subs	r3, r0, #0
 8001ae4:	d001      	beq.n	8001aea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ae6:	f000 f82d 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000068 	.word	0x20000068
 8001af4:	40004800 	.word	0x40004800

08001af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_GPIO_Init+0x48>)
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_GPIO_Init+0x48>)
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	0289      	lsls	r1, r1, #10
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	615a      	str	r2, [r3, #20]
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_GPIO_Init+0x48>)
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	029b      	lsls	r3, r3, #10
 8001b14:	4013      	ands	r3, r2
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_GPIO_Init+0x48>)
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_GPIO_Init+0x48>)
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	02c9      	lsls	r1, r1, #11
 8001b24:	430a      	orrs	r2, r1
 8001b26:	615a      	str	r2, [r3, #20]
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <MX_GPIO_Init+0x48>)
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	02db      	lsls	r3, r3, #11
 8001b30:	4013      	ands	r3, r2
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	40021000 	.word	0x40021000

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <Error_Handler+0x8>
	...

08001b50 <remote_init>:
remoteStruct remote;
/*******************/


void remote_init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0

	// 1. Data initialization

	remote.send_timeStamp = getTimeMs();	 // Timer reset
 8001b54:	f000 f9f4 	bl	8001f40 <getTimeMs>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <remote_init+0x28>)
 8001b5c:	601a      	str	r2, [r3, #0]
	remote.data = 0; 						 // Data reset
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <remote_init+0x28>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	711a      	strb	r2, [r3, #4]
	remote.send = SEND_OK; 					 // Default value
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <remote_init+0x28>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	715a      	strb	r2, [r3, #5]
	remote.status = RUN;					 // Default state
 8001b6a:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <remote_init+0x28>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	719a      	strb	r2, [r3, #6]

	return;
 8001b70:	46c0      	nop			; (mov r8, r8)

}
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	200000f0 	.word	0x200000f0

08001b7c <remote_process>:


void remote_process(void)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0

	uint8_t mode = 0;
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
	uint8_t angle = 0;
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
	uint8_t speed = 0;
 8001b8e:	1dbb      	adds	r3, r7, #6
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
	uint8_t dataPck = ERROR;		// Error by default
 8001b94:	1d7b      	adds	r3, r7, #5
 8001b96:	22ff      	movs	r2, #255	; 0xff
 8001b98:	701a      	strb	r2, [r3, #0]

	uint16_t adcRawData[2] = {0};	// Reset value
 8001b9a:	003b      	movs	r3, r7
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]


	// 1. Read data from adc

	// Read first channel
	adcRawData[0] = getSingleVal();
 8001ba0:	f000 f8bc 	bl	8001d1c <getSingleVal>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	003b      	movs	r3, r7
 8001baa:	801a      	strh	r2, [r3, #0]
	//Read second channel
	adcRawData[1] = getSingleVal();
 8001bac:	f000 f8b6 	bl	8001d1c <getSingleVal>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	001a      	movs	r2, r3
 8001bb4:	003b      	movs	r3, r7
 8001bb6:	805a      	strh	r2, [r3, #2]

	if(remote.send == SEND_ERROR)
 8001bb8:	4b52      	ldr	r3, [pc, #328]	; (8001d04 <remote_process+0x188>)
 8001bba:	795b      	ldrb	r3, [r3, #5]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <remote_process+0x52>
	{

		// An error occurred

		// Set an error to be sent
		dataPck = ERROR;
 8001bc0:	1d7b      	adds	r3, r7, #5
 8001bc2:	22ff      	movs	r2, #255	; 0xff
 8001bc4:	701a      	strb	r2, [r3, #0]

		// Reset of the error flag
		remote.send = SEND_OK;
 8001bc6:	4b4f      	ldr	r3, [pc, #316]	; (8001d04 <remote_process+0x188>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	715a      	strb	r2, [r3, #5]
 8001bcc:	e066      	b.n	8001c9c <remote_process+0x120>
	else
	{

		// 2. Convert raw data into engineering values

		mode = MODE_NORM;						// For now only normal mode available
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
		angle = U16_TO_ANGLE(adcRawData[0]);
 8001bd4:	003b      	movs	r3, r7
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7fe fb3d 	bl	8000258 <__aeabi_ui2f>
 8001bde:	1c03      	adds	r3, r0, #0
 8001be0:	1c18      	adds	r0, r3, #0
 8001be2:	f7ff fce9 	bl	80015b8 <__aeabi_f2d>
 8001be6:	2200      	movs	r2, #0
 8001be8:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <remote_process+0x18c>)
 8001bea:	f7fe fb7d 	bl	80002e8 <__aeabi_ddiv>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	000b      	movs	r3, r1
 8001bf2:	0010      	movs	r0, r2
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <remote_process+0x190>)
 8001bfa:	f7fe fe63 	bl	80008c4 <__aeabi_dmul>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	000b      	movs	r3, r1
 8001c02:	1dfc      	adds	r4, r7, #7
 8001c04:	0010      	movs	r0, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	f7fe fb08 	bl	800021c <__aeabi_d2uiz>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	7023      	strb	r3, [r4, #0]
		speed = U16_TO_SPEED(adcRawData[1]);
 8001c10:	003b      	movs	r3, r7
 8001c12:	885b      	ldrh	r3, [r3, #2]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7fe fb1f 	bl	8000258 <__aeabi_ui2f>
 8001c1a:	1c03      	adds	r3, r0, #0
 8001c1c:	1c18      	adds	r0, r3, #0
 8001c1e:	f7ff fccb 	bl	80015b8 <__aeabi_f2d>
 8001c22:	2200      	movs	r2, #0
 8001c24:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <remote_process+0x18c>)
 8001c26:	f7fe fb5f 	bl	80002e8 <__aeabi_ddiv>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	000b      	movs	r3, r1
 8001c2e:	0010      	movs	r0, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	2200      	movs	r2, #0
 8001c34:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <remote_process+0x194>)
 8001c36:	f7fe fe45 	bl	80008c4 <__aeabi_dmul>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	000b      	movs	r3, r1
 8001c3e:	1dbc      	adds	r4, r7, #6
 8001c40:	0010      	movs	r0, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	f7fe faea 	bl	800021c <__aeabi_d2uiz>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	7023      	strb	r3, [r4, #0]

		// 3. Encrypt data into 8-bit packet format

		dataPck = GEN_PACKET(mode, angle, speed);
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	01db      	lsls	r3, r3, #7
 8001c52:	b25a      	sxtb	r2, r3
 8001c54:	1dfb      	adds	r3, r7, #7
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b25a      	sxtb	r2, r3
 8001c60:	1dbb      	adds	r3, r7, #6
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b25a      	sxtb	r2, r3
 8001c6c:	1d7b      	adds	r3, r7, #5
 8001c6e:	701a      	strb	r2, [r3, #0]

		// If in STOP mode evaluate to switch in RUN mode (do not go into STOP mode here if you already are not in)
		if(remote.status == STOP)
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <remote_process+0x188>)
 8001c72:	799b      	ldrb	r3, [r3, #6]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d111      	bne.n	8001c9c <remote_process+0x120>
			remote.status = REMOTE_STATUS(angle, speed);
 8001c78:	1dfb      	adds	r3, r7, #7
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d107      	bne.n	8001c90 <remote_process+0x114>
 8001c80:	1dbb      	adds	r3, r7, #6
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d903      	bls.n	8001c90 <remote_process+0x114>
 8001c88:	1dbb      	adds	r3, r7, #6
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b12      	cmp	r3, #18
 8001c8e:	d901      	bls.n	8001c94 <remote_process+0x118>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <remote_process+0x11a>
 8001c94:	2300      	movs	r3, #0
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <remote_process+0x188>)
 8001c9a:	719a      	strb	r2, [r3, #6]

	}

	remote.data = dataPck;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <remote_process+0x188>)
 8001c9e:	1d7a      	adds	r2, r7, #5
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	711a      	strb	r2, [r3, #4]

	// 4. Wait for the next transmission

	if(getDelayMs(remote.send_timeStamp) < SENDING_TIME)
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <remote_process+0x188>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 f955 	bl	8001f58 <getDelayMs>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	2b63      	cmp	r3, #99	; 0x63
 8001cb2:	d922      	bls.n	8001cfa <remote_process+0x17e>
		// Time not yet elapsed
		return;

	// Timer reset
	remote.send_timeStamp = getTimeMs();
 8001cb4:	f000 f944 	bl	8001f40 <getTimeMs>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <remote_process+0x188>)
 8001cbc:	601a      	str	r2, [r3, #0]

	// 5. Time elapsed; send the data packet

	// Save energy; if in stop I don't send data (no problem in case of missing data; missed send will considered a STOP condition also)
	if(remote.status == RUN)
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <remote_process+0x188>)
 8001cc0:	799b      	ldrb	r3, [r3, #6]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d106      	bne.n	8001cd4 <remote_process+0x158>
		// Send data
		HAL_UART_Transmit(&huart3, &remote.data, 1, HAL_MAX_DELAY);
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	425b      	negs	r3, r3
 8001cca:	4912      	ldr	r1, [pc, #72]	; (8001d14 <remote_process+0x198>)
 8001ccc:	4812      	ldr	r0, [pc, #72]	; (8001d18 <remote_process+0x19c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f001 fc86 	bl	80035e0 <HAL_UART_Transmit>


	// Evaluating possible STOP condition in order to avoid successive sending of data
	remote.status = REMOTE_STATUS(angle, speed);
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d107      	bne.n	8001cec <remote_process+0x170>
 8001cdc:	1dbb      	adds	r3, r7, #6
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	d903      	bls.n	8001cec <remote_process+0x170>
 8001ce4:	1dbb      	adds	r3, r7, #6
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b12      	cmp	r3, #18
 8001cea:	d901      	bls.n	8001cf0 <remote_process+0x174>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <remote_process+0x176>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <remote_process+0x188>)
 8001cf6:	719a      	strb	r2, [r3, #6]
 8001cf8:	e000      	b.n	8001cfc <remote_process+0x180>
		return;
 8001cfa:	46c0      	nop			; (mov r8, r8)


}
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b003      	add	sp, #12
 8001d00:	bd90      	pop	{r4, r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	200000f0 	.word	0x200000f0
 8001d08:	40b00000 	.word	0x40b00000
 8001d0c:	40080000 	.word	0x40080000
 8001d10:	403f0000 	.word	0x403f0000
 8001d14:	200000f4 	.word	0x200000f4
 8001d18:	20000068 	.word	0x20000068

08001d1c <getSingleVal>:


/************************** PRIVATE FUNCTION *******************************/

static uint16_t getSingleVal(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0

	uint8_t errorFlag = 0;
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]


	// Start reading
	errorFlag |= HAL_ADC_Start(&hadc);
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <getSingleVal+0x74>)
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f000 fb0a 	bl	8002344 <HAL_ADC_Start>
 8001d30:	0003      	movs	r3, r0
 8001d32:	0019      	movs	r1, r3
 8001d34:	1dfb      	adds	r3, r7, #7
 8001d36:	1dfa      	adds	r2, r7, #7
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	701a      	strb	r2, [r3, #0]

	// Wait until the conversion is done
	errorFlag |= HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001d3e:	2301      	movs	r3, #1
 8001d40:	425a      	negs	r2, r3
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <getSingleVal+0x74>)
 8001d44:	0011      	movs	r1, r2
 8001d46:	0018      	movs	r0, r3
 8001d48:	f000 fb50 	bl	80023ec <HAL_ADC_PollForConversion>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	0019      	movs	r1, r3
 8001d50:	1dfb      	adds	r3, r7, #7
 8001d52:	1dfa      	adds	r2, r7, #7
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	701a      	strb	r2, [r3, #0]

	if(errorFlag)
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <getSingleVal+0x56>
		remote.send |= SEND_ERROR;
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <getSingleVal+0x78>)
 8001d64:	795b      	ldrb	r3, [r3, #5]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <getSingleVal+0x78>)
 8001d6e:	715a      	strb	r2, [r3, #5]
 8001d70:	e003      	b.n	8001d7a <getSingleVal+0x5e>
	else
		remote.send |= SEND_OK;
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <getSingleVal+0x78>)
 8001d74:	795a      	ldrb	r2, [r3, #5]
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <getSingleVal+0x78>)
 8001d78:	715a      	strb	r2, [r3, #5]

	return HAL_ADC_GetValue(&hadc);
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <getSingleVal+0x74>)
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f000 fbcd 	bl	800251c <HAL_ADC_GetValue>
 8001d82:	0003      	movs	r3, r0
 8001d84:	b29b      	uxth	r3, r3

}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	20000028 	.word	0x20000028
 8001d94:	200000f0 	.word	0x200000f0

08001d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_MspInit+0x44>)
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_MspInit+0x44>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	430a      	orrs	r2, r1
 8001da8:	619a      	str	r2, [r3, #24]
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_MspInit+0x44>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4013      	ands	r3, r2
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_MspInit+0x44>)
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_MspInit+0x44>)
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	0549      	lsls	r1, r1, #21
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	61da      	str	r2, [r3, #28]
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_MspInit+0x44>)
 8001dc6:	69da      	ldr	r2, [r3, #28]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	055b      	lsls	r3, r3, #21
 8001dcc:	4013      	ands	r3, r2
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b002      	add	sp, #8
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b08b      	sub	sp, #44	; 0x2c
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	2414      	movs	r4, #20
 8001dea:	193b      	adds	r3, r7, r4
 8001dec:	0018      	movs	r0, r3
 8001dee:	2314      	movs	r3, #20
 8001df0:	001a      	movs	r2, r3
 8001df2:	2100      	movs	r1, #0
 8001df4:	f002 f82e 	bl	8003e54 <memset>
  if(hadc->Instance==ADC1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_ADC_MspInit+0x84>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d12b      	bne.n	8001e5a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	0089      	lsls	r1, r1, #2
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	619a      	str	r2, [r3, #24]
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e12:	699a      	ldr	r2, [r3, #24]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	0289      	lsls	r1, r1, #10
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_ADC_MspInit+0x88>)
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	029b      	lsls	r3, r3, #10
 8001e34:	4013      	ands	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e3a:	193b      	adds	r3, r7, r4
 8001e3c:	22a0      	movs	r2, #160	; 0xa0
 8001e3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e40:	193b      	adds	r3, r7, r4
 8001e42:	2203      	movs	r2, #3
 8001e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	193b      	adds	r3, r7, r4
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	193a      	adds	r2, r7, r4
 8001e4e:	2390      	movs	r3, #144	; 0x90
 8001e50:	05db      	lsls	r3, r3, #23
 8001e52:	0011      	movs	r1, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	f000 fd9b 	bl	8002990 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b00b      	add	sp, #44	; 0x2c
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	40012400 	.word	0x40012400
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b08b      	sub	sp, #44	; 0x2c
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	2414      	movs	r4, #20
 8001e76:	193b      	adds	r3, r7, r4
 8001e78:	0018      	movs	r0, r3
 8001e7a:	2314      	movs	r3, #20
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	2100      	movs	r1, #0
 8001e80:	f001 ffe8 	bl	8003e54 <memset>
  if(huart->Instance==USART3)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_UART_MspInit+0x90>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d132      	bne.n	8001ef4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_UART_MspInit+0x94>)
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_UART_MspInit+0x94>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	02c9      	lsls	r1, r1, #11
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	61da      	str	r2, [r3, #28]
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_UART_MspInit+0x94>)
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	02db      	lsls	r3, r3, #11
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_UART_MspInit+0x94>)
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_UART_MspInit+0x94>)
 8001eb0:	2180      	movs	r1, #128	; 0x80
 8001eb2:	02c9      	lsls	r1, r1, #11
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	615a      	str	r2, [r3, #20]
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_UART_MspInit+0x94>)
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	02db      	lsls	r3, r3, #11
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = LORA_TX_Pin|LORA_RX_Pin;
 8001ec6:	193b      	adds	r3, r7, r4
 8001ec8:	22c0      	movs	r2, #192	; 0xc0
 8001eca:	0112      	lsls	r2, r2, #4
 8001ecc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	0021      	movs	r1, r4
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	187b      	adds	r3, r7, r1
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001edc:	187b      	adds	r3, r7, r1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001ee2:	187b      	adds	r3, r7, r1
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	4a06      	ldr	r2, [pc, #24]	; (8001f04 <HAL_UART_MspInit+0x98>)
 8001eec:	0019      	movs	r1, r3
 8001eee:	0010      	movs	r0, r2
 8001ef0:	f000 fd4e 	bl	8002990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b00b      	add	sp, #44	; 0x2c
 8001efa:	bd90      	pop	{r4, r7, pc}
 8001efc:	40004800 	.word	0x40004800
 8001f00:	40021000 	.word	0x40021000
 8001f04:	48000400 	.word	0x48000400

08001f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <NMI_Handler+0x4>

08001f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <HardFault_Handler+0x4>

08001f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2c:	f000 f8a4 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <getTimeMs>:
/*
 *	@ Function; getDelayms
 *  @ Return; uint32_t -> current time in ms
 */
uint32_t getTimeMs(void)
{
 8001f40:	b5b0      	push	{r4, r5, r7, lr}
 8001f42:	af00      	add	r7, sp, #0

	// Tick frequency is by default 1kHz (1ms period)
	return ( HAL_GetTick() * HAL_GetTickFreq() );
 8001f44:	f000 f8aa 	bl	800209c <HAL_GetTick>
 8001f48:	0004      	movs	r4, r0
 8001f4a:	f000 f8b1 	bl	80020b0 <HAL_GetTickFreq>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	4363      	muls	r3, r4

}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bdb0      	pop	{r4, r5, r7, pc}

08001f58 <getDelayMs>:
 *	@ Function; getDelayms
 * 	@ Par1; uint32_t timeStamp -> captured time
 *  @ Return; uint32_t tDiff -> time elapsed since timeStamp in ms
 */
uint32_t getDelayMs(uint32_t timeStamp)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

	uint32_t tDiff;
	uint32_t currentTime;

	currentTime = ( getTimeMs() * HAL_GetTickFreq() );
 8001f60:	f7ff ffee 	bl	8001f40 <getTimeMs>
 8001f64:	0004      	movs	r4, r0
 8001f66:	f000 f8a3 	bl	80020b0 <HAL_GetTickFreq>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	4363      	muls	r3, r4
 8001f6e:	60bb      	str	r3, [r7, #8]

	if(currentTime >= timeStamp)
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d304      	bcc.n	8001f82 <getDelayMs+0x2a>
		tDiff = currentTime - timeStamp;
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e003      	b.n	8001f8a <getDelayMs+0x32>
	else
		tDiff = timeStamp - currentTime;
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	60fb      	str	r3, [r7, #12]

	return tDiff;
 8001f8a:	68fb      	ldr	r3, [r7, #12]

}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b005      	add	sp, #20
 8001f92:	bd90      	pop	{r4, r7, pc}

08001f94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f94:	480d      	ldr	r0, [pc, #52]	; (8001fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f96:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f98:	f7ff ffcd 	bl	8001f36 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <LoopForever+0xe>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <LoopForever+0x16>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fc2:	f001 ff4f 	bl	8003e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fc6:	f7ff fca7 	bl	8001918 <main>

08001fca <LoopForever>:

LoopForever:
    b LoopForever
 8001fca:	e7fe      	b.n	8001fca <LoopForever>
  ldr   r0, =_estack
 8001fcc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fd8:	08003f44 	.word	0x08003f44
  ldr r2, =_sbss
 8001fdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fe0:	200000fc 	.word	0x200000fc

08001fe4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_IRQHandler>
	...

08001fe8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_Init+0x24>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_Init+0x24>)
 8001ff2:	2110      	movs	r1, #16
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 f809 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffe:	f7ff fecb 	bl	8001d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <HAL_InitTick+0x5c>)
 800201a:	681c      	ldr	r4, [r3, #0]
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_InitTick+0x60>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	0019      	movs	r1, r3
 8002022:	23fa      	movs	r3, #250	; 0xfa
 8002024:	0098      	lsls	r0, r3, #2
 8002026:	f7fe f86d 	bl	8000104 <__udivsi3>
 800202a:	0003      	movs	r3, r0
 800202c:	0019      	movs	r1, r3
 800202e:	0020      	movs	r0, r4
 8002030:	f7fe f868 	bl	8000104 <__udivsi3>
 8002034:	0003      	movs	r3, r0
 8002036:	0018      	movs	r0, r3
 8002038:	f000 fc9d 	bl	8002976 <HAL_SYSTICK_Config>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d001      	beq.n	8002044 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e00f      	b.n	8002064 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b03      	cmp	r3, #3
 8002048:	d80b      	bhi.n	8002062 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	2301      	movs	r3, #1
 800204e:	425b      	negs	r3, r3
 8002050:	2200      	movs	r2, #0
 8002052:	0018      	movs	r0, r3
 8002054:	f000 fc7a 	bl	800294c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_InitTick+0x64>)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	b003      	add	sp, #12
 800206a:	bd90      	pop	{r4, r7, pc}
 800206c:	20000000 	.word	0x20000000
 8002070:	20000008 	.word	0x20000008
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_IncTick+0x1c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	001a      	movs	r2, r3
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_IncTick+0x20>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	18d2      	adds	r2, r2, r3
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_IncTick+0x20>)
 800208a:	601a      	str	r2, [r3, #0]
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	20000008 	.word	0x20000008
 8002098:	200000f8 	.word	0x200000f8

0800209c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <HAL_GetTick+0x10>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	200000f8 	.word	0x200000f8

080020b0 <HAL_GetTickFreq>:
  * @brief return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80020b4:	4b02      	ldr	r3, [pc, #8]	; (80020c0 <HAL_GetTickFreq+0x10>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	20000008 	.word	0x20000008

080020c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020cc:	230f      	movs	r3, #15
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e125      	b.n	800232e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10a      	bne.n	8002100 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2234      	movs	r2, #52	; 0x34
 80020f4:	2100      	movs	r1, #0
 80020f6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7ff fe70 	bl	8001de0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	2210      	movs	r2, #16
 8002106:	4013      	ands	r3, r2
 8002108:	d000      	beq.n	800210c <HAL_ADC_Init+0x48>
 800210a:	e103      	b.n	8002314 <HAL_ADC_Init+0x250>
 800210c:	230f      	movs	r3, #15
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d000      	beq.n	8002118 <HAL_ADC_Init+0x54>
 8002116:	e0fd      	b.n	8002314 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2204      	movs	r2, #4
 8002120:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002122:	d000      	beq.n	8002126 <HAL_ADC_Init+0x62>
 8002124:	e0f6      	b.n	8002314 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	4a83      	ldr	r2, [pc, #524]	; (8002338 <HAL_ADC_Init+0x274>)
 800212c:	4013      	ands	r3, r2
 800212e:	2202      	movs	r2, #2
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2203      	movs	r2, #3
 800213e:	4013      	ands	r3, r2
 8002140:	2b01      	cmp	r3, #1
 8002142:	d112      	bne.n	800216a <HAL_ADC_Init+0xa6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2201      	movs	r2, #1
 800214c:	4013      	ands	r3, r2
 800214e:	2b01      	cmp	r3, #1
 8002150:	d009      	beq.n	8002166 <HAL_ADC_Init+0xa2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	401a      	ands	r2, r3
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	429a      	cmp	r2, r3
 8002164:	d101      	bne.n	800216a <HAL_ADC_Init+0xa6>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_ADC_Init+0xa8>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d116      	bne.n	800219e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2218      	movs	r2, #24
 8002178:	4393      	bics	r3, r2
 800217a:	0019      	movs	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	0899      	lsrs	r1, r3, #2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4964      	ldr	r1, [pc, #400]	; (800233c <HAL_ADC_Init+0x278>)
 80021aa:	400a      	ands	r2, r1
 80021ac:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7e1b      	ldrb	r3, [r3, #24]
 80021b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7e5b      	ldrb	r3, [r3, #25]
 80021b8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7e9b      	ldrb	r3, [r3, #26]
 80021c0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80021c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d002      	beq.n	80021d2 <HAL_ADC_Init+0x10e>
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	015b      	lsls	r3, r3, #5
 80021d0:	e000      	b.n	80021d4 <HAL_ADC_Init+0x110>
 80021d2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021d4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80021da:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_Init+0x124>
 80021e4:	2304      	movs	r3, #4
 80021e6:	e000      	b.n	80021ea <HAL_ADC_Init+0x126>
 80021e8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80021ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2124      	movs	r1, #36	; 0x24
 80021f0:	5c5b      	ldrb	r3, [r3, r1]
 80021f2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80021f4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7edb      	ldrb	r3, [r3, #27]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d115      	bne.n	8002230 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7e9b      	ldrb	r3, [r3, #26]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d105      	bne.n	8002218 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2280      	movs	r2, #128	; 0x80
 8002210:	0252      	lsls	r2, r2, #9
 8002212:	4313      	orrs	r3, r2
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	e00b      	b.n	8002230 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221c:	2220      	movs	r2, #32
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	2201      	movs	r2, #1
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69da      	ldr	r2, [r3, #28]
 8002234:	23c2      	movs	r3, #194	; 0xc2
 8002236:	33ff      	adds	r3, #255	; 0xff
 8002238:	429a      	cmp	r2, r3
 800223a:	d007      	beq.n	800224c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002244:	4313      	orrs	r3, r2
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	4313      	orrs	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68d9      	ldr	r1, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	430a      	orrs	r2, r1
 800225a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	055b      	lsls	r3, r3, #21
 8002264:	429a      	cmp	r2, r3
 8002266:	d01b      	beq.n	80022a0 <HAL_ADC_Init+0x1dc>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d017      	beq.n	80022a0 <HAL_ADC_Init+0x1dc>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	2b02      	cmp	r3, #2
 8002276:	d013      	beq.n	80022a0 <HAL_ADC_Init+0x1dc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	2b03      	cmp	r3, #3
 800227e:	d00f      	beq.n	80022a0 <HAL_ADC_Init+0x1dc>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	2b04      	cmp	r3, #4
 8002286:	d00b      	beq.n	80022a0 <HAL_ADC_Init+0x1dc>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	2b05      	cmp	r3, #5
 800228e:	d007      	beq.n	80022a0 <HAL_ADC_Init+0x1dc>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	2b06      	cmp	r3, #6
 8002296:	d003      	beq.n	80022a0 <HAL_ADC_Init+0x1dc>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	2b07      	cmp	r3, #7
 800229e:	d112      	bne.n	80022c6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2107      	movs	r1, #7
 80022ac:	438a      	bics	r2, r1
 80022ae:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6959      	ldr	r1, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	2207      	movs	r2, #7
 80022bc:	401a      	ands	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_ADC_Init+0x27c>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d10b      	bne.n	80022ee <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	2203      	movs	r2, #3
 80022e2:	4393      	bics	r3, r2
 80022e4:	2201      	movs	r2, #1
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022ec:	e01c      	b.n	8002328 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	2212      	movs	r2, #18
 80022f4:	4393      	bics	r3, r2
 80022f6:	2210      	movs	r2, #16
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	2201      	movs	r2, #1
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800230a:	230f      	movs	r3, #15
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002312:	e009      	b.n	8002328 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002318:	2210      	movs	r2, #16
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002320:	230f      	movs	r3, #15
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002328:	230f      	movs	r3, #15
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	781b      	ldrb	r3, [r3, #0]
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	b004      	add	sp, #16
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	fffffefd 	.word	0xfffffefd
 800233c:	fffe0219 	.word	0xfffe0219
 8002340:	833fffe7 	.word	0x833fffe7

08002344 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234c:	230f      	movs	r3, #15
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2204      	movs	r2, #4
 800235c:	4013      	ands	r3, r2
 800235e:	d138      	bne.n	80023d2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2234      	movs	r2, #52	; 0x34
 8002364:	5c9b      	ldrb	r3, [r3, r2]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_ADC_Start+0x2a>
 800236a:	2302      	movs	r3, #2
 800236c:	e038      	b.n	80023e0 <HAL_ADC_Start+0x9c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2234      	movs	r2, #52	; 0x34
 8002372:	2101      	movs	r1, #1
 8002374:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7e5b      	ldrb	r3, [r3, #25]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d007      	beq.n	800238e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800237e:	230f      	movs	r3, #15
 8002380:	18fc      	adds	r4, r7, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f000 f9cb 	bl	8002720 <ADC_Enable>
 800238a:	0003      	movs	r3, r0
 800238c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800238e:	230f      	movs	r3, #15
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d120      	bne.n	80023da <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <HAL_ADC_Start+0xa4>)
 800239e:	4013      	ands	r3, r2
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	0052      	lsls	r2, r2, #1
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2234      	movs	r2, #52	; 0x34
 80023b4:	2100      	movs	r1, #0
 80023b6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	221c      	movs	r2, #28
 80023be:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2104      	movs	r1, #4
 80023cc:	430a      	orrs	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	e003      	b.n	80023da <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023d2:	230f      	movs	r3, #15
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	2202      	movs	r2, #2
 80023d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023da:	230f      	movs	r3, #15
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	781b      	ldrb	r3, [r3, #0]
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b005      	add	sp, #20
 80023e6:	bd90      	pop	{r4, r7, pc}
 80023e8:	fffff0fe 	.word	0xfffff0fe

080023ec <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d102      	bne.n	8002404 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80023fe:	2308      	movs	r3, #8
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e014      	b.n	800242e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	4013      	ands	r3, r2
 800240e:	2b01      	cmp	r3, #1
 8002410:	d10b      	bne.n	800242a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	2220      	movs	r2, #32
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2234      	movs	r2, #52	; 0x34
 8002422:	2100      	movs	r1, #0
 8002424:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e071      	b.n	800250e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800242a:	230c      	movs	r3, #12
 800242c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800242e:	f7ff fe35 	bl	800209c <HAL_GetTick>
 8002432:	0003      	movs	r3, r0
 8002434:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002436:	e01f      	b.n	8002478 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	d01c      	beq.n	8002478 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_ADC_PollForConversion+0x68>
 8002444:	f7ff fe2a 	bl	800209c <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d211      	bcs.n	8002478 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4013      	ands	r3, r2
 800245e:	d10b      	bne.n	8002478 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002464:	2204      	movs	r2, #4
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2234      	movs	r2, #52	; 0x34
 8002470:	2100      	movs	r1, #0
 8002472:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e04a      	b.n	800250e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4013      	ands	r3, r2
 8002482:	d0d9      	beq.n	8002438 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	23c0      	movs	r3, #192	; 0xc0
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	4013      	ands	r3, r2
 800249e:	d12d      	bne.n	80024fc <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d129      	bne.n	80024fc <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2208      	movs	r2, #8
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d122      	bne.n	80024fc <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2204      	movs	r2, #4
 80024be:	4013      	ands	r3, r2
 80024c0:	d110      	bne.n	80024e4 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	210c      	movs	r1, #12
 80024ce:	438a      	bics	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <HAL_ADC_PollForConversion+0x12c>)
 80024d8:	4013      	ands	r3, r2
 80024da:	2201      	movs	r2, #1
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38
 80024e2:	e00b      	b.n	80024fc <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	2220      	movs	r2, #32
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f4:	2201      	movs	r2, #1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7e1b      	ldrb	r3, [r3, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	220c      	movs	r2, #12
 800250a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b004      	add	sp, #16
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	fffffefe 	.word	0xfffffefe

0800251c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800252a:	0018      	movs	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800253e:	230f      	movs	r3, #15
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	055b      	lsls	r3, r3, #21
 8002552:	429a      	cmp	r2, r3
 8002554:	d011      	beq.n	800257a <HAL_ADC_ConfigChannel+0x46>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	2b01      	cmp	r3, #1
 800255c:	d00d      	beq.n	800257a <HAL_ADC_ConfigChannel+0x46>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	2b02      	cmp	r3, #2
 8002564:	d009      	beq.n	800257a <HAL_ADC_ConfigChannel+0x46>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	2b03      	cmp	r3, #3
 800256c:	d005      	beq.n	800257a <HAL_ADC_ConfigChannel+0x46>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	2b04      	cmp	r3, #4
 8002574:	d001      	beq.n	800257a <HAL_ADC_ConfigChannel+0x46>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2234      	movs	r2, #52	; 0x34
 800257e:	5c9b      	ldrb	r3, [r3, r2]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x54>
 8002584:	2302      	movs	r3, #2
 8002586:	e0bb      	b.n	8002700 <HAL_ADC_ConfigChannel+0x1cc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2234      	movs	r2, #52	; 0x34
 800258c:	2101      	movs	r1, #1
 800258e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2204      	movs	r2, #4
 8002598:	4013      	ands	r3, r2
 800259a:	d000      	beq.n	800259e <HAL_ADC_ConfigChannel+0x6a>
 800259c:	e09f      	b.n	80026de <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4a59      	ldr	r2, [pc, #356]	; (8002708 <HAL_ADC_ConfigChannel+0x1d4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d100      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x76>
 80025a8:	e077      	b.n	800269a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2201      	movs	r2, #1
 80025b6:	409a      	lsls	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	055b      	lsls	r3, r3, #21
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d037      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d033      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d02f      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d02b      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d027      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d023      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d01f      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	2b07      	cmp	r3, #7
 8002602:	d01b      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2107      	movs	r1, #7
 8002610:	400b      	ands	r3, r1
 8002612:	429a      	cmp	r2, r3
 8002614:	d012      	beq.n	800263c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2107      	movs	r1, #7
 8002622:	438a      	bics	r2, r1
 8002624:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6959      	ldr	r1, [r3, #20]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2207      	movs	r2, #7
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b10      	cmp	r3, #16
 8002642:	d003      	beq.n	800264c <HAL_ADC_ConfigChannel+0x118>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b11      	cmp	r3, #17
 800264a:	d152      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_ADC_ConfigChannel+0x1d8>)
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b10      	cmp	r3, #16
 8002656:	d102      	bne.n	800265e <HAL_ADC_ConfigChannel+0x12a>
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	041b      	lsls	r3, r3, #16
 800265c:	e001      	b.n	8002662 <HAL_ADC_ConfigChannel+0x12e>
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	03db      	lsls	r3, r3, #15
 8002662:	4a2a      	ldr	r2, [pc, #168]	; (800270c <HAL_ADC_ConfigChannel+0x1d8>)
 8002664:	430b      	orrs	r3, r1
 8002666:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b10      	cmp	r3, #16
 800266e:	d140      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_ADC_ConfigChannel+0x1dc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4927      	ldr	r1, [pc, #156]	; (8002714 <HAL_ADC_ConfigChannel+0x1e0>)
 8002676:	0018      	movs	r0, r3
 8002678:	f7fd fd44 	bl	8000104 <__udivsi3>
 800267c:	0003      	movs	r3, r0
 800267e:	001a      	movs	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	189b      	adds	r3, r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800268a:	e002      	b.n	8002692 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	3b01      	subs	r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f9      	bne.n	800268c <HAL_ADC_ConfigChannel+0x158>
 8002698:	e02b      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	4099      	lsls	r1, r3
 80026a8:	000b      	movs	r3, r1
 80026aa:	43d9      	mvns	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	400a      	ands	r2, r1
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d003      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0x190>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b11      	cmp	r3, #17
 80026c2:	d116      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_ADC_ConfigChannel+0x1d8>)
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1a0>
 80026d0:	4a11      	ldr	r2, [pc, #68]	; (8002718 <HAL_ADC_ConfigChannel+0x1e4>)
 80026d2:	e000      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1a2>
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <HAL_ADC_ConfigChannel+0x1e8>)
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_ADC_ConfigChannel+0x1d8>)
 80026d8:	400a      	ands	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e009      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	2220      	movs	r2, #32
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80026ea:	230f      	movs	r3, #15
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2234      	movs	r2, #52	; 0x34
 80026f6:	2100      	movs	r1, #0
 80026f8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80026fa:	230f      	movs	r3, #15
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781b      	ldrb	r3, [r3, #0]
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b004      	add	sp, #16
 8002706:	bd80      	pop	{r7, pc}
 8002708:	00001001 	.word	0x00001001
 800270c:	40012708 	.word	0x40012708
 8002710:	20000000 	.word	0x20000000
 8002714:	000f4240 	.word	0x000f4240
 8002718:	ff7fffff 	.word	0xff7fffff
 800271c:	ffbfffff 	.word	0xffbfffff

08002720 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2203      	movs	r2, #3
 8002738:	4013      	ands	r3, r2
 800273a:	2b01      	cmp	r3, #1
 800273c:	d112      	bne.n	8002764 <ADC_Enable+0x44>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	4013      	ands	r3, r2
 8002748:	2b01      	cmp	r3, #1
 800274a:	d009      	beq.n	8002760 <ADC_Enable+0x40>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	401a      	ands	r2, r3
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	429a      	cmp	r2, r3
 800275e:	d101      	bne.n	8002764 <ADC_Enable+0x44>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <ADC_Enable+0x46>
 8002764:	2300      	movs	r3, #0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d152      	bne.n	8002810 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4a2a      	ldr	r2, [pc, #168]	; (800281c <ADC_Enable+0xfc>)
 8002772:	4013      	ands	r3, r2
 8002774:	d00d      	beq.n	8002792 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	2210      	movs	r2, #16
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	2201      	movs	r2, #1
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e03f      	b.n	8002812 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027a2:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <ADC_Enable+0x100>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	491f      	ldr	r1, [pc, #124]	; (8002824 <ADC_Enable+0x104>)
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7fd fcab 	bl	8000104 <__udivsi3>
 80027ae:	0003      	movs	r3, r0
 80027b0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027b2:	e002      	b.n	80027ba <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f9      	bne.n	80027b4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80027c0:	f7ff fc6c 	bl	800209c <HAL_GetTick>
 80027c4:	0003      	movs	r3, r0
 80027c6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027c8:	e01b      	b.n	8002802 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027ca:	f7ff fc67 	bl	800209c <HAL_GetTick>
 80027ce:	0002      	movs	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d914      	bls.n	8002802 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2201      	movs	r2, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d00d      	beq.n	8002802 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	2210      	movs	r2, #16
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	2201      	movs	r2, #1
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e007      	b.n	8002812 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	4013      	ands	r3, r2
 800280c:	2b01      	cmp	r3, #1
 800280e:	d1dc      	bne.n	80027ca <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	b004      	add	sp, #16
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	80000017 	.word	0x80000017
 8002820:	20000000 	.word	0x20000000
 8002824:	000f4240 	.word	0x000f4240

08002828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	0002      	movs	r2, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	1dfb      	adds	r3, r7, #7
 8002834:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b7f      	cmp	r3, #127	; 0x7f
 800283c:	d828      	bhi.n	8002890 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800283e:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <__NVIC_SetPriority+0xd4>)
 8002840:	1dfb      	adds	r3, r7, #7
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	b25b      	sxtb	r3, r3
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	33c0      	adds	r3, #192	; 0xc0
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	589b      	ldr	r3, [r3, r2]
 800284e:	1dfa      	adds	r2, r7, #7
 8002850:	7812      	ldrb	r2, [r2, #0]
 8002852:	0011      	movs	r1, r2
 8002854:	2203      	movs	r2, #3
 8002856:	400a      	ands	r2, r1
 8002858:	00d2      	lsls	r2, r2, #3
 800285a:	21ff      	movs	r1, #255	; 0xff
 800285c:	4091      	lsls	r1, r2
 800285e:	000a      	movs	r2, r1
 8002860:	43d2      	mvns	r2, r2
 8002862:	401a      	ands	r2, r3
 8002864:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	019b      	lsls	r3, r3, #6
 800286a:	22ff      	movs	r2, #255	; 0xff
 800286c:	401a      	ands	r2, r3
 800286e:	1dfb      	adds	r3, r7, #7
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	0018      	movs	r0, r3
 8002874:	2303      	movs	r3, #3
 8002876:	4003      	ands	r3, r0
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800287c:	481f      	ldr	r0, [pc, #124]	; (80028fc <__NVIC_SetPriority+0xd4>)
 800287e:	1dfb      	adds	r3, r7, #7
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b25b      	sxtb	r3, r3
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	430a      	orrs	r2, r1
 8002888:	33c0      	adds	r3, #192	; 0xc0
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800288e:	e031      	b.n	80028f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002890:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <__NVIC_SetPriority+0xd8>)
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	0019      	movs	r1, r3
 8002898:	230f      	movs	r3, #15
 800289a:	400b      	ands	r3, r1
 800289c:	3b08      	subs	r3, #8
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	3306      	adds	r3, #6
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	18d3      	adds	r3, r2, r3
 80028a6:	3304      	adds	r3, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	1dfa      	adds	r2, r7, #7
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	0011      	movs	r1, r2
 80028b0:	2203      	movs	r2, #3
 80028b2:	400a      	ands	r2, r1
 80028b4:	00d2      	lsls	r2, r2, #3
 80028b6:	21ff      	movs	r1, #255	; 0xff
 80028b8:	4091      	lsls	r1, r2
 80028ba:	000a      	movs	r2, r1
 80028bc:	43d2      	mvns	r2, r2
 80028be:	401a      	ands	r2, r3
 80028c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	019b      	lsls	r3, r3, #6
 80028c6:	22ff      	movs	r2, #255	; 0xff
 80028c8:	401a      	ands	r2, r3
 80028ca:	1dfb      	adds	r3, r7, #7
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	0018      	movs	r0, r3
 80028d0:	2303      	movs	r3, #3
 80028d2:	4003      	ands	r3, r0
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d8:	4809      	ldr	r0, [pc, #36]	; (8002900 <__NVIC_SetPriority+0xd8>)
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	001c      	movs	r4, r3
 80028e0:	230f      	movs	r3, #15
 80028e2:	4023      	ands	r3, r4
 80028e4:	3b08      	subs	r3, #8
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	430a      	orrs	r2, r1
 80028ea:	3306      	adds	r3, #6
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	18c3      	adds	r3, r0, r3
 80028f0:	3304      	adds	r3, #4
 80028f2:	601a      	str	r2, [r3, #0]
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b003      	add	sp, #12
 80028fa:	bd90      	pop	{r4, r7, pc}
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	1e5a      	subs	r2, r3, #1
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	045b      	lsls	r3, r3, #17
 8002914:	429a      	cmp	r2, r3
 8002916:	d301      	bcc.n	800291c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002918:	2301      	movs	r3, #1
 800291a:	e010      	b.n	800293e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <SysTick_Config+0x44>)
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	3a01      	subs	r2, #1
 8002922:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002924:	2301      	movs	r3, #1
 8002926:	425b      	negs	r3, r3
 8002928:	2103      	movs	r1, #3
 800292a:	0018      	movs	r0, r3
 800292c:	f7ff ff7c 	bl	8002828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <SysTick_Config+0x44>)
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <SysTick_Config+0x44>)
 8002938:	2207      	movs	r2, #7
 800293a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800293c:	2300      	movs	r3, #0
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b002      	add	sp, #8
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	e000e010 	.word	0xe000e010

0800294c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	210f      	movs	r1, #15
 8002958:	187b      	adds	r3, r7, r1
 800295a:	1c02      	adds	r2, r0, #0
 800295c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	187b      	adds	r3, r7, r1
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b25b      	sxtb	r3, r3
 8002966:	0011      	movs	r1, r2
 8002968:	0018      	movs	r0, r3
 800296a:	f7ff ff5d 	bl	8002828 <__NVIC_SetPriority>
}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b004      	add	sp, #16
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	0018      	movs	r0, r3
 8002982:	f7ff ffbf 	bl	8002904 <SysTick_Config>
 8002986:	0003      	movs	r3, r0
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299e:	e14f      	b.n	8002c40 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4091      	lsls	r1, r2
 80029aa:	000a      	movs	r2, r1
 80029ac:	4013      	ands	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d100      	bne.n	80029b8 <HAL_GPIO_Init+0x28>
 80029b6:	e140      	b.n	8002c3a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2203      	movs	r2, #3
 80029be:	4013      	ands	r3, r2
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d005      	beq.n	80029d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2203      	movs	r2, #3
 80029ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d130      	bne.n	8002a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	409a      	lsls	r2, r3
 80029de:	0013      	movs	r3, r2
 80029e0:	43da      	mvns	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	409a      	lsls	r2, r3
 80029f2:	0013      	movs	r3, r2
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a06:	2201      	movs	r2, #1
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	401a      	ands	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	409a      	lsls	r2, r3
 8002a24:	0013      	movs	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2203      	movs	r2, #3
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d017      	beq.n	8002a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	2203      	movs	r2, #3
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	0013      	movs	r3, r2
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	0013      	movs	r3, r2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2203      	movs	r2, #3
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d123      	bne.n	8002ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	0092      	lsls	r2, r2, #2
 8002a84:	58d3      	ldr	r3, [r2, r3]
 8002a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	220f      	movs	r2, #15
 8002a92:	409a      	lsls	r2, r3
 8002a94:	0013      	movs	r3, r2
 8002a96:	43da      	mvns	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2107      	movs	r1, #7
 8002aa6:	400b      	ands	r3, r1
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	0013      	movs	r3, r2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	08da      	lsrs	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	0092      	lsls	r2, r2, #2
 8002abe:	6939      	ldr	r1, [r7, #16]
 8002ac0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	0013      	movs	r3, r2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	23c0      	movs	r3, #192	; 0xc0
 8002afc:	029b      	lsls	r3, r3, #10
 8002afe:	4013      	ands	r3, r2
 8002b00:	d100      	bne.n	8002b04 <HAL_GPIO_Init+0x174>
 8002b02:	e09a      	b.n	8002c3a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b04:	4b54      	ldr	r3, [pc, #336]	; (8002c58 <HAL_GPIO_Init+0x2c8>)
 8002b06:	699a      	ldr	r2, [r3, #24]
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_GPIO_Init+0x2c8>)
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	619a      	str	r2, [r3, #24]
 8002b10:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <HAL_GPIO_Init+0x2c8>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2201      	movs	r2, #1
 8002b16:	4013      	ands	r3, r2
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b1c:	4a4f      	ldr	r2, [pc, #316]	; (8002c5c <HAL_GPIO_Init+0x2cc>)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	3302      	adds	r3, #2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	589b      	ldr	r3, [r3, r2]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	4013      	ands	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	220f      	movs	r2, #15
 8002b34:	409a      	lsls	r2, r3
 8002b36:	0013      	movs	r3, r2
 8002b38:	43da      	mvns	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	2390      	movs	r3, #144	; 0x90
 8002b44:	05db      	lsls	r3, r3, #23
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d013      	beq.n	8002b72 <HAL_GPIO_Init+0x1e2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a44      	ldr	r2, [pc, #272]	; (8002c60 <HAL_GPIO_Init+0x2d0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00d      	beq.n	8002b6e <HAL_GPIO_Init+0x1de>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a43      	ldr	r2, [pc, #268]	; (8002c64 <HAL_GPIO_Init+0x2d4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d007      	beq.n	8002b6a <HAL_GPIO_Init+0x1da>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a42      	ldr	r2, [pc, #264]	; (8002c68 <HAL_GPIO_Init+0x2d8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_GPIO_Init+0x1d6>
 8002b62:	2303      	movs	r3, #3
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x1e4>
 8002b66:	2305      	movs	r3, #5
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_Init+0x1e4>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x1e4>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x1e4>
 8002b72:	2300      	movs	r3, #0
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	2103      	movs	r1, #3
 8002b78:	400a      	ands	r2, r1
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b84:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_GPIO_Init+0x2cc>)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b92:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <HAL_GPIO_Init+0x2dc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	035b      	lsls	r3, r3, #13
 8002baa:	4013      	ands	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <HAL_GPIO_Init+0x2dc>)
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <HAL_GPIO_Init+0x2dc>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	039b      	lsls	r3, r3, #14
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002be0:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <HAL_GPIO_Init+0x2dc>)
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002be6:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <HAL_GPIO_Init+0x2dc>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	029b      	lsls	r3, r3, #10
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_GPIO_Init+0x2dc>)
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <HAL_GPIO_Init+0x2dc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	025b      	lsls	r3, r3, #9
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c34:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_GPIO_Init+0x2dc>)
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	40da      	lsrs	r2, r3
 8002c48:	1e13      	subs	r3, r2, #0
 8002c4a:	d000      	beq.n	8002c4e <HAL_GPIO_Init+0x2be>
 8002c4c:	e6a8      	b.n	80029a0 <HAL_GPIO_Init+0x10>
  } 
}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b006      	add	sp, #24
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40010000 	.word	0x40010000
 8002c60:	48000400 	.word	0x48000400
 8002c64:	48000800 	.word	0x48000800
 8002c68:	48000c00 	.word	0x48000c00
 8002c6c:	40010400 	.word	0x40010400

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e305      	b.n	800328e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2201      	movs	r2, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d100      	bne.n	8002c8e <HAL_RCC_OscConfig+0x1e>
 8002c8c:	e08d      	b.n	8002daa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c8e:	4bc5      	ldr	r3, [pc, #788]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	220c      	movs	r2, #12
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d00e      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c9a:	4bc2      	ldr	r3, [pc, #776]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d116      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x64>
 8002ca6:	4bbf      	ldr	r3, [pc, #764]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	23c0      	movs	r3, #192	; 0xc0
 8002cac:	025b      	lsls	r3, r3, #9
 8002cae:	401a      	ands	r2, r3
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	025b      	lsls	r3, r3, #9
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	4bba      	ldr	r3, [pc, #744]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	029b      	lsls	r3, r3, #10
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d100      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x56>
 8002cc4:	e070      	b.n	8002da8 <HAL_RCC_OscConfig+0x138>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d000      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x60>
 8002cce:	e06b      	b.n	8002da8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e2dc      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_OscConfig+0x7c>
 8002cdc:	4bb1      	ldr	r3, [pc, #708]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4bb0      	ldr	r3, [pc, #704]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	0249      	lsls	r1, r1, #9
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e02f      	b.n	8002d4c <HAL_RCC_OscConfig+0xdc>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10c      	bne.n	8002d0e <HAL_RCC_OscConfig+0x9e>
 8002cf4:	4bab      	ldr	r3, [pc, #684]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4baa      	ldr	r3, [pc, #680]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002cfa:	49ab      	ldr	r1, [pc, #684]	; (8002fa8 <HAL_RCC_OscConfig+0x338>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	4ba8      	ldr	r3, [pc, #672]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4ba7      	ldr	r3, [pc, #668]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d06:	49a9      	ldr	r1, [pc, #676]	; (8002fac <HAL_RCC_OscConfig+0x33c>)
 8002d08:	400a      	ands	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e01e      	b.n	8002d4c <HAL_RCC_OscConfig+0xdc>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d10e      	bne.n	8002d34 <HAL_RCC_OscConfig+0xc4>
 8002d16:	4ba3      	ldr	r3, [pc, #652]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4ba2      	ldr	r3, [pc, #648]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	02c9      	lsls	r1, r1, #11
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	4b9f      	ldr	r3, [pc, #636]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b9e      	ldr	r3, [pc, #632]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	0249      	lsls	r1, r1, #9
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0xdc>
 8002d34:	4b9b      	ldr	r3, [pc, #620]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b9a      	ldr	r3, [pc, #616]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d3a:	499b      	ldr	r1, [pc, #620]	; (8002fa8 <HAL_RCC_OscConfig+0x338>)
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	4b98      	ldr	r3, [pc, #608]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b97      	ldr	r3, [pc, #604]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d46:	4999      	ldr	r1, [pc, #612]	; (8002fac <HAL_RCC_OscConfig+0x33c>)
 8002d48:	400a      	ands	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d014      	beq.n	8002d7e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7ff f9a2 	bl	800209c <HAL_GetTick>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5e:	f7ff f99d 	bl	800209c <HAL_GetTick>
 8002d62:	0002      	movs	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b64      	cmp	r3, #100	; 0x64
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e28e      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d70:	4b8c      	ldr	r3, [pc, #560]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	029b      	lsls	r3, r3, #10
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0xee>
 8002d7c:	e015      	b.n	8002daa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7ff f98d 	bl	800209c <HAL_GetTick>
 8002d82:	0003      	movs	r3, r0
 8002d84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d88:	f7ff f988 	bl	800209c <HAL_GetTick>
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e279      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b82      	ldr	r3, [pc, #520]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	029b      	lsls	r3, r3, #10
 8002da2:	4013      	ands	r3, r2
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x118>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2202      	movs	r2, #2
 8002db0:	4013      	ands	r3, r2
 8002db2:	d100      	bne.n	8002db6 <HAL_RCC_OscConfig+0x146>
 8002db4:	e06c      	b.n	8002e90 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002db6:	4b7b      	ldr	r3, [pc, #492]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	220c      	movs	r2, #12
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d00e      	beq.n	8002dde <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002dc0:	4b78      	ldr	r3, [pc, #480]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	220c      	movs	r2, #12
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d11f      	bne.n	8002e0c <HAL_RCC_OscConfig+0x19c>
 8002dcc:	4b75      	ldr	r3, [pc, #468]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	23c0      	movs	r3, #192	; 0xc0
 8002dd2:	025b      	lsls	r3, r3, #9
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b71      	ldr	r3, [pc, #452]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2202      	movs	r2, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_OscConfig+0x184>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e24c      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b6b      	ldr	r3, [pc, #428]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	22f8      	movs	r2, #248	; 0xf8
 8002dfa:	4393      	bics	r3, r2
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00da      	lsls	r2, r3, #3
 8002e04:	4b67      	ldr	r3, [pc, #412]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e041      	b.n	8002e90 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d024      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b63      	ldr	r3, [pc, #396]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b62      	ldr	r3, [pc, #392]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7ff f93c 	bl	800209c <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7ff f937 	bl	800209c <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e228      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2202      	movs	r2, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	d0f1      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e46:	4b57      	ldr	r3, [pc, #348]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	22f8      	movs	r2, #248	; 0xf8
 8002e4c:	4393      	bics	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	00da      	lsls	r2, r3, #3
 8002e56:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e018      	b.n	8002e90 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5e:	4b51      	ldr	r3, [pc, #324]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002e64:	2101      	movs	r1, #1
 8002e66:	438a      	bics	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7ff f917 	bl	800209c <HAL_GetTick>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e74:	f7ff f912 	bl	800209c <HAL_GetTick>
 8002e78:	0002      	movs	r2, r0
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e203      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d1f1      	bne.n	8002e74 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2208      	movs	r2, #8
 8002e96:	4013      	ands	r3, r2
 8002e98:	d036      	beq.n	8002f08 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d019      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea6:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7ff f8f5 	bl	800209c <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7ff f8f0 	bl	800209c <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e1e1      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eca:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2202      	movs	r2, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d0f1      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x248>
 8002ed4:	e018      	b.n	8002f08 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed6:	4b33      	ldr	r3, [pc, #204]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eda:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002edc:	2101      	movs	r1, #1
 8002ede:	438a      	bics	r2, r1
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7ff f8db 	bl	800209c <HAL_GetTick>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eec:	f7ff f8d6 	bl	800209c <HAL_GetTick>
 8002ef0:	0002      	movs	r2, r0
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e1c7      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efe:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2202      	movs	r2, #2
 8002f04:	4013      	ands	r3, r2
 8002f06:	d1f1      	bne.n	8002eec <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d100      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2a4>
 8002f12:	e0b5      	b.n	8003080 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f14:	201f      	movs	r0, #31
 8002f16:	183b      	adds	r3, r7, r0
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1c:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	055b      	lsls	r3, r3, #21
 8002f24:	4013      	ands	r3, r2
 8002f26:	d110      	bne.n	8002f4a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002f2e:	2180      	movs	r1, #128	; 0x80
 8002f30:	0549      	lsls	r1, r1, #21
 8002f32:	430a      	orrs	r2, r1
 8002f34:	61da      	str	r2, [r3, #28]
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	055b      	lsls	r3, r3, #21
 8002f3e:	4013      	ands	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f44:	183b      	adds	r3, r7, r0
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4a:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <HAL_RCC_OscConfig+0x340>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	d11a      	bne.n	8002f8c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_RCC_OscConfig+0x340>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_RCC_OscConfig+0x340>)
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	0049      	lsls	r1, r1, #1
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f64:	f7ff f89a 	bl	800209c <HAL_GetTick>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6e:	f7ff f895 	bl	800209c <HAL_GetTick>
 8002f72:	0002      	movs	r2, r0
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	; 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e186      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_OscConfig+0x340>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10f      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x344>
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	4b02      	ldr	r3, [pc, #8]	; (8002fa4 <HAL_RCC_OscConfig+0x334>)
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	621a      	str	r2, [r3, #32]
 8002fa0:	e036      	b.n	8003010 <HAL_RCC_OscConfig+0x3a0>
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	fffeffff 	.word	0xfffeffff
 8002fac:	fffbffff 	.word	0xfffbffff
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10c      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x366>
 8002fbc:	4bb6      	ldr	r3, [pc, #728]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8002fbe:	6a1a      	ldr	r2, [r3, #32]
 8002fc0:	4bb5      	ldr	r3, [pc, #724]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	438a      	bics	r2, r1
 8002fc6:	621a      	str	r2, [r3, #32]
 8002fc8:	4bb3      	ldr	r3, [pc, #716]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	4bb2      	ldr	r3, [pc, #712]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8002fce:	2104      	movs	r1, #4
 8002fd0:	438a      	bics	r2, r1
 8002fd2:	621a      	str	r2, [r3, #32]
 8002fd4:	e01c      	b.n	8003010 <HAL_RCC_OscConfig+0x3a0>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x388>
 8002fde:	4bae      	ldr	r3, [pc, #696]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	4bad      	ldr	r3, [pc, #692]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	621a      	str	r2, [r3, #32]
 8002fea:	4bab      	ldr	r3, [pc, #684]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8002fec:	6a1a      	ldr	r2, [r3, #32]
 8002fee:	4baa      	ldr	r3, [pc, #680]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	621a      	str	r2, [r3, #32]
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0x3a0>
 8002ff8:	4ba7      	ldr	r3, [pc, #668]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
 8002ffc:	4ba6      	ldr	r3, [pc, #664]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8002ffe:	2101      	movs	r1, #1
 8003000:	438a      	bics	r2, r1
 8003002:	621a      	str	r2, [r3, #32]
 8003004:	4ba4      	ldr	r3, [pc, #656]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003006:	6a1a      	ldr	r2, [r3, #32]
 8003008:	4ba3      	ldr	r3, [pc, #652]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 800300a:	2104      	movs	r1, #4
 800300c:	438a      	bics	r2, r1
 800300e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d014      	beq.n	8003042 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003018:	f7ff f840 	bl	800209c <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	e009      	b.n	8003036 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7ff f83b 	bl	800209c <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	4a9b      	ldr	r2, [pc, #620]	; (800329c <HAL_RCC_OscConfig+0x62c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e12b      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003036:	4b98      	ldr	r3, [pc, #608]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	2202      	movs	r2, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x3b2>
 8003040:	e013      	b.n	800306a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7ff f82b 	bl	800209c <HAL_GetTick>
 8003046:	0003      	movs	r3, r0
 8003048:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304a:	e009      	b.n	8003060 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7ff f826 	bl	800209c <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	4a91      	ldr	r2, [pc, #580]	; (800329c <HAL_RCC_OscConfig+0x62c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e116      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003060:	4b8d      	ldr	r3, [pc, #564]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	2202      	movs	r2, #2
 8003066:	4013      	ands	r3, r2
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800306a:	231f      	movs	r3, #31
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003074:	4b88      	ldr	r3, [pc, #544]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	4b87      	ldr	r3, [pc, #540]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 800307a:	4989      	ldr	r1, [pc, #548]	; (80032a0 <HAL_RCC_OscConfig+0x630>)
 800307c:	400a      	ands	r2, r1
 800307e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2210      	movs	r2, #16
 8003086:	4013      	ands	r3, r2
 8003088:	d063      	beq.n	8003152 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d12a      	bne.n	80030e8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003092:	4b81      	ldr	r3, [pc, #516]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003096:	4b80      	ldr	r3, [pc, #512]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003098:	2104      	movs	r1, #4
 800309a:	430a      	orrs	r2, r1
 800309c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800309e:	4b7e      	ldr	r3, [pc, #504]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80030a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a2:	4b7d      	ldr	r3, [pc, #500]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80030a4:	2101      	movs	r1, #1
 80030a6:	430a      	orrs	r2, r1
 80030a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030aa:	f7fe fff7 	bl	800209c <HAL_GetTick>
 80030ae:	0003      	movs	r3, r0
 80030b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80030b4:	f7fe fff2 	bl	800209c <HAL_GetTick>
 80030b8:	0002      	movs	r2, r0
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0e3      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80030c6:	4b74      	ldr	r3, [pc, #464]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	2202      	movs	r2, #2
 80030cc:	4013      	ands	r3, r2
 80030ce:	d0f1      	beq.n	80030b4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030d0:	4b71      	ldr	r3, [pc, #452]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80030d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d4:	22f8      	movs	r2, #248	; 0xf8
 80030d6:	4393      	bics	r3, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	00da      	lsls	r2, r3, #3
 80030e0:	4b6d      	ldr	r3, [pc, #436]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80030e2:	430a      	orrs	r2, r1
 80030e4:	635a      	str	r2, [r3, #52]	; 0x34
 80030e6:	e034      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	3305      	adds	r3, #5
 80030ee:	d111      	bne.n	8003114 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80030f0:	4b69      	ldr	r3, [pc, #420]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80030f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f4:	4b68      	ldr	r3, [pc, #416]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80030f6:	2104      	movs	r1, #4
 80030f8:	438a      	bics	r2, r1
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030fc:	4b66      	ldr	r3, [pc, #408]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80030fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003100:	22f8      	movs	r2, #248	; 0xf8
 8003102:	4393      	bics	r3, r2
 8003104:	0019      	movs	r1, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	00da      	lsls	r2, r3, #3
 800310c:	4b62      	ldr	r3, [pc, #392]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 800310e:	430a      	orrs	r2, r1
 8003110:	635a      	str	r2, [r3, #52]	; 0x34
 8003112:	e01e      	b.n	8003152 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003114:	4b60      	ldr	r3, [pc, #384]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003118:	4b5f      	ldr	r3, [pc, #380]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 800311a:	2104      	movs	r1, #4
 800311c:	430a      	orrs	r2, r1
 800311e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003120:	4b5d      	ldr	r3, [pc, #372]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003124:	4b5c      	ldr	r3, [pc, #368]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003126:	2101      	movs	r1, #1
 8003128:	438a      	bics	r2, r1
 800312a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312c:	f7fe ffb6 	bl	800209c <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003136:	f7fe ffb1 	bl	800209c <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0a2      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	2202      	movs	r2, #2
 800314e:	4013      	ands	r3, r2
 8003150:	d1f1      	bne.n	8003136 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d100      	bne.n	800315c <HAL_RCC_OscConfig+0x4ec>
 800315a:	e097      	b.n	800328c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800315c:	4b4e      	ldr	r3, [pc, #312]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	220c      	movs	r2, #12
 8003162:	4013      	ands	r3, r2
 8003164:	2b08      	cmp	r3, #8
 8003166:	d100      	bne.n	800316a <HAL_RCC_OscConfig+0x4fa>
 8003168:	e06b      	b.n	8003242 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d14c      	bne.n	800320c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003172:	4b49      	ldr	r3, [pc, #292]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b48      	ldr	r3, [pc, #288]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003178:	494a      	ldr	r1, [pc, #296]	; (80032a4 <HAL_RCC_OscConfig+0x634>)
 800317a:	400a      	ands	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe ff8d 	bl	800209c <HAL_GetTick>
 8003182:	0003      	movs	r3, r0
 8003184:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe ff88 	bl	800209c <HAL_GetTick>
 800318c:	0002      	movs	r2, r0
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e079      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	049b      	lsls	r3, r3, #18
 80031a2:	4013      	ands	r3, r2
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a6:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	220f      	movs	r2, #15
 80031ac:	4393      	bics	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	4b38      	ldr	r3, [pc, #224]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80031b6:	430a      	orrs	r2, r1
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80031ba:	4b37      	ldr	r3, [pc, #220]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4a3a      	ldr	r2, [pc, #232]	; (80032a8 <HAL_RCC_OscConfig+0x638>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	431a      	orrs	r2, r3
 80031ce:	4b32      	ldr	r3, [pc, #200]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d4:	4b30      	ldr	r3, [pc, #192]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4b2f      	ldr	r3, [pc, #188]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 80031da:	2180      	movs	r1, #128	; 0x80
 80031dc:	0449      	lsls	r1, r1, #17
 80031de:	430a      	orrs	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fe ff5b 	bl	800209c <HAL_GetTick>
 80031e6:	0003      	movs	r3, r0
 80031e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe ff56 	bl	800209c <HAL_GetTick>
 80031f0:	0002      	movs	r2, r0
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e047      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031fe:	4b26      	ldr	r3, [pc, #152]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	049b      	lsls	r3, r3, #18
 8003206:	4013      	ands	r3, r2
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x57c>
 800320a:	e03f      	b.n	800328c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320c:	4b22      	ldr	r3, [pc, #136]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003212:	4924      	ldr	r1, [pc, #144]	; (80032a4 <HAL_RCC_OscConfig+0x634>)
 8003214:	400a      	ands	r2, r1
 8003216:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe ff40 	bl	800209c <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003222:	f7fe ff3b 	bl	800209c <HAL_GetTick>
 8003226:	0002      	movs	r2, r0
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e02c      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003234:	4b18      	ldr	r3, [pc, #96]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	049b      	lsls	r3, r3, #18
 800323c:	4013      	ands	r3, r2
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x5b2>
 8003240:	e024      	b.n	800328c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e01f      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_RCC_OscConfig+0x628>)
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	23c0      	movs	r3, #192	; 0xc0
 800325e:	025b      	lsls	r3, r3, #9
 8003260:	401a      	ands	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	429a      	cmp	r2, r3
 8003268:	d10e      	bne.n	8003288 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	220f      	movs	r2, #15
 800326e:	401a      	ands	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d107      	bne.n	8003288 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	23f0      	movs	r3, #240	; 0xf0
 800327c:	039b      	lsls	r3, r3, #14
 800327e:	401a      	ands	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b008      	add	sp, #32
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	40021000 	.word	0x40021000
 800329c:	00001388 	.word	0x00001388
 80032a0:	efffffff 	.word	0xefffffff
 80032a4:	feffffff 	.word	0xfeffffff
 80032a8:	ffc27fff 	.word	0xffc27fff

080032ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0b3      	b.n	8003428 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c0:	4b5b      	ldr	r3, [pc, #364]	; (8003430 <HAL_RCC_ClockConfig+0x184>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2201      	movs	r2, #1
 80032c6:	4013      	ands	r3, r2
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d911      	bls.n	80032f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b58      	ldr	r3, [pc, #352]	; (8003430 <HAL_RCC_ClockConfig+0x184>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2201      	movs	r2, #1
 80032d4:	4393      	bics	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	4b55      	ldr	r3, [pc, #340]	; (8003430 <HAL_RCC_ClockConfig+0x184>)
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e0:	4b53      	ldr	r3, [pc, #332]	; (8003430 <HAL_RCC_ClockConfig+0x184>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2201      	movs	r2, #1
 80032e6:	4013      	ands	r3, r2
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e09a      	b.n	8003428 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2202      	movs	r2, #2
 80032f8:	4013      	ands	r3, r2
 80032fa:	d015      	beq.n	8003328 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2204      	movs	r2, #4
 8003302:	4013      	ands	r3, r2
 8003304:	d006      	beq.n	8003314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003306:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4b4a      	ldr	r3, [pc, #296]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 800330c:	21e0      	movs	r1, #224	; 0xe0
 800330e:	00c9      	lsls	r1, r1, #3
 8003310:	430a      	orrs	r2, r1
 8003312:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003314:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	22f0      	movs	r2, #240	; 0xf0
 800331a:	4393      	bics	r3, r2
 800331c:	0019      	movs	r1, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	4b44      	ldr	r3, [pc, #272]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 8003324:	430a      	orrs	r2, r1
 8003326:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2201      	movs	r2, #1
 800332e:	4013      	ands	r3, r2
 8003330:	d040      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	029b      	lsls	r3, r3, #10
 8003342:	4013      	ands	r3, r2
 8003344:	d114      	bne.n	8003370 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e06e      	b.n	8003428 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003352:	4b38      	ldr	r3, [pc, #224]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	049b      	lsls	r3, r3, #18
 800335a:	4013      	ands	r3, r2
 800335c:	d108      	bne.n	8003370 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e062      	b.n	8003428 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	4b34      	ldr	r3, [pc, #208]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2202      	movs	r2, #2
 8003368:	4013      	ands	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e05b      	b.n	8003428 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003370:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2203      	movs	r2, #3
 8003376:	4393      	bics	r3, r2
 8003378:	0019      	movs	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 8003380:	430a      	orrs	r2, r1
 8003382:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003384:	f7fe fe8a 	bl	800209c <HAL_GetTick>
 8003388:	0003      	movs	r3, r0
 800338a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338c:	e009      	b.n	80033a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338e:	f7fe fe85 	bl	800209c <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	4a27      	ldr	r2, [pc, #156]	; (8003438 <HAL_RCC_ClockConfig+0x18c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e042      	b.n	8003428 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	220c      	movs	r2, #12
 80033a8:	401a      	ands	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d1ec      	bne.n	800338e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b4:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <HAL_RCC_ClockConfig+0x184>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2201      	movs	r2, #1
 80033ba:	4013      	ands	r3, r2
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d211      	bcs.n	80033e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <HAL_RCC_ClockConfig+0x184>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2201      	movs	r2, #1
 80033c8:	4393      	bics	r3, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	4b18      	ldr	r3, [pc, #96]	; (8003430 <HAL_RCC_ClockConfig+0x184>)
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d4:	4b16      	ldr	r3, [pc, #88]	; (8003430 <HAL_RCC_ClockConfig+0x184>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2201      	movs	r2, #1
 80033da:	4013      	ands	r3, r2
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e020      	b.n	8003428 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2204      	movs	r2, #4
 80033ec:	4013      	ands	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a11      	ldr	r2, [pc, #68]	; (800343c <HAL_RCC_ClockConfig+0x190>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003404:	f000 f820 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8003408:	0001      	movs	r1, r0
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	220f      	movs	r2, #15
 8003412:	4013      	ands	r3, r2
 8003414:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <HAL_RCC_ClockConfig+0x194>)
 8003416:	5cd3      	ldrb	r3, [r2, r3]
 8003418:	000a      	movs	r2, r1
 800341a:	40da      	lsrs	r2, r3
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_ClockConfig+0x198>)
 800341e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003420:	2003      	movs	r0, #3
 8003422:	f7fe fdf5 	bl	8002010 <HAL_InitTick>
  
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b004      	add	sp, #16
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40022000 	.word	0x40022000
 8003434:	40021000 	.word	0x40021000
 8003438:	00001388 	.word	0x00001388
 800343c:	fffff8ff 	.word	0xfffff8ff
 8003440:	08003f04 	.word	0x08003f04
 8003444:	20000000 	.word	0x20000000

08003448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003462:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	220c      	movs	r2, #12
 800346c:	4013      	ands	r3, r2
 800346e:	2b04      	cmp	r3, #4
 8003470:	d002      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x30>
 8003472:	2b08      	cmp	r3, #8
 8003474:	d003      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x36>
 8003476:	e02e      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003478:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <HAL_RCC_GetSysClockFreq+0xa4>)
 800347a:	613b      	str	r3, [r7, #16]
      break;
 800347c:	e02e      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	0c9b      	lsrs	r3, r3, #18
 8003482:	220f      	movs	r2, #15
 8003484:	4013      	ands	r3, r2
 8003486:	4a1a      	ldr	r2, [pc, #104]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003488:	5cd3      	ldrb	r3, [r2, r3]
 800348a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	220f      	movs	r2, #15
 8003492:	4013      	ands	r3, r2
 8003494:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003496:	5cd3      	ldrb	r3, [r2, r3]
 8003498:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	23c0      	movs	r3, #192	; 0xc0
 800349e:	025b      	lsls	r3, r3, #9
 80034a0:	401a      	ands	r2, r3
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	025b      	lsls	r3, r3, #9
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d109      	bne.n	80034be <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	480f      	ldr	r0, [pc, #60]	; (80034ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80034ae:	f7fc fe29 	bl	8000104 <__udivsi3>
 80034b2:	0003      	movs	r3, r0
 80034b4:	001a      	movs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4353      	muls	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	480a      	ldr	r0, [pc, #40]	; (80034ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80034c2:	f7fc fe1f 	bl	8000104 <__udivsi3>
 80034c6:	0003      	movs	r3, r0
 80034c8:	001a      	movs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4353      	muls	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	613b      	str	r3, [r7, #16]
      break;
 80034d4:	e002      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80034d8:	613b      	str	r3, [r7, #16]
      break;
 80034da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034dc:	693b      	ldr	r3, [r7, #16]
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b006      	add	sp, #24
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	40021000 	.word	0x40021000
 80034ec:	007a1200 	.word	0x007a1200
 80034f0:	08003f1c 	.word	0x08003f1c
 80034f4:	08003f2c 	.word	0x08003f2c

080034f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034fc:	4b02      	ldr	r3, [pc, #8]	; (8003508 <HAL_RCC_GetHCLKFreq+0x10>)
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	20000000 	.word	0x20000000

0800350c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003510:	f7ff fff2 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003514:	0001      	movs	r1, r0
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	2207      	movs	r2, #7
 800351e:	4013      	ands	r3, r2
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	40d9      	lsrs	r1, r3
 8003526:	000b      	movs	r3, r1
}    
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	40021000 	.word	0x40021000
 8003534:	08003f14 	.word	0x08003f14

08003538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e044      	b.n	80035d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2278      	movs	r2, #120	; 0x78
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0018      	movs	r0, r3
 800355e:	f7fe fc85 	bl	8001e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2224      	movs	r2, #36	; 0x24
 8003566:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2101      	movs	r1, #1
 8003574:	438a      	bics	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0018      	movs	r0, r3
 800357c:	f000 f8d0 	bl	8003720 <UART_SetConfig>
 8003580:	0003      	movs	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e024      	b.n	80035d4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0018      	movs	r0, r3
 8003596:	f000 fa33 	bl	8003a00 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	490d      	ldr	r1, [pc, #52]	; (80035dc <HAL_UART_Init+0xa4>)
 80035a6:	400a      	ands	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2108      	movs	r1, #8
 80035b6:	438a      	bics	r2, r1
 80035b8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 facb 	bl	8003b68 <UART_CheckIdleState>
 80035d2:	0003      	movs	r3, r0
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	fffff7ff 	.word	0xfffff7ff

080035e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	1dbb      	adds	r3, r7, #6
 80035ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d000      	beq.n	80035fa <HAL_UART_Transmit+0x1a>
 80035f8:	e08d      	b.n	8003716 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_UART_Transmit+0x28>
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e085      	b.n	8003718 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	015b      	lsls	r3, r3, #5
 8003614:	429a      	cmp	r2, r3
 8003616:	d109      	bne.n	800362c <HAL_UART_Transmit+0x4c>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d105      	bne.n	800362c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2201      	movs	r2, #1
 8003624:	4013      	ands	r3, r2
 8003626:	d001      	beq.n	800362c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e075      	b.n	8003718 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2284      	movs	r2, #132	; 0x84
 8003630:	2100      	movs	r1, #0
 8003632:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2221      	movs	r2, #33	; 0x21
 8003638:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800363a:	f7fe fd2f 	bl	800209c <HAL_GetTick>
 800363e:	0003      	movs	r3, r0
 8003640:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1dba      	adds	r2, r7, #6
 8003646:	2150      	movs	r1, #80	; 0x50
 8003648:	8812      	ldrh	r2, [r2, #0]
 800364a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1dba      	adds	r2, r7, #6
 8003650:	2152      	movs	r1, #82	; 0x52
 8003652:	8812      	ldrh	r2, [r2, #0]
 8003654:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	015b      	lsls	r3, r3, #5
 800365e:	429a      	cmp	r2, r3
 8003660:	d108      	bne.n	8003674 <HAL_UART_Transmit+0x94>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d104      	bne.n	8003674 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	e003      	b.n	800367c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003678:	2300      	movs	r3, #0
 800367a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800367c:	e030      	b.n	80036e0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	0013      	movs	r3, r2
 8003688:	2200      	movs	r2, #0
 800368a:	2180      	movs	r1, #128	; 0x80
 800368c:	f000 fb14 	bl	8003cb8 <UART_WaitOnFlagUntilTimeout>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d004      	beq.n	800369e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e03c      	b.n	8003718 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	881a      	ldrh	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	05d2      	lsls	r2, r2, #23
 80036ae:	0dd2      	lsrs	r2, r2, #23
 80036b0:	b292      	uxth	r2, r2
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	3302      	adds	r3, #2
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	e008      	b.n	80036ce <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	781a      	ldrb	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b292      	uxth	r2, r2
 80036c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	3301      	adds	r3, #1
 80036cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2252      	movs	r2, #82	; 0x52
 80036d2:	5a9b      	ldrh	r3, [r3, r2]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b299      	uxth	r1, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2252      	movs	r2, #82	; 0x52
 80036de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2252      	movs	r2, #82	; 0x52
 80036e4:	5a9b      	ldrh	r3, [r3, r2]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1c8      	bne.n	800367e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	0013      	movs	r3, r2
 80036f6:	2200      	movs	r2, #0
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	f000 fadd 	bl	8003cb8 <UART_WaitOnFlagUntilTimeout>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d004      	beq.n	800370c <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e005      	b.n	8003718 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	e000      	b.n	8003718 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003716:	2302      	movs	r3, #2
  }
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b008      	add	sp, #32
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003728:	231e      	movs	r3, #30
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	2200      	movs	r2, #0
 800372e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4aa1      	ldr	r2, [pc, #644]	; (80039d4 <UART_SetConfig+0x2b4>)
 8003750:	4013      	ands	r3, r2
 8003752:	0019      	movs	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	430a      	orrs	r2, r1
 800375c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a9c      	ldr	r2, [pc, #624]	; (80039d8 <UART_SetConfig+0x2b8>)
 8003766:	4013      	ands	r3, r2
 8003768:	0019      	movs	r1, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a93      	ldr	r2, [pc, #588]	; (80039dc <UART_SetConfig+0x2bc>)
 800378e:	4013      	ands	r3, r2
 8003790:	0019      	movs	r1, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	430a      	orrs	r2, r1
 800379a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a8f      	ldr	r2, [pc, #572]	; (80039e0 <UART_SetConfig+0x2c0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d127      	bne.n	80037f6 <UART_SetConfig+0xd6>
 80037a6:	4b8f      	ldr	r3, [pc, #572]	; (80039e4 <UART_SetConfig+0x2c4>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	2203      	movs	r2, #3
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d00d      	beq.n	80037ce <UART_SetConfig+0xae>
 80037b2:	d81b      	bhi.n	80037ec <UART_SetConfig+0xcc>
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d014      	beq.n	80037e2 <UART_SetConfig+0xc2>
 80037b8:	d818      	bhi.n	80037ec <UART_SetConfig+0xcc>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <UART_SetConfig+0xa4>
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d00a      	beq.n	80037d8 <UART_SetConfig+0xb8>
 80037c2:	e013      	b.n	80037ec <UART_SetConfig+0xcc>
 80037c4:	231f      	movs	r3, #31
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e049      	b.n	8003862 <UART_SetConfig+0x142>
 80037ce:	231f      	movs	r3, #31
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	2202      	movs	r2, #2
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	e044      	b.n	8003862 <UART_SetConfig+0x142>
 80037d8:	231f      	movs	r3, #31
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	2204      	movs	r2, #4
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e03f      	b.n	8003862 <UART_SetConfig+0x142>
 80037e2:	231f      	movs	r3, #31
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2208      	movs	r2, #8
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e03a      	b.n	8003862 <UART_SetConfig+0x142>
 80037ec:	231f      	movs	r3, #31
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	2210      	movs	r2, #16
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	e035      	b.n	8003862 <UART_SetConfig+0x142>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a7b      	ldr	r2, [pc, #492]	; (80039e8 <UART_SetConfig+0x2c8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d104      	bne.n	800380a <UART_SetConfig+0xea>
 8003800:	231f      	movs	r3, #31
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e02b      	b.n	8003862 <UART_SetConfig+0x142>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a77      	ldr	r2, [pc, #476]	; (80039ec <UART_SetConfig+0x2cc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d104      	bne.n	800381e <UART_SetConfig+0xfe>
 8003814:	231f      	movs	r3, #31
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e021      	b.n	8003862 <UART_SetConfig+0x142>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a73      	ldr	r2, [pc, #460]	; (80039f0 <UART_SetConfig+0x2d0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d104      	bne.n	8003832 <UART_SetConfig+0x112>
 8003828:	231f      	movs	r3, #31
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e017      	b.n	8003862 <UART_SetConfig+0x142>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6f      	ldr	r2, [pc, #444]	; (80039f4 <UART_SetConfig+0x2d4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d104      	bne.n	8003846 <UART_SetConfig+0x126>
 800383c:	231f      	movs	r3, #31
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	e00d      	b.n	8003862 <UART_SetConfig+0x142>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6b      	ldr	r2, [pc, #428]	; (80039f8 <UART_SetConfig+0x2d8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d104      	bne.n	800385a <UART_SetConfig+0x13a>
 8003850:	231f      	movs	r3, #31
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e003      	b.n	8003862 <UART_SetConfig+0x142>
 800385a:	231f      	movs	r3, #31
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	2210      	movs	r2, #16
 8003860:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69da      	ldr	r2, [r3, #28]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	429a      	cmp	r2, r3
 800386c:	d15c      	bne.n	8003928 <UART_SetConfig+0x208>
  {
    switch (clocksource)
 800386e:	231f      	movs	r3, #31
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d015      	beq.n	80038a4 <UART_SetConfig+0x184>
 8003878:	dc18      	bgt.n	80038ac <UART_SetConfig+0x18c>
 800387a:	2b04      	cmp	r3, #4
 800387c:	d00d      	beq.n	800389a <UART_SetConfig+0x17a>
 800387e:	dc15      	bgt.n	80038ac <UART_SetConfig+0x18c>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <UART_SetConfig+0x16a>
 8003884:	2b02      	cmp	r3, #2
 8003886:	d005      	beq.n	8003894 <UART_SetConfig+0x174>
 8003888:	e010      	b.n	80038ac <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800388a:	f7ff fe3f 	bl	800350c <HAL_RCC_GetPCLK1Freq>
 800388e:	0003      	movs	r3, r0
 8003890:	61bb      	str	r3, [r7, #24]
        break;
 8003892:	e012      	b.n	80038ba <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <UART_SetConfig+0x2dc>)
 8003896:	61bb      	str	r3, [r7, #24]
        break;
 8003898:	e00f      	b.n	80038ba <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389a:	f7ff fdd5 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 800389e:	0003      	movs	r3, r0
 80038a0:	61bb      	str	r3, [r7, #24]
        break;
 80038a2:	e00a      	b.n	80038ba <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	61bb      	str	r3, [r7, #24]
        break;
 80038aa:	e006      	b.n	80038ba <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038b0:	231e      	movs	r3, #30
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
        break;
 80038b8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d100      	bne.n	80038c2 <UART_SetConfig+0x1a2>
 80038c0:	e07a      	b.n	80039b8 <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	005a      	lsls	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	18d2      	adds	r2, r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	0019      	movs	r1, r3
 80038d4:	0010      	movs	r0, r2
 80038d6:	f7fc fc15 	bl	8000104 <__udivsi3>
 80038da:	0003      	movs	r3, r0
 80038dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b0f      	cmp	r3, #15
 80038e2:	d91c      	bls.n	800391e <UART_SetConfig+0x1fe>
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	025b      	lsls	r3, r3, #9
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d217      	bcs.n	800391e <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	200e      	movs	r0, #14
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	210f      	movs	r1, #15
 80038f8:	438a      	bics	r2, r1
 80038fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	085b      	lsrs	r3, r3, #1
 8003900:	b29b      	uxth	r3, r3
 8003902:	2207      	movs	r2, #7
 8003904:	4013      	ands	r3, r2
 8003906:	b299      	uxth	r1, r3
 8003908:	183b      	adds	r3, r7, r0
 800390a:	183a      	adds	r2, r7, r0
 800390c:	8812      	ldrh	r2, [r2, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	183a      	adds	r2, r7, r0
 8003918:	8812      	ldrh	r2, [r2, #0]
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	e04c      	b.n	80039b8 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 800391e:	231e      	movs	r3, #30
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	2201      	movs	r2, #1
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	e047      	b.n	80039b8 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003928:	231f      	movs	r3, #31
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b08      	cmp	r3, #8
 8003930:	d015      	beq.n	800395e <UART_SetConfig+0x23e>
 8003932:	dc18      	bgt.n	8003966 <UART_SetConfig+0x246>
 8003934:	2b04      	cmp	r3, #4
 8003936:	d00d      	beq.n	8003954 <UART_SetConfig+0x234>
 8003938:	dc15      	bgt.n	8003966 <UART_SetConfig+0x246>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <UART_SetConfig+0x224>
 800393e:	2b02      	cmp	r3, #2
 8003940:	d005      	beq.n	800394e <UART_SetConfig+0x22e>
 8003942:	e010      	b.n	8003966 <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003944:	f7ff fde2 	bl	800350c <HAL_RCC_GetPCLK1Freq>
 8003948:	0003      	movs	r3, r0
 800394a:	61bb      	str	r3, [r7, #24]
        break;
 800394c:	e012      	b.n	8003974 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800394e:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <UART_SetConfig+0x2dc>)
 8003950:	61bb      	str	r3, [r7, #24]
        break;
 8003952:	e00f      	b.n	8003974 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003954:	f7ff fd78 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8003958:	0003      	movs	r3, r0
 800395a:	61bb      	str	r3, [r7, #24]
        break;
 800395c:	e00a      	b.n	8003974 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	61bb      	str	r3, [r7, #24]
        break;
 8003964:	e006      	b.n	8003974 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800396a:	231e      	movs	r3, #30
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
        break;
 8003972:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01e      	beq.n	80039b8 <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	085a      	lsrs	r2, r3, #1
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	18d2      	adds	r2, r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	0019      	movs	r1, r3
 800398a:	0010      	movs	r0, r2
 800398c:	f7fc fbba 	bl	8000104 <__udivsi3>
 8003990:	0003      	movs	r3, r0
 8003992:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	d90a      	bls.n	80039b0 <UART_SetConfig+0x290>
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	025b      	lsls	r3, r3, #9
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d205      	bcs.n	80039b0 <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	e003      	b.n	80039b8 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 80039b0:	231e      	movs	r3, #30
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039c4:	231e      	movs	r3, #30
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	781b      	ldrb	r3, [r3, #0]
}
 80039ca:	0018      	movs	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b008      	add	sp, #32
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	efff69f3 	.word	0xefff69f3
 80039d8:	ffffcfff 	.word	0xffffcfff
 80039dc:	fffff4ff 	.word	0xfffff4ff
 80039e0:	40013800 	.word	0x40013800
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40004400 	.word	0x40004400
 80039ec:	40004800 	.word	0x40004800
 80039f0:	40004c00 	.word	0x40004c00
 80039f4:	40005000 	.word	0x40005000
 80039f8:	40011400 	.word	0x40011400
 80039fc:	007a1200 	.word	0x007a1200

08003a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d00b      	beq.n	8003a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4a4a      	ldr	r2, [pc, #296]	; (8003b44 <UART_AdvFeatureConfig+0x144>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2202      	movs	r2, #2
 8003a30:	4013      	ands	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4a43      	ldr	r2, [pc, #268]	; (8003b48 <UART_AdvFeatureConfig+0x148>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	0019      	movs	r1, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	2204      	movs	r2, #4
 8003a52:	4013      	ands	r3, r2
 8003a54:	d00b      	beq.n	8003a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a3b      	ldr	r2, [pc, #236]	; (8003b4c <UART_AdvFeatureConfig+0x14c>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	0019      	movs	r1, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	2208      	movs	r2, #8
 8003a74:	4013      	ands	r3, r2
 8003a76:	d00b      	beq.n	8003a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4a34      	ldr	r2, [pc, #208]	; (8003b50 <UART_AdvFeatureConfig+0x150>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2210      	movs	r2, #16
 8003a96:	4013      	ands	r3, r2
 8003a98:	d00b      	beq.n	8003ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4a2c      	ldr	r2, [pc, #176]	; (8003b54 <UART_AdvFeatureConfig+0x154>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	4a25      	ldr	r2, [pc, #148]	; (8003b58 <UART_AdvFeatureConfig+0x158>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	2240      	movs	r2, #64	; 0x40
 8003ada:	4013      	ands	r3, r2
 8003adc:	d01d      	beq.n	8003b1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <UART_AdvFeatureConfig+0x15c>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	035b      	lsls	r3, r3, #13
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d10b      	bne.n	8003b1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4a15      	ldr	r2, [pc, #84]	; (8003b60 <UART_AdvFeatureConfig+0x160>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	4013      	ands	r3, r2
 8003b22:	d00b      	beq.n	8003b3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4a0e      	ldr	r2, [pc, #56]	; (8003b64 <UART_AdvFeatureConfig+0x164>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	0019      	movs	r1, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
  }
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b002      	add	sp, #8
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	fffdffff 	.word	0xfffdffff
 8003b48:	fffeffff 	.word	0xfffeffff
 8003b4c:	fffbffff 	.word	0xfffbffff
 8003b50:	ffff7fff 	.word	0xffff7fff
 8003b54:	ffffefff 	.word	0xffffefff
 8003b58:	ffffdfff 	.word	0xffffdfff
 8003b5c:	ffefffff 	.word	0xffefffff
 8003b60:	ff9fffff 	.word	0xff9fffff
 8003b64:	fff7ffff 	.word	0xfff7ffff

08003b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b092      	sub	sp, #72	; 0x48
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2284      	movs	r2, #132	; 0x84
 8003b74:	2100      	movs	r1, #0
 8003b76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b78:	f7fe fa90 	bl	800209c <HAL_GetTick>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2208      	movs	r2, #8
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d12c      	bne.n	8003be8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	0391      	lsls	r1, r2, #14
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4a46      	ldr	r2, [pc, #280]	; (8003cb0 <UART_CheckIdleState+0x148>)
 8003b98:	9200      	str	r2, [sp, #0]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f000 f88c 	bl	8003cb8 <UART_WaitOnFlagUntilTimeout>
 8003ba0:	1e03      	subs	r3, r0, #0
 8003ba2:	d021      	beq.n	8003be8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bae:	2301      	movs	r3, #1
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	f383 8810 	msr	PRIMASK, r3
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	438a      	bics	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	f383 8810 	msr	PRIMASK, r3
}
 8003bd4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2278      	movs	r2, #120	; 0x78
 8003be0:	2100      	movs	r1, #0
 8003be2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e05f      	b.n	8003ca8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d146      	bne.n	8003c84 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf8:	2280      	movs	r2, #128	; 0x80
 8003bfa:	03d1      	lsls	r1, r2, #15
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <UART_CheckIdleState+0x148>)
 8003c00:	9200      	str	r2, [sp, #0]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f000 f858 	bl	8003cb8 <UART_WaitOnFlagUntilTimeout>
 8003c08:	1e03      	subs	r3, r0, #0
 8003c0a:	d03b      	beq.n	8003c84 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c10:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c12:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
 8003c16:	2301      	movs	r3, #1
 8003c18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f383 8810 	msr	PRIMASK, r3
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4921      	ldr	r1, [pc, #132]	; (8003cb4 <UART_CheckIdleState+0x14c>)
 8003c2e:	400a      	ands	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f383 8810 	msr	PRIMASK, r3
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c42:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c44:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	633b      	str	r3, [r7, #48]	; 0x30
 8003c48:	2301      	movs	r3, #1
 8003c4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	438a      	bics	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2280      	movs	r2, #128	; 0x80
 8003c74:	2120      	movs	r1, #32
 8003c76:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2278      	movs	r2, #120	; 0x78
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e011      	b.n	8003ca8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	2120      	movs	r1, #32
 8003c90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2278      	movs	r2, #120	; 0x78
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b010      	add	sp, #64	; 0x40
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	01ffffff 	.word	0x01ffffff
 8003cb4:	fffffedf 	.word	0xfffffedf

08003cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	1dfb      	adds	r3, r7, #7
 8003cc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc8:	e04b      	b.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	d048      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd0:	f7fe f9e4 	bl	800209c <HAL_GetTick>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e04b      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d035      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d111      	bne.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2208      	movs	r2, #8
 8003d0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f000 f83c 	bl	8003d8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2284      	movs	r2, #132	; 0x84
 8003d18:	2108      	movs	r1, #8
 8003d1a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2278      	movs	r2, #120	; 0x78
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e02c      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	2380      	movs	r3, #128	; 0x80
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	401a      	ands	r2, r3
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d112      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	0112      	lsls	r2, r2, #4
 8003d44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f000 f81f 	bl	8003d8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2284      	movs	r2, #132	; 0x84
 8003d52:	2120      	movs	r1, #32
 8003d54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2278      	movs	r2, #120	; 0x78
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e00f      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	425a      	negs	r2, r3
 8003d72:	4153      	adcs	r3, r2
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	001a      	movs	r2, r3
 8003d78:	1dfb      	adds	r3, r7, #7
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d0a4      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	0018      	movs	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b004      	add	sp, #16
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08e      	sub	sp, #56	; 0x38
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d94:	f3ef 8310 	mrs	r3, PRIMASK
 8003d98:	617b      	str	r3, [r7, #20]
  return(result);
 8003d9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f383 8810 	msr	PRIMASK, r3
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4926      	ldr	r1, [pc, #152]	; (8003e50 <UART_EndRxTransfer+0xc4>)
 8003db6:	400a      	ands	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f383 8810 	msr	PRIMASK, r3
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dca:	623b      	str	r3, [r7, #32]
  return(result);
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dce:	633b      	str	r3, [r7, #48]	; 0x30
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	f383 8810 	msr	PRIMASK, r3
}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2101      	movs	r1, #1
 8003de8:	438a      	bics	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	f383 8810 	msr	PRIMASK, r3
}
 8003df6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d118      	bne.n	8003e32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e00:	f3ef 8310 	mrs	r3, PRIMASK
 8003e04:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f383 8810 	msr	PRIMASK, r3
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2110      	movs	r1, #16
 8003e22:	438a      	bics	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f383 8810 	msr	PRIMASK, r3
}
 8003e30:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2280      	movs	r2, #128	; 0x80
 8003e36:	2120      	movs	r1, #32
 8003e38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b00e      	add	sp, #56	; 0x38
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	fffffedf 	.word	0xfffffedf

08003e54 <memset>:
 8003e54:	0003      	movs	r3, r0
 8003e56:	1882      	adds	r2, r0, r2
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d100      	bne.n	8003e5e <memset+0xa>
 8003e5c:	4770      	bx	lr
 8003e5e:	7019      	strb	r1, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	e7f9      	b.n	8003e58 <memset+0x4>

08003e64 <__libc_init_array>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	2600      	movs	r6, #0
 8003e68:	4c0c      	ldr	r4, [pc, #48]	; (8003e9c <__libc_init_array+0x38>)
 8003e6a:	4d0d      	ldr	r5, [pc, #52]	; (8003ea0 <__libc_init_array+0x3c>)
 8003e6c:	1b64      	subs	r4, r4, r5
 8003e6e:	10a4      	asrs	r4, r4, #2
 8003e70:	42a6      	cmp	r6, r4
 8003e72:	d109      	bne.n	8003e88 <__libc_init_array+0x24>
 8003e74:	2600      	movs	r6, #0
 8003e76:	f000 f819 	bl	8003eac <_init>
 8003e7a:	4c0a      	ldr	r4, [pc, #40]	; (8003ea4 <__libc_init_array+0x40>)
 8003e7c:	4d0a      	ldr	r5, [pc, #40]	; (8003ea8 <__libc_init_array+0x44>)
 8003e7e:	1b64      	subs	r4, r4, r5
 8003e80:	10a4      	asrs	r4, r4, #2
 8003e82:	42a6      	cmp	r6, r4
 8003e84:	d105      	bne.n	8003e92 <__libc_init_array+0x2e>
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
 8003e88:	00b3      	lsls	r3, r6, #2
 8003e8a:	58eb      	ldr	r3, [r5, r3]
 8003e8c:	4798      	blx	r3
 8003e8e:	3601      	adds	r6, #1
 8003e90:	e7ee      	b.n	8003e70 <__libc_init_array+0xc>
 8003e92:	00b3      	lsls	r3, r6, #2
 8003e94:	58eb      	ldr	r3, [r5, r3]
 8003e96:	4798      	blx	r3
 8003e98:	3601      	adds	r6, #1
 8003e9a:	e7f2      	b.n	8003e82 <__libc_init_array+0x1e>
 8003e9c:	08003f3c 	.word	0x08003f3c
 8003ea0:	08003f3c 	.word	0x08003f3c
 8003ea4:	08003f40 	.word	0x08003f40
 8003ea8:	08003f3c 	.word	0x08003f3c

08003eac <_init>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr

08003eb8 <_fini>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ebe:	bc08      	pop	{r3}
 8003ec0:	469e      	mov	lr, r3
 8003ec2:	4770      	bx	lr
