
Remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004374  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a8  080044a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044a8  080044a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044a8  080044a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  080044bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080044bc  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e7e  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013d5  00000000  00000000  00027ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  000292d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000516  00000000  00000000  00029960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fc0f  00000000  00000000  00029e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d0b  00000000  00000000  00039a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000625eb  00000000  00000000  00042790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018a4  00000000  00000000  000a4d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000a6620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004418 	.word	0x08004418

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004418 	.word	0x08004418

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f001 fda3 	bl	8001d70 <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f001 fceb 	bl	8001c0c <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f001 f962 	bl	8001508 <__aeabi_dsub>
 8000244:	f001 fce2 	bl	8001c0c <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_ui2f>:
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	1e04      	subs	r4, r0, #0
 800025c:	d00e      	beq.n	800027c <__aeabi_ui2f+0x24>
 800025e:	f001 fd91 	bl	8001d84 <__clzsi2>
 8000262:	239e      	movs	r3, #158	; 0x9e
 8000264:	0001      	movs	r1, r0
 8000266:	1a1b      	subs	r3, r3, r0
 8000268:	2b96      	cmp	r3, #150	; 0x96
 800026a:	dc0c      	bgt.n	8000286 <__aeabi_ui2f+0x2e>
 800026c:	2808      	cmp	r0, #8
 800026e:	d02c      	beq.n	80002ca <__aeabi_ui2f+0x72>
 8000270:	3908      	subs	r1, #8
 8000272:	408c      	lsls	r4, r1
 8000274:	0264      	lsls	r4, r4, #9
 8000276:	0a64      	lsrs	r4, r4, #9
 8000278:	b2d8      	uxtb	r0, r3
 800027a:	e001      	b.n	8000280 <__aeabi_ui2f+0x28>
 800027c:	2000      	movs	r0, #0
 800027e:	2400      	movs	r4, #0
 8000280:	05c0      	lsls	r0, r0, #23
 8000282:	4320      	orrs	r0, r4
 8000284:	bd70      	pop	{r4, r5, r6, pc}
 8000286:	2b99      	cmp	r3, #153	; 0x99
 8000288:	dd0a      	ble.n	80002a0 <__aeabi_ui2f+0x48>
 800028a:	0002      	movs	r2, r0
 800028c:	0020      	movs	r0, r4
 800028e:	321b      	adds	r2, #27
 8000290:	4090      	lsls	r0, r2
 8000292:	0002      	movs	r2, r0
 8000294:	1e50      	subs	r0, r2, #1
 8000296:	4182      	sbcs	r2, r0
 8000298:	2005      	movs	r0, #5
 800029a:	1a40      	subs	r0, r0, r1
 800029c:	40c4      	lsrs	r4, r0
 800029e:	4314      	orrs	r4, r2
 80002a0:	2905      	cmp	r1, #5
 80002a2:	dc16      	bgt.n	80002d2 <__aeabi_ui2f+0x7a>
 80002a4:	0022      	movs	r2, r4
 80002a6:	480f      	ldr	r0, [pc, #60]	; (80002e4 <__aeabi_ui2f+0x8c>)
 80002a8:	4002      	ands	r2, r0
 80002aa:	0765      	lsls	r5, r4, #29
 80002ac:	d009      	beq.n	80002c2 <__aeabi_ui2f+0x6a>
 80002ae:	250f      	movs	r5, #15
 80002b0:	402c      	ands	r4, r5
 80002b2:	2c04      	cmp	r4, #4
 80002b4:	d005      	beq.n	80002c2 <__aeabi_ui2f+0x6a>
 80002b6:	3204      	adds	r2, #4
 80002b8:	0154      	lsls	r4, r2, #5
 80002ba:	d502      	bpl.n	80002c2 <__aeabi_ui2f+0x6a>
 80002bc:	239f      	movs	r3, #159	; 0x9f
 80002be:	4002      	ands	r2, r0
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	0192      	lsls	r2, r2, #6
 80002c4:	0a54      	lsrs	r4, r2, #9
 80002c6:	b2d8      	uxtb	r0, r3
 80002c8:	e7da      	b.n	8000280 <__aeabi_ui2f+0x28>
 80002ca:	0264      	lsls	r4, r4, #9
 80002cc:	2096      	movs	r0, #150	; 0x96
 80002ce:	0a64      	lsrs	r4, r4, #9
 80002d0:	e7d6      	b.n	8000280 <__aeabi_ui2f+0x28>
 80002d2:	1f4a      	subs	r2, r1, #5
 80002d4:	4094      	lsls	r4, r2
 80002d6:	0022      	movs	r2, r4
 80002d8:	4802      	ldr	r0, [pc, #8]	; (80002e4 <__aeabi_ui2f+0x8c>)
 80002da:	4002      	ands	r2, r0
 80002dc:	0765      	lsls	r5, r4, #29
 80002de:	d0f0      	beq.n	80002c2 <__aeabi_ui2f+0x6a>
 80002e0:	e7e5      	b.n	80002ae <__aeabi_ui2f+0x56>
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	fbffffff 	.word	0xfbffffff

080002e8 <__aeabi_dadd>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	464f      	mov	r7, r9
 80002ec:	4646      	mov	r6, r8
 80002ee:	46d6      	mov	lr, sl
 80002f0:	0004      	movs	r4, r0
 80002f2:	b5c0      	push	{r6, r7, lr}
 80002f4:	001f      	movs	r7, r3
 80002f6:	030b      	lsls	r3, r1, #12
 80002f8:	0010      	movs	r0, r2
 80002fa:	004e      	lsls	r6, r1, #1
 80002fc:	0a5b      	lsrs	r3, r3, #9
 80002fe:	0fcd      	lsrs	r5, r1, #31
 8000300:	0f61      	lsrs	r1, r4, #29
 8000302:	007a      	lsls	r2, r7, #1
 8000304:	4319      	orrs	r1, r3
 8000306:	00e3      	lsls	r3, r4, #3
 8000308:	033c      	lsls	r4, r7, #12
 800030a:	0fff      	lsrs	r7, r7, #31
 800030c:	46bc      	mov	ip, r7
 800030e:	0a64      	lsrs	r4, r4, #9
 8000310:	0f47      	lsrs	r7, r0, #29
 8000312:	4327      	orrs	r7, r4
 8000314:	0d76      	lsrs	r6, r6, #21
 8000316:	0d52      	lsrs	r2, r2, #21
 8000318:	00c0      	lsls	r0, r0, #3
 800031a:	46b9      	mov	r9, r7
 800031c:	4680      	mov	r8, r0
 800031e:	1ab7      	subs	r7, r6, r2
 8000320:	4565      	cmp	r5, ip
 8000322:	d100      	bne.n	8000326 <__aeabi_dadd+0x3e>
 8000324:	e09b      	b.n	800045e <__aeabi_dadd+0x176>
 8000326:	2f00      	cmp	r7, #0
 8000328:	dc00      	bgt.n	800032c <__aeabi_dadd+0x44>
 800032a:	e084      	b.n	8000436 <__aeabi_dadd+0x14e>
 800032c:	2a00      	cmp	r2, #0
 800032e:	d100      	bne.n	8000332 <__aeabi_dadd+0x4a>
 8000330:	e0be      	b.n	80004b0 <__aeabi_dadd+0x1c8>
 8000332:	4ac8      	ldr	r2, [pc, #800]	; (8000654 <__aeabi_dadd+0x36c>)
 8000334:	4296      	cmp	r6, r2
 8000336:	d100      	bne.n	800033a <__aeabi_dadd+0x52>
 8000338:	e124      	b.n	8000584 <__aeabi_dadd+0x29c>
 800033a:	2280      	movs	r2, #128	; 0x80
 800033c:	464c      	mov	r4, r9
 800033e:	0412      	lsls	r2, r2, #16
 8000340:	4314      	orrs	r4, r2
 8000342:	46a1      	mov	r9, r4
 8000344:	2f38      	cmp	r7, #56	; 0x38
 8000346:	dd00      	ble.n	800034a <__aeabi_dadd+0x62>
 8000348:	e167      	b.n	800061a <__aeabi_dadd+0x332>
 800034a:	2f1f      	cmp	r7, #31
 800034c:	dd00      	ble.n	8000350 <__aeabi_dadd+0x68>
 800034e:	e1d6      	b.n	80006fe <__aeabi_dadd+0x416>
 8000350:	2220      	movs	r2, #32
 8000352:	464c      	mov	r4, r9
 8000354:	1bd2      	subs	r2, r2, r7
 8000356:	4094      	lsls	r4, r2
 8000358:	46a2      	mov	sl, r4
 800035a:	4644      	mov	r4, r8
 800035c:	40fc      	lsrs	r4, r7
 800035e:	0020      	movs	r0, r4
 8000360:	4654      	mov	r4, sl
 8000362:	4304      	orrs	r4, r0
 8000364:	4640      	mov	r0, r8
 8000366:	4090      	lsls	r0, r2
 8000368:	1e42      	subs	r2, r0, #1
 800036a:	4190      	sbcs	r0, r2
 800036c:	464a      	mov	r2, r9
 800036e:	40fa      	lsrs	r2, r7
 8000370:	4304      	orrs	r4, r0
 8000372:	1a89      	subs	r1, r1, r2
 8000374:	1b1c      	subs	r4, r3, r4
 8000376:	42a3      	cmp	r3, r4
 8000378:	4192      	sbcs	r2, r2
 800037a:	4252      	negs	r2, r2
 800037c:	1a8b      	subs	r3, r1, r2
 800037e:	469a      	mov	sl, r3
 8000380:	4653      	mov	r3, sl
 8000382:	021b      	lsls	r3, r3, #8
 8000384:	d400      	bmi.n	8000388 <__aeabi_dadd+0xa0>
 8000386:	e0d4      	b.n	8000532 <__aeabi_dadd+0x24a>
 8000388:	4653      	mov	r3, sl
 800038a:	025a      	lsls	r2, r3, #9
 800038c:	0a53      	lsrs	r3, r2, #9
 800038e:	469a      	mov	sl, r3
 8000390:	4653      	mov	r3, sl
 8000392:	2b00      	cmp	r3, #0
 8000394:	d100      	bne.n	8000398 <__aeabi_dadd+0xb0>
 8000396:	e104      	b.n	80005a2 <__aeabi_dadd+0x2ba>
 8000398:	4650      	mov	r0, sl
 800039a:	f001 fcf3 	bl	8001d84 <__clzsi2>
 800039e:	0003      	movs	r3, r0
 80003a0:	3b08      	subs	r3, #8
 80003a2:	2220      	movs	r2, #32
 80003a4:	0020      	movs	r0, r4
 80003a6:	1ad2      	subs	r2, r2, r3
 80003a8:	4651      	mov	r1, sl
 80003aa:	40d0      	lsrs	r0, r2
 80003ac:	4099      	lsls	r1, r3
 80003ae:	0002      	movs	r2, r0
 80003b0:	409c      	lsls	r4, r3
 80003b2:	430a      	orrs	r2, r1
 80003b4:	42b3      	cmp	r3, r6
 80003b6:	da00      	bge.n	80003ba <__aeabi_dadd+0xd2>
 80003b8:	e102      	b.n	80005c0 <__aeabi_dadd+0x2d8>
 80003ba:	1b9b      	subs	r3, r3, r6
 80003bc:	1c59      	adds	r1, r3, #1
 80003be:	291f      	cmp	r1, #31
 80003c0:	dd00      	ble.n	80003c4 <__aeabi_dadd+0xdc>
 80003c2:	e0a7      	b.n	8000514 <__aeabi_dadd+0x22c>
 80003c4:	2320      	movs	r3, #32
 80003c6:	0010      	movs	r0, r2
 80003c8:	0026      	movs	r6, r4
 80003ca:	1a5b      	subs	r3, r3, r1
 80003cc:	409c      	lsls	r4, r3
 80003ce:	4098      	lsls	r0, r3
 80003d0:	40ce      	lsrs	r6, r1
 80003d2:	40ca      	lsrs	r2, r1
 80003d4:	1e63      	subs	r3, r4, #1
 80003d6:	419c      	sbcs	r4, r3
 80003d8:	4330      	orrs	r0, r6
 80003da:	4692      	mov	sl, r2
 80003dc:	2600      	movs	r6, #0
 80003de:	4304      	orrs	r4, r0
 80003e0:	0763      	lsls	r3, r4, #29
 80003e2:	d009      	beq.n	80003f8 <__aeabi_dadd+0x110>
 80003e4:	230f      	movs	r3, #15
 80003e6:	4023      	ands	r3, r4
 80003e8:	2b04      	cmp	r3, #4
 80003ea:	d005      	beq.n	80003f8 <__aeabi_dadd+0x110>
 80003ec:	1d23      	adds	r3, r4, #4
 80003ee:	42a3      	cmp	r3, r4
 80003f0:	41a4      	sbcs	r4, r4
 80003f2:	4264      	negs	r4, r4
 80003f4:	44a2      	add	sl, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	4653      	mov	r3, sl
 80003fa:	021b      	lsls	r3, r3, #8
 80003fc:	d400      	bmi.n	8000400 <__aeabi_dadd+0x118>
 80003fe:	e09b      	b.n	8000538 <__aeabi_dadd+0x250>
 8000400:	4b94      	ldr	r3, [pc, #592]	; (8000654 <__aeabi_dadd+0x36c>)
 8000402:	3601      	adds	r6, #1
 8000404:	429e      	cmp	r6, r3
 8000406:	d100      	bne.n	800040a <__aeabi_dadd+0x122>
 8000408:	e0b8      	b.n	800057c <__aeabi_dadd+0x294>
 800040a:	4653      	mov	r3, sl
 800040c:	4992      	ldr	r1, [pc, #584]	; (8000658 <__aeabi_dadd+0x370>)
 800040e:	08e4      	lsrs	r4, r4, #3
 8000410:	400b      	ands	r3, r1
 8000412:	0019      	movs	r1, r3
 8000414:	075b      	lsls	r3, r3, #29
 8000416:	4323      	orrs	r3, r4
 8000418:	0572      	lsls	r2, r6, #21
 800041a:	024c      	lsls	r4, r1, #9
 800041c:	0b24      	lsrs	r4, r4, #12
 800041e:	0d52      	lsrs	r2, r2, #21
 8000420:	0512      	lsls	r2, r2, #20
 8000422:	07ed      	lsls	r5, r5, #31
 8000424:	4322      	orrs	r2, r4
 8000426:	432a      	orrs	r2, r5
 8000428:	0018      	movs	r0, r3
 800042a:	0011      	movs	r1, r2
 800042c:	bce0      	pop	{r5, r6, r7}
 800042e:	46ba      	mov	sl, r7
 8000430:	46b1      	mov	r9, r6
 8000432:	46a8      	mov	r8, r5
 8000434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000436:	2f00      	cmp	r7, #0
 8000438:	d048      	beq.n	80004cc <__aeabi_dadd+0x1e4>
 800043a:	1b97      	subs	r7, r2, r6
 800043c:	2e00      	cmp	r6, #0
 800043e:	d000      	beq.n	8000442 <__aeabi_dadd+0x15a>
 8000440:	e10e      	b.n	8000660 <__aeabi_dadd+0x378>
 8000442:	000c      	movs	r4, r1
 8000444:	431c      	orrs	r4, r3
 8000446:	d100      	bne.n	800044a <__aeabi_dadd+0x162>
 8000448:	e1b7      	b.n	80007ba <__aeabi_dadd+0x4d2>
 800044a:	1e7c      	subs	r4, r7, #1
 800044c:	2f01      	cmp	r7, #1
 800044e:	d100      	bne.n	8000452 <__aeabi_dadd+0x16a>
 8000450:	e226      	b.n	80008a0 <__aeabi_dadd+0x5b8>
 8000452:	4d80      	ldr	r5, [pc, #512]	; (8000654 <__aeabi_dadd+0x36c>)
 8000454:	42af      	cmp	r7, r5
 8000456:	d100      	bne.n	800045a <__aeabi_dadd+0x172>
 8000458:	e1d5      	b.n	8000806 <__aeabi_dadd+0x51e>
 800045a:	0027      	movs	r7, r4
 800045c:	e107      	b.n	800066e <__aeabi_dadd+0x386>
 800045e:	2f00      	cmp	r7, #0
 8000460:	dc00      	bgt.n	8000464 <__aeabi_dadd+0x17c>
 8000462:	e0b2      	b.n	80005ca <__aeabi_dadd+0x2e2>
 8000464:	2a00      	cmp	r2, #0
 8000466:	d047      	beq.n	80004f8 <__aeabi_dadd+0x210>
 8000468:	4a7a      	ldr	r2, [pc, #488]	; (8000654 <__aeabi_dadd+0x36c>)
 800046a:	4296      	cmp	r6, r2
 800046c:	d100      	bne.n	8000470 <__aeabi_dadd+0x188>
 800046e:	e089      	b.n	8000584 <__aeabi_dadd+0x29c>
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	464c      	mov	r4, r9
 8000474:	0412      	lsls	r2, r2, #16
 8000476:	4314      	orrs	r4, r2
 8000478:	46a1      	mov	r9, r4
 800047a:	2f38      	cmp	r7, #56	; 0x38
 800047c:	dc6b      	bgt.n	8000556 <__aeabi_dadd+0x26e>
 800047e:	2f1f      	cmp	r7, #31
 8000480:	dc00      	bgt.n	8000484 <__aeabi_dadd+0x19c>
 8000482:	e16e      	b.n	8000762 <__aeabi_dadd+0x47a>
 8000484:	003a      	movs	r2, r7
 8000486:	4648      	mov	r0, r9
 8000488:	3a20      	subs	r2, #32
 800048a:	40d0      	lsrs	r0, r2
 800048c:	4684      	mov	ip, r0
 800048e:	2f20      	cmp	r7, #32
 8000490:	d007      	beq.n	80004a2 <__aeabi_dadd+0x1ba>
 8000492:	2240      	movs	r2, #64	; 0x40
 8000494:	4648      	mov	r0, r9
 8000496:	1bd2      	subs	r2, r2, r7
 8000498:	4090      	lsls	r0, r2
 800049a:	0002      	movs	r2, r0
 800049c:	4640      	mov	r0, r8
 800049e:	4310      	orrs	r0, r2
 80004a0:	4680      	mov	r8, r0
 80004a2:	4640      	mov	r0, r8
 80004a4:	1e42      	subs	r2, r0, #1
 80004a6:	4190      	sbcs	r0, r2
 80004a8:	4662      	mov	r2, ip
 80004aa:	0004      	movs	r4, r0
 80004ac:	4314      	orrs	r4, r2
 80004ae:	e057      	b.n	8000560 <__aeabi_dadd+0x278>
 80004b0:	464a      	mov	r2, r9
 80004b2:	4302      	orrs	r2, r0
 80004b4:	d100      	bne.n	80004b8 <__aeabi_dadd+0x1d0>
 80004b6:	e103      	b.n	80006c0 <__aeabi_dadd+0x3d8>
 80004b8:	1e7a      	subs	r2, r7, #1
 80004ba:	2f01      	cmp	r7, #1
 80004bc:	d100      	bne.n	80004c0 <__aeabi_dadd+0x1d8>
 80004be:	e193      	b.n	80007e8 <__aeabi_dadd+0x500>
 80004c0:	4c64      	ldr	r4, [pc, #400]	; (8000654 <__aeabi_dadd+0x36c>)
 80004c2:	42a7      	cmp	r7, r4
 80004c4:	d100      	bne.n	80004c8 <__aeabi_dadd+0x1e0>
 80004c6:	e18a      	b.n	80007de <__aeabi_dadd+0x4f6>
 80004c8:	0017      	movs	r7, r2
 80004ca:	e73b      	b.n	8000344 <__aeabi_dadd+0x5c>
 80004cc:	4c63      	ldr	r4, [pc, #396]	; (800065c <__aeabi_dadd+0x374>)
 80004ce:	1c72      	adds	r2, r6, #1
 80004d0:	4222      	tst	r2, r4
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x1ee>
 80004d4:	e0e0      	b.n	8000698 <__aeabi_dadd+0x3b0>
 80004d6:	000a      	movs	r2, r1
 80004d8:	431a      	orrs	r2, r3
 80004da:	2e00      	cmp	r6, #0
 80004dc:	d000      	beq.n	80004e0 <__aeabi_dadd+0x1f8>
 80004de:	e174      	b.n	80007ca <__aeabi_dadd+0x4e2>
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x1fe>
 80004e4:	e1d0      	b.n	8000888 <__aeabi_dadd+0x5a0>
 80004e6:	464a      	mov	r2, r9
 80004e8:	4302      	orrs	r2, r0
 80004ea:	d000      	beq.n	80004ee <__aeabi_dadd+0x206>
 80004ec:	e1e3      	b.n	80008b6 <__aeabi_dadd+0x5ce>
 80004ee:	074a      	lsls	r2, r1, #29
 80004f0:	08db      	lsrs	r3, r3, #3
 80004f2:	4313      	orrs	r3, r2
 80004f4:	08c9      	lsrs	r1, r1, #3
 80004f6:	e029      	b.n	800054c <__aeabi_dadd+0x264>
 80004f8:	464a      	mov	r2, r9
 80004fa:	4302      	orrs	r2, r0
 80004fc:	d100      	bne.n	8000500 <__aeabi_dadd+0x218>
 80004fe:	e17d      	b.n	80007fc <__aeabi_dadd+0x514>
 8000500:	1e7a      	subs	r2, r7, #1
 8000502:	2f01      	cmp	r7, #1
 8000504:	d100      	bne.n	8000508 <__aeabi_dadd+0x220>
 8000506:	e0e0      	b.n	80006ca <__aeabi_dadd+0x3e2>
 8000508:	4c52      	ldr	r4, [pc, #328]	; (8000654 <__aeabi_dadd+0x36c>)
 800050a:	42a7      	cmp	r7, r4
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x228>
 800050e:	e166      	b.n	80007de <__aeabi_dadd+0x4f6>
 8000510:	0017      	movs	r7, r2
 8000512:	e7b2      	b.n	800047a <__aeabi_dadd+0x192>
 8000514:	0010      	movs	r0, r2
 8000516:	3b1f      	subs	r3, #31
 8000518:	40d8      	lsrs	r0, r3
 800051a:	2920      	cmp	r1, #32
 800051c:	d003      	beq.n	8000526 <__aeabi_dadd+0x23e>
 800051e:	2340      	movs	r3, #64	; 0x40
 8000520:	1a5b      	subs	r3, r3, r1
 8000522:	409a      	lsls	r2, r3
 8000524:	4314      	orrs	r4, r2
 8000526:	1e63      	subs	r3, r4, #1
 8000528:	419c      	sbcs	r4, r3
 800052a:	2300      	movs	r3, #0
 800052c:	2600      	movs	r6, #0
 800052e:	469a      	mov	sl, r3
 8000530:	4304      	orrs	r4, r0
 8000532:	0763      	lsls	r3, r4, #29
 8000534:	d000      	beq.n	8000538 <__aeabi_dadd+0x250>
 8000536:	e755      	b.n	80003e4 <__aeabi_dadd+0xfc>
 8000538:	4652      	mov	r2, sl
 800053a:	08e3      	lsrs	r3, r4, #3
 800053c:	0752      	lsls	r2, r2, #29
 800053e:	4313      	orrs	r3, r2
 8000540:	4652      	mov	r2, sl
 8000542:	0037      	movs	r7, r6
 8000544:	08d1      	lsrs	r1, r2, #3
 8000546:	4a43      	ldr	r2, [pc, #268]	; (8000654 <__aeabi_dadd+0x36c>)
 8000548:	4297      	cmp	r7, r2
 800054a:	d01f      	beq.n	800058c <__aeabi_dadd+0x2a4>
 800054c:	0309      	lsls	r1, r1, #12
 800054e:	057a      	lsls	r2, r7, #21
 8000550:	0b0c      	lsrs	r4, r1, #12
 8000552:	0d52      	lsrs	r2, r2, #21
 8000554:	e764      	b.n	8000420 <__aeabi_dadd+0x138>
 8000556:	4642      	mov	r2, r8
 8000558:	464c      	mov	r4, r9
 800055a:	4314      	orrs	r4, r2
 800055c:	1e62      	subs	r2, r4, #1
 800055e:	4194      	sbcs	r4, r2
 8000560:	18e4      	adds	r4, r4, r3
 8000562:	429c      	cmp	r4, r3
 8000564:	4192      	sbcs	r2, r2
 8000566:	4252      	negs	r2, r2
 8000568:	4692      	mov	sl, r2
 800056a:	448a      	add	sl, r1
 800056c:	4653      	mov	r3, sl
 800056e:	021b      	lsls	r3, r3, #8
 8000570:	d5df      	bpl.n	8000532 <__aeabi_dadd+0x24a>
 8000572:	4b38      	ldr	r3, [pc, #224]	; (8000654 <__aeabi_dadd+0x36c>)
 8000574:	3601      	adds	r6, #1
 8000576:	429e      	cmp	r6, r3
 8000578:	d000      	beq.n	800057c <__aeabi_dadd+0x294>
 800057a:	e0b3      	b.n	80006e4 <__aeabi_dadd+0x3fc>
 800057c:	0032      	movs	r2, r6
 800057e:	2400      	movs	r4, #0
 8000580:	2300      	movs	r3, #0
 8000582:	e74d      	b.n	8000420 <__aeabi_dadd+0x138>
 8000584:	074a      	lsls	r2, r1, #29
 8000586:	08db      	lsrs	r3, r3, #3
 8000588:	4313      	orrs	r3, r2
 800058a:	08c9      	lsrs	r1, r1, #3
 800058c:	001a      	movs	r2, r3
 800058e:	430a      	orrs	r2, r1
 8000590:	d100      	bne.n	8000594 <__aeabi_dadd+0x2ac>
 8000592:	e200      	b.n	8000996 <__aeabi_dadd+0x6ae>
 8000594:	2480      	movs	r4, #128	; 0x80
 8000596:	0324      	lsls	r4, r4, #12
 8000598:	430c      	orrs	r4, r1
 800059a:	0324      	lsls	r4, r4, #12
 800059c:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <__aeabi_dadd+0x36c>)
 800059e:	0b24      	lsrs	r4, r4, #12
 80005a0:	e73e      	b.n	8000420 <__aeabi_dadd+0x138>
 80005a2:	0020      	movs	r0, r4
 80005a4:	f001 fbee 	bl	8001d84 <__clzsi2>
 80005a8:	0003      	movs	r3, r0
 80005aa:	3318      	adds	r3, #24
 80005ac:	2b1f      	cmp	r3, #31
 80005ae:	dc00      	bgt.n	80005b2 <__aeabi_dadd+0x2ca>
 80005b0:	e6f7      	b.n	80003a2 <__aeabi_dadd+0xba>
 80005b2:	0022      	movs	r2, r4
 80005b4:	3808      	subs	r0, #8
 80005b6:	4082      	lsls	r2, r0
 80005b8:	2400      	movs	r4, #0
 80005ba:	42b3      	cmp	r3, r6
 80005bc:	db00      	blt.n	80005c0 <__aeabi_dadd+0x2d8>
 80005be:	e6fc      	b.n	80003ba <__aeabi_dadd+0xd2>
 80005c0:	1af6      	subs	r6, r6, r3
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <__aeabi_dadd+0x370>)
 80005c4:	401a      	ands	r2, r3
 80005c6:	4692      	mov	sl, r2
 80005c8:	e70a      	b.n	80003e0 <__aeabi_dadd+0xf8>
 80005ca:	2f00      	cmp	r7, #0
 80005cc:	d02b      	beq.n	8000626 <__aeabi_dadd+0x33e>
 80005ce:	1b97      	subs	r7, r2, r6
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x2ee>
 80005d4:	e0b8      	b.n	8000748 <__aeabi_dadd+0x460>
 80005d6:	4c1f      	ldr	r4, [pc, #124]	; (8000654 <__aeabi_dadd+0x36c>)
 80005d8:	42a2      	cmp	r2, r4
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x2f6>
 80005dc:	e11c      	b.n	8000818 <__aeabi_dadd+0x530>
 80005de:	2480      	movs	r4, #128	; 0x80
 80005e0:	0424      	lsls	r4, r4, #16
 80005e2:	4321      	orrs	r1, r4
 80005e4:	2f38      	cmp	r7, #56	; 0x38
 80005e6:	dd00      	ble.n	80005ea <__aeabi_dadd+0x302>
 80005e8:	e11e      	b.n	8000828 <__aeabi_dadd+0x540>
 80005ea:	2f1f      	cmp	r7, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0x308>
 80005ee:	e19e      	b.n	800092e <__aeabi_dadd+0x646>
 80005f0:	2620      	movs	r6, #32
 80005f2:	000c      	movs	r4, r1
 80005f4:	1bf6      	subs	r6, r6, r7
 80005f6:	0018      	movs	r0, r3
 80005f8:	40b3      	lsls	r3, r6
 80005fa:	40b4      	lsls	r4, r6
 80005fc:	40f8      	lsrs	r0, r7
 80005fe:	1e5e      	subs	r6, r3, #1
 8000600:	41b3      	sbcs	r3, r6
 8000602:	40f9      	lsrs	r1, r7
 8000604:	4304      	orrs	r4, r0
 8000606:	431c      	orrs	r4, r3
 8000608:	4489      	add	r9, r1
 800060a:	4444      	add	r4, r8
 800060c:	4544      	cmp	r4, r8
 800060e:	419b      	sbcs	r3, r3
 8000610:	425b      	negs	r3, r3
 8000612:	444b      	add	r3, r9
 8000614:	469a      	mov	sl, r3
 8000616:	0016      	movs	r6, r2
 8000618:	e7a8      	b.n	800056c <__aeabi_dadd+0x284>
 800061a:	4642      	mov	r2, r8
 800061c:	464c      	mov	r4, r9
 800061e:	4314      	orrs	r4, r2
 8000620:	1e62      	subs	r2, r4, #1
 8000622:	4194      	sbcs	r4, r2
 8000624:	e6a6      	b.n	8000374 <__aeabi_dadd+0x8c>
 8000626:	4c0d      	ldr	r4, [pc, #52]	; (800065c <__aeabi_dadd+0x374>)
 8000628:	1c72      	adds	r2, r6, #1
 800062a:	4222      	tst	r2, r4
 800062c:	d000      	beq.n	8000630 <__aeabi_dadd+0x348>
 800062e:	e0a8      	b.n	8000782 <__aeabi_dadd+0x49a>
 8000630:	000a      	movs	r2, r1
 8000632:	431a      	orrs	r2, r3
 8000634:	2e00      	cmp	r6, #0
 8000636:	d000      	beq.n	800063a <__aeabi_dadd+0x352>
 8000638:	e10a      	b.n	8000850 <__aeabi_dadd+0x568>
 800063a:	2a00      	cmp	r2, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x358>
 800063e:	e15e      	b.n	80008fe <__aeabi_dadd+0x616>
 8000640:	464a      	mov	r2, r9
 8000642:	4302      	orrs	r2, r0
 8000644:	d000      	beq.n	8000648 <__aeabi_dadd+0x360>
 8000646:	e161      	b.n	800090c <__aeabi_dadd+0x624>
 8000648:	074a      	lsls	r2, r1, #29
 800064a:	08db      	lsrs	r3, r3, #3
 800064c:	4313      	orrs	r3, r2
 800064e:	08c9      	lsrs	r1, r1, #3
 8000650:	e77c      	b.n	800054c <__aeabi_dadd+0x264>
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	000007ff 	.word	0x000007ff
 8000658:	ff7fffff 	.word	0xff7fffff
 800065c:	000007fe 	.word	0x000007fe
 8000660:	4ccf      	ldr	r4, [pc, #828]	; (80009a0 <__aeabi_dadd+0x6b8>)
 8000662:	42a2      	cmp	r2, r4
 8000664:	d100      	bne.n	8000668 <__aeabi_dadd+0x380>
 8000666:	e0ce      	b.n	8000806 <__aeabi_dadd+0x51e>
 8000668:	2480      	movs	r4, #128	; 0x80
 800066a:	0424      	lsls	r4, r4, #16
 800066c:	4321      	orrs	r1, r4
 800066e:	2f38      	cmp	r7, #56	; 0x38
 8000670:	dc5b      	bgt.n	800072a <__aeabi_dadd+0x442>
 8000672:	2f1f      	cmp	r7, #31
 8000674:	dd00      	ble.n	8000678 <__aeabi_dadd+0x390>
 8000676:	e0dc      	b.n	8000832 <__aeabi_dadd+0x54a>
 8000678:	2520      	movs	r5, #32
 800067a:	000c      	movs	r4, r1
 800067c:	1bed      	subs	r5, r5, r7
 800067e:	001e      	movs	r6, r3
 8000680:	40ab      	lsls	r3, r5
 8000682:	40ac      	lsls	r4, r5
 8000684:	40fe      	lsrs	r6, r7
 8000686:	1e5d      	subs	r5, r3, #1
 8000688:	41ab      	sbcs	r3, r5
 800068a:	4334      	orrs	r4, r6
 800068c:	40f9      	lsrs	r1, r7
 800068e:	431c      	orrs	r4, r3
 8000690:	464b      	mov	r3, r9
 8000692:	1a5b      	subs	r3, r3, r1
 8000694:	4699      	mov	r9, r3
 8000696:	e04c      	b.n	8000732 <__aeabi_dadd+0x44a>
 8000698:	464a      	mov	r2, r9
 800069a:	1a1c      	subs	r4, r3, r0
 800069c:	1a88      	subs	r0, r1, r2
 800069e:	42a3      	cmp	r3, r4
 80006a0:	4192      	sbcs	r2, r2
 80006a2:	4252      	negs	r2, r2
 80006a4:	4692      	mov	sl, r2
 80006a6:	0002      	movs	r2, r0
 80006a8:	4650      	mov	r0, sl
 80006aa:	1a12      	subs	r2, r2, r0
 80006ac:	4692      	mov	sl, r2
 80006ae:	0212      	lsls	r2, r2, #8
 80006b0:	d478      	bmi.n	80007a4 <__aeabi_dadd+0x4bc>
 80006b2:	4653      	mov	r3, sl
 80006b4:	4323      	orrs	r3, r4
 80006b6:	d000      	beq.n	80006ba <__aeabi_dadd+0x3d2>
 80006b8:	e66a      	b.n	8000390 <__aeabi_dadd+0xa8>
 80006ba:	2100      	movs	r1, #0
 80006bc:	2500      	movs	r5, #0
 80006be:	e745      	b.n	800054c <__aeabi_dadd+0x264>
 80006c0:	074a      	lsls	r2, r1, #29
 80006c2:	08db      	lsrs	r3, r3, #3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	08c9      	lsrs	r1, r1, #3
 80006c8:	e73d      	b.n	8000546 <__aeabi_dadd+0x25e>
 80006ca:	181c      	adds	r4, r3, r0
 80006cc:	429c      	cmp	r4, r3
 80006ce:	419b      	sbcs	r3, r3
 80006d0:	4449      	add	r1, r9
 80006d2:	468a      	mov	sl, r1
 80006d4:	425b      	negs	r3, r3
 80006d6:	449a      	add	sl, r3
 80006d8:	4653      	mov	r3, sl
 80006da:	2601      	movs	r6, #1
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	d400      	bmi.n	80006e2 <__aeabi_dadd+0x3fa>
 80006e0:	e727      	b.n	8000532 <__aeabi_dadd+0x24a>
 80006e2:	2602      	movs	r6, #2
 80006e4:	4652      	mov	r2, sl
 80006e6:	4baf      	ldr	r3, [pc, #700]	; (80009a4 <__aeabi_dadd+0x6bc>)
 80006e8:	2101      	movs	r1, #1
 80006ea:	401a      	ands	r2, r3
 80006ec:	0013      	movs	r3, r2
 80006ee:	4021      	ands	r1, r4
 80006f0:	0862      	lsrs	r2, r4, #1
 80006f2:	430a      	orrs	r2, r1
 80006f4:	07dc      	lsls	r4, r3, #31
 80006f6:	085b      	lsrs	r3, r3, #1
 80006f8:	469a      	mov	sl, r3
 80006fa:	4314      	orrs	r4, r2
 80006fc:	e670      	b.n	80003e0 <__aeabi_dadd+0xf8>
 80006fe:	003a      	movs	r2, r7
 8000700:	464c      	mov	r4, r9
 8000702:	3a20      	subs	r2, #32
 8000704:	40d4      	lsrs	r4, r2
 8000706:	46a4      	mov	ip, r4
 8000708:	2f20      	cmp	r7, #32
 800070a:	d007      	beq.n	800071c <__aeabi_dadd+0x434>
 800070c:	2240      	movs	r2, #64	; 0x40
 800070e:	4648      	mov	r0, r9
 8000710:	1bd2      	subs	r2, r2, r7
 8000712:	4090      	lsls	r0, r2
 8000714:	0002      	movs	r2, r0
 8000716:	4640      	mov	r0, r8
 8000718:	4310      	orrs	r0, r2
 800071a:	4680      	mov	r8, r0
 800071c:	4640      	mov	r0, r8
 800071e:	1e42      	subs	r2, r0, #1
 8000720:	4190      	sbcs	r0, r2
 8000722:	4662      	mov	r2, ip
 8000724:	0004      	movs	r4, r0
 8000726:	4314      	orrs	r4, r2
 8000728:	e624      	b.n	8000374 <__aeabi_dadd+0x8c>
 800072a:	4319      	orrs	r1, r3
 800072c:	000c      	movs	r4, r1
 800072e:	1e63      	subs	r3, r4, #1
 8000730:	419c      	sbcs	r4, r3
 8000732:	4643      	mov	r3, r8
 8000734:	1b1c      	subs	r4, r3, r4
 8000736:	45a0      	cmp	r8, r4
 8000738:	419b      	sbcs	r3, r3
 800073a:	4649      	mov	r1, r9
 800073c:	425b      	negs	r3, r3
 800073e:	1acb      	subs	r3, r1, r3
 8000740:	469a      	mov	sl, r3
 8000742:	4665      	mov	r5, ip
 8000744:	0016      	movs	r6, r2
 8000746:	e61b      	b.n	8000380 <__aeabi_dadd+0x98>
 8000748:	000c      	movs	r4, r1
 800074a:	431c      	orrs	r4, r3
 800074c:	d100      	bne.n	8000750 <__aeabi_dadd+0x468>
 800074e:	e0c7      	b.n	80008e0 <__aeabi_dadd+0x5f8>
 8000750:	1e7c      	subs	r4, r7, #1
 8000752:	2f01      	cmp	r7, #1
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x470>
 8000756:	e0f9      	b.n	800094c <__aeabi_dadd+0x664>
 8000758:	4e91      	ldr	r6, [pc, #580]	; (80009a0 <__aeabi_dadd+0x6b8>)
 800075a:	42b7      	cmp	r7, r6
 800075c:	d05c      	beq.n	8000818 <__aeabi_dadd+0x530>
 800075e:	0027      	movs	r7, r4
 8000760:	e740      	b.n	80005e4 <__aeabi_dadd+0x2fc>
 8000762:	2220      	movs	r2, #32
 8000764:	464c      	mov	r4, r9
 8000766:	4640      	mov	r0, r8
 8000768:	1bd2      	subs	r2, r2, r7
 800076a:	4094      	lsls	r4, r2
 800076c:	40f8      	lsrs	r0, r7
 800076e:	4304      	orrs	r4, r0
 8000770:	4640      	mov	r0, r8
 8000772:	4090      	lsls	r0, r2
 8000774:	1e42      	subs	r2, r0, #1
 8000776:	4190      	sbcs	r0, r2
 8000778:	464a      	mov	r2, r9
 800077a:	40fa      	lsrs	r2, r7
 800077c:	4304      	orrs	r4, r0
 800077e:	1889      	adds	r1, r1, r2
 8000780:	e6ee      	b.n	8000560 <__aeabi_dadd+0x278>
 8000782:	4c87      	ldr	r4, [pc, #540]	; (80009a0 <__aeabi_dadd+0x6b8>)
 8000784:	42a2      	cmp	r2, r4
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x4a2>
 8000788:	e6f9      	b.n	800057e <__aeabi_dadd+0x296>
 800078a:	1818      	adds	r0, r3, r0
 800078c:	4298      	cmp	r0, r3
 800078e:	419b      	sbcs	r3, r3
 8000790:	4449      	add	r1, r9
 8000792:	425b      	negs	r3, r3
 8000794:	18cb      	adds	r3, r1, r3
 8000796:	07dc      	lsls	r4, r3, #31
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	085b      	lsrs	r3, r3, #1
 800079c:	469a      	mov	sl, r3
 800079e:	0016      	movs	r6, r2
 80007a0:	4304      	orrs	r4, r0
 80007a2:	e6c6      	b.n	8000532 <__aeabi_dadd+0x24a>
 80007a4:	4642      	mov	r2, r8
 80007a6:	1ad4      	subs	r4, r2, r3
 80007a8:	45a0      	cmp	r8, r4
 80007aa:	4180      	sbcs	r0, r0
 80007ac:	464b      	mov	r3, r9
 80007ae:	4240      	negs	r0, r0
 80007b0:	1a59      	subs	r1, r3, r1
 80007b2:	1a0b      	subs	r3, r1, r0
 80007b4:	469a      	mov	sl, r3
 80007b6:	4665      	mov	r5, ip
 80007b8:	e5ea      	b.n	8000390 <__aeabi_dadd+0xa8>
 80007ba:	464b      	mov	r3, r9
 80007bc:	464a      	mov	r2, r9
 80007be:	08c0      	lsrs	r0, r0, #3
 80007c0:	075b      	lsls	r3, r3, #29
 80007c2:	4665      	mov	r5, ip
 80007c4:	4303      	orrs	r3, r0
 80007c6:	08d1      	lsrs	r1, r2, #3
 80007c8:	e6bd      	b.n	8000546 <__aeabi_dadd+0x25e>
 80007ca:	2a00      	cmp	r2, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_dadd+0x4e8>
 80007ce:	e08e      	b.n	80008ee <__aeabi_dadd+0x606>
 80007d0:	464b      	mov	r3, r9
 80007d2:	4303      	orrs	r3, r0
 80007d4:	d117      	bne.n	8000806 <__aeabi_dadd+0x51e>
 80007d6:	2180      	movs	r1, #128	; 0x80
 80007d8:	2500      	movs	r5, #0
 80007da:	0309      	lsls	r1, r1, #12
 80007dc:	e6da      	b.n	8000594 <__aeabi_dadd+0x2ac>
 80007de:	074a      	lsls	r2, r1, #29
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	08c9      	lsrs	r1, r1, #3
 80007e6:	e6d1      	b.n	800058c <__aeabi_dadd+0x2a4>
 80007e8:	1a1c      	subs	r4, r3, r0
 80007ea:	464a      	mov	r2, r9
 80007ec:	42a3      	cmp	r3, r4
 80007ee:	419b      	sbcs	r3, r3
 80007f0:	1a89      	subs	r1, r1, r2
 80007f2:	425b      	negs	r3, r3
 80007f4:	1acb      	subs	r3, r1, r3
 80007f6:	469a      	mov	sl, r3
 80007f8:	2601      	movs	r6, #1
 80007fa:	e5c1      	b.n	8000380 <__aeabi_dadd+0x98>
 80007fc:	074a      	lsls	r2, r1, #29
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	4313      	orrs	r3, r2
 8000802:	08c9      	lsrs	r1, r1, #3
 8000804:	e69f      	b.n	8000546 <__aeabi_dadd+0x25e>
 8000806:	4643      	mov	r3, r8
 8000808:	08d8      	lsrs	r0, r3, #3
 800080a:	464b      	mov	r3, r9
 800080c:	464a      	mov	r2, r9
 800080e:	075b      	lsls	r3, r3, #29
 8000810:	4665      	mov	r5, ip
 8000812:	4303      	orrs	r3, r0
 8000814:	08d1      	lsrs	r1, r2, #3
 8000816:	e6b9      	b.n	800058c <__aeabi_dadd+0x2a4>
 8000818:	4643      	mov	r3, r8
 800081a:	08d8      	lsrs	r0, r3, #3
 800081c:	464b      	mov	r3, r9
 800081e:	464a      	mov	r2, r9
 8000820:	075b      	lsls	r3, r3, #29
 8000822:	4303      	orrs	r3, r0
 8000824:	08d1      	lsrs	r1, r2, #3
 8000826:	e6b1      	b.n	800058c <__aeabi_dadd+0x2a4>
 8000828:	4319      	orrs	r1, r3
 800082a:	000c      	movs	r4, r1
 800082c:	1e63      	subs	r3, r4, #1
 800082e:	419c      	sbcs	r4, r3
 8000830:	e6eb      	b.n	800060a <__aeabi_dadd+0x322>
 8000832:	003c      	movs	r4, r7
 8000834:	000d      	movs	r5, r1
 8000836:	3c20      	subs	r4, #32
 8000838:	40e5      	lsrs	r5, r4
 800083a:	2f20      	cmp	r7, #32
 800083c:	d003      	beq.n	8000846 <__aeabi_dadd+0x55e>
 800083e:	2440      	movs	r4, #64	; 0x40
 8000840:	1be4      	subs	r4, r4, r7
 8000842:	40a1      	lsls	r1, r4
 8000844:	430b      	orrs	r3, r1
 8000846:	001c      	movs	r4, r3
 8000848:	1e63      	subs	r3, r4, #1
 800084a:	419c      	sbcs	r4, r3
 800084c:	432c      	orrs	r4, r5
 800084e:	e770      	b.n	8000732 <__aeabi_dadd+0x44a>
 8000850:	2a00      	cmp	r2, #0
 8000852:	d0e1      	beq.n	8000818 <__aeabi_dadd+0x530>
 8000854:	464a      	mov	r2, r9
 8000856:	4302      	orrs	r2, r0
 8000858:	d0c1      	beq.n	80007de <__aeabi_dadd+0x4f6>
 800085a:	074a      	lsls	r2, r1, #29
 800085c:	08db      	lsrs	r3, r3, #3
 800085e:	4313      	orrs	r3, r2
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	08c9      	lsrs	r1, r1, #3
 8000864:	0312      	lsls	r2, r2, #12
 8000866:	4211      	tst	r1, r2
 8000868:	d008      	beq.n	800087c <__aeabi_dadd+0x594>
 800086a:	4648      	mov	r0, r9
 800086c:	08c4      	lsrs	r4, r0, #3
 800086e:	4214      	tst	r4, r2
 8000870:	d104      	bne.n	800087c <__aeabi_dadd+0x594>
 8000872:	4643      	mov	r3, r8
 8000874:	0021      	movs	r1, r4
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	0742      	lsls	r2, r0, #29
 800087a:	4313      	orrs	r3, r2
 800087c:	0f5a      	lsrs	r2, r3, #29
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	0752      	lsls	r2, r2, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	e681      	b.n	800058c <__aeabi_dadd+0x2a4>
 8000888:	464b      	mov	r3, r9
 800088a:	4303      	orrs	r3, r0
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x5a8>
 800088e:	e714      	b.n	80006ba <__aeabi_dadd+0x3d2>
 8000890:	464b      	mov	r3, r9
 8000892:	464a      	mov	r2, r9
 8000894:	08c0      	lsrs	r0, r0, #3
 8000896:	075b      	lsls	r3, r3, #29
 8000898:	4665      	mov	r5, ip
 800089a:	4303      	orrs	r3, r0
 800089c:	08d1      	lsrs	r1, r2, #3
 800089e:	e655      	b.n	800054c <__aeabi_dadd+0x264>
 80008a0:	1ac4      	subs	r4, r0, r3
 80008a2:	45a0      	cmp	r8, r4
 80008a4:	4180      	sbcs	r0, r0
 80008a6:	464b      	mov	r3, r9
 80008a8:	4240      	negs	r0, r0
 80008aa:	1a59      	subs	r1, r3, r1
 80008ac:	1a0b      	subs	r3, r1, r0
 80008ae:	469a      	mov	sl, r3
 80008b0:	4665      	mov	r5, ip
 80008b2:	2601      	movs	r6, #1
 80008b4:	e564      	b.n	8000380 <__aeabi_dadd+0x98>
 80008b6:	1a1c      	subs	r4, r3, r0
 80008b8:	464a      	mov	r2, r9
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	4180      	sbcs	r0, r0
 80008be:	1a8a      	subs	r2, r1, r2
 80008c0:	4240      	negs	r0, r0
 80008c2:	1a12      	subs	r2, r2, r0
 80008c4:	4692      	mov	sl, r2
 80008c6:	0212      	lsls	r2, r2, #8
 80008c8:	d549      	bpl.n	800095e <__aeabi_dadd+0x676>
 80008ca:	4642      	mov	r2, r8
 80008cc:	1ad4      	subs	r4, r2, r3
 80008ce:	45a0      	cmp	r8, r4
 80008d0:	4180      	sbcs	r0, r0
 80008d2:	464b      	mov	r3, r9
 80008d4:	4240      	negs	r0, r0
 80008d6:	1a59      	subs	r1, r3, r1
 80008d8:	1a0b      	subs	r3, r1, r0
 80008da:	469a      	mov	sl, r3
 80008dc:	4665      	mov	r5, ip
 80008de:	e57f      	b.n	80003e0 <__aeabi_dadd+0xf8>
 80008e0:	464b      	mov	r3, r9
 80008e2:	464a      	mov	r2, r9
 80008e4:	08c0      	lsrs	r0, r0, #3
 80008e6:	075b      	lsls	r3, r3, #29
 80008e8:	4303      	orrs	r3, r0
 80008ea:	08d1      	lsrs	r1, r2, #3
 80008ec:	e62b      	b.n	8000546 <__aeabi_dadd+0x25e>
 80008ee:	464a      	mov	r2, r9
 80008f0:	08db      	lsrs	r3, r3, #3
 80008f2:	4302      	orrs	r2, r0
 80008f4:	d138      	bne.n	8000968 <__aeabi_dadd+0x680>
 80008f6:	074a      	lsls	r2, r1, #29
 80008f8:	4313      	orrs	r3, r2
 80008fa:	08c9      	lsrs	r1, r1, #3
 80008fc:	e646      	b.n	800058c <__aeabi_dadd+0x2a4>
 80008fe:	464b      	mov	r3, r9
 8000900:	464a      	mov	r2, r9
 8000902:	08c0      	lsrs	r0, r0, #3
 8000904:	075b      	lsls	r3, r3, #29
 8000906:	4303      	orrs	r3, r0
 8000908:	08d1      	lsrs	r1, r2, #3
 800090a:	e61f      	b.n	800054c <__aeabi_dadd+0x264>
 800090c:	181c      	adds	r4, r3, r0
 800090e:	429c      	cmp	r4, r3
 8000910:	419b      	sbcs	r3, r3
 8000912:	4449      	add	r1, r9
 8000914:	468a      	mov	sl, r1
 8000916:	425b      	negs	r3, r3
 8000918:	449a      	add	sl, r3
 800091a:	4653      	mov	r3, sl
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	d400      	bmi.n	8000922 <__aeabi_dadd+0x63a>
 8000920:	e607      	b.n	8000532 <__aeabi_dadd+0x24a>
 8000922:	4652      	mov	r2, sl
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <__aeabi_dadd+0x6bc>)
 8000926:	2601      	movs	r6, #1
 8000928:	401a      	ands	r2, r3
 800092a:	4692      	mov	sl, r2
 800092c:	e601      	b.n	8000532 <__aeabi_dadd+0x24a>
 800092e:	003c      	movs	r4, r7
 8000930:	000e      	movs	r6, r1
 8000932:	3c20      	subs	r4, #32
 8000934:	40e6      	lsrs	r6, r4
 8000936:	2f20      	cmp	r7, #32
 8000938:	d003      	beq.n	8000942 <__aeabi_dadd+0x65a>
 800093a:	2440      	movs	r4, #64	; 0x40
 800093c:	1be4      	subs	r4, r4, r7
 800093e:	40a1      	lsls	r1, r4
 8000940:	430b      	orrs	r3, r1
 8000942:	001c      	movs	r4, r3
 8000944:	1e63      	subs	r3, r4, #1
 8000946:	419c      	sbcs	r4, r3
 8000948:	4334      	orrs	r4, r6
 800094a:	e65e      	b.n	800060a <__aeabi_dadd+0x322>
 800094c:	4443      	add	r3, r8
 800094e:	4283      	cmp	r3, r0
 8000950:	4180      	sbcs	r0, r0
 8000952:	4449      	add	r1, r9
 8000954:	468a      	mov	sl, r1
 8000956:	4240      	negs	r0, r0
 8000958:	001c      	movs	r4, r3
 800095a:	4482      	add	sl, r0
 800095c:	e6bc      	b.n	80006d8 <__aeabi_dadd+0x3f0>
 800095e:	4653      	mov	r3, sl
 8000960:	4323      	orrs	r3, r4
 8000962:	d100      	bne.n	8000966 <__aeabi_dadd+0x67e>
 8000964:	e6a9      	b.n	80006ba <__aeabi_dadd+0x3d2>
 8000966:	e5e4      	b.n	8000532 <__aeabi_dadd+0x24a>
 8000968:	074a      	lsls	r2, r1, #29
 800096a:	4313      	orrs	r3, r2
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	08c9      	lsrs	r1, r1, #3
 8000970:	0312      	lsls	r2, r2, #12
 8000972:	4211      	tst	r1, r2
 8000974:	d009      	beq.n	800098a <__aeabi_dadd+0x6a2>
 8000976:	4648      	mov	r0, r9
 8000978:	08c4      	lsrs	r4, r0, #3
 800097a:	4214      	tst	r4, r2
 800097c:	d105      	bne.n	800098a <__aeabi_dadd+0x6a2>
 800097e:	4643      	mov	r3, r8
 8000980:	4665      	mov	r5, ip
 8000982:	0021      	movs	r1, r4
 8000984:	08db      	lsrs	r3, r3, #3
 8000986:	0742      	lsls	r2, r0, #29
 8000988:	4313      	orrs	r3, r2
 800098a:	0f5a      	lsrs	r2, r3, #29
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	0752      	lsls	r2, r2, #29
 8000992:	4313      	orrs	r3, r2
 8000994:	e5fa      	b.n	800058c <__aeabi_dadd+0x2a4>
 8000996:	2300      	movs	r3, #0
 8000998:	4a01      	ldr	r2, [pc, #4]	; (80009a0 <__aeabi_dadd+0x6b8>)
 800099a:	001c      	movs	r4, r3
 800099c:	e540      	b.n	8000420 <__aeabi_dadd+0x138>
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	000007ff 	.word	0x000007ff
 80009a4:	ff7fffff 	.word	0xff7fffff

080009a8 <__aeabi_ddiv>:
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	4657      	mov	r7, sl
 80009ac:	464e      	mov	r6, r9
 80009ae:	4645      	mov	r5, r8
 80009b0:	46de      	mov	lr, fp
 80009b2:	b5e0      	push	{r5, r6, r7, lr}
 80009b4:	030c      	lsls	r4, r1, #12
 80009b6:	001f      	movs	r7, r3
 80009b8:	004b      	lsls	r3, r1, #1
 80009ba:	4681      	mov	r9, r0
 80009bc:	4692      	mov	sl, r2
 80009be:	0005      	movs	r5, r0
 80009c0:	b085      	sub	sp, #20
 80009c2:	0b24      	lsrs	r4, r4, #12
 80009c4:	0d5b      	lsrs	r3, r3, #21
 80009c6:	0fce      	lsrs	r6, r1, #31
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_ddiv+0x26>
 80009cc:	e152      	b.n	8000c74 <__aeabi_ddiv+0x2cc>
 80009ce:	4ad2      	ldr	r2, [pc, #840]	; (8000d18 <__aeabi_ddiv+0x370>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d100      	bne.n	80009d6 <__aeabi_ddiv+0x2e>
 80009d4:	e16e      	b.n	8000cb4 <__aeabi_ddiv+0x30c>
 80009d6:	0f42      	lsrs	r2, r0, #29
 80009d8:	00e4      	lsls	r4, r4, #3
 80009da:	4314      	orrs	r4, r2
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	0412      	lsls	r2, r2, #16
 80009e0:	4322      	orrs	r2, r4
 80009e2:	4690      	mov	r8, r2
 80009e4:	4acd      	ldr	r2, [pc, #820]	; (8000d1c <__aeabi_ddiv+0x374>)
 80009e6:	00c5      	lsls	r5, r0, #3
 80009e8:	4693      	mov	fp, r2
 80009ea:	449b      	add	fp, r3
 80009ec:	2300      	movs	r3, #0
 80009ee:	4699      	mov	r9, r3
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	033c      	lsls	r4, r7, #12
 80009f4:	007b      	lsls	r3, r7, #1
 80009f6:	4650      	mov	r0, sl
 80009f8:	0b24      	lsrs	r4, r4, #12
 80009fa:	0d5b      	lsrs	r3, r3, #21
 80009fc:	0fff      	lsrs	r7, r7, #31
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_ddiv+0x5c>
 8000a02:	e11a      	b.n	8000c3a <__aeabi_ddiv+0x292>
 8000a04:	4ac4      	ldr	r2, [pc, #784]	; (8000d18 <__aeabi_ddiv+0x370>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d100      	bne.n	8000a0c <__aeabi_ddiv+0x64>
 8000a0a:	e15e      	b.n	8000cca <__aeabi_ddiv+0x322>
 8000a0c:	0f42      	lsrs	r2, r0, #29
 8000a0e:	00e4      	lsls	r4, r4, #3
 8000a10:	4322      	orrs	r2, r4
 8000a12:	2480      	movs	r4, #128	; 0x80
 8000a14:	0424      	lsls	r4, r4, #16
 8000a16:	4314      	orrs	r4, r2
 8000a18:	4ac0      	ldr	r2, [pc, #768]	; (8000d1c <__aeabi_ddiv+0x374>)
 8000a1a:	00c1      	lsls	r1, r0, #3
 8000a1c:	4694      	mov	ip, r2
 8000a1e:	465a      	mov	r2, fp
 8000a20:	4463      	add	r3, ip
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	469b      	mov	fp, r3
 8000a26:	2000      	movs	r0, #0
 8000a28:	0033      	movs	r3, r6
 8000a2a:	407b      	eors	r3, r7
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	464b      	mov	r3, r9
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d827      	bhi.n	8000a84 <__aeabi_ddiv+0xdc>
 8000a34:	4aba      	ldr	r2, [pc, #744]	; (8000d20 <__aeabi_ddiv+0x378>)
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	58d3      	ldr	r3, [r2, r3]
 8000a3a:	469f      	mov	pc, r3
 8000a3c:	46b2      	mov	sl, r6
 8000a3e:	9b00      	ldr	r3, [sp, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d016      	beq.n	8000a72 <__aeabi_ddiv+0xca>
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d100      	bne.n	8000a4a <__aeabi_ddiv+0xa2>
 8000a48:	e287      	b.n	8000f5a <__aeabi_ddiv+0x5b2>
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_ddiv+0xa8>
 8000a4e:	e0d5      	b.n	8000bfc <__aeabi_ddiv+0x254>
 8000a50:	2300      	movs	r3, #0
 8000a52:	2200      	movs	r2, #0
 8000a54:	2500      	movs	r5, #0
 8000a56:	051b      	lsls	r3, r3, #20
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	4652      	mov	r2, sl
 8000a5c:	07d2      	lsls	r2, r2, #31
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	0028      	movs	r0, r5
 8000a62:	0019      	movs	r1, r3
 8000a64:	b005      	add	sp, #20
 8000a66:	bcf0      	pop	{r4, r5, r6, r7}
 8000a68:	46bb      	mov	fp, r7
 8000a6a:	46b2      	mov	sl, r6
 8000a6c:	46a9      	mov	r9, r5
 8000a6e:	46a0      	mov	r8, r4
 8000a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a72:	2200      	movs	r2, #0
 8000a74:	2500      	movs	r5, #0
 8000a76:	4ba8      	ldr	r3, [pc, #672]	; (8000d18 <__aeabi_ddiv+0x370>)
 8000a78:	e7ed      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000a7a:	46ba      	mov	sl, r7
 8000a7c:	46a0      	mov	r8, r4
 8000a7e:	000d      	movs	r5, r1
 8000a80:	9000      	str	r0, [sp, #0]
 8000a82:	e7dc      	b.n	8000a3e <__aeabi_ddiv+0x96>
 8000a84:	4544      	cmp	r4, r8
 8000a86:	d200      	bcs.n	8000a8a <__aeabi_ddiv+0xe2>
 8000a88:	e1c4      	b.n	8000e14 <__aeabi_ddiv+0x46c>
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_ddiv+0xe6>
 8000a8c:	e1bf      	b.n	8000e0e <__aeabi_ddiv+0x466>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	425b      	negs	r3, r3
 8000a92:	469c      	mov	ip, r3
 8000a94:	002e      	movs	r6, r5
 8000a96:	4640      	mov	r0, r8
 8000a98:	2500      	movs	r5, #0
 8000a9a:	44e3      	add	fp, ip
 8000a9c:	0223      	lsls	r3, r4, #8
 8000a9e:	0e0c      	lsrs	r4, r1, #24
 8000aa0:	431c      	orrs	r4, r3
 8000aa2:	0c1b      	lsrs	r3, r3, #16
 8000aa4:	4699      	mov	r9, r3
 8000aa6:	0423      	lsls	r3, r4, #16
 8000aa8:	020a      	lsls	r2, r1, #8
 8000aaa:	0c1f      	lsrs	r7, r3, #16
 8000aac:	4649      	mov	r1, r9
 8000aae:	9200      	str	r2, [sp, #0]
 8000ab0:	9701      	str	r7, [sp, #4]
 8000ab2:	f7ff fbad 	bl	8000210 <__aeabi_uidivmod>
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	437a      	muls	r2, r7
 8000aba:	040b      	lsls	r3, r1, #16
 8000abc:	0c31      	lsrs	r1, r6, #16
 8000abe:	4680      	mov	r8, r0
 8000ac0:	4319      	orrs	r1, r3
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	d907      	bls.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	425b      	negs	r3, r3
 8000aca:	469c      	mov	ip, r3
 8000acc:	1909      	adds	r1, r1, r4
 8000ace:	44e0      	add	r8, ip
 8000ad0:	428c      	cmp	r4, r1
 8000ad2:	d800      	bhi.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ad4:	e201      	b.n	8000eda <__aeabi_ddiv+0x532>
 8000ad6:	1a88      	subs	r0, r1, r2
 8000ad8:	4649      	mov	r1, r9
 8000ada:	f7ff fb99 	bl	8000210 <__aeabi_uidivmod>
 8000ade:	9a01      	ldr	r2, [sp, #4]
 8000ae0:	0436      	lsls	r6, r6, #16
 8000ae2:	4342      	muls	r2, r0
 8000ae4:	0409      	lsls	r1, r1, #16
 8000ae6:	0c36      	lsrs	r6, r6, #16
 8000ae8:	0003      	movs	r3, r0
 8000aea:	430e      	orrs	r6, r1
 8000aec:	42b2      	cmp	r2, r6
 8000aee:	d904      	bls.n	8000afa <__aeabi_ddiv+0x152>
 8000af0:	1936      	adds	r6, r6, r4
 8000af2:	3b01      	subs	r3, #1
 8000af4:	42b4      	cmp	r4, r6
 8000af6:	d800      	bhi.n	8000afa <__aeabi_ddiv+0x152>
 8000af8:	e1e9      	b.n	8000ece <__aeabi_ddiv+0x526>
 8000afa:	1ab0      	subs	r0, r6, r2
 8000afc:	4642      	mov	r2, r8
 8000afe:	9e00      	ldr	r6, [sp, #0]
 8000b00:	0412      	lsls	r2, r2, #16
 8000b02:	431a      	orrs	r2, r3
 8000b04:	0c33      	lsrs	r3, r6, #16
 8000b06:	001f      	movs	r7, r3
 8000b08:	0c11      	lsrs	r1, r2, #16
 8000b0a:	4690      	mov	r8, r2
 8000b0c:	9302      	str	r3, [sp, #8]
 8000b0e:	0413      	lsls	r3, r2, #16
 8000b10:	0432      	lsls	r2, r6, #16
 8000b12:	0c16      	lsrs	r6, r2, #16
 8000b14:	0032      	movs	r2, r6
 8000b16:	0c1b      	lsrs	r3, r3, #16
 8000b18:	435a      	muls	r2, r3
 8000b1a:	9603      	str	r6, [sp, #12]
 8000b1c:	437b      	muls	r3, r7
 8000b1e:	434e      	muls	r6, r1
 8000b20:	4379      	muls	r1, r7
 8000b22:	0c17      	lsrs	r7, r2, #16
 8000b24:	46bc      	mov	ip, r7
 8000b26:	199b      	adds	r3, r3, r6
 8000b28:	4463      	add	r3, ip
 8000b2a:	429e      	cmp	r6, r3
 8000b2c:	d903      	bls.n	8000b36 <__aeabi_ddiv+0x18e>
 8000b2e:	2680      	movs	r6, #128	; 0x80
 8000b30:	0276      	lsls	r6, r6, #9
 8000b32:	46b4      	mov	ip, r6
 8000b34:	4461      	add	r1, ip
 8000b36:	0c1e      	lsrs	r6, r3, #16
 8000b38:	1871      	adds	r1, r6, r1
 8000b3a:	0416      	lsls	r6, r2, #16
 8000b3c:	041b      	lsls	r3, r3, #16
 8000b3e:	0c36      	lsrs	r6, r6, #16
 8000b40:	199e      	adds	r6, r3, r6
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d302      	bcc.n	8000b4c <__aeabi_ddiv+0x1a4>
 8000b46:	d112      	bne.n	8000b6e <__aeabi_ddiv+0x1c6>
 8000b48:	42b5      	cmp	r5, r6
 8000b4a:	d210      	bcs.n	8000b6e <__aeabi_ddiv+0x1c6>
 8000b4c:	4643      	mov	r3, r8
 8000b4e:	1e5a      	subs	r2, r3, #1
 8000b50:	9b00      	ldr	r3, [sp, #0]
 8000b52:	469c      	mov	ip, r3
 8000b54:	4465      	add	r5, ip
 8000b56:	001f      	movs	r7, r3
 8000b58:	429d      	cmp	r5, r3
 8000b5a:	419b      	sbcs	r3, r3
 8000b5c:	425b      	negs	r3, r3
 8000b5e:	191b      	adds	r3, r3, r4
 8000b60:	18c0      	adds	r0, r0, r3
 8000b62:	4284      	cmp	r4, r0
 8000b64:	d200      	bcs.n	8000b68 <__aeabi_ddiv+0x1c0>
 8000b66:	e19e      	b.n	8000ea6 <__aeabi_ddiv+0x4fe>
 8000b68:	d100      	bne.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000b6a:	e199      	b.n	8000ea0 <__aeabi_ddiv+0x4f8>
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	1bae      	subs	r6, r5, r6
 8000b70:	42b5      	cmp	r5, r6
 8000b72:	41ad      	sbcs	r5, r5
 8000b74:	1a40      	subs	r0, r0, r1
 8000b76:	426d      	negs	r5, r5
 8000b78:	1b40      	subs	r0, r0, r5
 8000b7a:	4284      	cmp	r4, r0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_ddiv+0x1d8>
 8000b7e:	e1d2      	b.n	8000f26 <__aeabi_ddiv+0x57e>
 8000b80:	4649      	mov	r1, r9
 8000b82:	f7ff fb45 	bl	8000210 <__aeabi_uidivmod>
 8000b86:	9a01      	ldr	r2, [sp, #4]
 8000b88:	040b      	lsls	r3, r1, #16
 8000b8a:	4342      	muls	r2, r0
 8000b8c:	0c31      	lsrs	r1, r6, #16
 8000b8e:	0005      	movs	r5, r0
 8000b90:	4319      	orrs	r1, r3
 8000b92:	428a      	cmp	r2, r1
 8000b94:	d900      	bls.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000b96:	e16c      	b.n	8000e72 <__aeabi_ddiv+0x4ca>
 8000b98:	1a88      	subs	r0, r1, r2
 8000b9a:	4649      	mov	r1, r9
 8000b9c:	f7ff fb38 	bl	8000210 <__aeabi_uidivmod>
 8000ba0:	9a01      	ldr	r2, [sp, #4]
 8000ba2:	0436      	lsls	r6, r6, #16
 8000ba4:	4342      	muls	r2, r0
 8000ba6:	0409      	lsls	r1, r1, #16
 8000ba8:	0c36      	lsrs	r6, r6, #16
 8000baa:	0003      	movs	r3, r0
 8000bac:	430e      	orrs	r6, r1
 8000bae:	42b2      	cmp	r2, r6
 8000bb0:	d900      	bls.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000bb2:	e153      	b.n	8000e5c <__aeabi_ddiv+0x4b4>
 8000bb4:	9803      	ldr	r0, [sp, #12]
 8000bb6:	1ab6      	subs	r6, r6, r2
 8000bb8:	0002      	movs	r2, r0
 8000bba:	042d      	lsls	r5, r5, #16
 8000bbc:	431d      	orrs	r5, r3
 8000bbe:	9f02      	ldr	r7, [sp, #8]
 8000bc0:	042b      	lsls	r3, r5, #16
 8000bc2:	0c1b      	lsrs	r3, r3, #16
 8000bc4:	435a      	muls	r2, r3
 8000bc6:	437b      	muls	r3, r7
 8000bc8:	469c      	mov	ip, r3
 8000bca:	0c29      	lsrs	r1, r5, #16
 8000bcc:	4348      	muls	r0, r1
 8000bce:	0c13      	lsrs	r3, r2, #16
 8000bd0:	4484      	add	ip, r0
 8000bd2:	4463      	add	r3, ip
 8000bd4:	4379      	muls	r1, r7
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d903      	bls.n	8000be2 <__aeabi_ddiv+0x23a>
 8000bda:	2080      	movs	r0, #128	; 0x80
 8000bdc:	0240      	lsls	r0, r0, #9
 8000bde:	4684      	mov	ip, r0
 8000be0:	4461      	add	r1, ip
 8000be2:	0c18      	lsrs	r0, r3, #16
 8000be4:	0412      	lsls	r2, r2, #16
 8000be6:	041b      	lsls	r3, r3, #16
 8000be8:	0c12      	lsrs	r2, r2, #16
 8000bea:	1840      	adds	r0, r0, r1
 8000bec:	189b      	adds	r3, r3, r2
 8000bee:	4286      	cmp	r6, r0
 8000bf0:	d200      	bcs.n	8000bf4 <__aeabi_ddiv+0x24c>
 8000bf2:	e100      	b.n	8000df6 <__aeabi_ddiv+0x44e>
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_ddiv+0x250>
 8000bf6:	e0fb      	b.n	8000df0 <__aeabi_ddiv+0x448>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	431d      	orrs	r5, r3
 8000bfc:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <__aeabi_ddiv+0x37c>)
 8000bfe:	445b      	add	r3, fp
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dc00      	bgt.n	8000c06 <__aeabi_ddiv+0x25e>
 8000c04:	e0aa      	b.n	8000d5c <__aeabi_ddiv+0x3b4>
 8000c06:	076a      	lsls	r2, r5, #29
 8000c08:	d000      	beq.n	8000c0c <__aeabi_ddiv+0x264>
 8000c0a:	e13d      	b.n	8000e88 <__aeabi_ddiv+0x4e0>
 8000c0c:	08e9      	lsrs	r1, r5, #3
 8000c0e:	4642      	mov	r2, r8
 8000c10:	01d2      	lsls	r2, r2, #7
 8000c12:	d506      	bpl.n	8000c22 <__aeabi_ddiv+0x27a>
 8000c14:	4642      	mov	r2, r8
 8000c16:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <__aeabi_ddiv+0x380>)
 8000c18:	401a      	ands	r2, r3
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	4690      	mov	r8, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	445b      	add	r3, fp
 8000c22:	4a42      	ldr	r2, [pc, #264]	; (8000d2c <__aeabi_ddiv+0x384>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	dd00      	ble.n	8000c2a <__aeabi_ddiv+0x282>
 8000c28:	e723      	b.n	8000a72 <__aeabi_ddiv+0xca>
 8000c2a:	4642      	mov	r2, r8
 8000c2c:	055b      	lsls	r3, r3, #21
 8000c2e:	0755      	lsls	r5, r2, #29
 8000c30:	0252      	lsls	r2, r2, #9
 8000c32:	430d      	orrs	r5, r1
 8000c34:	0b12      	lsrs	r2, r2, #12
 8000c36:	0d5b      	lsrs	r3, r3, #21
 8000c38:	e70d      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000c3a:	4651      	mov	r1, sl
 8000c3c:	4321      	orrs	r1, r4
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_ddiv+0x29a>
 8000c40:	e07c      	b.n	8000d3c <__aeabi_ddiv+0x394>
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_ddiv+0x2a0>
 8000c46:	e0fb      	b.n	8000e40 <__aeabi_ddiv+0x498>
 8000c48:	0020      	movs	r0, r4
 8000c4a:	f001 f89b 	bl	8001d84 <__clzsi2>
 8000c4e:	0002      	movs	r2, r0
 8000c50:	3a0b      	subs	r2, #11
 8000c52:	231d      	movs	r3, #29
 8000c54:	1a9b      	subs	r3, r3, r2
 8000c56:	4652      	mov	r2, sl
 8000c58:	0001      	movs	r1, r0
 8000c5a:	40da      	lsrs	r2, r3
 8000c5c:	4653      	mov	r3, sl
 8000c5e:	3908      	subs	r1, #8
 8000c60:	408b      	lsls	r3, r1
 8000c62:	408c      	lsls	r4, r1
 8000c64:	0019      	movs	r1, r3
 8000c66:	4314      	orrs	r4, r2
 8000c68:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <__aeabi_ddiv+0x388>)
 8000c6a:	4458      	add	r0, fp
 8000c6c:	469b      	mov	fp, r3
 8000c6e:	4483      	add	fp, r0
 8000c70:	2000      	movs	r0, #0
 8000c72:	e6d9      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000c74:	0003      	movs	r3, r0
 8000c76:	4323      	orrs	r3, r4
 8000c78:	4698      	mov	r8, r3
 8000c7a:	d044      	beq.n	8000d06 <__aeabi_ddiv+0x35e>
 8000c7c:	2c00      	cmp	r4, #0
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_ddiv+0x2da>
 8000c80:	e0cf      	b.n	8000e22 <__aeabi_ddiv+0x47a>
 8000c82:	0020      	movs	r0, r4
 8000c84:	f001 f87e 	bl	8001d84 <__clzsi2>
 8000c88:	0001      	movs	r1, r0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	390b      	subs	r1, #11
 8000c8e:	231d      	movs	r3, #29
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	4649      	mov	r1, r9
 8000c94:	0010      	movs	r0, r2
 8000c96:	40d9      	lsrs	r1, r3
 8000c98:	3808      	subs	r0, #8
 8000c9a:	4084      	lsls	r4, r0
 8000c9c:	000b      	movs	r3, r1
 8000c9e:	464d      	mov	r5, r9
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	4698      	mov	r8, r3
 8000ca4:	4085      	lsls	r5, r0
 8000ca6:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <__aeabi_ddiv+0x38c>)
 8000ca8:	1a9b      	subs	r3, r3, r2
 8000caa:	469b      	mov	fp, r3
 8000cac:	2300      	movs	r3, #0
 8000cae:	4699      	mov	r9, r3
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	e69e      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4322      	orrs	r2, r4
 8000cb8:	4690      	mov	r8, r2
 8000cba:	d11d      	bne.n	8000cf8 <__aeabi_ddiv+0x350>
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	469b      	mov	fp, r3
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	4691      	mov	r9, r2
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	e693      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000cca:	4651      	mov	r1, sl
 8000ccc:	4321      	orrs	r1, r4
 8000cce:	d109      	bne.n	8000ce4 <__aeabi_ddiv+0x33c>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <__aeabi_ddiv+0x390>)
 8000cd8:	4691      	mov	r9, r2
 8000cda:	469c      	mov	ip, r3
 8000cdc:	2400      	movs	r4, #0
 8000cde:	2002      	movs	r0, #2
 8000ce0:	44e3      	add	fp, ip
 8000ce2:	e6a1      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	464a      	mov	r2, r9
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <__aeabi_ddiv+0x390>)
 8000cec:	4691      	mov	r9, r2
 8000cee:	469c      	mov	ip, r3
 8000cf0:	4651      	mov	r1, sl
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	44e3      	add	fp, ip
 8000cf6:	e697      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000cf8:	220c      	movs	r2, #12
 8000cfa:	469b      	mov	fp, r3
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	46a0      	mov	r8, r4
 8000d00:	4691      	mov	r9, r2
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	e675      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000d06:	2304      	movs	r3, #4
 8000d08:	4699      	mov	r9, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	469b      	mov	fp, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	2500      	movs	r5, #0
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	e66d      	b.n	80009f2 <__aeabi_ddiv+0x4a>
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	000007ff 	.word	0x000007ff
 8000d1c:	fffffc01 	.word	0xfffffc01
 8000d20:	08004430 	.word	0x08004430
 8000d24:	000003ff 	.word	0x000003ff
 8000d28:	feffffff 	.word	0xfeffffff
 8000d2c:	000007fe 	.word	0x000007fe
 8000d30:	000003f3 	.word	0x000003f3
 8000d34:	fffffc0d 	.word	0xfffffc0d
 8000d38:	fffff801 	.word	0xfffff801
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	2301      	movs	r3, #1
 8000d40:	431a      	orrs	r2, r3
 8000d42:	4691      	mov	r9, r2
 8000d44:	2400      	movs	r4, #0
 8000d46:	2001      	movs	r0, #1
 8000d48:	e66e      	b.n	8000a28 <__aeabi_ddiv+0x80>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	469a      	mov	sl, r3
 8000d50:	2500      	movs	r5, #0
 8000d52:	4b88      	ldr	r3, [pc, #544]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000d54:	0312      	lsls	r2, r2, #12
 8000d56:	e67e      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000d58:	2501      	movs	r5, #1
 8000d5a:	426d      	negs	r5, r5
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	1ad2      	subs	r2, r2, r3
 8000d60:	2a38      	cmp	r2, #56	; 0x38
 8000d62:	dd00      	ble.n	8000d66 <__aeabi_ddiv+0x3be>
 8000d64:	e674      	b.n	8000a50 <__aeabi_ddiv+0xa8>
 8000d66:	2a1f      	cmp	r2, #31
 8000d68:	dc00      	bgt.n	8000d6c <__aeabi_ddiv+0x3c4>
 8000d6a:	e0bd      	b.n	8000ee8 <__aeabi_ddiv+0x540>
 8000d6c:	211f      	movs	r1, #31
 8000d6e:	4249      	negs	r1, r1
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	4641      	mov	r1, r8
 8000d74:	40d9      	lsrs	r1, r3
 8000d76:	000b      	movs	r3, r1
 8000d78:	2a20      	cmp	r2, #32
 8000d7a:	d004      	beq.n	8000d86 <__aeabi_ddiv+0x3de>
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	4a7e      	ldr	r2, [pc, #504]	; (8000f78 <__aeabi_ddiv+0x5d0>)
 8000d80:	445a      	add	r2, fp
 8000d82:	4091      	lsls	r1, r2
 8000d84:	430d      	orrs	r5, r1
 8000d86:	0029      	movs	r1, r5
 8000d88:	1e4a      	subs	r2, r1, #1
 8000d8a:	4191      	sbcs	r1, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	2307      	movs	r3, #7
 8000d90:	001d      	movs	r5, r3
 8000d92:	2200      	movs	r2, #0
 8000d94:	400d      	ands	r5, r1
 8000d96:	420b      	tst	r3, r1
 8000d98:	d100      	bne.n	8000d9c <__aeabi_ddiv+0x3f4>
 8000d9a:	e0d0      	b.n	8000f3e <__aeabi_ddiv+0x596>
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	2300      	movs	r3, #0
 8000da0:	400a      	ands	r2, r1
 8000da2:	2a04      	cmp	r2, #4
 8000da4:	d100      	bne.n	8000da8 <__aeabi_ddiv+0x400>
 8000da6:	e0c7      	b.n	8000f38 <__aeabi_ddiv+0x590>
 8000da8:	1d0a      	adds	r2, r1, #4
 8000daa:	428a      	cmp	r2, r1
 8000dac:	4189      	sbcs	r1, r1
 8000dae:	4249      	negs	r1, r1
 8000db0:	185b      	adds	r3, r3, r1
 8000db2:	0011      	movs	r1, r2
 8000db4:	021a      	lsls	r2, r3, #8
 8000db6:	d400      	bmi.n	8000dba <__aeabi_ddiv+0x412>
 8000db8:	e0be      	b.n	8000f38 <__aeabi_ddiv+0x590>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2500      	movs	r5, #0
 8000dc0:	e649      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	4643      	mov	r3, r8
 8000dc6:	0312      	lsls	r2, r2, #12
 8000dc8:	4213      	tst	r3, r2
 8000dca:	d008      	beq.n	8000dde <__aeabi_ddiv+0x436>
 8000dcc:	4214      	tst	r4, r2
 8000dce:	d106      	bne.n	8000dde <__aeabi_ddiv+0x436>
 8000dd0:	4322      	orrs	r2, r4
 8000dd2:	0312      	lsls	r2, r2, #12
 8000dd4:	46ba      	mov	sl, r7
 8000dd6:	000d      	movs	r5, r1
 8000dd8:	4b66      	ldr	r3, [pc, #408]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000dda:	0b12      	lsrs	r2, r2, #12
 8000ddc:	e63b      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	4643      	mov	r3, r8
 8000de2:	0312      	lsls	r2, r2, #12
 8000de4:	431a      	orrs	r2, r3
 8000de6:	0312      	lsls	r2, r2, #12
 8000de8:	46b2      	mov	sl, r6
 8000dea:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000dec:	0b12      	lsrs	r2, r2, #12
 8000dee:	e632      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0x44e>
 8000df4:	e702      	b.n	8000bfc <__aeabi_ddiv+0x254>
 8000df6:	19a6      	adds	r6, r4, r6
 8000df8:	1e6a      	subs	r2, r5, #1
 8000dfa:	42a6      	cmp	r6, r4
 8000dfc:	d200      	bcs.n	8000e00 <__aeabi_ddiv+0x458>
 8000dfe:	e089      	b.n	8000f14 <__aeabi_ddiv+0x56c>
 8000e00:	4286      	cmp	r6, r0
 8000e02:	d200      	bcs.n	8000e06 <__aeabi_ddiv+0x45e>
 8000e04:	e09f      	b.n	8000f46 <__aeabi_ddiv+0x59e>
 8000e06:	d100      	bne.n	8000e0a <__aeabi_ddiv+0x462>
 8000e08:	e0af      	b.n	8000f6a <__aeabi_ddiv+0x5c2>
 8000e0a:	0015      	movs	r5, r2
 8000e0c:	e6f4      	b.n	8000bf8 <__aeabi_ddiv+0x250>
 8000e0e:	42a9      	cmp	r1, r5
 8000e10:	d900      	bls.n	8000e14 <__aeabi_ddiv+0x46c>
 8000e12:	e63c      	b.n	8000a8e <__aeabi_ddiv+0xe6>
 8000e14:	4643      	mov	r3, r8
 8000e16:	07de      	lsls	r6, r3, #31
 8000e18:	0858      	lsrs	r0, r3, #1
 8000e1a:	086b      	lsrs	r3, r5, #1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	07ed      	lsls	r5, r5, #31
 8000e20:	e63c      	b.n	8000a9c <__aeabi_ddiv+0xf4>
 8000e22:	f000 ffaf 	bl	8001d84 <__clzsi2>
 8000e26:	0001      	movs	r1, r0
 8000e28:	0002      	movs	r2, r0
 8000e2a:	3115      	adds	r1, #21
 8000e2c:	3220      	adds	r2, #32
 8000e2e:	291c      	cmp	r1, #28
 8000e30:	dc00      	bgt.n	8000e34 <__aeabi_ddiv+0x48c>
 8000e32:	e72c      	b.n	8000c8e <__aeabi_ddiv+0x2e6>
 8000e34:	464b      	mov	r3, r9
 8000e36:	3808      	subs	r0, #8
 8000e38:	4083      	lsls	r3, r0
 8000e3a:	2500      	movs	r5, #0
 8000e3c:	4698      	mov	r8, r3
 8000e3e:	e732      	b.n	8000ca6 <__aeabi_ddiv+0x2fe>
 8000e40:	f000 ffa0 	bl	8001d84 <__clzsi2>
 8000e44:	0003      	movs	r3, r0
 8000e46:	001a      	movs	r2, r3
 8000e48:	3215      	adds	r2, #21
 8000e4a:	3020      	adds	r0, #32
 8000e4c:	2a1c      	cmp	r2, #28
 8000e4e:	dc00      	bgt.n	8000e52 <__aeabi_ddiv+0x4aa>
 8000e50:	e6ff      	b.n	8000c52 <__aeabi_ddiv+0x2aa>
 8000e52:	4654      	mov	r4, sl
 8000e54:	3b08      	subs	r3, #8
 8000e56:	2100      	movs	r1, #0
 8000e58:	409c      	lsls	r4, r3
 8000e5a:	e705      	b.n	8000c68 <__aeabi_ddiv+0x2c0>
 8000e5c:	1936      	adds	r6, r6, r4
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	42b4      	cmp	r4, r6
 8000e62:	d900      	bls.n	8000e66 <__aeabi_ddiv+0x4be>
 8000e64:	e6a6      	b.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000e66:	42b2      	cmp	r2, r6
 8000e68:	d800      	bhi.n	8000e6c <__aeabi_ddiv+0x4c4>
 8000e6a:	e6a3      	b.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000e6c:	1e83      	subs	r3, r0, #2
 8000e6e:	1936      	adds	r6, r6, r4
 8000e70:	e6a0      	b.n	8000bb4 <__aeabi_ddiv+0x20c>
 8000e72:	1909      	adds	r1, r1, r4
 8000e74:	3d01      	subs	r5, #1
 8000e76:	428c      	cmp	r4, r1
 8000e78:	d900      	bls.n	8000e7c <__aeabi_ddiv+0x4d4>
 8000e7a:	e68d      	b.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000e7c:	428a      	cmp	r2, r1
 8000e7e:	d800      	bhi.n	8000e82 <__aeabi_ddiv+0x4da>
 8000e80:	e68a      	b.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000e82:	1e85      	subs	r5, r0, #2
 8000e84:	1909      	adds	r1, r1, r4
 8000e86:	e687      	b.n	8000b98 <__aeabi_ddiv+0x1f0>
 8000e88:	220f      	movs	r2, #15
 8000e8a:	402a      	ands	r2, r5
 8000e8c:	2a04      	cmp	r2, #4
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_ddiv+0x4ea>
 8000e90:	e6bc      	b.n	8000c0c <__aeabi_ddiv+0x264>
 8000e92:	1d29      	adds	r1, r5, #4
 8000e94:	42a9      	cmp	r1, r5
 8000e96:	41ad      	sbcs	r5, r5
 8000e98:	426d      	negs	r5, r5
 8000e9a:	08c9      	lsrs	r1, r1, #3
 8000e9c:	44a8      	add	r8, r5
 8000e9e:	e6b6      	b.n	8000c0e <__aeabi_ddiv+0x266>
 8000ea0:	42af      	cmp	r7, r5
 8000ea2:	d900      	bls.n	8000ea6 <__aeabi_ddiv+0x4fe>
 8000ea4:	e662      	b.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000ea6:	4281      	cmp	r1, r0
 8000ea8:	d804      	bhi.n	8000eb4 <__aeabi_ddiv+0x50c>
 8000eaa:	d000      	beq.n	8000eae <__aeabi_ddiv+0x506>
 8000eac:	e65e      	b.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000eae:	42ae      	cmp	r6, r5
 8000eb0:	d800      	bhi.n	8000eb4 <__aeabi_ddiv+0x50c>
 8000eb2:	e65b      	b.n	8000b6c <__aeabi_ddiv+0x1c4>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	469c      	mov	ip, r3
 8000eba:	9b00      	ldr	r3, [sp, #0]
 8000ebc:	44e0      	add	r8, ip
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	4465      	add	r5, ip
 8000ec2:	429d      	cmp	r5, r3
 8000ec4:	419b      	sbcs	r3, r3
 8000ec6:	425b      	negs	r3, r3
 8000ec8:	191b      	adds	r3, r3, r4
 8000eca:	18c0      	adds	r0, r0, r3
 8000ecc:	e64f      	b.n	8000b6e <__aeabi_ddiv+0x1c6>
 8000ece:	42b2      	cmp	r2, r6
 8000ed0:	d800      	bhi.n	8000ed4 <__aeabi_ddiv+0x52c>
 8000ed2:	e612      	b.n	8000afa <__aeabi_ddiv+0x152>
 8000ed4:	1e83      	subs	r3, r0, #2
 8000ed6:	1936      	adds	r6, r6, r4
 8000ed8:	e60f      	b.n	8000afa <__aeabi_ddiv+0x152>
 8000eda:	428a      	cmp	r2, r1
 8000edc:	d800      	bhi.n	8000ee0 <__aeabi_ddiv+0x538>
 8000ede:	e5fa      	b.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ee0:	1e83      	subs	r3, r0, #2
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	1909      	adds	r1, r1, r4
 8000ee6:	e5f6      	b.n	8000ad6 <__aeabi_ddiv+0x12e>
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <__aeabi_ddiv+0x5d4>)
 8000eea:	0028      	movs	r0, r5
 8000eec:	445b      	add	r3, fp
 8000eee:	4641      	mov	r1, r8
 8000ef0:	409d      	lsls	r5, r3
 8000ef2:	4099      	lsls	r1, r3
 8000ef4:	40d0      	lsrs	r0, r2
 8000ef6:	1e6b      	subs	r3, r5, #1
 8000ef8:	419d      	sbcs	r5, r3
 8000efa:	4643      	mov	r3, r8
 8000efc:	4301      	orrs	r1, r0
 8000efe:	4329      	orrs	r1, r5
 8000f00:	40d3      	lsrs	r3, r2
 8000f02:	074a      	lsls	r2, r1, #29
 8000f04:	d100      	bne.n	8000f08 <__aeabi_ddiv+0x560>
 8000f06:	e755      	b.n	8000db4 <__aeabi_ddiv+0x40c>
 8000f08:	220f      	movs	r2, #15
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	2a04      	cmp	r2, #4
 8000f0e:	d000      	beq.n	8000f12 <__aeabi_ddiv+0x56a>
 8000f10:	e74a      	b.n	8000da8 <__aeabi_ddiv+0x400>
 8000f12:	e74f      	b.n	8000db4 <__aeabi_ddiv+0x40c>
 8000f14:	0015      	movs	r5, r2
 8000f16:	4286      	cmp	r6, r0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_ddiv+0x574>
 8000f1a:	e66d      	b.n	8000bf8 <__aeabi_ddiv+0x250>
 8000f1c:	9a00      	ldr	r2, [sp, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0x57c>
 8000f22:	e669      	b.n	8000bf8 <__aeabi_ddiv+0x250>
 8000f24:	e66a      	b.n	8000bfc <__aeabi_ddiv+0x254>
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <__aeabi_ddiv+0x5d8>)
 8000f28:	445b      	add	r3, fp
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	dc00      	bgt.n	8000f30 <__aeabi_ddiv+0x588>
 8000f2e:	e713      	b.n	8000d58 <__aeabi_ddiv+0x3b0>
 8000f30:	2501      	movs	r5, #1
 8000f32:	2100      	movs	r1, #0
 8000f34:	44a8      	add	r8, r5
 8000f36:	e66a      	b.n	8000c0e <__aeabi_ddiv+0x266>
 8000f38:	075d      	lsls	r5, r3, #29
 8000f3a:	025b      	lsls	r3, r3, #9
 8000f3c:	0b1a      	lsrs	r2, r3, #12
 8000f3e:	08c9      	lsrs	r1, r1, #3
 8000f40:	2300      	movs	r3, #0
 8000f42:	430d      	orrs	r5, r1
 8000f44:	e587      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000f46:	9900      	ldr	r1, [sp, #0]
 8000f48:	3d02      	subs	r5, #2
 8000f4a:	004a      	lsls	r2, r1, #1
 8000f4c:	428a      	cmp	r2, r1
 8000f4e:	41bf      	sbcs	r7, r7
 8000f50:	427f      	negs	r7, r7
 8000f52:	193f      	adds	r7, r7, r4
 8000f54:	19f6      	adds	r6, r6, r7
 8000f56:	9200      	str	r2, [sp, #0]
 8000f58:	e7dd      	b.n	8000f16 <__aeabi_ddiv+0x56e>
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	0312      	lsls	r2, r2, #12
 8000f60:	431a      	orrs	r2, r3
 8000f62:	0312      	lsls	r2, r2, #12
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <__aeabi_ddiv+0x5cc>)
 8000f66:	0b12      	lsrs	r2, r2, #12
 8000f68:	e575      	b.n	8000a56 <__aeabi_ddiv+0xae>
 8000f6a:	9900      	ldr	r1, [sp, #0]
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d3ea      	bcc.n	8000f46 <__aeabi_ddiv+0x59e>
 8000f70:	0015      	movs	r5, r2
 8000f72:	e7d3      	b.n	8000f1c <__aeabi_ddiv+0x574>
 8000f74:	000007ff 	.word	0x000007ff
 8000f78:	0000043e 	.word	0x0000043e
 8000f7c:	0000041e 	.word	0x0000041e
 8000f80:	000003ff 	.word	0x000003ff

08000f84 <__aeabi_dmul>:
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	4645      	mov	r5, r8
 8000f88:	46de      	mov	lr, fp
 8000f8a:	4657      	mov	r7, sl
 8000f8c:	464e      	mov	r6, r9
 8000f8e:	b5e0      	push	{r5, r6, r7, lr}
 8000f90:	001f      	movs	r7, r3
 8000f92:	030b      	lsls	r3, r1, #12
 8000f94:	0b1b      	lsrs	r3, r3, #12
 8000f96:	469b      	mov	fp, r3
 8000f98:	004d      	lsls	r5, r1, #1
 8000f9a:	0fcb      	lsrs	r3, r1, #31
 8000f9c:	0004      	movs	r4, r0
 8000f9e:	4691      	mov	r9, r2
 8000fa0:	4698      	mov	r8, r3
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	0d6d      	lsrs	r5, r5, #21
 8000fa6:	d100      	bne.n	8000faa <__aeabi_dmul+0x26>
 8000fa8:	e1cd      	b.n	8001346 <__aeabi_dmul+0x3c2>
 8000faa:	4bce      	ldr	r3, [pc, #824]	; (80012e4 <__aeabi_dmul+0x360>)
 8000fac:	429d      	cmp	r5, r3
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dmul+0x2e>
 8000fb0:	e1e9      	b.n	8001386 <__aeabi_dmul+0x402>
 8000fb2:	465a      	mov	r2, fp
 8000fb4:	0f43      	lsrs	r3, r0, #29
 8000fb6:	00d2      	lsls	r2, r2, #3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	0412      	lsls	r2, r2, #16
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	00c3      	lsls	r3, r0, #3
 8000fc2:	469a      	mov	sl, r3
 8000fc4:	4bc8      	ldr	r3, [pc, #800]	; (80012e8 <__aeabi_dmul+0x364>)
 8000fc6:	4693      	mov	fp, r2
 8000fc8:	469c      	mov	ip, r3
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2600      	movs	r6, #0
 8000fce:	4465      	add	r5, ip
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	033c      	lsls	r4, r7, #12
 8000fd4:	007b      	lsls	r3, r7, #1
 8000fd6:	4648      	mov	r0, r9
 8000fd8:	0b24      	lsrs	r4, r4, #12
 8000fda:	0d5b      	lsrs	r3, r3, #21
 8000fdc:	0fff      	lsrs	r7, r7, #31
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dmul+0x60>
 8000fe2:	e189      	b.n	80012f8 <__aeabi_dmul+0x374>
 8000fe4:	4abf      	ldr	r2, [pc, #764]	; (80012e4 <__aeabi_dmul+0x360>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <__aeabi_dmul+0x9a>
 8000fea:	0f42      	lsrs	r2, r0, #29
 8000fec:	00e4      	lsls	r4, r4, #3
 8000fee:	4322      	orrs	r2, r4
 8000ff0:	2480      	movs	r4, #128	; 0x80
 8000ff2:	0424      	lsls	r4, r4, #16
 8000ff4:	4314      	orrs	r4, r2
 8000ff6:	4abc      	ldr	r2, [pc, #752]	; (80012e8 <__aeabi_dmul+0x364>)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4694      	mov	ip, r2
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	4463      	add	r3, ip
 8001000:	195b      	adds	r3, r3, r5
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	9b01      	ldr	r3, [sp, #4]
 8001006:	407a      	eors	r2, r7
 8001008:	3301      	adds	r3, #1
 800100a:	00c0      	lsls	r0, r0, #3
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2e0a      	cmp	r6, #10
 8001012:	dd1c      	ble.n	800104e <__aeabi_dmul+0xca>
 8001014:	003a      	movs	r2, r7
 8001016:	2e0b      	cmp	r6, #11
 8001018:	d05e      	beq.n	80010d8 <__aeabi_dmul+0x154>
 800101a:	4647      	mov	r7, r8
 800101c:	e056      	b.n	80010cc <__aeabi_dmul+0x148>
 800101e:	4649      	mov	r1, r9
 8001020:	4bb0      	ldr	r3, [pc, #704]	; (80012e4 <__aeabi_dmul+0x360>)
 8001022:	4321      	orrs	r1, r4
 8001024:	18eb      	adds	r3, r5, r3
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	2900      	cmp	r1, #0
 800102a:	d12a      	bne.n	8001082 <__aeabi_dmul+0xfe>
 800102c:	2080      	movs	r0, #128	; 0x80
 800102e:	2202      	movs	r2, #2
 8001030:	0100      	lsls	r0, r0, #4
 8001032:	002b      	movs	r3, r5
 8001034:	4684      	mov	ip, r0
 8001036:	4316      	orrs	r6, r2
 8001038:	4642      	mov	r2, r8
 800103a:	4463      	add	r3, ip
 800103c:	407a      	eors	r2, r7
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2e0a      	cmp	r6, #10
 8001044:	dd00      	ble.n	8001048 <__aeabi_dmul+0xc4>
 8001046:	e231      	b.n	80014ac <__aeabi_dmul+0x528>
 8001048:	2000      	movs	r0, #0
 800104a:	2400      	movs	r4, #0
 800104c:	2102      	movs	r1, #2
 800104e:	2e02      	cmp	r6, #2
 8001050:	dc26      	bgt.n	80010a0 <__aeabi_dmul+0x11c>
 8001052:	3e01      	subs	r6, #1
 8001054:	2e01      	cmp	r6, #1
 8001056:	d852      	bhi.n	80010fe <__aeabi_dmul+0x17a>
 8001058:	2902      	cmp	r1, #2
 800105a:	d04c      	beq.n	80010f6 <__aeabi_dmul+0x172>
 800105c:	2901      	cmp	r1, #1
 800105e:	d000      	beq.n	8001062 <__aeabi_dmul+0xde>
 8001060:	e118      	b.n	8001294 <__aeabi_dmul+0x310>
 8001062:	2300      	movs	r3, #0
 8001064:	2400      	movs	r4, #0
 8001066:	2500      	movs	r5, #0
 8001068:	051b      	lsls	r3, r3, #20
 800106a:	4323      	orrs	r3, r4
 800106c:	07d2      	lsls	r2, r2, #31
 800106e:	4313      	orrs	r3, r2
 8001070:	0028      	movs	r0, r5
 8001072:	0019      	movs	r1, r3
 8001074:	b007      	add	sp, #28
 8001076:	bcf0      	pop	{r4, r5, r6, r7}
 8001078:	46bb      	mov	fp, r7
 800107a:	46b2      	mov	sl, r6
 800107c:	46a9      	mov	r9, r5
 800107e:	46a0      	mov	r8, r4
 8001080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	2203      	movs	r2, #3
 8001086:	0109      	lsls	r1, r1, #4
 8001088:	002b      	movs	r3, r5
 800108a:	468c      	mov	ip, r1
 800108c:	4316      	orrs	r6, r2
 800108e:	4642      	mov	r2, r8
 8001090:	4463      	add	r3, ip
 8001092:	407a      	eors	r2, r7
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2e0a      	cmp	r6, #10
 800109a:	dd00      	ble.n	800109e <__aeabi_dmul+0x11a>
 800109c:	e228      	b.n	80014f0 <__aeabi_dmul+0x56c>
 800109e:	2103      	movs	r1, #3
 80010a0:	2501      	movs	r5, #1
 80010a2:	40b5      	lsls	r5, r6
 80010a4:	46ac      	mov	ip, r5
 80010a6:	26a6      	movs	r6, #166	; 0xa6
 80010a8:	4663      	mov	r3, ip
 80010aa:	00f6      	lsls	r6, r6, #3
 80010ac:	4035      	ands	r5, r6
 80010ae:	4233      	tst	r3, r6
 80010b0:	d10b      	bne.n	80010ca <__aeabi_dmul+0x146>
 80010b2:	2690      	movs	r6, #144	; 0x90
 80010b4:	00b6      	lsls	r6, r6, #2
 80010b6:	4233      	tst	r3, r6
 80010b8:	d118      	bne.n	80010ec <__aeabi_dmul+0x168>
 80010ba:	3eb9      	subs	r6, #185	; 0xb9
 80010bc:	3eff      	subs	r6, #255	; 0xff
 80010be:	421e      	tst	r6, r3
 80010c0:	d01d      	beq.n	80010fe <__aeabi_dmul+0x17a>
 80010c2:	46a3      	mov	fp, r4
 80010c4:	4682      	mov	sl, r0
 80010c6:	9100      	str	r1, [sp, #0]
 80010c8:	e000      	b.n	80010cc <__aeabi_dmul+0x148>
 80010ca:	0017      	movs	r7, r2
 80010cc:	9900      	ldr	r1, [sp, #0]
 80010ce:	003a      	movs	r2, r7
 80010d0:	2902      	cmp	r1, #2
 80010d2:	d010      	beq.n	80010f6 <__aeabi_dmul+0x172>
 80010d4:	465c      	mov	r4, fp
 80010d6:	4650      	mov	r0, sl
 80010d8:	2903      	cmp	r1, #3
 80010da:	d1bf      	bne.n	800105c <__aeabi_dmul+0xd8>
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	031b      	lsls	r3, r3, #12
 80010e0:	431c      	orrs	r4, r3
 80010e2:	0324      	lsls	r4, r4, #12
 80010e4:	0005      	movs	r5, r0
 80010e6:	4b7f      	ldr	r3, [pc, #508]	; (80012e4 <__aeabi_dmul+0x360>)
 80010e8:	0b24      	lsrs	r4, r4, #12
 80010ea:	e7bd      	b.n	8001068 <__aeabi_dmul+0xe4>
 80010ec:	2480      	movs	r4, #128	; 0x80
 80010ee:	2200      	movs	r2, #0
 80010f0:	4b7c      	ldr	r3, [pc, #496]	; (80012e4 <__aeabi_dmul+0x360>)
 80010f2:	0324      	lsls	r4, r4, #12
 80010f4:	e7b8      	b.n	8001068 <__aeabi_dmul+0xe4>
 80010f6:	2400      	movs	r4, #0
 80010f8:	2500      	movs	r5, #0
 80010fa:	4b7a      	ldr	r3, [pc, #488]	; (80012e4 <__aeabi_dmul+0x360>)
 80010fc:	e7b4      	b.n	8001068 <__aeabi_dmul+0xe4>
 80010fe:	4653      	mov	r3, sl
 8001100:	041e      	lsls	r6, r3, #16
 8001102:	0c36      	lsrs	r6, r6, #16
 8001104:	0c1f      	lsrs	r7, r3, #16
 8001106:	0033      	movs	r3, r6
 8001108:	0c01      	lsrs	r1, r0, #16
 800110a:	0400      	lsls	r0, r0, #16
 800110c:	0c00      	lsrs	r0, r0, #16
 800110e:	4343      	muls	r3, r0
 8001110:	4698      	mov	r8, r3
 8001112:	0003      	movs	r3, r0
 8001114:	437b      	muls	r3, r7
 8001116:	4699      	mov	r9, r3
 8001118:	0033      	movs	r3, r6
 800111a:	434b      	muls	r3, r1
 800111c:	469c      	mov	ip, r3
 800111e:	4643      	mov	r3, r8
 8001120:	000d      	movs	r5, r1
 8001122:	0c1b      	lsrs	r3, r3, #16
 8001124:	469a      	mov	sl, r3
 8001126:	437d      	muls	r5, r7
 8001128:	44cc      	add	ip, r9
 800112a:	44d4      	add	ip, sl
 800112c:	9500      	str	r5, [sp, #0]
 800112e:	45e1      	cmp	r9, ip
 8001130:	d904      	bls.n	800113c <__aeabi_dmul+0x1b8>
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	025b      	lsls	r3, r3, #9
 8001136:	4699      	mov	r9, r3
 8001138:	444d      	add	r5, r9
 800113a:	9500      	str	r5, [sp, #0]
 800113c:	4663      	mov	r3, ip
 800113e:	0c1b      	lsrs	r3, r3, #16
 8001140:	001d      	movs	r5, r3
 8001142:	4663      	mov	r3, ip
 8001144:	041b      	lsls	r3, r3, #16
 8001146:	469c      	mov	ip, r3
 8001148:	4643      	mov	r3, r8
 800114a:	041b      	lsls	r3, r3, #16
 800114c:	0c1b      	lsrs	r3, r3, #16
 800114e:	4698      	mov	r8, r3
 8001150:	4663      	mov	r3, ip
 8001152:	4443      	add	r3, r8
 8001154:	9303      	str	r3, [sp, #12]
 8001156:	0c23      	lsrs	r3, r4, #16
 8001158:	4698      	mov	r8, r3
 800115a:	0033      	movs	r3, r6
 800115c:	0424      	lsls	r4, r4, #16
 800115e:	0c24      	lsrs	r4, r4, #16
 8001160:	4363      	muls	r3, r4
 8001162:	469c      	mov	ip, r3
 8001164:	0023      	movs	r3, r4
 8001166:	437b      	muls	r3, r7
 8001168:	4699      	mov	r9, r3
 800116a:	4643      	mov	r3, r8
 800116c:	435e      	muls	r6, r3
 800116e:	435f      	muls	r7, r3
 8001170:	444e      	add	r6, r9
 8001172:	4663      	mov	r3, ip
 8001174:	46b2      	mov	sl, r6
 8001176:	0c1e      	lsrs	r6, r3, #16
 8001178:	4456      	add	r6, sl
 800117a:	45b1      	cmp	r9, r6
 800117c:	d903      	bls.n	8001186 <__aeabi_dmul+0x202>
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	025b      	lsls	r3, r3, #9
 8001182:	4699      	mov	r9, r3
 8001184:	444f      	add	r7, r9
 8001186:	0c33      	lsrs	r3, r6, #16
 8001188:	4699      	mov	r9, r3
 800118a:	003b      	movs	r3, r7
 800118c:	444b      	add	r3, r9
 800118e:	9305      	str	r3, [sp, #20]
 8001190:	4663      	mov	r3, ip
 8001192:	46ac      	mov	ip, r5
 8001194:	041f      	lsls	r7, r3, #16
 8001196:	0c3f      	lsrs	r7, r7, #16
 8001198:	0436      	lsls	r6, r6, #16
 800119a:	19f6      	adds	r6, r6, r7
 800119c:	44b4      	add	ip, r6
 800119e:	4663      	mov	r3, ip
 80011a0:	9304      	str	r3, [sp, #16]
 80011a2:	465b      	mov	r3, fp
 80011a4:	0c1b      	lsrs	r3, r3, #16
 80011a6:	469c      	mov	ip, r3
 80011a8:	465b      	mov	r3, fp
 80011aa:	041f      	lsls	r7, r3, #16
 80011ac:	0c3f      	lsrs	r7, r7, #16
 80011ae:	003b      	movs	r3, r7
 80011b0:	4343      	muls	r3, r0
 80011b2:	4699      	mov	r9, r3
 80011b4:	4663      	mov	r3, ip
 80011b6:	4343      	muls	r3, r0
 80011b8:	469a      	mov	sl, r3
 80011ba:	464b      	mov	r3, r9
 80011bc:	4660      	mov	r0, ip
 80011be:	0c1b      	lsrs	r3, r3, #16
 80011c0:	469b      	mov	fp, r3
 80011c2:	4348      	muls	r0, r1
 80011c4:	4379      	muls	r1, r7
 80011c6:	4451      	add	r1, sl
 80011c8:	4459      	add	r1, fp
 80011ca:	458a      	cmp	sl, r1
 80011cc:	d903      	bls.n	80011d6 <__aeabi_dmul+0x252>
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	025b      	lsls	r3, r3, #9
 80011d2:	469a      	mov	sl, r3
 80011d4:	4450      	add	r0, sl
 80011d6:	0c0b      	lsrs	r3, r1, #16
 80011d8:	469a      	mov	sl, r3
 80011da:	464b      	mov	r3, r9
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	0c1b      	lsrs	r3, r3, #16
 80011e0:	4699      	mov	r9, r3
 80011e2:	003b      	movs	r3, r7
 80011e4:	4363      	muls	r3, r4
 80011e6:	0409      	lsls	r1, r1, #16
 80011e8:	4645      	mov	r5, r8
 80011ea:	4449      	add	r1, r9
 80011ec:	4699      	mov	r9, r3
 80011ee:	4663      	mov	r3, ip
 80011f0:	435c      	muls	r4, r3
 80011f2:	436b      	muls	r3, r5
 80011f4:	469c      	mov	ip, r3
 80011f6:	464b      	mov	r3, r9
 80011f8:	0c1b      	lsrs	r3, r3, #16
 80011fa:	4698      	mov	r8, r3
 80011fc:	436f      	muls	r7, r5
 80011fe:	193f      	adds	r7, r7, r4
 8001200:	4447      	add	r7, r8
 8001202:	4450      	add	r0, sl
 8001204:	42bc      	cmp	r4, r7
 8001206:	d903      	bls.n	8001210 <__aeabi_dmul+0x28c>
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	025b      	lsls	r3, r3, #9
 800120c:	4698      	mov	r8, r3
 800120e:	44c4      	add	ip, r8
 8001210:	9b04      	ldr	r3, [sp, #16]
 8001212:	9d00      	ldr	r5, [sp, #0]
 8001214:	4698      	mov	r8, r3
 8001216:	4445      	add	r5, r8
 8001218:	42b5      	cmp	r5, r6
 800121a:	41b6      	sbcs	r6, r6
 800121c:	4273      	negs	r3, r6
 800121e:	4698      	mov	r8, r3
 8001220:	464b      	mov	r3, r9
 8001222:	041e      	lsls	r6, r3, #16
 8001224:	9b05      	ldr	r3, [sp, #20]
 8001226:	043c      	lsls	r4, r7, #16
 8001228:	4699      	mov	r9, r3
 800122a:	0c36      	lsrs	r6, r6, #16
 800122c:	19a4      	adds	r4, r4, r6
 800122e:	444c      	add	r4, r9
 8001230:	46a1      	mov	r9, r4
 8001232:	4683      	mov	fp, r0
 8001234:	186e      	adds	r6, r5, r1
 8001236:	44c1      	add	r9, r8
 8001238:	428e      	cmp	r6, r1
 800123a:	4189      	sbcs	r1, r1
 800123c:	44cb      	add	fp, r9
 800123e:	465d      	mov	r5, fp
 8001240:	4249      	negs	r1, r1
 8001242:	186d      	adds	r5, r5, r1
 8001244:	429c      	cmp	r4, r3
 8001246:	41a4      	sbcs	r4, r4
 8001248:	45c1      	cmp	r9, r8
 800124a:	419b      	sbcs	r3, r3
 800124c:	4583      	cmp	fp, r0
 800124e:	4180      	sbcs	r0, r0
 8001250:	428d      	cmp	r5, r1
 8001252:	4189      	sbcs	r1, r1
 8001254:	425b      	negs	r3, r3
 8001256:	4264      	negs	r4, r4
 8001258:	431c      	orrs	r4, r3
 800125a:	4240      	negs	r0, r0
 800125c:	9b03      	ldr	r3, [sp, #12]
 800125e:	4249      	negs	r1, r1
 8001260:	4301      	orrs	r1, r0
 8001262:	0270      	lsls	r0, r6, #9
 8001264:	0c3f      	lsrs	r7, r7, #16
 8001266:	4318      	orrs	r0, r3
 8001268:	19e4      	adds	r4, r4, r7
 800126a:	1e47      	subs	r7, r0, #1
 800126c:	41b8      	sbcs	r0, r7
 800126e:	1864      	adds	r4, r4, r1
 8001270:	4464      	add	r4, ip
 8001272:	0df6      	lsrs	r6, r6, #23
 8001274:	0261      	lsls	r1, r4, #9
 8001276:	4330      	orrs	r0, r6
 8001278:	0dec      	lsrs	r4, r5, #23
 800127a:	026e      	lsls	r6, r5, #9
 800127c:	430c      	orrs	r4, r1
 800127e:	4330      	orrs	r0, r6
 8001280:	01c9      	lsls	r1, r1, #7
 8001282:	d400      	bmi.n	8001286 <__aeabi_dmul+0x302>
 8001284:	e0f1      	b.n	800146a <__aeabi_dmul+0x4e6>
 8001286:	2101      	movs	r1, #1
 8001288:	0843      	lsrs	r3, r0, #1
 800128a:	4001      	ands	r1, r0
 800128c:	430b      	orrs	r3, r1
 800128e:	07e0      	lsls	r0, r4, #31
 8001290:	4318      	orrs	r0, r3
 8001292:	0864      	lsrs	r4, r4, #1
 8001294:	4915      	ldr	r1, [pc, #84]	; (80012ec <__aeabi_dmul+0x368>)
 8001296:	9b02      	ldr	r3, [sp, #8]
 8001298:	468c      	mov	ip, r1
 800129a:	4463      	add	r3, ip
 800129c:	2b00      	cmp	r3, #0
 800129e:	dc00      	bgt.n	80012a2 <__aeabi_dmul+0x31e>
 80012a0:	e097      	b.n	80013d2 <__aeabi_dmul+0x44e>
 80012a2:	0741      	lsls	r1, r0, #29
 80012a4:	d009      	beq.n	80012ba <__aeabi_dmul+0x336>
 80012a6:	210f      	movs	r1, #15
 80012a8:	4001      	ands	r1, r0
 80012aa:	2904      	cmp	r1, #4
 80012ac:	d005      	beq.n	80012ba <__aeabi_dmul+0x336>
 80012ae:	1d01      	adds	r1, r0, #4
 80012b0:	4281      	cmp	r1, r0
 80012b2:	4180      	sbcs	r0, r0
 80012b4:	4240      	negs	r0, r0
 80012b6:	1824      	adds	r4, r4, r0
 80012b8:	0008      	movs	r0, r1
 80012ba:	01e1      	lsls	r1, r4, #7
 80012bc:	d506      	bpl.n	80012cc <__aeabi_dmul+0x348>
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	00c9      	lsls	r1, r1, #3
 80012c2:	468c      	mov	ip, r1
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <__aeabi_dmul+0x36c>)
 80012c6:	401c      	ands	r4, r3
 80012c8:	9b02      	ldr	r3, [sp, #8]
 80012ca:	4463      	add	r3, ip
 80012cc:	4909      	ldr	r1, [pc, #36]	; (80012f4 <__aeabi_dmul+0x370>)
 80012ce:	428b      	cmp	r3, r1
 80012d0:	dd00      	ble.n	80012d4 <__aeabi_dmul+0x350>
 80012d2:	e710      	b.n	80010f6 <__aeabi_dmul+0x172>
 80012d4:	0761      	lsls	r1, r4, #29
 80012d6:	08c5      	lsrs	r5, r0, #3
 80012d8:	0264      	lsls	r4, r4, #9
 80012da:	055b      	lsls	r3, r3, #21
 80012dc:	430d      	orrs	r5, r1
 80012de:	0b24      	lsrs	r4, r4, #12
 80012e0:	0d5b      	lsrs	r3, r3, #21
 80012e2:	e6c1      	b.n	8001068 <__aeabi_dmul+0xe4>
 80012e4:	000007ff 	.word	0x000007ff
 80012e8:	fffffc01 	.word	0xfffffc01
 80012ec:	000003ff 	.word	0x000003ff
 80012f0:	feffffff 	.word	0xfeffffff
 80012f4:	000007fe 	.word	0x000007fe
 80012f8:	464b      	mov	r3, r9
 80012fa:	4323      	orrs	r3, r4
 80012fc:	d059      	beq.n	80013b2 <__aeabi_dmul+0x42e>
 80012fe:	2c00      	cmp	r4, #0
 8001300:	d100      	bne.n	8001304 <__aeabi_dmul+0x380>
 8001302:	e0a3      	b.n	800144c <__aeabi_dmul+0x4c8>
 8001304:	0020      	movs	r0, r4
 8001306:	f000 fd3d 	bl	8001d84 <__clzsi2>
 800130a:	0001      	movs	r1, r0
 800130c:	0003      	movs	r3, r0
 800130e:	390b      	subs	r1, #11
 8001310:	221d      	movs	r2, #29
 8001312:	1a52      	subs	r2, r2, r1
 8001314:	4649      	mov	r1, r9
 8001316:	0018      	movs	r0, r3
 8001318:	40d1      	lsrs	r1, r2
 800131a:	464a      	mov	r2, r9
 800131c:	3808      	subs	r0, #8
 800131e:	4082      	lsls	r2, r0
 8001320:	4084      	lsls	r4, r0
 8001322:	0010      	movs	r0, r2
 8001324:	430c      	orrs	r4, r1
 8001326:	4a74      	ldr	r2, [pc, #464]	; (80014f8 <__aeabi_dmul+0x574>)
 8001328:	1aeb      	subs	r3, r5, r3
 800132a:	4694      	mov	ip, r2
 800132c:	4642      	mov	r2, r8
 800132e:	4463      	add	r3, ip
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	9b01      	ldr	r3, [sp, #4]
 8001334:	407a      	eors	r2, r7
 8001336:	3301      	adds	r3, #1
 8001338:	2100      	movs	r1, #0
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2e0a      	cmp	r6, #10
 8001340:	dd00      	ble.n	8001344 <__aeabi_dmul+0x3c0>
 8001342:	e667      	b.n	8001014 <__aeabi_dmul+0x90>
 8001344:	e683      	b.n	800104e <__aeabi_dmul+0xca>
 8001346:	465b      	mov	r3, fp
 8001348:	4303      	orrs	r3, r0
 800134a:	469a      	mov	sl, r3
 800134c:	d02a      	beq.n	80013a4 <__aeabi_dmul+0x420>
 800134e:	465b      	mov	r3, fp
 8001350:	2b00      	cmp	r3, #0
 8001352:	d06d      	beq.n	8001430 <__aeabi_dmul+0x4ac>
 8001354:	4658      	mov	r0, fp
 8001356:	f000 fd15 	bl	8001d84 <__clzsi2>
 800135a:	0001      	movs	r1, r0
 800135c:	0003      	movs	r3, r0
 800135e:	390b      	subs	r1, #11
 8001360:	221d      	movs	r2, #29
 8001362:	1a52      	subs	r2, r2, r1
 8001364:	0021      	movs	r1, r4
 8001366:	0018      	movs	r0, r3
 8001368:	465d      	mov	r5, fp
 800136a:	40d1      	lsrs	r1, r2
 800136c:	3808      	subs	r0, #8
 800136e:	4085      	lsls	r5, r0
 8001370:	000a      	movs	r2, r1
 8001372:	4084      	lsls	r4, r0
 8001374:	432a      	orrs	r2, r5
 8001376:	4693      	mov	fp, r2
 8001378:	46a2      	mov	sl, r4
 800137a:	4d5f      	ldr	r5, [pc, #380]	; (80014f8 <__aeabi_dmul+0x574>)
 800137c:	2600      	movs	r6, #0
 800137e:	1aed      	subs	r5, r5, r3
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	e625      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 8001386:	465b      	mov	r3, fp
 8001388:	4303      	orrs	r3, r0
 800138a:	469a      	mov	sl, r3
 800138c:	d105      	bne.n	800139a <__aeabi_dmul+0x416>
 800138e:	2300      	movs	r3, #0
 8001390:	469b      	mov	fp, r3
 8001392:	3302      	adds	r3, #2
 8001394:	2608      	movs	r6, #8
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	e61b      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 800139a:	2303      	movs	r3, #3
 800139c:	4682      	mov	sl, r0
 800139e:	260c      	movs	r6, #12
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	e616      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 80013a4:	2300      	movs	r3, #0
 80013a6:	469b      	mov	fp, r3
 80013a8:	3301      	adds	r3, #1
 80013aa:	2604      	movs	r6, #4
 80013ac:	2500      	movs	r5, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	e60f      	b.n	8000fd2 <__aeabi_dmul+0x4e>
 80013b2:	4642      	mov	r2, r8
 80013b4:	3301      	adds	r3, #1
 80013b6:	9501      	str	r5, [sp, #4]
 80013b8:	431e      	orrs	r6, r3
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	407a      	eors	r2, r7
 80013be:	3301      	adds	r3, #1
 80013c0:	2400      	movs	r4, #0
 80013c2:	2000      	movs	r0, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2e0a      	cmp	r6, #10
 80013cc:	dd00      	ble.n	80013d0 <__aeabi_dmul+0x44c>
 80013ce:	e621      	b.n	8001014 <__aeabi_dmul+0x90>
 80013d0:	e63d      	b.n	800104e <__aeabi_dmul+0xca>
 80013d2:	2101      	movs	r1, #1
 80013d4:	1ac9      	subs	r1, r1, r3
 80013d6:	2938      	cmp	r1, #56	; 0x38
 80013d8:	dd00      	ble.n	80013dc <__aeabi_dmul+0x458>
 80013da:	e642      	b.n	8001062 <__aeabi_dmul+0xde>
 80013dc:	291f      	cmp	r1, #31
 80013de:	dd47      	ble.n	8001470 <__aeabi_dmul+0x4ec>
 80013e0:	261f      	movs	r6, #31
 80013e2:	0025      	movs	r5, r4
 80013e4:	4276      	negs	r6, r6
 80013e6:	1af3      	subs	r3, r6, r3
 80013e8:	40dd      	lsrs	r5, r3
 80013ea:	002b      	movs	r3, r5
 80013ec:	2920      	cmp	r1, #32
 80013ee:	d005      	beq.n	80013fc <__aeabi_dmul+0x478>
 80013f0:	4942      	ldr	r1, [pc, #264]	; (80014fc <__aeabi_dmul+0x578>)
 80013f2:	9d02      	ldr	r5, [sp, #8]
 80013f4:	468c      	mov	ip, r1
 80013f6:	4465      	add	r5, ip
 80013f8:	40ac      	lsls	r4, r5
 80013fa:	4320      	orrs	r0, r4
 80013fc:	1e41      	subs	r1, r0, #1
 80013fe:	4188      	sbcs	r0, r1
 8001400:	4318      	orrs	r0, r3
 8001402:	2307      	movs	r3, #7
 8001404:	001d      	movs	r5, r3
 8001406:	2400      	movs	r4, #0
 8001408:	4005      	ands	r5, r0
 800140a:	4203      	tst	r3, r0
 800140c:	d04a      	beq.n	80014a4 <__aeabi_dmul+0x520>
 800140e:	230f      	movs	r3, #15
 8001410:	2400      	movs	r4, #0
 8001412:	4003      	ands	r3, r0
 8001414:	2b04      	cmp	r3, #4
 8001416:	d042      	beq.n	800149e <__aeabi_dmul+0x51a>
 8001418:	1d03      	adds	r3, r0, #4
 800141a:	4283      	cmp	r3, r0
 800141c:	4180      	sbcs	r0, r0
 800141e:	4240      	negs	r0, r0
 8001420:	1824      	adds	r4, r4, r0
 8001422:	0018      	movs	r0, r3
 8001424:	0223      	lsls	r3, r4, #8
 8001426:	d53a      	bpl.n	800149e <__aeabi_dmul+0x51a>
 8001428:	2301      	movs	r3, #1
 800142a:	2400      	movs	r4, #0
 800142c:	2500      	movs	r5, #0
 800142e:	e61b      	b.n	8001068 <__aeabi_dmul+0xe4>
 8001430:	f000 fca8 	bl	8001d84 <__clzsi2>
 8001434:	0001      	movs	r1, r0
 8001436:	0003      	movs	r3, r0
 8001438:	3115      	adds	r1, #21
 800143a:	3320      	adds	r3, #32
 800143c:	291c      	cmp	r1, #28
 800143e:	dd8f      	ble.n	8001360 <__aeabi_dmul+0x3dc>
 8001440:	3808      	subs	r0, #8
 8001442:	2200      	movs	r2, #0
 8001444:	4084      	lsls	r4, r0
 8001446:	4692      	mov	sl, r2
 8001448:	46a3      	mov	fp, r4
 800144a:	e796      	b.n	800137a <__aeabi_dmul+0x3f6>
 800144c:	f000 fc9a 	bl	8001d84 <__clzsi2>
 8001450:	0001      	movs	r1, r0
 8001452:	0003      	movs	r3, r0
 8001454:	3115      	adds	r1, #21
 8001456:	3320      	adds	r3, #32
 8001458:	291c      	cmp	r1, #28
 800145a:	dc00      	bgt.n	800145e <__aeabi_dmul+0x4da>
 800145c:	e758      	b.n	8001310 <__aeabi_dmul+0x38c>
 800145e:	0002      	movs	r2, r0
 8001460:	464c      	mov	r4, r9
 8001462:	3a08      	subs	r2, #8
 8001464:	2000      	movs	r0, #0
 8001466:	4094      	lsls	r4, r2
 8001468:	e75d      	b.n	8001326 <__aeabi_dmul+0x3a2>
 800146a:	9b01      	ldr	r3, [sp, #4]
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	e711      	b.n	8001294 <__aeabi_dmul+0x310>
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <__aeabi_dmul+0x57c>)
 8001472:	0026      	movs	r6, r4
 8001474:	469c      	mov	ip, r3
 8001476:	0003      	movs	r3, r0
 8001478:	9d02      	ldr	r5, [sp, #8]
 800147a:	40cb      	lsrs	r3, r1
 800147c:	4465      	add	r5, ip
 800147e:	40ae      	lsls	r6, r5
 8001480:	431e      	orrs	r6, r3
 8001482:	0003      	movs	r3, r0
 8001484:	40ab      	lsls	r3, r5
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	4183      	sbcs	r3, r0
 800148a:	0030      	movs	r0, r6
 800148c:	4318      	orrs	r0, r3
 800148e:	40cc      	lsrs	r4, r1
 8001490:	0743      	lsls	r3, r0, #29
 8001492:	d0c7      	beq.n	8001424 <__aeabi_dmul+0x4a0>
 8001494:	230f      	movs	r3, #15
 8001496:	4003      	ands	r3, r0
 8001498:	2b04      	cmp	r3, #4
 800149a:	d1bd      	bne.n	8001418 <__aeabi_dmul+0x494>
 800149c:	e7c2      	b.n	8001424 <__aeabi_dmul+0x4a0>
 800149e:	0765      	lsls	r5, r4, #29
 80014a0:	0264      	lsls	r4, r4, #9
 80014a2:	0b24      	lsrs	r4, r4, #12
 80014a4:	08c0      	lsrs	r0, r0, #3
 80014a6:	2300      	movs	r3, #0
 80014a8:	4305      	orrs	r5, r0
 80014aa:	e5dd      	b.n	8001068 <__aeabi_dmul+0xe4>
 80014ac:	2500      	movs	r5, #0
 80014ae:	2302      	movs	r3, #2
 80014b0:	2e0f      	cmp	r6, #15
 80014b2:	d10c      	bne.n	80014ce <__aeabi_dmul+0x54a>
 80014b4:	2480      	movs	r4, #128	; 0x80
 80014b6:	465b      	mov	r3, fp
 80014b8:	0324      	lsls	r4, r4, #12
 80014ba:	4223      	tst	r3, r4
 80014bc:	d00e      	beq.n	80014dc <__aeabi_dmul+0x558>
 80014be:	4221      	tst	r1, r4
 80014c0:	d10c      	bne.n	80014dc <__aeabi_dmul+0x558>
 80014c2:	430c      	orrs	r4, r1
 80014c4:	0324      	lsls	r4, r4, #12
 80014c6:	003a      	movs	r2, r7
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <__aeabi_dmul+0x580>)
 80014ca:	0b24      	lsrs	r4, r4, #12
 80014cc:	e5cc      	b.n	8001068 <__aeabi_dmul+0xe4>
 80014ce:	2e0b      	cmp	r6, #11
 80014d0:	d000      	beq.n	80014d4 <__aeabi_dmul+0x550>
 80014d2:	e5a2      	b.n	800101a <__aeabi_dmul+0x96>
 80014d4:	468b      	mov	fp, r1
 80014d6:	46aa      	mov	sl, r5
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	e5f7      	b.n	80010cc <__aeabi_dmul+0x148>
 80014dc:	2480      	movs	r4, #128	; 0x80
 80014de:	465b      	mov	r3, fp
 80014e0:	0324      	lsls	r4, r4, #12
 80014e2:	431c      	orrs	r4, r3
 80014e4:	0324      	lsls	r4, r4, #12
 80014e6:	4642      	mov	r2, r8
 80014e8:	4655      	mov	r5, sl
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <__aeabi_dmul+0x580>)
 80014ec:	0b24      	lsrs	r4, r4, #12
 80014ee:	e5bb      	b.n	8001068 <__aeabi_dmul+0xe4>
 80014f0:	464d      	mov	r5, r9
 80014f2:	0021      	movs	r1, r4
 80014f4:	2303      	movs	r3, #3
 80014f6:	e7db      	b.n	80014b0 <__aeabi_dmul+0x52c>
 80014f8:	fffffc0d 	.word	0xfffffc0d
 80014fc:	0000043e 	.word	0x0000043e
 8001500:	0000041e 	.word	0x0000041e
 8001504:	000007ff 	.word	0x000007ff

08001508 <__aeabi_dsub>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	4657      	mov	r7, sl
 800150c:	464e      	mov	r6, r9
 800150e:	4645      	mov	r5, r8
 8001510:	46de      	mov	lr, fp
 8001512:	b5e0      	push	{r5, r6, r7, lr}
 8001514:	000d      	movs	r5, r1
 8001516:	0004      	movs	r4, r0
 8001518:	0019      	movs	r1, r3
 800151a:	0010      	movs	r0, r2
 800151c:	032b      	lsls	r3, r5, #12
 800151e:	0a5b      	lsrs	r3, r3, #9
 8001520:	0f62      	lsrs	r2, r4, #29
 8001522:	431a      	orrs	r2, r3
 8001524:	00e3      	lsls	r3, r4, #3
 8001526:	030c      	lsls	r4, r1, #12
 8001528:	0a64      	lsrs	r4, r4, #9
 800152a:	0f47      	lsrs	r7, r0, #29
 800152c:	4327      	orrs	r7, r4
 800152e:	4cd0      	ldr	r4, [pc, #832]	; (8001870 <__aeabi_dsub+0x368>)
 8001530:	006e      	lsls	r6, r5, #1
 8001532:	4691      	mov	r9, r2
 8001534:	b083      	sub	sp, #12
 8001536:	004a      	lsls	r2, r1, #1
 8001538:	00c0      	lsls	r0, r0, #3
 800153a:	4698      	mov	r8, r3
 800153c:	46a2      	mov	sl, r4
 800153e:	0d76      	lsrs	r6, r6, #21
 8001540:	0fed      	lsrs	r5, r5, #31
 8001542:	0d52      	lsrs	r2, r2, #21
 8001544:	0fc9      	lsrs	r1, r1, #31
 8001546:	9001      	str	r0, [sp, #4]
 8001548:	42a2      	cmp	r2, r4
 800154a:	d100      	bne.n	800154e <__aeabi_dsub+0x46>
 800154c:	e0b9      	b.n	80016c2 <__aeabi_dsub+0x1ba>
 800154e:	2401      	movs	r4, #1
 8001550:	4061      	eors	r1, r4
 8001552:	468b      	mov	fp, r1
 8001554:	428d      	cmp	r5, r1
 8001556:	d100      	bne.n	800155a <__aeabi_dsub+0x52>
 8001558:	e08d      	b.n	8001676 <__aeabi_dsub+0x16e>
 800155a:	1ab4      	subs	r4, r6, r2
 800155c:	46a4      	mov	ip, r4
 800155e:	2c00      	cmp	r4, #0
 8001560:	dc00      	bgt.n	8001564 <__aeabi_dsub+0x5c>
 8001562:	e0b7      	b.n	80016d4 <__aeabi_dsub+0x1cc>
 8001564:	2a00      	cmp	r2, #0
 8001566:	d100      	bne.n	800156a <__aeabi_dsub+0x62>
 8001568:	e0cb      	b.n	8001702 <__aeabi_dsub+0x1fa>
 800156a:	4ac1      	ldr	r2, [pc, #772]	; (8001870 <__aeabi_dsub+0x368>)
 800156c:	4296      	cmp	r6, r2
 800156e:	d100      	bne.n	8001572 <__aeabi_dsub+0x6a>
 8001570:	e186      	b.n	8001880 <__aeabi_dsub+0x378>
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	0412      	lsls	r2, r2, #16
 8001576:	4317      	orrs	r7, r2
 8001578:	4662      	mov	r2, ip
 800157a:	2a38      	cmp	r2, #56	; 0x38
 800157c:	dd00      	ble.n	8001580 <__aeabi_dsub+0x78>
 800157e:	e1a4      	b.n	80018ca <__aeabi_dsub+0x3c2>
 8001580:	2a1f      	cmp	r2, #31
 8001582:	dd00      	ble.n	8001586 <__aeabi_dsub+0x7e>
 8001584:	e21d      	b.n	80019c2 <__aeabi_dsub+0x4ba>
 8001586:	4661      	mov	r1, ip
 8001588:	2220      	movs	r2, #32
 800158a:	003c      	movs	r4, r7
 800158c:	1a52      	subs	r2, r2, r1
 800158e:	0001      	movs	r1, r0
 8001590:	4090      	lsls	r0, r2
 8001592:	4094      	lsls	r4, r2
 8001594:	1e42      	subs	r2, r0, #1
 8001596:	4190      	sbcs	r0, r2
 8001598:	4662      	mov	r2, ip
 800159a:	46a0      	mov	r8, r4
 800159c:	4664      	mov	r4, ip
 800159e:	40d7      	lsrs	r7, r2
 80015a0:	464a      	mov	r2, r9
 80015a2:	40e1      	lsrs	r1, r4
 80015a4:	4644      	mov	r4, r8
 80015a6:	1bd2      	subs	r2, r2, r7
 80015a8:	4691      	mov	r9, r2
 80015aa:	430c      	orrs	r4, r1
 80015ac:	4304      	orrs	r4, r0
 80015ae:	1b1c      	subs	r4, r3, r4
 80015b0:	42a3      	cmp	r3, r4
 80015b2:	4192      	sbcs	r2, r2
 80015b4:	464b      	mov	r3, r9
 80015b6:	4252      	negs	r2, r2
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	469a      	mov	sl, r3
 80015bc:	4653      	mov	r3, sl
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	d400      	bmi.n	80015c4 <__aeabi_dsub+0xbc>
 80015c2:	e12b      	b.n	800181c <__aeabi_dsub+0x314>
 80015c4:	4653      	mov	r3, sl
 80015c6:	025a      	lsls	r2, r3, #9
 80015c8:	0a53      	lsrs	r3, r2, #9
 80015ca:	469a      	mov	sl, r3
 80015cc:	4653      	mov	r3, sl
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d100      	bne.n	80015d4 <__aeabi_dsub+0xcc>
 80015d2:	e166      	b.n	80018a2 <__aeabi_dsub+0x39a>
 80015d4:	4650      	mov	r0, sl
 80015d6:	f000 fbd5 	bl	8001d84 <__clzsi2>
 80015da:	0003      	movs	r3, r0
 80015dc:	3b08      	subs	r3, #8
 80015de:	2220      	movs	r2, #32
 80015e0:	0020      	movs	r0, r4
 80015e2:	1ad2      	subs	r2, r2, r3
 80015e4:	4651      	mov	r1, sl
 80015e6:	40d0      	lsrs	r0, r2
 80015e8:	4099      	lsls	r1, r3
 80015ea:	0002      	movs	r2, r0
 80015ec:	409c      	lsls	r4, r3
 80015ee:	430a      	orrs	r2, r1
 80015f0:	429e      	cmp	r6, r3
 80015f2:	dd00      	ble.n	80015f6 <__aeabi_dsub+0xee>
 80015f4:	e164      	b.n	80018c0 <__aeabi_dsub+0x3b8>
 80015f6:	1b9b      	subs	r3, r3, r6
 80015f8:	1c59      	adds	r1, r3, #1
 80015fa:	291f      	cmp	r1, #31
 80015fc:	dd00      	ble.n	8001600 <__aeabi_dsub+0xf8>
 80015fe:	e0fe      	b.n	80017fe <__aeabi_dsub+0x2f6>
 8001600:	2320      	movs	r3, #32
 8001602:	0010      	movs	r0, r2
 8001604:	0026      	movs	r6, r4
 8001606:	1a5b      	subs	r3, r3, r1
 8001608:	409c      	lsls	r4, r3
 800160a:	4098      	lsls	r0, r3
 800160c:	40ce      	lsrs	r6, r1
 800160e:	40ca      	lsrs	r2, r1
 8001610:	1e63      	subs	r3, r4, #1
 8001612:	419c      	sbcs	r4, r3
 8001614:	4330      	orrs	r0, r6
 8001616:	4692      	mov	sl, r2
 8001618:	2600      	movs	r6, #0
 800161a:	4304      	orrs	r4, r0
 800161c:	0763      	lsls	r3, r4, #29
 800161e:	d009      	beq.n	8001634 <__aeabi_dsub+0x12c>
 8001620:	230f      	movs	r3, #15
 8001622:	4023      	ands	r3, r4
 8001624:	2b04      	cmp	r3, #4
 8001626:	d005      	beq.n	8001634 <__aeabi_dsub+0x12c>
 8001628:	1d23      	adds	r3, r4, #4
 800162a:	42a3      	cmp	r3, r4
 800162c:	41a4      	sbcs	r4, r4
 800162e:	4264      	negs	r4, r4
 8001630:	44a2      	add	sl, r4
 8001632:	001c      	movs	r4, r3
 8001634:	4653      	mov	r3, sl
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	d400      	bmi.n	800163c <__aeabi_dsub+0x134>
 800163a:	e0f2      	b.n	8001822 <__aeabi_dsub+0x31a>
 800163c:	4b8c      	ldr	r3, [pc, #560]	; (8001870 <__aeabi_dsub+0x368>)
 800163e:	3601      	adds	r6, #1
 8001640:	429e      	cmp	r6, r3
 8001642:	d100      	bne.n	8001646 <__aeabi_dsub+0x13e>
 8001644:	e10f      	b.n	8001866 <__aeabi_dsub+0x35e>
 8001646:	4653      	mov	r3, sl
 8001648:	498a      	ldr	r1, [pc, #552]	; (8001874 <__aeabi_dsub+0x36c>)
 800164a:	08e4      	lsrs	r4, r4, #3
 800164c:	400b      	ands	r3, r1
 800164e:	0019      	movs	r1, r3
 8001650:	075b      	lsls	r3, r3, #29
 8001652:	4323      	orrs	r3, r4
 8001654:	0572      	lsls	r2, r6, #21
 8001656:	024c      	lsls	r4, r1, #9
 8001658:	0b24      	lsrs	r4, r4, #12
 800165a:	0d52      	lsrs	r2, r2, #21
 800165c:	0512      	lsls	r2, r2, #20
 800165e:	4322      	orrs	r2, r4
 8001660:	07ed      	lsls	r5, r5, #31
 8001662:	432a      	orrs	r2, r5
 8001664:	0018      	movs	r0, r3
 8001666:	0011      	movs	r1, r2
 8001668:	b003      	add	sp, #12
 800166a:	bcf0      	pop	{r4, r5, r6, r7}
 800166c:	46bb      	mov	fp, r7
 800166e:	46b2      	mov	sl, r6
 8001670:	46a9      	mov	r9, r5
 8001672:	46a0      	mov	r8, r4
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	1ab4      	subs	r4, r6, r2
 8001678:	46a4      	mov	ip, r4
 800167a:	2c00      	cmp	r4, #0
 800167c:	dd59      	ble.n	8001732 <__aeabi_dsub+0x22a>
 800167e:	2a00      	cmp	r2, #0
 8001680:	d100      	bne.n	8001684 <__aeabi_dsub+0x17c>
 8001682:	e0b0      	b.n	80017e6 <__aeabi_dsub+0x2de>
 8001684:	4556      	cmp	r6, sl
 8001686:	d100      	bne.n	800168a <__aeabi_dsub+0x182>
 8001688:	e0fa      	b.n	8001880 <__aeabi_dsub+0x378>
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	0412      	lsls	r2, r2, #16
 800168e:	4317      	orrs	r7, r2
 8001690:	4662      	mov	r2, ip
 8001692:	2a38      	cmp	r2, #56	; 0x38
 8001694:	dd00      	ble.n	8001698 <__aeabi_dsub+0x190>
 8001696:	e0d4      	b.n	8001842 <__aeabi_dsub+0x33a>
 8001698:	2a1f      	cmp	r2, #31
 800169a:	dc00      	bgt.n	800169e <__aeabi_dsub+0x196>
 800169c:	e1c0      	b.n	8001a20 <__aeabi_dsub+0x518>
 800169e:	0039      	movs	r1, r7
 80016a0:	3a20      	subs	r2, #32
 80016a2:	40d1      	lsrs	r1, r2
 80016a4:	4662      	mov	r2, ip
 80016a6:	2a20      	cmp	r2, #32
 80016a8:	d006      	beq.n	80016b8 <__aeabi_dsub+0x1b0>
 80016aa:	4664      	mov	r4, ip
 80016ac:	2240      	movs	r2, #64	; 0x40
 80016ae:	1b12      	subs	r2, r2, r4
 80016b0:	003c      	movs	r4, r7
 80016b2:	4094      	lsls	r4, r2
 80016b4:	4304      	orrs	r4, r0
 80016b6:	9401      	str	r4, [sp, #4]
 80016b8:	9c01      	ldr	r4, [sp, #4]
 80016ba:	1e62      	subs	r2, r4, #1
 80016bc:	4194      	sbcs	r4, r2
 80016be:	430c      	orrs	r4, r1
 80016c0:	e0c3      	b.n	800184a <__aeabi_dsub+0x342>
 80016c2:	003c      	movs	r4, r7
 80016c4:	4304      	orrs	r4, r0
 80016c6:	d02b      	beq.n	8001720 <__aeabi_dsub+0x218>
 80016c8:	468b      	mov	fp, r1
 80016ca:	428d      	cmp	r5, r1
 80016cc:	d02e      	beq.n	800172c <__aeabi_dsub+0x224>
 80016ce:	4c6a      	ldr	r4, [pc, #424]	; (8001878 <__aeabi_dsub+0x370>)
 80016d0:	46a4      	mov	ip, r4
 80016d2:	44b4      	add	ip, r6
 80016d4:	4664      	mov	r4, ip
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d05f      	beq.n	800179a <__aeabi_dsub+0x292>
 80016da:	1b94      	subs	r4, r2, r6
 80016dc:	46a4      	mov	ip, r4
 80016de:	2e00      	cmp	r6, #0
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dsub+0x1dc>
 80016e2:	e120      	b.n	8001926 <__aeabi_dsub+0x41e>
 80016e4:	464c      	mov	r4, r9
 80016e6:	431c      	orrs	r4, r3
 80016e8:	d100      	bne.n	80016ec <__aeabi_dsub+0x1e4>
 80016ea:	e1c7      	b.n	8001a7c <__aeabi_dsub+0x574>
 80016ec:	4661      	mov	r1, ip
 80016ee:	1e4c      	subs	r4, r1, #1
 80016f0:	2901      	cmp	r1, #1
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dsub+0x1ee>
 80016f4:	e223      	b.n	8001b3e <__aeabi_dsub+0x636>
 80016f6:	4d5e      	ldr	r5, [pc, #376]	; (8001870 <__aeabi_dsub+0x368>)
 80016f8:	45ac      	cmp	ip, r5
 80016fa:	d100      	bne.n	80016fe <__aeabi_dsub+0x1f6>
 80016fc:	e1d8      	b.n	8001ab0 <__aeabi_dsub+0x5a8>
 80016fe:	46a4      	mov	ip, r4
 8001700:	e11a      	b.n	8001938 <__aeabi_dsub+0x430>
 8001702:	003a      	movs	r2, r7
 8001704:	4302      	orrs	r2, r0
 8001706:	d100      	bne.n	800170a <__aeabi_dsub+0x202>
 8001708:	e0e4      	b.n	80018d4 <__aeabi_dsub+0x3cc>
 800170a:	0022      	movs	r2, r4
 800170c:	3a01      	subs	r2, #1
 800170e:	2c01      	cmp	r4, #1
 8001710:	d100      	bne.n	8001714 <__aeabi_dsub+0x20c>
 8001712:	e1c3      	b.n	8001a9c <__aeabi_dsub+0x594>
 8001714:	4956      	ldr	r1, [pc, #344]	; (8001870 <__aeabi_dsub+0x368>)
 8001716:	428c      	cmp	r4, r1
 8001718:	d100      	bne.n	800171c <__aeabi_dsub+0x214>
 800171a:	e0b1      	b.n	8001880 <__aeabi_dsub+0x378>
 800171c:	4694      	mov	ip, r2
 800171e:	e72b      	b.n	8001578 <__aeabi_dsub+0x70>
 8001720:	2401      	movs	r4, #1
 8001722:	4061      	eors	r1, r4
 8001724:	468b      	mov	fp, r1
 8001726:	428d      	cmp	r5, r1
 8001728:	d000      	beq.n	800172c <__aeabi_dsub+0x224>
 800172a:	e716      	b.n	800155a <__aeabi_dsub+0x52>
 800172c:	4952      	ldr	r1, [pc, #328]	; (8001878 <__aeabi_dsub+0x370>)
 800172e:	468c      	mov	ip, r1
 8001730:	44b4      	add	ip, r6
 8001732:	4664      	mov	r4, ip
 8001734:	2c00      	cmp	r4, #0
 8001736:	d100      	bne.n	800173a <__aeabi_dsub+0x232>
 8001738:	e0d3      	b.n	80018e2 <__aeabi_dsub+0x3da>
 800173a:	1b91      	subs	r1, r2, r6
 800173c:	468c      	mov	ip, r1
 800173e:	2e00      	cmp	r6, #0
 8001740:	d100      	bne.n	8001744 <__aeabi_dsub+0x23c>
 8001742:	e15e      	b.n	8001a02 <__aeabi_dsub+0x4fa>
 8001744:	494a      	ldr	r1, [pc, #296]	; (8001870 <__aeabi_dsub+0x368>)
 8001746:	428a      	cmp	r2, r1
 8001748:	d100      	bne.n	800174c <__aeabi_dsub+0x244>
 800174a:	e1be      	b.n	8001aca <__aeabi_dsub+0x5c2>
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	464c      	mov	r4, r9
 8001750:	0409      	lsls	r1, r1, #16
 8001752:	430c      	orrs	r4, r1
 8001754:	46a1      	mov	r9, r4
 8001756:	4661      	mov	r1, ip
 8001758:	2938      	cmp	r1, #56	; 0x38
 800175a:	dd00      	ble.n	800175e <__aeabi_dsub+0x256>
 800175c:	e1ba      	b.n	8001ad4 <__aeabi_dsub+0x5cc>
 800175e:	291f      	cmp	r1, #31
 8001760:	dd00      	ble.n	8001764 <__aeabi_dsub+0x25c>
 8001762:	e227      	b.n	8001bb4 <__aeabi_dsub+0x6ac>
 8001764:	2420      	movs	r4, #32
 8001766:	1a64      	subs	r4, r4, r1
 8001768:	4649      	mov	r1, r9
 800176a:	40a1      	lsls	r1, r4
 800176c:	001e      	movs	r6, r3
 800176e:	4688      	mov	r8, r1
 8001770:	4661      	mov	r1, ip
 8001772:	40a3      	lsls	r3, r4
 8001774:	40ce      	lsrs	r6, r1
 8001776:	4641      	mov	r1, r8
 8001778:	1e5c      	subs	r4, r3, #1
 800177a:	41a3      	sbcs	r3, r4
 800177c:	4331      	orrs	r1, r6
 800177e:	4319      	orrs	r1, r3
 8001780:	000c      	movs	r4, r1
 8001782:	4663      	mov	r3, ip
 8001784:	4649      	mov	r1, r9
 8001786:	40d9      	lsrs	r1, r3
 8001788:	187f      	adds	r7, r7, r1
 800178a:	1824      	adds	r4, r4, r0
 800178c:	4284      	cmp	r4, r0
 800178e:	419b      	sbcs	r3, r3
 8001790:	425b      	negs	r3, r3
 8001792:	469a      	mov	sl, r3
 8001794:	0016      	movs	r6, r2
 8001796:	44ba      	add	sl, r7
 8001798:	e05d      	b.n	8001856 <__aeabi_dsub+0x34e>
 800179a:	4c38      	ldr	r4, [pc, #224]	; (800187c <__aeabi_dsub+0x374>)
 800179c:	1c72      	adds	r2, r6, #1
 800179e:	4222      	tst	r2, r4
 80017a0:	d000      	beq.n	80017a4 <__aeabi_dsub+0x29c>
 80017a2:	e0df      	b.n	8001964 <__aeabi_dsub+0x45c>
 80017a4:	464a      	mov	r2, r9
 80017a6:	431a      	orrs	r2, r3
 80017a8:	2e00      	cmp	r6, #0
 80017aa:	d000      	beq.n	80017ae <__aeabi_dsub+0x2a6>
 80017ac:	e15c      	b.n	8001a68 <__aeabi_dsub+0x560>
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dsub+0x2ac>
 80017b2:	e1cf      	b.n	8001b54 <__aeabi_dsub+0x64c>
 80017b4:	003a      	movs	r2, r7
 80017b6:	4302      	orrs	r2, r0
 80017b8:	d100      	bne.n	80017bc <__aeabi_dsub+0x2b4>
 80017ba:	e17f      	b.n	8001abc <__aeabi_dsub+0x5b4>
 80017bc:	1a1c      	subs	r4, r3, r0
 80017be:	464a      	mov	r2, r9
 80017c0:	42a3      	cmp	r3, r4
 80017c2:	4189      	sbcs	r1, r1
 80017c4:	1bd2      	subs	r2, r2, r7
 80017c6:	4249      	negs	r1, r1
 80017c8:	1a52      	subs	r2, r2, r1
 80017ca:	4692      	mov	sl, r2
 80017cc:	0212      	lsls	r2, r2, #8
 80017ce:	d400      	bmi.n	80017d2 <__aeabi_dsub+0x2ca>
 80017d0:	e20a      	b.n	8001be8 <__aeabi_dsub+0x6e0>
 80017d2:	1ac4      	subs	r4, r0, r3
 80017d4:	42a0      	cmp	r0, r4
 80017d6:	4180      	sbcs	r0, r0
 80017d8:	464b      	mov	r3, r9
 80017da:	4240      	negs	r0, r0
 80017dc:	1aff      	subs	r7, r7, r3
 80017de:	1a3b      	subs	r3, r7, r0
 80017e0:	469a      	mov	sl, r3
 80017e2:	465d      	mov	r5, fp
 80017e4:	e71a      	b.n	800161c <__aeabi_dsub+0x114>
 80017e6:	003a      	movs	r2, r7
 80017e8:	4302      	orrs	r2, r0
 80017ea:	d073      	beq.n	80018d4 <__aeabi_dsub+0x3cc>
 80017ec:	0022      	movs	r2, r4
 80017ee:	3a01      	subs	r2, #1
 80017f0:	2c01      	cmp	r4, #1
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dsub+0x2ee>
 80017f4:	e0cb      	b.n	800198e <__aeabi_dsub+0x486>
 80017f6:	4554      	cmp	r4, sl
 80017f8:	d042      	beq.n	8001880 <__aeabi_dsub+0x378>
 80017fa:	4694      	mov	ip, r2
 80017fc:	e748      	b.n	8001690 <__aeabi_dsub+0x188>
 80017fe:	0010      	movs	r0, r2
 8001800:	3b1f      	subs	r3, #31
 8001802:	40d8      	lsrs	r0, r3
 8001804:	2920      	cmp	r1, #32
 8001806:	d003      	beq.n	8001810 <__aeabi_dsub+0x308>
 8001808:	2340      	movs	r3, #64	; 0x40
 800180a:	1a5b      	subs	r3, r3, r1
 800180c:	409a      	lsls	r2, r3
 800180e:	4314      	orrs	r4, r2
 8001810:	1e63      	subs	r3, r4, #1
 8001812:	419c      	sbcs	r4, r3
 8001814:	2300      	movs	r3, #0
 8001816:	2600      	movs	r6, #0
 8001818:	469a      	mov	sl, r3
 800181a:	4304      	orrs	r4, r0
 800181c:	0763      	lsls	r3, r4, #29
 800181e:	d000      	beq.n	8001822 <__aeabi_dsub+0x31a>
 8001820:	e6fe      	b.n	8001620 <__aeabi_dsub+0x118>
 8001822:	4652      	mov	r2, sl
 8001824:	08e3      	lsrs	r3, r4, #3
 8001826:	0752      	lsls	r2, r2, #29
 8001828:	4313      	orrs	r3, r2
 800182a:	4652      	mov	r2, sl
 800182c:	46b4      	mov	ip, r6
 800182e:	08d2      	lsrs	r2, r2, #3
 8001830:	490f      	ldr	r1, [pc, #60]	; (8001870 <__aeabi_dsub+0x368>)
 8001832:	458c      	cmp	ip, r1
 8001834:	d02a      	beq.n	800188c <__aeabi_dsub+0x384>
 8001836:	0312      	lsls	r2, r2, #12
 8001838:	0b14      	lsrs	r4, r2, #12
 800183a:	4662      	mov	r2, ip
 800183c:	0552      	lsls	r2, r2, #21
 800183e:	0d52      	lsrs	r2, r2, #21
 8001840:	e70c      	b.n	800165c <__aeabi_dsub+0x154>
 8001842:	003c      	movs	r4, r7
 8001844:	4304      	orrs	r4, r0
 8001846:	1e62      	subs	r2, r4, #1
 8001848:	4194      	sbcs	r4, r2
 800184a:	18e4      	adds	r4, r4, r3
 800184c:	429c      	cmp	r4, r3
 800184e:	4192      	sbcs	r2, r2
 8001850:	4252      	negs	r2, r2
 8001852:	444a      	add	r2, r9
 8001854:	4692      	mov	sl, r2
 8001856:	4653      	mov	r3, sl
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	d5df      	bpl.n	800181c <__aeabi_dsub+0x314>
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <__aeabi_dsub+0x368>)
 800185e:	3601      	adds	r6, #1
 8001860:	429e      	cmp	r6, r3
 8001862:	d000      	beq.n	8001866 <__aeabi_dsub+0x35e>
 8001864:	e0a0      	b.n	80019a8 <__aeabi_dsub+0x4a0>
 8001866:	0032      	movs	r2, r6
 8001868:	2400      	movs	r4, #0
 800186a:	2300      	movs	r3, #0
 800186c:	e6f6      	b.n	800165c <__aeabi_dsub+0x154>
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	000007ff 	.word	0x000007ff
 8001874:	ff7fffff 	.word	0xff7fffff
 8001878:	fffff801 	.word	0xfffff801
 800187c:	000007fe 	.word	0x000007fe
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	464a      	mov	r2, r9
 8001884:	0752      	lsls	r2, r2, #29
 8001886:	4313      	orrs	r3, r2
 8001888:	464a      	mov	r2, r9
 800188a:	08d2      	lsrs	r2, r2, #3
 800188c:	0019      	movs	r1, r3
 800188e:	4311      	orrs	r1, r2
 8001890:	d100      	bne.n	8001894 <__aeabi_dsub+0x38c>
 8001892:	e1b5      	b.n	8001c00 <__aeabi_dsub+0x6f8>
 8001894:	2480      	movs	r4, #128	; 0x80
 8001896:	0324      	lsls	r4, r4, #12
 8001898:	4314      	orrs	r4, r2
 800189a:	0324      	lsls	r4, r4, #12
 800189c:	4ad5      	ldr	r2, [pc, #852]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 800189e:	0b24      	lsrs	r4, r4, #12
 80018a0:	e6dc      	b.n	800165c <__aeabi_dsub+0x154>
 80018a2:	0020      	movs	r0, r4
 80018a4:	f000 fa6e 	bl	8001d84 <__clzsi2>
 80018a8:	0003      	movs	r3, r0
 80018aa:	3318      	adds	r3, #24
 80018ac:	2b1f      	cmp	r3, #31
 80018ae:	dc00      	bgt.n	80018b2 <__aeabi_dsub+0x3aa>
 80018b0:	e695      	b.n	80015de <__aeabi_dsub+0xd6>
 80018b2:	0022      	movs	r2, r4
 80018b4:	3808      	subs	r0, #8
 80018b6:	4082      	lsls	r2, r0
 80018b8:	2400      	movs	r4, #0
 80018ba:	429e      	cmp	r6, r3
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dsub+0x3b8>
 80018be:	e69a      	b.n	80015f6 <__aeabi_dsub+0xee>
 80018c0:	1af6      	subs	r6, r6, r3
 80018c2:	4bcd      	ldr	r3, [pc, #820]	; (8001bf8 <__aeabi_dsub+0x6f0>)
 80018c4:	401a      	ands	r2, r3
 80018c6:	4692      	mov	sl, r2
 80018c8:	e6a8      	b.n	800161c <__aeabi_dsub+0x114>
 80018ca:	003c      	movs	r4, r7
 80018cc:	4304      	orrs	r4, r0
 80018ce:	1e62      	subs	r2, r4, #1
 80018d0:	4194      	sbcs	r4, r2
 80018d2:	e66c      	b.n	80015ae <__aeabi_dsub+0xa6>
 80018d4:	464a      	mov	r2, r9
 80018d6:	08db      	lsrs	r3, r3, #3
 80018d8:	0752      	lsls	r2, r2, #29
 80018da:	4313      	orrs	r3, r2
 80018dc:	464a      	mov	r2, r9
 80018de:	08d2      	lsrs	r2, r2, #3
 80018e0:	e7a6      	b.n	8001830 <__aeabi_dsub+0x328>
 80018e2:	4cc6      	ldr	r4, [pc, #792]	; (8001bfc <__aeabi_dsub+0x6f4>)
 80018e4:	1c72      	adds	r2, r6, #1
 80018e6:	4222      	tst	r2, r4
 80018e8:	d000      	beq.n	80018ec <__aeabi_dsub+0x3e4>
 80018ea:	e0ac      	b.n	8001a46 <__aeabi_dsub+0x53e>
 80018ec:	464a      	mov	r2, r9
 80018ee:	431a      	orrs	r2, r3
 80018f0:	2e00      	cmp	r6, #0
 80018f2:	d000      	beq.n	80018f6 <__aeabi_dsub+0x3ee>
 80018f4:	e105      	b.n	8001b02 <__aeabi_dsub+0x5fa>
 80018f6:	2a00      	cmp	r2, #0
 80018f8:	d100      	bne.n	80018fc <__aeabi_dsub+0x3f4>
 80018fa:	e156      	b.n	8001baa <__aeabi_dsub+0x6a2>
 80018fc:	003a      	movs	r2, r7
 80018fe:	4302      	orrs	r2, r0
 8001900:	d100      	bne.n	8001904 <__aeabi_dsub+0x3fc>
 8001902:	e0db      	b.n	8001abc <__aeabi_dsub+0x5b4>
 8001904:	181c      	adds	r4, r3, r0
 8001906:	429c      	cmp	r4, r3
 8001908:	419b      	sbcs	r3, r3
 800190a:	444f      	add	r7, r9
 800190c:	46ba      	mov	sl, r7
 800190e:	425b      	negs	r3, r3
 8001910:	449a      	add	sl, r3
 8001912:	4653      	mov	r3, sl
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	d400      	bmi.n	800191a <__aeabi_dsub+0x412>
 8001918:	e780      	b.n	800181c <__aeabi_dsub+0x314>
 800191a:	4652      	mov	r2, sl
 800191c:	4bb6      	ldr	r3, [pc, #728]	; (8001bf8 <__aeabi_dsub+0x6f0>)
 800191e:	2601      	movs	r6, #1
 8001920:	401a      	ands	r2, r3
 8001922:	4692      	mov	sl, r2
 8001924:	e77a      	b.n	800181c <__aeabi_dsub+0x314>
 8001926:	4cb3      	ldr	r4, [pc, #716]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 8001928:	42a2      	cmp	r2, r4
 800192a:	d100      	bne.n	800192e <__aeabi_dsub+0x426>
 800192c:	e0c0      	b.n	8001ab0 <__aeabi_dsub+0x5a8>
 800192e:	2480      	movs	r4, #128	; 0x80
 8001930:	464d      	mov	r5, r9
 8001932:	0424      	lsls	r4, r4, #16
 8001934:	4325      	orrs	r5, r4
 8001936:	46a9      	mov	r9, r5
 8001938:	4664      	mov	r4, ip
 800193a:	2c38      	cmp	r4, #56	; 0x38
 800193c:	dc53      	bgt.n	80019e6 <__aeabi_dsub+0x4de>
 800193e:	4661      	mov	r1, ip
 8001940:	2c1f      	cmp	r4, #31
 8001942:	dd00      	ble.n	8001946 <__aeabi_dsub+0x43e>
 8001944:	e0cd      	b.n	8001ae2 <__aeabi_dsub+0x5da>
 8001946:	2520      	movs	r5, #32
 8001948:	001e      	movs	r6, r3
 800194a:	1b2d      	subs	r5, r5, r4
 800194c:	464c      	mov	r4, r9
 800194e:	40ab      	lsls	r3, r5
 8001950:	40ac      	lsls	r4, r5
 8001952:	40ce      	lsrs	r6, r1
 8001954:	1e5d      	subs	r5, r3, #1
 8001956:	41ab      	sbcs	r3, r5
 8001958:	4334      	orrs	r4, r6
 800195a:	4323      	orrs	r3, r4
 800195c:	464c      	mov	r4, r9
 800195e:	40cc      	lsrs	r4, r1
 8001960:	1b3f      	subs	r7, r7, r4
 8001962:	e045      	b.n	80019f0 <__aeabi_dsub+0x4e8>
 8001964:	464a      	mov	r2, r9
 8001966:	1a1c      	subs	r4, r3, r0
 8001968:	1bd1      	subs	r1, r2, r7
 800196a:	42a3      	cmp	r3, r4
 800196c:	4192      	sbcs	r2, r2
 800196e:	4252      	negs	r2, r2
 8001970:	4692      	mov	sl, r2
 8001972:	000a      	movs	r2, r1
 8001974:	4651      	mov	r1, sl
 8001976:	1a52      	subs	r2, r2, r1
 8001978:	4692      	mov	sl, r2
 800197a:	0212      	lsls	r2, r2, #8
 800197c:	d500      	bpl.n	8001980 <__aeabi_dsub+0x478>
 800197e:	e083      	b.n	8001a88 <__aeabi_dsub+0x580>
 8001980:	4653      	mov	r3, sl
 8001982:	4323      	orrs	r3, r4
 8001984:	d000      	beq.n	8001988 <__aeabi_dsub+0x480>
 8001986:	e621      	b.n	80015cc <__aeabi_dsub+0xc4>
 8001988:	2200      	movs	r2, #0
 800198a:	2500      	movs	r5, #0
 800198c:	e753      	b.n	8001836 <__aeabi_dsub+0x32e>
 800198e:	181c      	adds	r4, r3, r0
 8001990:	429c      	cmp	r4, r3
 8001992:	419b      	sbcs	r3, r3
 8001994:	444f      	add	r7, r9
 8001996:	46ba      	mov	sl, r7
 8001998:	425b      	negs	r3, r3
 800199a:	449a      	add	sl, r3
 800199c:	4653      	mov	r3, sl
 800199e:	2601      	movs	r6, #1
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	d400      	bmi.n	80019a6 <__aeabi_dsub+0x49e>
 80019a4:	e73a      	b.n	800181c <__aeabi_dsub+0x314>
 80019a6:	2602      	movs	r6, #2
 80019a8:	4652      	mov	r2, sl
 80019aa:	4b93      	ldr	r3, [pc, #588]	; (8001bf8 <__aeabi_dsub+0x6f0>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	401a      	ands	r2, r3
 80019b0:	0013      	movs	r3, r2
 80019b2:	4021      	ands	r1, r4
 80019b4:	0862      	lsrs	r2, r4, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	07dc      	lsls	r4, r3, #31
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	469a      	mov	sl, r3
 80019be:	4314      	orrs	r4, r2
 80019c0:	e62c      	b.n	800161c <__aeabi_dsub+0x114>
 80019c2:	0039      	movs	r1, r7
 80019c4:	3a20      	subs	r2, #32
 80019c6:	40d1      	lsrs	r1, r2
 80019c8:	4662      	mov	r2, ip
 80019ca:	2a20      	cmp	r2, #32
 80019cc:	d006      	beq.n	80019dc <__aeabi_dsub+0x4d4>
 80019ce:	4664      	mov	r4, ip
 80019d0:	2240      	movs	r2, #64	; 0x40
 80019d2:	1b12      	subs	r2, r2, r4
 80019d4:	003c      	movs	r4, r7
 80019d6:	4094      	lsls	r4, r2
 80019d8:	4304      	orrs	r4, r0
 80019da:	9401      	str	r4, [sp, #4]
 80019dc:	9c01      	ldr	r4, [sp, #4]
 80019de:	1e62      	subs	r2, r4, #1
 80019e0:	4194      	sbcs	r4, r2
 80019e2:	430c      	orrs	r4, r1
 80019e4:	e5e3      	b.n	80015ae <__aeabi_dsub+0xa6>
 80019e6:	4649      	mov	r1, r9
 80019e8:	4319      	orrs	r1, r3
 80019ea:	000b      	movs	r3, r1
 80019ec:	1e5c      	subs	r4, r3, #1
 80019ee:	41a3      	sbcs	r3, r4
 80019f0:	1ac4      	subs	r4, r0, r3
 80019f2:	42a0      	cmp	r0, r4
 80019f4:	419b      	sbcs	r3, r3
 80019f6:	425b      	negs	r3, r3
 80019f8:	1afb      	subs	r3, r7, r3
 80019fa:	469a      	mov	sl, r3
 80019fc:	465d      	mov	r5, fp
 80019fe:	0016      	movs	r6, r2
 8001a00:	e5dc      	b.n	80015bc <__aeabi_dsub+0xb4>
 8001a02:	4649      	mov	r1, r9
 8001a04:	4319      	orrs	r1, r3
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dsub+0x502>
 8001a08:	e0ae      	b.n	8001b68 <__aeabi_dsub+0x660>
 8001a0a:	4661      	mov	r1, ip
 8001a0c:	4664      	mov	r4, ip
 8001a0e:	3901      	subs	r1, #1
 8001a10:	2c01      	cmp	r4, #1
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x50e>
 8001a14:	e0e0      	b.n	8001bd8 <__aeabi_dsub+0x6d0>
 8001a16:	4c77      	ldr	r4, [pc, #476]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 8001a18:	45a4      	cmp	ip, r4
 8001a1a:	d056      	beq.n	8001aca <__aeabi_dsub+0x5c2>
 8001a1c:	468c      	mov	ip, r1
 8001a1e:	e69a      	b.n	8001756 <__aeabi_dsub+0x24e>
 8001a20:	4661      	mov	r1, ip
 8001a22:	2220      	movs	r2, #32
 8001a24:	003c      	movs	r4, r7
 8001a26:	1a52      	subs	r2, r2, r1
 8001a28:	4094      	lsls	r4, r2
 8001a2a:	0001      	movs	r1, r0
 8001a2c:	4090      	lsls	r0, r2
 8001a2e:	46a0      	mov	r8, r4
 8001a30:	4664      	mov	r4, ip
 8001a32:	1e42      	subs	r2, r0, #1
 8001a34:	4190      	sbcs	r0, r2
 8001a36:	4662      	mov	r2, ip
 8001a38:	40e1      	lsrs	r1, r4
 8001a3a:	4644      	mov	r4, r8
 8001a3c:	40d7      	lsrs	r7, r2
 8001a3e:	430c      	orrs	r4, r1
 8001a40:	4304      	orrs	r4, r0
 8001a42:	44b9      	add	r9, r7
 8001a44:	e701      	b.n	800184a <__aeabi_dsub+0x342>
 8001a46:	496b      	ldr	r1, [pc, #428]	; (8001bf4 <__aeabi_dsub+0x6ec>)
 8001a48:	428a      	cmp	r2, r1
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x546>
 8001a4c:	e70c      	b.n	8001868 <__aeabi_dsub+0x360>
 8001a4e:	1818      	adds	r0, r3, r0
 8001a50:	4298      	cmp	r0, r3
 8001a52:	419b      	sbcs	r3, r3
 8001a54:	444f      	add	r7, r9
 8001a56:	425b      	negs	r3, r3
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	07dc      	lsls	r4, r3, #31
 8001a5c:	0840      	lsrs	r0, r0, #1
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	469a      	mov	sl, r3
 8001a62:	0016      	movs	r6, r2
 8001a64:	4304      	orrs	r4, r0
 8001a66:	e6d9      	b.n	800181c <__aeabi_dsub+0x314>
 8001a68:	2a00      	cmp	r2, #0
 8001a6a:	d000      	beq.n	8001a6e <__aeabi_dsub+0x566>
 8001a6c:	e081      	b.n	8001b72 <__aeabi_dsub+0x66a>
 8001a6e:	003b      	movs	r3, r7
 8001a70:	4303      	orrs	r3, r0
 8001a72:	d11d      	bne.n	8001ab0 <__aeabi_dsub+0x5a8>
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	2500      	movs	r5, #0
 8001a78:	0312      	lsls	r2, r2, #12
 8001a7a:	e70b      	b.n	8001894 <__aeabi_dsub+0x38c>
 8001a7c:	08c0      	lsrs	r0, r0, #3
 8001a7e:	077b      	lsls	r3, r7, #29
 8001a80:	465d      	mov	r5, fp
 8001a82:	4303      	orrs	r3, r0
 8001a84:	08fa      	lsrs	r2, r7, #3
 8001a86:	e6d3      	b.n	8001830 <__aeabi_dsub+0x328>
 8001a88:	1ac4      	subs	r4, r0, r3
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	4180      	sbcs	r0, r0
 8001a8e:	464b      	mov	r3, r9
 8001a90:	4240      	negs	r0, r0
 8001a92:	1aff      	subs	r7, r7, r3
 8001a94:	1a3b      	subs	r3, r7, r0
 8001a96:	469a      	mov	sl, r3
 8001a98:	465d      	mov	r5, fp
 8001a9a:	e597      	b.n	80015cc <__aeabi_dsub+0xc4>
 8001a9c:	1a1c      	subs	r4, r3, r0
 8001a9e:	464a      	mov	r2, r9
 8001aa0:	42a3      	cmp	r3, r4
 8001aa2:	419b      	sbcs	r3, r3
 8001aa4:	1bd7      	subs	r7, r2, r7
 8001aa6:	425b      	negs	r3, r3
 8001aa8:	1afb      	subs	r3, r7, r3
 8001aaa:	469a      	mov	sl, r3
 8001aac:	2601      	movs	r6, #1
 8001aae:	e585      	b.n	80015bc <__aeabi_dsub+0xb4>
 8001ab0:	08c0      	lsrs	r0, r0, #3
 8001ab2:	077b      	lsls	r3, r7, #29
 8001ab4:	465d      	mov	r5, fp
 8001ab6:	4303      	orrs	r3, r0
 8001ab8:	08fa      	lsrs	r2, r7, #3
 8001aba:	e6e7      	b.n	800188c <__aeabi_dsub+0x384>
 8001abc:	464a      	mov	r2, r9
 8001abe:	08db      	lsrs	r3, r3, #3
 8001ac0:	0752      	lsls	r2, r2, #29
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	464a      	mov	r2, r9
 8001ac6:	08d2      	lsrs	r2, r2, #3
 8001ac8:	e6b5      	b.n	8001836 <__aeabi_dsub+0x32e>
 8001aca:	08c0      	lsrs	r0, r0, #3
 8001acc:	077b      	lsls	r3, r7, #29
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	08fa      	lsrs	r2, r7, #3
 8001ad2:	e6db      	b.n	800188c <__aeabi_dsub+0x384>
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	4319      	orrs	r1, r3
 8001ad8:	000b      	movs	r3, r1
 8001ada:	1e59      	subs	r1, r3, #1
 8001adc:	418b      	sbcs	r3, r1
 8001ade:	001c      	movs	r4, r3
 8001ae0:	e653      	b.n	800178a <__aeabi_dsub+0x282>
 8001ae2:	464d      	mov	r5, r9
 8001ae4:	3c20      	subs	r4, #32
 8001ae6:	40e5      	lsrs	r5, r4
 8001ae8:	2920      	cmp	r1, #32
 8001aea:	d005      	beq.n	8001af8 <__aeabi_dsub+0x5f0>
 8001aec:	2440      	movs	r4, #64	; 0x40
 8001aee:	1a64      	subs	r4, r4, r1
 8001af0:	4649      	mov	r1, r9
 8001af2:	40a1      	lsls	r1, r4
 8001af4:	430b      	orrs	r3, r1
 8001af6:	4698      	mov	r8, r3
 8001af8:	4643      	mov	r3, r8
 8001afa:	1e5c      	subs	r4, r3, #1
 8001afc:	41a3      	sbcs	r3, r4
 8001afe:	432b      	orrs	r3, r5
 8001b00:	e776      	b.n	80019f0 <__aeabi_dsub+0x4e8>
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	d0e1      	beq.n	8001aca <__aeabi_dsub+0x5c2>
 8001b06:	003a      	movs	r2, r7
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	4302      	orrs	r2, r0
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x608>
 8001b0e:	e6b8      	b.n	8001882 <__aeabi_dsub+0x37a>
 8001b10:	464a      	mov	r2, r9
 8001b12:	0752      	lsls	r2, r2, #29
 8001b14:	2480      	movs	r4, #128	; 0x80
 8001b16:	4313      	orrs	r3, r2
 8001b18:	464a      	mov	r2, r9
 8001b1a:	0324      	lsls	r4, r4, #12
 8001b1c:	08d2      	lsrs	r2, r2, #3
 8001b1e:	4222      	tst	r2, r4
 8001b20:	d007      	beq.n	8001b32 <__aeabi_dsub+0x62a>
 8001b22:	08fe      	lsrs	r6, r7, #3
 8001b24:	4226      	tst	r6, r4
 8001b26:	d104      	bne.n	8001b32 <__aeabi_dsub+0x62a>
 8001b28:	465d      	mov	r5, fp
 8001b2a:	0032      	movs	r2, r6
 8001b2c:	08c3      	lsrs	r3, r0, #3
 8001b2e:	077f      	lsls	r7, r7, #29
 8001b30:	433b      	orrs	r3, r7
 8001b32:	0f59      	lsrs	r1, r3, #29
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	0749      	lsls	r1, r1, #29
 8001b38:	08db      	lsrs	r3, r3, #3
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	e6a6      	b.n	800188c <__aeabi_dsub+0x384>
 8001b3e:	1ac4      	subs	r4, r0, r3
 8001b40:	42a0      	cmp	r0, r4
 8001b42:	4180      	sbcs	r0, r0
 8001b44:	464b      	mov	r3, r9
 8001b46:	4240      	negs	r0, r0
 8001b48:	1aff      	subs	r7, r7, r3
 8001b4a:	1a3b      	subs	r3, r7, r0
 8001b4c:	469a      	mov	sl, r3
 8001b4e:	465d      	mov	r5, fp
 8001b50:	2601      	movs	r6, #1
 8001b52:	e533      	b.n	80015bc <__aeabi_dsub+0xb4>
 8001b54:	003b      	movs	r3, r7
 8001b56:	4303      	orrs	r3, r0
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dsub+0x654>
 8001b5a:	e715      	b.n	8001988 <__aeabi_dsub+0x480>
 8001b5c:	08c0      	lsrs	r0, r0, #3
 8001b5e:	077b      	lsls	r3, r7, #29
 8001b60:	465d      	mov	r5, fp
 8001b62:	4303      	orrs	r3, r0
 8001b64:	08fa      	lsrs	r2, r7, #3
 8001b66:	e666      	b.n	8001836 <__aeabi_dsub+0x32e>
 8001b68:	08c0      	lsrs	r0, r0, #3
 8001b6a:	077b      	lsls	r3, r7, #29
 8001b6c:	4303      	orrs	r3, r0
 8001b6e:	08fa      	lsrs	r2, r7, #3
 8001b70:	e65e      	b.n	8001830 <__aeabi_dsub+0x328>
 8001b72:	003a      	movs	r2, r7
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	4302      	orrs	r2, r0
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dsub+0x674>
 8001b7a:	e682      	b.n	8001882 <__aeabi_dsub+0x37a>
 8001b7c:	464a      	mov	r2, r9
 8001b7e:	0752      	lsls	r2, r2, #29
 8001b80:	2480      	movs	r4, #128	; 0x80
 8001b82:	4313      	orrs	r3, r2
 8001b84:	464a      	mov	r2, r9
 8001b86:	0324      	lsls	r4, r4, #12
 8001b88:	08d2      	lsrs	r2, r2, #3
 8001b8a:	4222      	tst	r2, r4
 8001b8c:	d007      	beq.n	8001b9e <__aeabi_dsub+0x696>
 8001b8e:	08fe      	lsrs	r6, r7, #3
 8001b90:	4226      	tst	r6, r4
 8001b92:	d104      	bne.n	8001b9e <__aeabi_dsub+0x696>
 8001b94:	465d      	mov	r5, fp
 8001b96:	0032      	movs	r2, r6
 8001b98:	08c3      	lsrs	r3, r0, #3
 8001b9a:	077f      	lsls	r7, r7, #29
 8001b9c:	433b      	orrs	r3, r7
 8001b9e:	0f59      	lsrs	r1, r3, #29
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	08db      	lsrs	r3, r3, #3
 8001ba4:	0749      	lsls	r1, r1, #29
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	e670      	b.n	800188c <__aeabi_dsub+0x384>
 8001baa:	08c0      	lsrs	r0, r0, #3
 8001bac:	077b      	lsls	r3, r7, #29
 8001bae:	4303      	orrs	r3, r0
 8001bb0:	08fa      	lsrs	r2, r7, #3
 8001bb2:	e640      	b.n	8001836 <__aeabi_dsub+0x32e>
 8001bb4:	464c      	mov	r4, r9
 8001bb6:	3920      	subs	r1, #32
 8001bb8:	40cc      	lsrs	r4, r1
 8001bba:	4661      	mov	r1, ip
 8001bbc:	2920      	cmp	r1, #32
 8001bbe:	d006      	beq.n	8001bce <__aeabi_dsub+0x6c6>
 8001bc0:	4666      	mov	r6, ip
 8001bc2:	2140      	movs	r1, #64	; 0x40
 8001bc4:	1b89      	subs	r1, r1, r6
 8001bc6:	464e      	mov	r6, r9
 8001bc8:	408e      	lsls	r6, r1
 8001bca:	4333      	orrs	r3, r6
 8001bcc:	4698      	mov	r8, r3
 8001bce:	4643      	mov	r3, r8
 8001bd0:	1e59      	subs	r1, r3, #1
 8001bd2:	418b      	sbcs	r3, r1
 8001bd4:	431c      	orrs	r4, r3
 8001bd6:	e5d8      	b.n	800178a <__aeabi_dsub+0x282>
 8001bd8:	181c      	adds	r4, r3, r0
 8001bda:	4284      	cmp	r4, r0
 8001bdc:	4180      	sbcs	r0, r0
 8001bde:	444f      	add	r7, r9
 8001be0:	46ba      	mov	sl, r7
 8001be2:	4240      	negs	r0, r0
 8001be4:	4482      	add	sl, r0
 8001be6:	e6d9      	b.n	800199c <__aeabi_dsub+0x494>
 8001be8:	4653      	mov	r3, sl
 8001bea:	4323      	orrs	r3, r4
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dsub+0x6e8>
 8001bee:	e6cb      	b.n	8001988 <__aeabi_dsub+0x480>
 8001bf0:	e614      	b.n	800181c <__aeabi_dsub+0x314>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	000007ff 	.word	0x000007ff
 8001bf8:	ff7fffff 	.word	0xff7fffff
 8001bfc:	000007fe 	.word	0x000007fe
 8001c00:	2300      	movs	r3, #0
 8001c02:	4a01      	ldr	r2, [pc, #4]	; (8001c08 <__aeabi_dsub+0x700>)
 8001c04:	001c      	movs	r4, r3
 8001c06:	e529      	b.n	800165c <__aeabi_dsub+0x154>
 8001c08:	000007ff 	.word	0x000007ff

08001c0c <__aeabi_d2iz>:
 8001c0c:	000a      	movs	r2, r1
 8001c0e:	b530      	push	{r4, r5, lr}
 8001c10:	4c13      	ldr	r4, [pc, #76]	; (8001c60 <__aeabi_d2iz+0x54>)
 8001c12:	0053      	lsls	r3, r2, #1
 8001c14:	0309      	lsls	r1, r1, #12
 8001c16:	0005      	movs	r5, r0
 8001c18:	0b09      	lsrs	r1, r1, #12
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	0d5b      	lsrs	r3, r3, #21
 8001c1e:	0fd2      	lsrs	r2, r2, #31
 8001c20:	42a3      	cmp	r3, r4
 8001c22:	dd04      	ble.n	8001c2e <__aeabi_d2iz+0x22>
 8001c24:	480f      	ldr	r0, [pc, #60]	; (8001c64 <__aeabi_d2iz+0x58>)
 8001c26:	4283      	cmp	r3, r0
 8001c28:	dd02      	ble.n	8001c30 <__aeabi_d2iz+0x24>
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <__aeabi_d2iz+0x5c>)
 8001c2c:	18d0      	adds	r0, r2, r3
 8001c2e:	bd30      	pop	{r4, r5, pc}
 8001c30:	2080      	movs	r0, #128	; 0x80
 8001c32:	0340      	lsls	r0, r0, #13
 8001c34:	4301      	orrs	r1, r0
 8001c36:	480d      	ldr	r0, [pc, #52]	; (8001c6c <__aeabi_d2iz+0x60>)
 8001c38:	1ac0      	subs	r0, r0, r3
 8001c3a:	281f      	cmp	r0, #31
 8001c3c:	dd08      	ble.n	8001c50 <__aeabi_d2iz+0x44>
 8001c3e:	480c      	ldr	r0, [pc, #48]	; (8001c70 <__aeabi_d2iz+0x64>)
 8001c40:	1ac3      	subs	r3, r0, r3
 8001c42:	40d9      	lsrs	r1, r3
 8001c44:	000b      	movs	r3, r1
 8001c46:	4258      	negs	r0, r3
 8001c48:	2a00      	cmp	r2, #0
 8001c4a:	d1f0      	bne.n	8001c2e <__aeabi_d2iz+0x22>
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	e7ee      	b.n	8001c2e <__aeabi_d2iz+0x22>
 8001c50:	4c08      	ldr	r4, [pc, #32]	; (8001c74 <__aeabi_d2iz+0x68>)
 8001c52:	40c5      	lsrs	r5, r0
 8001c54:	46a4      	mov	ip, r4
 8001c56:	4463      	add	r3, ip
 8001c58:	4099      	lsls	r1, r3
 8001c5a:	000b      	movs	r3, r1
 8001c5c:	432b      	orrs	r3, r5
 8001c5e:	e7f2      	b.n	8001c46 <__aeabi_d2iz+0x3a>
 8001c60:	000003fe 	.word	0x000003fe
 8001c64:	0000041d 	.word	0x0000041d
 8001c68:	7fffffff 	.word	0x7fffffff
 8001c6c:	00000433 	.word	0x00000433
 8001c70:	00000413 	.word	0x00000413
 8001c74:	fffffbed 	.word	0xfffffbed

08001c78 <__aeabi_f2d>:
 8001c78:	b570      	push	{r4, r5, r6, lr}
 8001c7a:	0242      	lsls	r2, r0, #9
 8001c7c:	0043      	lsls	r3, r0, #1
 8001c7e:	0fc4      	lsrs	r4, r0, #31
 8001c80:	20fe      	movs	r0, #254	; 0xfe
 8001c82:	0e1b      	lsrs	r3, r3, #24
 8001c84:	1c59      	adds	r1, r3, #1
 8001c86:	0a55      	lsrs	r5, r2, #9
 8001c88:	4208      	tst	r0, r1
 8001c8a:	d00c      	beq.n	8001ca6 <__aeabi_f2d+0x2e>
 8001c8c:	21e0      	movs	r1, #224	; 0xe0
 8001c8e:	0089      	lsls	r1, r1, #2
 8001c90:	468c      	mov	ip, r1
 8001c92:	076d      	lsls	r5, r5, #29
 8001c94:	0b12      	lsrs	r2, r2, #12
 8001c96:	4463      	add	r3, ip
 8001c98:	051b      	lsls	r3, r3, #20
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	07e4      	lsls	r4, r4, #31
 8001c9e:	4323      	orrs	r3, r4
 8001ca0:	0028      	movs	r0, r5
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	bd70      	pop	{r4, r5, r6, pc}
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d114      	bne.n	8001cd4 <__aeabi_f2d+0x5c>
 8001caa:	2d00      	cmp	r5, #0
 8001cac:	d01b      	beq.n	8001ce6 <__aeabi_f2d+0x6e>
 8001cae:	0028      	movs	r0, r5
 8001cb0:	f000 f868 	bl	8001d84 <__clzsi2>
 8001cb4:	280a      	cmp	r0, #10
 8001cb6:	dc1c      	bgt.n	8001cf2 <__aeabi_f2d+0x7a>
 8001cb8:	230b      	movs	r3, #11
 8001cba:	002a      	movs	r2, r5
 8001cbc:	1a1b      	subs	r3, r3, r0
 8001cbe:	40da      	lsrs	r2, r3
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	3315      	adds	r3, #21
 8001cc4:	409d      	lsls	r5, r3
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <__aeabi_f2d+0x88>)
 8001cc8:	0312      	lsls	r2, r2, #12
 8001cca:	1a1b      	subs	r3, r3, r0
 8001ccc:	055b      	lsls	r3, r3, #21
 8001cce:	0b12      	lsrs	r2, r2, #12
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	e7e1      	b.n	8001c98 <__aeabi_f2d+0x20>
 8001cd4:	2d00      	cmp	r5, #0
 8001cd6:	d009      	beq.n	8001cec <__aeabi_f2d+0x74>
 8001cd8:	0b13      	lsrs	r3, r2, #12
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	0312      	lsls	r2, r2, #12
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	076d      	lsls	r5, r5, #29
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <__aeabi_f2d+0x8c>)
 8001ce4:	e7d8      	b.n	8001c98 <__aeabi_f2d+0x20>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2200      	movs	r2, #0
 8001cea:	e7d5      	b.n	8001c98 <__aeabi_f2d+0x20>
 8001cec:	2200      	movs	r2, #0
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <__aeabi_f2d+0x8c>)
 8001cf0:	e7d2      	b.n	8001c98 <__aeabi_f2d+0x20>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	002a      	movs	r2, r5
 8001cf6:	3b0b      	subs	r3, #11
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	2500      	movs	r5, #0
 8001cfc:	e7e3      	b.n	8001cc6 <__aeabi_f2d+0x4e>
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	00000389 	.word	0x00000389
 8001d04:	000007ff 	.word	0x000007ff

08001d08 <__aeabi_cdrcmple>:
 8001d08:	4684      	mov	ip, r0
 8001d0a:	0010      	movs	r0, r2
 8001d0c:	4662      	mov	r2, ip
 8001d0e:	468c      	mov	ip, r1
 8001d10:	0019      	movs	r1, r3
 8001d12:	4663      	mov	r3, ip
 8001d14:	e000      	b.n	8001d18 <__aeabi_cdcmpeq>
 8001d16:	46c0      	nop			; (mov r8, r8)

08001d18 <__aeabi_cdcmpeq>:
 8001d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d1a:	f000 f8f9 	bl	8001f10 <__ledf2>
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	d401      	bmi.n	8001d26 <__aeabi_cdcmpeq+0xe>
 8001d22:	2100      	movs	r1, #0
 8001d24:	42c8      	cmn	r0, r1
 8001d26:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d28 <__aeabi_dcmpeq>:
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	f000 f849 	bl	8001dc0 <__eqdf2>
 8001d2e:	4240      	negs	r0, r0
 8001d30:	3001      	adds	r0, #1
 8001d32:	bd10      	pop	{r4, pc}

08001d34 <__aeabi_dcmplt>:
 8001d34:	b510      	push	{r4, lr}
 8001d36:	f000 f8eb 	bl	8001f10 <__ledf2>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	db01      	blt.n	8001d42 <__aeabi_dcmplt+0xe>
 8001d3e:	2000      	movs	r0, #0
 8001d40:	bd10      	pop	{r4, pc}
 8001d42:	2001      	movs	r0, #1
 8001d44:	bd10      	pop	{r4, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)

08001d48 <__aeabi_dcmple>:
 8001d48:	b510      	push	{r4, lr}
 8001d4a:	f000 f8e1 	bl	8001f10 <__ledf2>
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	dd01      	ble.n	8001d56 <__aeabi_dcmple+0xe>
 8001d52:	2000      	movs	r0, #0
 8001d54:	bd10      	pop	{r4, pc}
 8001d56:	2001      	movs	r0, #1
 8001d58:	bd10      	pop	{r4, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)

08001d5c <__aeabi_dcmpgt>:
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	f000 f871 	bl	8001e44 <__gedf2>
 8001d62:	2800      	cmp	r0, #0
 8001d64:	dc01      	bgt.n	8001d6a <__aeabi_dcmpgt+0xe>
 8001d66:	2000      	movs	r0, #0
 8001d68:	bd10      	pop	{r4, pc}
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	bd10      	pop	{r4, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)

08001d70 <__aeabi_dcmpge>:
 8001d70:	b510      	push	{r4, lr}
 8001d72:	f000 f867 	bl	8001e44 <__gedf2>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	da01      	bge.n	8001d7e <__aeabi_dcmpge+0xe>
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	bd10      	pop	{r4, pc}
 8001d7e:	2001      	movs	r0, #1
 8001d80:	bd10      	pop	{r4, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)

08001d84 <__clzsi2>:
 8001d84:	211c      	movs	r1, #28
 8001d86:	2301      	movs	r3, #1
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	4298      	cmp	r0, r3
 8001d8c:	d301      	bcc.n	8001d92 <__clzsi2+0xe>
 8001d8e:	0c00      	lsrs	r0, r0, #16
 8001d90:	3910      	subs	r1, #16
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	4298      	cmp	r0, r3
 8001d96:	d301      	bcc.n	8001d9c <__clzsi2+0x18>
 8001d98:	0a00      	lsrs	r0, r0, #8
 8001d9a:	3908      	subs	r1, #8
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	4298      	cmp	r0, r3
 8001da0:	d301      	bcc.n	8001da6 <__clzsi2+0x22>
 8001da2:	0900      	lsrs	r0, r0, #4
 8001da4:	3904      	subs	r1, #4
 8001da6:	a202      	add	r2, pc, #8	; (adr r2, 8001db0 <__clzsi2+0x2c>)
 8001da8:	5c10      	ldrb	r0, [r2, r0]
 8001daa:	1840      	adds	r0, r0, r1
 8001dac:	4770      	bx	lr
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	02020304 	.word	0x02020304
 8001db4:	01010101 	.word	0x01010101
	...

08001dc0 <__eqdf2>:
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc2:	464e      	mov	r6, r9
 8001dc4:	4645      	mov	r5, r8
 8001dc6:	46de      	mov	lr, fp
 8001dc8:	4657      	mov	r7, sl
 8001dca:	4690      	mov	r8, r2
 8001dcc:	b5e0      	push	{r5, r6, r7, lr}
 8001dce:	0017      	movs	r7, r2
 8001dd0:	031a      	lsls	r2, r3, #12
 8001dd2:	0b12      	lsrs	r2, r2, #12
 8001dd4:	0005      	movs	r5, r0
 8001dd6:	4684      	mov	ip, r0
 8001dd8:	4819      	ldr	r0, [pc, #100]	; (8001e40 <__eqdf2+0x80>)
 8001dda:	030e      	lsls	r6, r1, #12
 8001ddc:	004c      	lsls	r4, r1, #1
 8001dde:	4691      	mov	r9, r2
 8001de0:	005a      	lsls	r2, r3, #1
 8001de2:	0fdb      	lsrs	r3, r3, #31
 8001de4:	469b      	mov	fp, r3
 8001de6:	0b36      	lsrs	r6, r6, #12
 8001de8:	0d64      	lsrs	r4, r4, #21
 8001dea:	0fc9      	lsrs	r1, r1, #31
 8001dec:	0d52      	lsrs	r2, r2, #21
 8001dee:	4284      	cmp	r4, r0
 8001df0:	d019      	beq.n	8001e26 <__eqdf2+0x66>
 8001df2:	4282      	cmp	r2, r0
 8001df4:	d010      	beq.n	8001e18 <__eqdf2+0x58>
 8001df6:	2001      	movs	r0, #1
 8001df8:	4294      	cmp	r4, r2
 8001dfa:	d10e      	bne.n	8001e1a <__eqdf2+0x5a>
 8001dfc:	454e      	cmp	r6, r9
 8001dfe:	d10c      	bne.n	8001e1a <__eqdf2+0x5a>
 8001e00:	2001      	movs	r0, #1
 8001e02:	45c4      	cmp	ip, r8
 8001e04:	d109      	bne.n	8001e1a <__eqdf2+0x5a>
 8001e06:	4559      	cmp	r1, fp
 8001e08:	d017      	beq.n	8001e3a <__eqdf2+0x7a>
 8001e0a:	2c00      	cmp	r4, #0
 8001e0c:	d105      	bne.n	8001e1a <__eqdf2+0x5a>
 8001e0e:	0030      	movs	r0, r6
 8001e10:	4328      	orrs	r0, r5
 8001e12:	1e43      	subs	r3, r0, #1
 8001e14:	4198      	sbcs	r0, r3
 8001e16:	e000      	b.n	8001e1a <__eqdf2+0x5a>
 8001e18:	2001      	movs	r0, #1
 8001e1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e1c:	46bb      	mov	fp, r7
 8001e1e:	46b2      	mov	sl, r6
 8001e20:	46a9      	mov	r9, r5
 8001e22:	46a0      	mov	r8, r4
 8001e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e26:	0033      	movs	r3, r6
 8001e28:	2001      	movs	r0, #1
 8001e2a:	432b      	orrs	r3, r5
 8001e2c:	d1f5      	bne.n	8001e1a <__eqdf2+0x5a>
 8001e2e:	42a2      	cmp	r2, r4
 8001e30:	d1f3      	bne.n	8001e1a <__eqdf2+0x5a>
 8001e32:	464b      	mov	r3, r9
 8001e34:	433b      	orrs	r3, r7
 8001e36:	d1f0      	bne.n	8001e1a <__eqdf2+0x5a>
 8001e38:	e7e2      	b.n	8001e00 <__eqdf2+0x40>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	e7ed      	b.n	8001e1a <__eqdf2+0x5a>
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	000007ff 	.word	0x000007ff

08001e44 <__gedf2>:
 8001e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e46:	4647      	mov	r7, r8
 8001e48:	46ce      	mov	lr, r9
 8001e4a:	0004      	movs	r4, r0
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	0016      	movs	r6, r2
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	0b1b      	lsrs	r3, r3, #12
 8001e54:	4d2d      	ldr	r5, [pc, #180]	; (8001f0c <__gedf2+0xc8>)
 8001e56:	004a      	lsls	r2, r1, #1
 8001e58:	4699      	mov	r9, r3
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	0043      	lsls	r3, r0, #1
 8001e5e:	030f      	lsls	r7, r1, #12
 8001e60:	46a4      	mov	ip, r4
 8001e62:	46b0      	mov	r8, r6
 8001e64:	0b3f      	lsrs	r7, r7, #12
 8001e66:	0d52      	lsrs	r2, r2, #21
 8001e68:	0fc9      	lsrs	r1, r1, #31
 8001e6a:	0d5b      	lsrs	r3, r3, #21
 8001e6c:	0fc0      	lsrs	r0, r0, #31
 8001e6e:	42aa      	cmp	r2, r5
 8001e70:	d021      	beq.n	8001eb6 <__gedf2+0x72>
 8001e72:	42ab      	cmp	r3, r5
 8001e74:	d013      	beq.n	8001e9e <__gedf2+0x5a>
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	d122      	bne.n	8001ec0 <__gedf2+0x7c>
 8001e7a:	433c      	orrs	r4, r7
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <__gedf2+0x42>
 8001e80:	464d      	mov	r5, r9
 8001e82:	432e      	orrs	r6, r5
 8001e84:	d022      	beq.n	8001ecc <__gedf2+0x88>
 8001e86:	2c00      	cmp	r4, #0
 8001e88:	d010      	beq.n	8001eac <__gedf2+0x68>
 8001e8a:	4281      	cmp	r1, r0
 8001e8c:	d022      	beq.n	8001ed4 <__gedf2+0x90>
 8001e8e:	2002      	movs	r0, #2
 8001e90:	3901      	subs	r1, #1
 8001e92:	4008      	ands	r0, r1
 8001e94:	3801      	subs	r0, #1
 8001e96:	bcc0      	pop	{r6, r7}
 8001e98:	46b9      	mov	r9, r7
 8001e9a:	46b0      	mov	r8, r6
 8001e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e9e:	464d      	mov	r5, r9
 8001ea0:	432e      	orrs	r6, r5
 8001ea2:	d129      	bne.n	8001ef8 <__gedf2+0xb4>
 8001ea4:	2a00      	cmp	r2, #0
 8001ea6:	d1f0      	bne.n	8001e8a <__gedf2+0x46>
 8001ea8:	433c      	orrs	r4, r7
 8001eaa:	d1ee      	bne.n	8001e8a <__gedf2+0x46>
 8001eac:	2800      	cmp	r0, #0
 8001eae:	d1f2      	bne.n	8001e96 <__gedf2+0x52>
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	4240      	negs	r0, r0
 8001eb4:	e7ef      	b.n	8001e96 <__gedf2+0x52>
 8001eb6:	003d      	movs	r5, r7
 8001eb8:	4325      	orrs	r5, r4
 8001eba:	d11d      	bne.n	8001ef8 <__gedf2+0xb4>
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d0ee      	beq.n	8001e9e <__gedf2+0x5a>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e2      	bne.n	8001e8a <__gedf2+0x46>
 8001ec4:	464c      	mov	r4, r9
 8001ec6:	4326      	orrs	r6, r4
 8001ec8:	d1df      	bne.n	8001e8a <__gedf2+0x46>
 8001eca:	e7e0      	b.n	8001e8e <__gedf2+0x4a>
 8001ecc:	2000      	movs	r0, #0
 8001ece:	2c00      	cmp	r4, #0
 8001ed0:	d0e1      	beq.n	8001e96 <__gedf2+0x52>
 8001ed2:	e7dc      	b.n	8001e8e <__gedf2+0x4a>
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dc0a      	bgt.n	8001eee <__gedf2+0xaa>
 8001ed8:	dbe8      	blt.n	8001eac <__gedf2+0x68>
 8001eda:	454f      	cmp	r7, r9
 8001edc:	d8d7      	bhi.n	8001e8e <__gedf2+0x4a>
 8001ede:	d00e      	beq.n	8001efe <__gedf2+0xba>
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	454f      	cmp	r7, r9
 8001ee4:	d2d7      	bcs.n	8001e96 <__gedf2+0x52>
 8001ee6:	2900      	cmp	r1, #0
 8001ee8:	d0e2      	beq.n	8001eb0 <__gedf2+0x6c>
 8001eea:	0008      	movs	r0, r1
 8001eec:	e7d3      	b.n	8001e96 <__gedf2+0x52>
 8001eee:	4243      	negs	r3, r0
 8001ef0:	4158      	adcs	r0, r3
 8001ef2:	0040      	lsls	r0, r0, #1
 8001ef4:	3801      	subs	r0, #1
 8001ef6:	e7ce      	b.n	8001e96 <__gedf2+0x52>
 8001ef8:	2002      	movs	r0, #2
 8001efa:	4240      	negs	r0, r0
 8001efc:	e7cb      	b.n	8001e96 <__gedf2+0x52>
 8001efe:	45c4      	cmp	ip, r8
 8001f00:	d8c5      	bhi.n	8001e8e <__gedf2+0x4a>
 8001f02:	2000      	movs	r0, #0
 8001f04:	45c4      	cmp	ip, r8
 8001f06:	d2c6      	bcs.n	8001e96 <__gedf2+0x52>
 8001f08:	e7ed      	b.n	8001ee6 <__gedf2+0xa2>
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	000007ff 	.word	0x000007ff

08001f10 <__ledf2>:
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	4647      	mov	r7, r8
 8001f14:	46ce      	mov	lr, r9
 8001f16:	0004      	movs	r4, r0
 8001f18:	0018      	movs	r0, r3
 8001f1a:	0016      	movs	r6, r2
 8001f1c:	031b      	lsls	r3, r3, #12
 8001f1e:	0b1b      	lsrs	r3, r3, #12
 8001f20:	4d2c      	ldr	r5, [pc, #176]	; (8001fd4 <__ledf2+0xc4>)
 8001f22:	004a      	lsls	r2, r1, #1
 8001f24:	4699      	mov	r9, r3
 8001f26:	b580      	push	{r7, lr}
 8001f28:	0043      	lsls	r3, r0, #1
 8001f2a:	030f      	lsls	r7, r1, #12
 8001f2c:	46a4      	mov	ip, r4
 8001f2e:	46b0      	mov	r8, r6
 8001f30:	0b3f      	lsrs	r7, r7, #12
 8001f32:	0d52      	lsrs	r2, r2, #21
 8001f34:	0fc9      	lsrs	r1, r1, #31
 8001f36:	0d5b      	lsrs	r3, r3, #21
 8001f38:	0fc0      	lsrs	r0, r0, #31
 8001f3a:	42aa      	cmp	r2, r5
 8001f3c:	d00d      	beq.n	8001f5a <__ledf2+0x4a>
 8001f3e:	42ab      	cmp	r3, r5
 8001f40:	d010      	beq.n	8001f64 <__ledf2+0x54>
 8001f42:	2a00      	cmp	r2, #0
 8001f44:	d127      	bne.n	8001f96 <__ledf2+0x86>
 8001f46:	433c      	orrs	r4, r7
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d111      	bne.n	8001f70 <__ledf2+0x60>
 8001f4c:	464d      	mov	r5, r9
 8001f4e:	432e      	orrs	r6, r5
 8001f50:	d10e      	bne.n	8001f70 <__ledf2+0x60>
 8001f52:	2000      	movs	r0, #0
 8001f54:	2c00      	cmp	r4, #0
 8001f56:	d015      	beq.n	8001f84 <__ledf2+0x74>
 8001f58:	e00e      	b.n	8001f78 <__ledf2+0x68>
 8001f5a:	003d      	movs	r5, r7
 8001f5c:	4325      	orrs	r5, r4
 8001f5e:	d110      	bne.n	8001f82 <__ledf2+0x72>
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d118      	bne.n	8001f96 <__ledf2+0x86>
 8001f64:	464d      	mov	r5, r9
 8001f66:	432e      	orrs	r6, r5
 8001f68:	d10b      	bne.n	8001f82 <__ledf2+0x72>
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	d102      	bne.n	8001f74 <__ledf2+0x64>
 8001f6e:	433c      	orrs	r4, r7
 8001f70:	2c00      	cmp	r4, #0
 8001f72:	d00b      	beq.n	8001f8c <__ledf2+0x7c>
 8001f74:	4281      	cmp	r1, r0
 8001f76:	d014      	beq.n	8001fa2 <__ledf2+0x92>
 8001f78:	2002      	movs	r0, #2
 8001f7a:	3901      	subs	r1, #1
 8001f7c:	4008      	ands	r0, r1
 8001f7e:	3801      	subs	r0, #1
 8001f80:	e000      	b.n	8001f84 <__ledf2+0x74>
 8001f82:	2002      	movs	r0, #2
 8001f84:	bcc0      	pop	{r6, r7}
 8001f86:	46b9      	mov	r9, r7
 8001f88:	46b0      	mov	r8, r6
 8001f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d1f9      	bne.n	8001f84 <__ledf2+0x74>
 8001f90:	2001      	movs	r0, #1
 8001f92:	4240      	negs	r0, r0
 8001f94:	e7f6      	b.n	8001f84 <__ledf2+0x74>
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1ec      	bne.n	8001f74 <__ledf2+0x64>
 8001f9a:	464c      	mov	r4, r9
 8001f9c:	4326      	orrs	r6, r4
 8001f9e:	d1e9      	bne.n	8001f74 <__ledf2+0x64>
 8001fa0:	e7ea      	b.n	8001f78 <__ledf2+0x68>
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	dd04      	ble.n	8001fb0 <__ledf2+0xa0>
 8001fa6:	4243      	negs	r3, r0
 8001fa8:	4158      	adcs	r0, r3
 8001faa:	0040      	lsls	r0, r0, #1
 8001fac:	3801      	subs	r0, #1
 8001fae:	e7e9      	b.n	8001f84 <__ledf2+0x74>
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dbeb      	blt.n	8001f8c <__ledf2+0x7c>
 8001fb4:	454f      	cmp	r7, r9
 8001fb6:	d8df      	bhi.n	8001f78 <__ledf2+0x68>
 8001fb8:	d006      	beq.n	8001fc8 <__ledf2+0xb8>
 8001fba:	2000      	movs	r0, #0
 8001fbc:	454f      	cmp	r7, r9
 8001fbe:	d2e1      	bcs.n	8001f84 <__ledf2+0x74>
 8001fc0:	2900      	cmp	r1, #0
 8001fc2:	d0e5      	beq.n	8001f90 <__ledf2+0x80>
 8001fc4:	0008      	movs	r0, r1
 8001fc6:	e7dd      	b.n	8001f84 <__ledf2+0x74>
 8001fc8:	45c4      	cmp	ip, r8
 8001fca:	d8d5      	bhi.n	8001f78 <__ledf2+0x68>
 8001fcc:	2000      	movs	r0, #0
 8001fce:	45c4      	cmp	ip, r8
 8001fd0:	d2d8      	bcs.n	8001f84 <__ledf2+0x74>
 8001fd2:	e7f5      	b.n	8001fc0 <__ledf2+0xb0>
 8001fd4:	000007ff 	.word	0x000007ff

08001fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fde:	f000 fa9f 	bl	8002520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe2:	f000 f895 	bl	8002110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fe6:	f000 f971 	bl	80022cc <MX_GPIO_Init>
  MX_ADC_Init();
 8001fea:	f000 f8d7 	bl	800219c <MX_ADC_Init>
  MX_USART3_UART_Init();
 8001fee:	f000 f93d 	bl	800226c <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc);
 8001ff2:	4b42      	ldr	r3, [pc, #264]	; (80020fc <main+0x124>)
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f000 fc5b 	bl	80028b0 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	425a      	negs	r2, r3
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <main+0x124>)
 8002000:	0011      	movs	r1, r2
 8002002:	0018      	movs	r0, r3
 8002004:	f000 fca8 	bl	8002958 <HAL_ADC_PollForConversion>
	  adcRaw[0] = HAL_ADC_GetValue(&hadc);
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <main+0x124>)
 800200a:	0018      	movs	r0, r3
 800200c:	f000 fd3c 	bl	8002a88 <HAL_ADC_GetValue>
 8002010:	0003      	movs	r3, r0
 8002012:	b29a      	uxth	r2, r3
 8002014:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <main+0x128>)
 8002016:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8002018:	2301      	movs	r3, #1
 800201a:	425a      	negs	r2, r3
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <main+0x124>)
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f000 fc99 	bl	8002958 <HAL_ADC_PollForConversion>
	  adcRaw[1] = HAL_ADC_GetValue(&hadc);
 8002026:	4b35      	ldr	r3, [pc, #212]	; (80020fc <main+0x124>)
 8002028:	0018      	movs	r0, r3
 800202a:	f000 fd2d 	bl	8002a88 <HAL_ADC_GetValue>
 800202e:	0003      	movs	r3, r0
 8002030:	b29a      	uxth	r2, r3
 8002032:	4b33      	ldr	r3, [pc, #204]	; (8002100 <main+0x128>)
 8002034:	805a      	strh	r2, [r3, #2]

	  uint8_t sendByte = 0;
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]

	  sendByte = ( (float)adcRaw[0] / 4096.0 )*100;
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <main+0x128>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	0018      	movs	r0, r3
 8002042:	f7fe f909 	bl	8000258 <__aeabi_ui2f>
 8002046:	1c03      	adds	r3, r0, #0
 8002048:	1c18      	adds	r0, r3, #0
 800204a:	f7ff fe15 	bl	8001c78 <__aeabi_f2d>
 800204e:	2200      	movs	r2, #0
 8002050:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <main+0x12c>)
 8002052:	f7fe fca9 	bl	80009a8 <__aeabi_ddiv>
 8002056:	0002      	movs	r2, r0
 8002058:	000b      	movs	r3, r1
 800205a:	0010      	movs	r0, r2
 800205c:	0019      	movs	r1, r3
 800205e:	2200      	movs	r2, #0
 8002060:	4b29      	ldr	r3, [pc, #164]	; (8002108 <main+0x130>)
 8002062:	f7fe ff8f 	bl	8000f84 <__aeabi_dmul>
 8002066:	0002      	movs	r2, r0
 8002068:	000b      	movs	r3, r1
 800206a:	0010      	movs	r0, r2
 800206c:	0019      	movs	r1, r3
 800206e:	f7fe f8d5 	bl	800021c <__aeabi_d2uiz>
 8002072:	0003      	movs	r3, r0
 8002074:	b2da      	uxtb	r2, r3
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, &sendByte, 1, HAL_MAX_DELAY);
 800207a:	2301      	movs	r3, #1
 800207c:	425b      	negs	r3, r3
 800207e:	1df9      	adds	r1, r7, #7
 8002080:	4822      	ldr	r0, [pc, #136]	; (800210c <main+0x134>)
 8002082:	2201      	movs	r2, #1
 8002084:	f001 fd62 	bl	8003b4c <HAL_UART_Transmit>

	  HAL_Delay(500);
 8002088:	23fa      	movs	r3, #250	; 0xfa
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	0018      	movs	r0, r3
 800208e:	f000 faab 	bl	80025e8 <HAL_Delay>

	  sendByte = ( (float)adcRaw[1] / 4096.0 )*100+100;
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <main+0x128>)
 8002094:	885b      	ldrh	r3, [r3, #2]
 8002096:	0018      	movs	r0, r3
 8002098:	f7fe f8de 	bl	8000258 <__aeabi_ui2f>
 800209c:	1c03      	adds	r3, r0, #0
 800209e:	1c18      	adds	r0, r3, #0
 80020a0:	f7ff fdea 	bl	8001c78 <__aeabi_f2d>
 80020a4:	2200      	movs	r2, #0
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <main+0x12c>)
 80020a8:	f7fe fc7e 	bl	80009a8 <__aeabi_ddiv>
 80020ac:	0002      	movs	r2, r0
 80020ae:	000b      	movs	r3, r1
 80020b0:	0010      	movs	r0, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	2200      	movs	r2, #0
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <main+0x130>)
 80020b8:	f7fe ff64 	bl	8000f84 <__aeabi_dmul>
 80020bc:	0002      	movs	r2, r0
 80020be:	000b      	movs	r3, r1
 80020c0:	0010      	movs	r0, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	2200      	movs	r2, #0
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <main+0x130>)
 80020c8:	f7fe f90e 	bl	80002e8 <__aeabi_dadd>
 80020cc:	0002      	movs	r2, r0
 80020ce:	000b      	movs	r3, r1
 80020d0:	0010      	movs	r0, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	f7fe f8a2 	bl	800021c <__aeabi_d2uiz>
 80020d8:	0003      	movs	r3, r0
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, &sendByte, 1, HAL_MAX_DELAY);
 80020e0:	2301      	movs	r3, #1
 80020e2:	425b      	negs	r3, r3
 80020e4:	1df9      	adds	r1, r7, #7
 80020e6:	4809      	ldr	r0, [pc, #36]	; (800210c <main+0x134>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	f001 fd2f 	bl	8003b4c <HAL_UART_Transmit>

	  HAL_Delay(500);
 80020ee:	23fa      	movs	r3, #250	; 0xfa
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	0018      	movs	r0, r3
 80020f4:	f000 fa78 	bl	80025e8 <HAL_Delay>
  {
 80020f8:	e77b      	b.n	8001ff2 <main+0x1a>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	20000028 	.word	0x20000028
 8002100:	200000f0 	.word	0x200000f0
 8002104:	40b00000 	.word	0x40b00000
 8002108:	40590000 	.word	0x40590000
 800210c:	20000068 	.word	0x20000068

08002110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b091      	sub	sp, #68	; 0x44
 8002114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002116:	2410      	movs	r4, #16
 8002118:	193b      	adds	r3, r7, r4
 800211a:	0018      	movs	r0, r3
 800211c:	2330      	movs	r3, #48	; 0x30
 800211e:	001a      	movs	r2, r3
 8002120:	2100      	movs	r1, #0
 8002122:	f002 f94d 	bl	80043c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002126:	003b      	movs	r3, r7
 8002128:	0018      	movs	r0, r3
 800212a:	2310      	movs	r3, #16
 800212c:	001a      	movs	r2, r3
 800212e:	2100      	movs	r1, #0
 8002130:	f002 f946 	bl	80043c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002134:	0021      	movs	r1, r4
 8002136:	187b      	adds	r3, r7, r1
 8002138:	2212      	movs	r2, #18
 800213a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800213c:	187b      	adds	r3, r7, r1
 800213e:	2201      	movs	r2, #1
 8002140:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2201      	movs	r2, #1
 8002146:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002148:	187b      	adds	r3, r7, r1
 800214a:	2210      	movs	r2, #16
 800214c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800214e:	187b      	adds	r3, r7, r1
 8002150:	2210      	movs	r2, #16
 8002152:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002154:	187b      	adds	r3, r7, r1
 8002156:	2200      	movs	r2, #0
 8002158:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800215a:	187b      	adds	r3, r7, r1
 800215c:	0018      	movs	r0, r3
 800215e:	f001 f83d 	bl	80031dc <HAL_RCC_OscConfig>
 8002162:	1e03      	subs	r3, r0, #0
 8002164:	d001      	beq.n	800216a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002166:	f000 f8d7 	bl	8002318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800216a:	003b      	movs	r3, r7
 800216c:	2207      	movs	r2, #7
 800216e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002170:	003b      	movs	r3, r7
 8002172:	2200      	movs	r2, #0
 8002174:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002176:	003b      	movs	r3, r7
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800217c:	003b      	movs	r3, r7
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002182:	003b      	movs	r3, r7
 8002184:	2100      	movs	r1, #0
 8002186:	0018      	movs	r0, r3
 8002188:	f001 fb46 	bl	8003818 <HAL_RCC_ClockConfig>
 800218c:	1e03      	subs	r3, r0, #0
 800218e:	d001      	beq.n	8002194 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002190:	f000 f8c2 	bl	8002318 <Error_Handler>
  }
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b011      	add	sp, #68	; 0x44
 800219a:	bd90      	pop	{r4, r7, pc}

0800219c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	0018      	movs	r0, r3
 80021a6:	230c      	movs	r3, #12
 80021a8:	001a      	movs	r2, r3
 80021aa:	2100      	movs	r1, #0
 80021ac:	f002 f908 	bl	80043c0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <MX_ADC_Init+0xc8>)
 80021b2:	4a2d      	ldr	r2, [pc, #180]	; (8002268 <MX_ADC_Init+0xcc>)
 80021b4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80021b6:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <MX_ADC_Init+0xc8>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80021bc:	4b29      	ldr	r3, [pc, #164]	; (8002264 <MX_ADC_Init+0xc8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021c2:	4b28      	ldr	r3, [pc, #160]	; (8002264 <MX_ADC_Init+0xc8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80021c8:	4b26      	ldr	r3, [pc, #152]	; (8002264 <MX_ADC_Init+0xc8>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021ce:	4b25      	ldr	r3, [pc, #148]	; (8002264 <MX_ADC_Init+0xc8>)
 80021d0:	2204      	movs	r2, #4
 80021d2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <MX_ADC_Init+0xc8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80021da:	4b22      	ldr	r3, [pc, #136]	; (8002264 <MX_ADC_Init+0xc8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <MX_ADC_Init+0xc8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80021e6:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <MX_ADC_Init+0xc8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <MX_ADC_Init+0xc8>)
 80021ee:	22c2      	movs	r2, #194	; 0xc2
 80021f0:	32ff      	adds	r2, #255	; 0xff
 80021f2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <MX_ADC_Init+0xc8>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <MX_ADC_Init+0xc8>)
 80021fc:	2224      	movs	r2, #36	; 0x24
 80021fe:	2100      	movs	r1, #0
 8002200:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <MX_ADC_Init+0xc8>)
 8002204:	2201      	movs	r2, #1
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <MX_ADC_Init+0xc8>)
 800220a:	0018      	movs	r0, r3
 800220c:	f000 fa10 	bl	8002630 <HAL_ADC_Init>
 8002210:	1e03      	subs	r3, r0, #0
 8002212:	d001      	beq.n	8002218 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002214:	f000 f880 	bl	8002318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2205      	movs	r2, #5
 800221c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	0152      	lsls	r2, r2, #5
 8002224:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	2207      	movs	r2, #7
 800222a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800222c:	1d3a      	adds	r2, r7, #4
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <MX_ADC_Init+0xc8>)
 8002230:	0011      	movs	r1, r2
 8002232:	0018      	movs	r0, r3
 8002234:	f000 fc34 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 8002238:	1e03      	subs	r3, r0, #0
 800223a:	d001      	beq.n	8002240 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800223c:	f000 f86c 	bl	8002318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	2207      	movs	r2, #7
 8002244:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002246:	1d3a      	adds	r2, r7, #4
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_ADC_Init+0xc8>)
 800224a:	0011      	movs	r1, r2
 800224c:	0018      	movs	r0, r3
 800224e:	f000 fc27 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 8002252:	1e03      	subs	r3, r0, #0
 8002254:	d001      	beq.n	800225a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8002256:	f000 f85f 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b004      	add	sp, #16
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	20000028 	.word	0x20000028
 8002268:	40012400 	.word	0x40012400

0800226c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <MX_USART3_UART_Init+0x58>)
 8002272:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <MX_USART3_UART_Init+0x5c>)
 8002274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <MX_USART3_UART_Init+0x58>)
 8002278:	2296      	movs	r2, #150	; 0x96
 800227a:	0192      	lsls	r2, r2, #6
 800227c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_USART3_UART_Init+0x58>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MX_USART3_UART_Init+0x58>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_USART3_UART_Init+0x58>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <MX_USART3_UART_Init+0x58>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <MX_USART3_UART_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <MX_USART3_UART_Init+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <MX_USART3_UART_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MX_USART3_UART_Init+0x58>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <MX_USART3_UART_Init+0x58>)
 80022b0:	0018      	movs	r0, r3
 80022b2:	f001 fbf7 	bl	8003aa4 <HAL_UART_Init>
 80022b6:	1e03      	subs	r3, r0, #0
 80022b8:	d001      	beq.n	80022be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80022ba:	f000 f82d 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000068 	.word	0x20000068
 80022c8:	40004800 	.word	0x40004800

080022cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <MX_GPIO_Init+0x48>)
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <MX_GPIO_Init+0x48>)
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	0289      	lsls	r1, r1, #10
 80022dc:	430a      	orrs	r2, r1
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <MX_GPIO_Init+0x48>)
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	4013      	ands	r3, r2
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <MX_GPIO_Init+0x48>)
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <MX_GPIO_Init+0x48>)
 80022f4:	2180      	movs	r1, #128	; 0x80
 80022f6:	02c9      	lsls	r1, r1, #11
 80022f8:	430a      	orrs	r2, r1
 80022fa:	615a      	str	r2, [r3, #20]
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <MX_GPIO_Init+0x48>)
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	02db      	lsls	r3, r3, #11
 8002304:	4013      	ands	r3, r2
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	40021000 	.word	0x40021000

08002318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800231c:	b672      	cpsid	i
}
 800231e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002320:	e7fe      	b.n	8002320 <Error_Handler+0x8>
	...

08002324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_MspInit+0x44>)
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <HAL_MspInit+0x44>)
 8002330:	2101      	movs	r1, #1
 8002332:	430a      	orrs	r2, r1
 8002334:	619a      	str	r2, [r3, #24]
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_MspInit+0x44>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2201      	movs	r2, #1
 800233c:	4013      	ands	r3, r2
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_MspInit+0x44>)
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_MspInit+0x44>)
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	0549      	lsls	r1, r1, #21
 800234c:	430a      	orrs	r2, r1
 800234e:	61da      	str	r2, [r3, #28]
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_MspInit+0x44>)
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	055b      	lsls	r3, r3, #21
 8002358:	4013      	ands	r3, r2
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	46bd      	mov	sp, r7
 8002362:	b002      	add	sp, #8
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	40021000 	.word	0x40021000

0800236c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b08b      	sub	sp, #44	; 0x2c
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	2414      	movs	r4, #20
 8002376:	193b      	adds	r3, r7, r4
 8002378:	0018      	movs	r0, r3
 800237a:	2314      	movs	r3, #20
 800237c:	001a      	movs	r2, r3
 800237e:	2100      	movs	r1, #0
 8002380:	f002 f81e 	bl	80043c0 <memset>
  if(hadc->Instance==ADC1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_ADC_MspInit+0x84>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12b      	bne.n	80023e6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_ADC_MspInit+0x88>)
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_ADC_MspInit+0x88>)
 8002394:	2180      	movs	r1, #128	; 0x80
 8002396:	0089      	lsls	r1, r1, #2
 8002398:	430a      	orrs	r2, r1
 800239a:	619a      	str	r2, [r3, #24]
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_ADC_MspInit+0x88>)
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_ADC_MspInit+0x88>)
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_ADC_MspInit+0x88>)
 80023b0:	2180      	movs	r1, #128	; 0x80
 80023b2:	0289      	lsls	r1, r1, #10
 80023b4:	430a      	orrs	r2, r1
 80023b6:	615a      	str	r2, [r3, #20]
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_ADC_MspInit+0x88>)
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	029b      	lsls	r3, r3, #10
 80023c0:	4013      	ands	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023c6:	193b      	adds	r3, r7, r4
 80023c8:	22a0      	movs	r2, #160	; 0xa0
 80023ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	2203      	movs	r2, #3
 80023d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	193b      	adds	r3, r7, r4
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d8:	193a      	adds	r2, r7, r4
 80023da:	2390      	movs	r3, #144	; 0x90
 80023dc:	05db      	lsls	r3, r3, #23
 80023de:	0011      	movs	r1, r2
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fd8b 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b00b      	add	sp, #44	; 0x2c
 80023ec:	bd90      	pop	{r4, r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	40012400 	.word	0x40012400
 80023f4:	40021000 	.word	0x40021000

080023f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b08b      	sub	sp, #44	; 0x2c
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	2414      	movs	r4, #20
 8002402:	193b      	adds	r3, r7, r4
 8002404:	0018      	movs	r0, r3
 8002406:	2314      	movs	r3, #20
 8002408:	001a      	movs	r2, r3
 800240a:	2100      	movs	r1, #0
 800240c:	f001 ffd8 	bl	80043c0 <memset>
  if(huart->Instance==USART3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_UART_MspInit+0x90>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d132      	bne.n	8002480 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_UART_MspInit+0x94>)
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_UART_MspInit+0x94>)
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	02c9      	lsls	r1, r1, #11
 8002424:	430a      	orrs	r2, r1
 8002426:	61da      	str	r2, [r3, #28]
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_UART_MspInit+0x94>)
 800242a:	69da      	ldr	r2, [r3, #28]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	02db      	lsls	r3, r3, #11
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_UART_MspInit+0x94>)
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_UART_MspInit+0x94>)
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	02c9      	lsls	r1, r1, #11
 8002440:	430a      	orrs	r2, r1
 8002442:	615a      	str	r2, [r3, #20]
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_UART_MspInit+0x94>)
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	02db      	lsls	r3, r3, #11
 800244c:	4013      	ands	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = LORA_TX_Pin|LORA_RX_Pin;
 8002452:	193b      	adds	r3, r7, r4
 8002454:	22c0      	movs	r2, #192	; 0xc0
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	0021      	movs	r1, r4
 800245c:	187b      	adds	r3, r7, r1
 800245e:	2202      	movs	r2, #2
 8002460:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	187b      	adds	r3, r7, r1
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002468:	187b      	adds	r3, r7, r1
 800246a:	2203      	movs	r2, #3
 800246c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800246e:	187b      	adds	r3, r7, r1
 8002470:	2204      	movs	r2, #4
 8002472:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002474:	187b      	adds	r3, r7, r1
 8002476:	4a06      	ldr	r2, [pc, #24]	; (8002490 <HAL_UART_MspInit+0x98>)
 8002478:	0019      	movs	r1, r3
 800247a:	0010      	movs	r0, r2
 800247c:	f000 fd3e 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b00b      	add	sp, #44	; 0x2c
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	40004800 	.word	0x40004800
 800248c:	40021000 	.word	0x40021000
 8002490:	48000400 	.word	0x48000400

08002494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <NMI_Handler+0x4>

0800249a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <HardFault_Handler+0x4>

080024a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b8:	f000 f87a 	bl	80025b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80024d0:	f7ff fff7 	bl	80024c2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d4:	480c      	ldr	r0, [pc, #48]	; (8002508 <LoopForever+0x6>)
  ldr r1, =_edata
 80024d6:	490d      	ldr	r1, [pc, #52]	; (800250c <LoopForever+0xa>)
  ldr r2, =_sidata
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <LoopForever+0xe>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024dc:	e002      	b.n	80024e4 <LoopCopyDataInit>

080024de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e2:	3304      	adds	r3, #4

080024e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e8:	d3f9      	bcc.n	80024de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024ec:	4c0a      	ldr	r4, [pc, #40]	; (8002518 <LoopForever+0x16>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f0:	e001      	b.n	80024f6 <LoopFillZerobss>

080024f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f4:	3204      	adds	r2, #4

080024f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f8:	d3fb      	bcc.n	80024f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024fa:	f001 ff69 	bl	80043d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024fe:	f7ff fd6b 	bl	8001fd8 <main>

08002502 <LoopForever>:

LoopForever:
    b LoopForever
 8002502:	e7fe      	b.n	8002502 <LoopForever>
  ldr   r0, =_estack
 8002504:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800250c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002510:	080044b0 	.word	0x080044b0
  ldr r2, =_sbss
 8002514:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002518:	200000f8 	.word	0x200000f8

0800251c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800251c:	e7fe      	b.n	800251c <ADC1_IRQHandler>
	...

08002520 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <HAL_Init+0x24>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_Init+0x24>)
 800252a:	2110      	movs	r1, #16
 800252c:	430a      	orrs	r2, r1
 800252e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002530:	2003      	movs	r0, #3
 8002532:	f000 f809 	bl	8002548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002536:	f7ff fef5 	bl	8002324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	40022000 	.word	0x40022000

08002548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_InitTick+0x5c>)
 8002552:	681c      	ldr	r4, [r3, #0]
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_InitTick+0x60>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	0019      	movs	r1, r3
 800255a:	23fa      	movs	r3, #250	; 0xfa
 800255c:	0098      	lsls	r0, r3, #2
 800255e:	f7fd fdd1 	bl	8000104 <__udivsi3>
 8002562:	0003      	movs	r3, r0
 8002564:	0019      	movs	r1, r3
 8002566:	0020      	movs	r0, r4
 8002568:	f7fd fdcc 	bl	8000104 <__udivsi3>
 800256c:	0003      	movs	r3, r0
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fcb7 	bl	8002ee2 <HAL_SYSTICK_Config>
 8002574:	1e03      	subs	r3, r0, #0
 8002576:	d001      	beq.n	800257c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e00f      	b.n	800259c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d80b      	bhi.n	800259a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	2301      	movs	r3, #1
 8002586:	425b      	negs	r3, r3
 8002588:	2200      	movs	r2, #0
 800258a:	0018      	movs	r0, r3
 800258c:	f000 fc94 	bl	8002eb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_InitTick+0x64>)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b003      	add	sp, #12
 80025a2:	bd90      	pop	{r4, r7, pc}
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000008 	.word	0x20000008
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_IncTick+0x1c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	001a      	movs	r2, r3
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_IncTick+0x20>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	18d2      	adds	r2, r2, r3
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_IncTick+0x20>)
 80025c2:	601a      	str	r2, [r3, #0]
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	20000008 	.word	0x20000008
 80025d0:	200000f4 	.word	0x200000f4

080025d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  return uwTick;
 80025d8:	4b02      	ldr	r3, [pc, #8]	; (80025e4 <HAL_GetTick+0x10>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	200000f4 	.word	0x200000f4

080025e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff fff0 	bl	80025d4 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3301      	adds	r3, #1
 8002600:	d005      	beq.n	800260e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_Delay+0x44>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	001a      	movs	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	189b      	adds	r3, r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	f7ff ffe0 	bl	80025d4 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d8f7      	bhi.n	8002610 <HAL_Delay+0x28>
  {
  }
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b004      	add	sp, #16
 8002628:	bd80      	pop	{r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	20000008 	.word	0x20000008

08002630 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002638:	230f      	movs	r3, #15
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e125      	b.n	800289a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2234      	movs	r2, #52	; 0x34
 8002660:	2100      	movs	r1, #0
 8002662:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	0018      	movs	r0, r3
 8002668:	f7ff fe80 	bl	800236c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	2210      	movs	r2, #16
 8002672:	4013      	ands	r3, r2
 8002674:	d000      	beq.n	8002678 <HAL_ADC_Init+0x48>
 8002676:	e103      	b.n	8002880 <HAL_ADC_Init+0x250>
 8002678:	230f      	movs	r3, #15
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d000      	beq.n	8002684 <HAL_ADC_Init+0x54>
 8002682:	e0fd      	b.n	8002880 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2204      	movs	r2, #4
 800268c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800268e:	d000      	beq.n	8002692 <HAL_ADC_Init+0x62>
 8002690:	e0f6      	b.n	8002880 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	4a83      	ldr	r2, [pc, #524]	; (80028a4 <HAL_ADC_Init+0x274>)
 8002698:	4013      	ands	r3, r2
 800269a:	2202      	movs	r2, #2
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2203      	movs	r2, #3
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d112      	bne.n	80026d6 <HAL_ADC_Init+0xa6>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2201      	movs	r2, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d009      	beq.n	80026d2 <HAL_ADC_Init+0xa2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	401a      	ands	r2, r3
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Init+0xa6>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_ADC_Init+0xa8>
 80026d6:	2300      	movs	r3, #0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d116      	bne.n	800270a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2218      	movs	r2, #24
 80026e4:	4393      	bics	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	0899      	lsrs	r1, r3, #2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4964      	ldr	r1, [pc, #400]	; (80028a8 <HAL_ADC_Init+0x278>)
 8002716:	400a      	ands	r2, r1
 8002718:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7e1b      	ldrb	r3, [r3, #24]
 800271e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7e5b      	ldrb	r3, [r3, #25]
 8002724:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002726:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7e9b      	ldrb	r3, [r3, #26]
 800272c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800272e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	2b01      	cmp	r3, #1
 8002736:	d002      	beq.n	800273e <HAL_ADC_Init+0x10e>
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	015b      	lsls	r3, r3, #5
 800273c:	e000      	b.n	8002740 <HAL_ADC_Init+0x110>
 800273e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002740:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002746:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d101      	bne.n	8002754 <HAL_ADC_Init+0x124>
 8002750:	2304      	movs	r3, #4
 8002752:	e000      	b.n	8002756 <HAL_ADC_Init+0x126>
 8002754:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002756:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2124      	movs	r1, #36	; 0x24
 800275c:	5c5b      	ldrb	r3, [r3, r1]
 800275e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002760:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4313      	orrs	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7edb      	ldrb	r3, [r3, #27]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d115      	bne.n	800279c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7e9b      	ldrb	r3, [r3, #26]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	0252      	lsls	r2, r2, #9
 800277e:	4313      	orrs	r3, r2
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	e00b      	b.n	800279c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	2220      	movs	r2, #32
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002794:	2201      	movs	r2, #1
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	23c2      	movs	r3, #194	; 0xc2
 80027a2:	33ff      	adds	r3, #255	; 0xff
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d007      	beq.n	80027b8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80027b0:	4313      	orrs	r3, r2
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68d9      	ldr	r1, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	055b      	lsls	r3, r3, #21
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d01b      	beq.n	800280c <HAL_ADC_Init+0x1dc>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d017      	beq.n	800280c <HAL_ADC_Init+0x1dc>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d013      	beq.n	800280c <HAL_ADC_Init+0x1dc>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d00f      	beq.n	800280c <HAL_ADC_Init+0x1dc>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d00b      	beq.n	800280c <HAL_ADC_Init+0x1dc>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d007      	beq.n	800280c <HAL_ADC_Init+0x1dc>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	2b06      	cmp	r3, #6
 8002802:	d003      	beq.n	800280c <HAL_ADC_Init+0x1dc>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	2b07      	cmp	r3, #7
 800280a:	d112      	bne.n	8002832 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2107      	movs	r1, #7
 8002818:	438a      	bics	r2, r1
 800281a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6959      	ldr	r1, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	2207      	movs	r2, #7
 8002828:	401a      	ands	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <HAL_ADC_Init+0x27c>)
 800283a:	4013      	ands	r3, r2
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	429a      	cmp	r2, r3
 8002840:	d10b      	bne.n	800285a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	2203      	movs	r2, #3
 800284e:	4393      	bics	r3, r2
 8002850:	2201      	movs	r2, #1
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002858:	e01c      	b.n	8002894 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	2212      	movs	r2, #18
 8002860:	4393      	bics	r3, r2
 8002862:	2210      	movs	r2, #16
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	2201      	movs	r2, #1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002876:	230f      	movs	r3, #15
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800287e:	e009      	b.n	8002894 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	2210      	movs	r2, #16
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800288c:	230f      	movs	r3, #15
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002894:	230f      	movs	r3, #15
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	781b      	ldrb	r3, [r3, #0]
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b004      	add	sp, #16
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	fffffefd 	.word	0xfffffefd
 80028a8:	fffe0219 	.word	0xfffe0219
 80028ac:	833fffe7 	.word	0x833fffe7

080028b0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b8:	230f      	movs	r3, #15
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2204      	movs	r2, #4
 80028c8:	4013      	ands	r3, r2
 80028ca:	d138      	bne.n	800293e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2234      	movs	r2, #52	; 0x34
 80028d0:	5c9b      	ldrb	r3, [r3, r2]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_ADC_Start+0x2a>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e038      	b.n	800294c <HAL_ADC_Start+0x9c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2234      	movs	r2, #52	; 0x34
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7e5b      	ldrb	r3, [r3, #25]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d007      	beq.n	80028fa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80028ea:	230f      	movs	r3, #15
 80028ec:	18fc      	adds	r4, r7, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 f9cb 	bl	8002c8c <ADC_Enable>
 80028f6:	0003      	movs	r3, r0
 80028f8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028fa:	230f      	movs	r3, #15
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d120      	bne.n	8002946 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	4a12      	ldr	r2, [pc, #72]	; (8002954 <HAL_ADC_Start+0xa4>)
 800290a:	4013      	ands	r3, r2
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	0052      	lsls	r2, r2, #1
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2234      	movs	r2, #52	; 0x34
 8002920:	2100      	movs	r1, #0
 8002922:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	221c      	movs	r2, #28
 800292a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2104      	movs	r1, #4
 8002938:	430a      	orrs	r2, r1
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	e003      	b.n	8002946 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800293e:	230f      	movs	r3, #15
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	2202      	movs	r2, #2
 8002944:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002946:	230f      	movs	r3, #15
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	781b      	ldrb	r3, [r3, #0]
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b005      	add	sp, #20
 8002952:	bd90      	pop	{r4, r7, pc}
 8002954:	fffff0fe 	.word	0xfffff0fe

08002958 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2b08      	cmp	r3, #8
 8002968:	d102      	bne.n	8002970 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800296a:	2308      	movs	r3, #8
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e014      	b.n	800299a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	4013      	ands	r3, r2
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10b      	bne.n	8002996 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	2220      	movs	r2, #32
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2234      	movs	r2, #52	; 0x34
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e071      	b.n	8002a7a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002996:	230c      	movs	r3, #12
 8002998:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800299a:	f7ff fe1b 	bl	80025d4 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80029a2:	e01f      	b.n	80029e4 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	3301      	adds	r3, #1
 80029a8:	d01c      	beq.n	80029e4 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_ADC_PollForConversion+0x68>
 80029b0:	f7ff fe10 	bl	80025d4 <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d211      	bcs.n	80029e4 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4013      	ands	r3, r2
 80029ca:	d10b      	bne.n	80029e4 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	2204      	movs	r2, #4
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2234      	movs	r2, #52	; 0x34
 80029dc:	2100      	movs	r1, #0
 80029de:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e04a      	b.n	8002a7a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4013      	ands	r3, r2
 80029ee:	d0d9      	beq.n	80029a4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	23c0      	movs	r3, #192	; 0xc0
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d12d      	bne.n	8002a68 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d129      	bne.n	8002a68 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d122      	bne.n	8002a68 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d110      	bne.n	8002a50 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	210c      	movs	r1, #12
 8002a3a:	438a      	bics	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	4a10      	ldr	r2, [pc, #64]	; (8002a84 <HAL_ADC_PollForConversion+0x12c>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	2201      	movs	r2, #1
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a4e:	e00b      	b.n	8002a68 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	2220      	movs	r2, #32
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	2201      	movs	r2, #1
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7e1b      	ldrb	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d103      	bne.n	8002a78 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	220c      	movs	r2, #12
 8002a76:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b004      	add	sp, #16
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	fffffefe 	.word	0xfffffefe

08002a88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b002      	add	sp, #8
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aaa:	230f      	movs	r3, #15
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	055b      	lsls	r3, r3, #21
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d011      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x46>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x46>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d009      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x46>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d005      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x46>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d001      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x46>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2234      	movs	r2, #52	; 0x34
 8002aea:	5c9b      	ldrb	r3, [r3, r2]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x54>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e0bb      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x1cc>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2234      	movs	r2, #52	; 0x34
 8002af8:	2101      	movs	r1, #1
 8002afa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2204      	movs	r2, #4
 8002b04:	4013      	ands	r3, r2
 8002b06:	d000      	beq.n	8002b0a <HAL_ADC_ConfigChannel+0x6a>
 8002b08:	e09f      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4a59      	ldr	r2, [pc, #356]	; (8002c74 <HAL_ADC_ConfigChannel+0x1d4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d100      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x76>
 8002b14:	e077      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	409a      	lsls	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	055b      	lsls	r3, r3, #21
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d037      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x108>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d033      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x108>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d02f      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d02b      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x108>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d027      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x108>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d023      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x108>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d01f      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x108>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	2b07      	cmp	r3, #7
 8002b6e:	d01b      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2107      	movs	r1, #7
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d012      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2107      	movs	r1, #7
 8002b8e:	438a      	bics	r2, r1
 8002b90:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6959      	ldr	r1, [r3, #20]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d003      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x118>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b11      	cmp	r3, #17
 8002bb6:	d152      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002bb8:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <HAL_ADC_ConfigChannel+0x1d8>)
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d102      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x12a>
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	e001      	b.n	8002bce <HAL_ADC_ConfigChannel+0x12e>
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	03db      	lsls	r3, r3, #15
 8002bce:	4a2a      	ldr	r2, [pc, #168]	; (8002c78 <HAL_ADC_ConfigChannel+0x1d8>)
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d140      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <HAL_ADC_ConfigChannel+0x1dc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4927      	ldr	r1, [pc, #156]	; (8002c80 <HAL_ADC_ConfigChannel+0x1e0>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f7fd fa8e 	bl	8000104 <__udivsi3>
 8002be8:	0003      	movs	r3, r0
 8002bea:	001a      	movs	r2, r3
 8002bec:	0013      	movs	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	189b      	adds	r3, r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bf6:	e002      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f9      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x158>
 8002c04:	e02b      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2101      	movs	r1, #1
 8002c12:	4099      	lsls	r1, r3
 8002c14:	000b      	movs	r3, r1
 8002c16:	43d9      	mvns	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b10      	cmp	r3, #16
 8002c26:	d003      	beq.n	8002c30 <HAL_ADC_ConfigChannel+0x190>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b11      	cmp	r3, #17
 8002c2e:	d116      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_ADC_ConfigChannel+0x1d8>)
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x1a0>
 8002c3c:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c3e:	e000      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x1a2>
 8002c40:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_ADC_ConfigChannel+0x1d8>)
 8002c44:	400a      	ands	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	e009      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	2220      	movs	r2, #32
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002c56:	230f      	movs	r3, #15
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2234      	movs	r2, #52	; 0x34
 8002c62:	2100      	movs	r1, #0
 8002c64:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002c66:	230f      	movs	r3, #15
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	781b      	ldrb	r3, [r3, #0]
}
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b004      	add	sp, #16
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	00001001 	.word	0x00001001
 8002c78:	40012708 	.word	0x40012708
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	000f4240 	.word	0x000f4240
 8002c84:	ff7fffff 	.word	0xff7fffff
 8002c88:	ffbfffff 	.word	0xffbfffff

08002c8c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d112      	bne.n	8002cd0 <ADC_Enable+0x44>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d009      	beq.n	8002ccc <ADC_Enable+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d101      	bne.n	8002cd0 <ADC_Enable+0x44>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <ADC_Enable+0x46>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d152      	bne.n	8002d7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a2a      	ldr	r2, [pc, #168]	; (8002d88 <ADC_Enable+0xfc>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d00d      	beq.n	8002cfe <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e03f      	b.n	8002d7e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <ADC_Enable+0x100>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	491f      	ldr	r1, [pc, #124]	; (8002d90 <ADC_Enable+0x104>)
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7fd f9f5 	bl	8000104 <__udivsi3>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d1e:	e002      	b.n	8002d26 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f9      	bne.n	8002d20 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d2c:	f7ff fc52 	bl	80025d4 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d34:	e01b      	b.n	8002d6e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d36:	f7ff fc4d 	bl	80025d4 <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d914      	bls.n	8002d6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d00d      	beq.n	8002d6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	2210      	movs	r2, #16
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	2201      	movs	r2, #1
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e007      	b.n	8002d7e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d1dc      	bne.n	8002d36 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b004      	add	sp, #16
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	80000017 	.word	0x80000017
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	000f4240 	.word	0x000f4240

08002d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002da2:	1dfb      	adds	r3, r7, #7
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b7f      	cmp	r3, #127	; 0x7f
 8002da8:	d828      	bhi.n	8002dfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002daa:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <__NVIC_SetPriority+0xd4>)
 8002dac:	1dfb      	adds	r3, r7, #7
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	33c0      	adds	r3, #192	; 0xc0
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	589b      	ldr	r3, [r3, r2]
 8002dba:	1dfa      	adds	r2, r7, #7
 8002dbc:	7812      	ldrb	r2, [r2, #0]
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	00d2      	lsls	r2, r2, #3
 8002dc6:	21ff      	movs	r1, #255	; 0xff
 8002dc8:	4091      	lsls	r1, r2
 8002dca:	000a      	movs	r2, r1
 8002dcc:	43d2      	mvns	r2, r2
 8002dce:	401a      	ands	r2, r3
 8002dd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	019b      	lsls	r3, r3, #6
 8002dd6:	22ff      	movs	r2, #255	; 0xff
 8002dd8:	401a      	ands	r2, r3
 8002dda:	1dfb      	adds	r3, r7, #7
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	0018      	movs	r0, r3
 8002de0:	2303      	movs	r3, #3
 8002de2:	4003      	ands	r3, r0
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002de8:	481f      	ldr	r0, [pc, #124]	; (8002e68 <__NVIC_SetPriority+0xd4>)
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b25b      	sxtb	r3, r3
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	430a      	orrs	r2, r1
 8002df4:	33c0      	adds	r3, #192	; 0xc0
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002dfa:	e031      	b.n	8002e60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <__NVIC_SetPriority+0xd8>)
 8002dfe:	1dfb      	adds	r3, r7, #7
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	0019      	movs	r1, r3
 8002e04:	230f      	movs	r3, #15
 8002e06:	400b      	ands	r3, r1
 8002e08:	3b08      	subs	r3, #8
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3306      	adds	r3, #6
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	18d3      	adds	r3, r2, r3
 8002e12:	3304      	adds	r3, #4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1dfa      	adds	r2, r7, #7
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	0011      	movs	r1, r2
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	400a      	ands	r2, r1
 8002e20:	00d2      	lsls	r2, r2, #3
 8002e22:	21ff      	movs	r1, #255	; 0xff
 8002e24:	4091      	lsls	r1, r2
 8002e26:	000a      	movs	r2, r1
 8002e28:	43d2      	mvns	r2, r2
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	019b      	lsls	r3, r3, #6
 8002e32:	22ff      	movs	r2, #255	; 0xff
 8002e34:	401a      	ands	r2, r3
 8002e36:	1dfb      	adds	r3, r7, #7
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	4003      	ands	r3, r0
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e44:	4809      	ldr	r0, [pc, #36]	; (8002e6c <__NVIC_SetPriority+0xd8>)
 8002e46:	1dfb      	adds	r3, r7, #7
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	001c      	movs	r4, r3
 8002e4c:	230f      	movs	r3, #15
 8002e4e:	4023      	ands	r3, r4
 8002e50:	3b08      	subs	r3, #8
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	430a      	orrs	r2, r1
 8002e56:	3306      	adds	r3, #6
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	18c3      	adds	r3, r0, r3
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	601a      	str	r2, [r3, #0]
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b003      	add	sp, #12
 8002e66:	bd90      	pop	{r4, r7, pc}
 8002e68:	e000e100 	.word	0xe000e100
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	1e5a      	subs	r2, r3, #1
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	045b      	lsls	r3, r3, #17
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d301      	bcc.n	8002e88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e84:	2301      	movs	r3, #1
 8002e86:	e010      	b.n	8002eaa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <SysTick_Config+0x44>)
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e90:	2301      	movs	r3, #1
 8002e92:	425b      	negs	r3, r3
 8002e94:	2103      	movs	r1, #3
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7ff ff7c 	bl	8002d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <SysTick_Config+0x44>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SysTick_Config+0x44>)
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b002      	add	sp, #8
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	e000e010 	.word	0xe000e010

08002eb8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	187b      	adds	r3, r7, r1
 8002ec6:	1c02      	adds	r2, r0, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	187b      	adds	r3, r7, r1
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	0011      	movs	r1, r2
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7ff ff5d 	bl	8002d94 <__NVIC_SetPriority>
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b004      	add	sp, #16
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7ff ffbf 	bl	8002e70 <SysTick_Config>
 8002ef2:	0003      	movs	r3, r0
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0a:	e14f      	b.n	80031ac <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4091      	lsls	r1, r2
 8002f16:	000a      	movs	r2, r1
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d100      	bne.n	8002f24 <HAL_GPIO_Init+0x28>
 8002f22:	e140      	b.n	80031a6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d005      	beq.n	8002f3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2203      	movs	r2, #3
 8002f36:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d130      	bne.n	8002f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	0013      	movs	r3, r2
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f72:	2201      	movs	r2, #1
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	409a      	lsls	r2, r3
 8002f78:	0013      	movs	r3, r2
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	2201      	movs	r2, #1
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	0013      	movs	r3, r2
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d017      	beq.n	8002fda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	0013      	movs	r3, r2
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	0013      	movs	r3, r2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2203      	movs	r2, #3
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d123      	bne.n	800302e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	0092      	lsls	r2, r2, #2
 8002ff0:	58d3      	ldr	r3, [r2, r3]
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2207      	movs	r2, #7
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	409a      	lsls	r2, r3
 8003000:	0013      	movs	r3, r2
 8003002:	43da      	mvns	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2107      	movs	r1, #7
 8003012:	400b      	ands	r3, r1
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	409a      	lsls	r2, r3
 8003018:	0013      	movs	r3, r2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	08da      	lsrs	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3208      	adds	r2, #8
 8003028:	0092      	lsls	r2, r2, #2
 800302a:	6939      	ldr	r1, [r7, #16]
 800302c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	409a      	lsls	r2, r3
 800303c:	0013      	movs	r3, r2
 800303e:	43da      	mvns	r2, r3
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2203      	movs	r2, #3
 800304c:	401a      	ands	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	0013      	movs	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	23c0      	movs	r3, #192	; 0xc0
 8003068:	029b      	lsls	r3, r3, #10
 800306a:	4013      	ands	r3, r2
 800306c:	d100      	bne.n	8003070 <HAL_GPIO_Init+0x174>
 800306e:	e09a      	b.n	80031a6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003070:	4b54      	ldr	r3, [pc, #336]	; (80031c4 <HAL_GPIO_Init+0x2c8>)
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <HAL_GPIO_Init+0x2c8>)
 8003076:	2101      	movs	r1, #1
 8003078:	430a      	orrs	r2, r1
 800307a:	619a      	str	r2, [r3, #24]
 800307c:	4b51      	ldr	r3, [pc, #324]	; (80031c4 <HAL_GPIO_Init+0x2c8>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2201      	movs	r2, #1
 8003082:	4013      	ands	r3, r2
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003088:	4a4f      	ldr	r2, [pc, #316]	; (80031c8 <HAL_GPIO_Init+0x2cc>)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	589b      	ldr	r3, [r3, r2]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2203      	movs	r2, #3
 800309a:	4013      	ands	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	220f      	movs	r2, #15
 80030a0:	409a      	lsls	r2, r3
 80030a2:	0013      	movs	r3, r2
 80030a4:	43da      	mvns	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	2390      	movs	r3, #144	; 0x90
 80030b0:	05db      	lsls	r3, r3, #23
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d013      	beq.n	80030de <HAL_GPIO_Init+0x1e2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a44      	ldr	r2, [pc, #272]	; (80031cc <HAL_GPIO_Init+0x2d0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00d      	beq.n	80030da <HAL_GPIO_Init+0x1de>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a43      	ldr	r2, [pc, #268]	; (80031d0 <HAL_GPIO_Init+0x2d4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <HAL_GPIO_Init+0x1da>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a42      	ldr	r2, [pc, #264]	; (80031d4 <HAL_GPIO_Init+0x2d8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_GPIO_Init+0x1d6>
 80030ce:	2303      	movs	r3, #3
 80030d0:	e006      	b.n	80030e0 <HAL_GPIO_Init+0x1e4>
 80030d2:	2305      	movs	r3, #5
 80030d4:	e004      	b.n	80030e0 <HAL_GPIO_Init+0x1e4>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e002      	b.n	80030e0 <HAL_GPIO_Init+0x1e4>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_GPIO_Init+0x1e4>
 80030de:	2300      	movs	r3, #0
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	2103      	movs	r1, #3
 80030e4:	400a      	ands	r2, r1
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	4093      	lsls	r3, r2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030f0:	4935      	ldr	r1, [pc, #212]	; (80031c8 <HAL_GPIO_Init+0x2cc>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fe:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43da      	mvns	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	035b      	lsls	r3, r3, #13
 8003116:	4013      	ands	r3, r2
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003122:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003128:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43da      	mvns	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	039b      	lsls	r3, r3, #14
 8003140:	4013      	ands	r3, r2
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003152:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	43da      	mvns	r2, r3
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	029b      	lsls	r3, r3, #10
 800316a:	4013      	ands	r3, r2
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800317c:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	43da      	mvns	r2, r3
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	025b      	lsls	r3, r3, #9
 8003194:	4013      	ands	r3, r2
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	40da      	lsrs	r2, r3
 80031b4:	1e13      	subs	r3, r2, #0
 80031b6:	d000      	beq.n	80031ba <HAL_GPIO_Init+0x2be>
 80031b8:	e6a8      	b.n	8002f0c <HAL_GPIO_Init+0x10>
  } 
}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b006      	add	sp, #24
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40010000 	.word	0x40010000
 80031cc:	48000400 	.word	0x48000400
 80031d0:	48000800 	.word	0x48000800
 80031d4:	48000c00 	.word	0x48000c00
 80031d8:	40010400 	.word	0x40010400

080031dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e305      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	4013      	ands	r3, r2
 80031f6:	d100      	bne.n	80031fa <HAL_RCC_OscConfig+0x1e>
 80031f8:	e08d      	b.n	8003316 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031fa:	4bc5      	ldr	r3, [pc, #788]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	220c      	movs	r2, #12
 8003200:	4013      	ands	r3, r2
 8003202:	2b04      	cmp	r3, #4
 8003204:	d00e      	beq.n	8003224 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003206:	4bc2      	ldr	r3, [pc, #776]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	220c      	movs	r2, #12
 800320c:	4013      	ands	r3, r2
 800320e:	2b08      	cmp	r3, #8
 8003210:	d116      	bne.n	8003240 <HAL_RCC_OscConfig+0x64>
 8003212:	4bbf      	ldr	r3, [pc, #764]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	23c0      	movs	r3, #192	; 0xc0
 8003218:	025b      	lsls	r3, r3, #9
 800321a:	401a      	ands	r2, r3
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	025b      	lsls	r3, r3, #9
 8003220:	429a      	cmp	r2, r3
 8003222:	d10d      	bne.n	8003240 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	4bba      	ldr	r3, [pc, #744]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	029b      	lsls	r3, r3, #10
 800322c:	4013      	ands	r3, r2
 800322e:	d100      	bne.n	8003232 <HAL_RCC_OscConfig+0x56>
 8003230:	e070      	b.n	8003314 <HAL_RCC_OscConfig+0x138>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d000      	beq.n	800323c <HAL_RCC_OscConfig+0x60>
 800323a:	e06b      	b.n	8003314 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e2dc      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x7c>
 8003248:	4bb1      	ldr	r3, [pc, #708]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4bb0      	ldr	r3, [pc, #704]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	0249      	lsls	r1, r1, #9
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e02f      	b.n	80032b8 <HAL_RCC_OscConfig+0xdc>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10c      	bne.n	800327a <HAL_RCC_OscConfig+0x9e>
 8003260:	4bab      	ldr	r3, [pc, #684]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4baa      	ldr	r3, [pc, #680]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003266:	49ab      	ldr	r1, [pc, #684]	; (8003514 <HAL_RCC_OscConfig+0x338>)
 8003268:	400a      	ands	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	4ba8      	ldr	r3, [pc, #672]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4ba7      	ldr	r3, [pc, #668]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003272:	49a9      	ldr	r1, [pc, #676]	; (8003518 <HAL_RCC_OscConfig+0x33c>)
 8003274:	400a      	ands	r2, r1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e01e      	b.n	80032b8 <HAL_RCC_OscConfig+0xdc>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b05      	cmp	r3, #5
 8003280:	d10e      	bne.n	80032a0 <HAL_RCC_OscConfig+0xc4>
 8003282:	4ba3      	ldr	r3, [pc, #652]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4ba2      	ldr	r3, [pc, #648]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	02c9      	lsls	r1, r1, #11
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	4b9f      	ldr	r3, [pc, #636]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4b9e      	ldr	r3, [pc, #632]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	0249      	lsls	r1, r1, #9
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0xdc>
 80032a0:	4b9b      	ldr	r3, [pc, #620]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b9a      	ldr	r3, [pc, #616]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80032a6:	499b      	ldr	r1, [pc, #620]	; (8003514 <HAL_RCC_OscConfig+0x338>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	4b98      	ldr	r3, [pc, #608]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b97      	ldr	r3, [pc, #604]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80032b2:	4999      	ldr	r1, [pc, #612]	; (8003518 <HAL_RCC_OscConfig+0x33c>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d014      	beq.n	80032ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7ff f988 	bl	80025d4 <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ca:	f7ff f983 	bl	80025d4 <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	; 0x64
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e28e      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032dc:	4b8c      	ldr	r3, [pc, #560]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	029b      	lsls	r3, r3, #10
 80032e4:	4013      	ands	r3, r2
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0xee>
 80032e8:	e015      	b.n	8003316 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7ff f973 	bl	80025d4 <HAL_GetTick>
 80032ee:	0003      	movs	r3, r0
 80032f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f4:	f7ff f96e 	bl	80025d4 <HAL_GetTick>
 80032f8:	0002      	movs	r2, r0
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e279      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	4b82      	ldr	r3, [pc, #520]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	4013      	ands	r3, r2
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x118>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2202      	movs	r2, #2
 800331c:	4013      	ands	r3, r2
 800331e:	d100      	bne.n	8003322 <HAL_RCC_OscConfig+0x146>
 8003320:	e06c      	b.n	80033fc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003322:	4b7b      	ldr	r3, [pc, #492]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	220c      	movs	r2, #12
 8003328:	4013      	ands	r3, r2
 800332a:	d00e      	beq.n	800334a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800332c:	4b78      	ldr	r3, [pc, #480]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	220c      	movs	r2, #12
 8003332:	4013      	ands	r3, r2
 8003334:	2b08      	cmp	r3, #8
 8003336:	d11f      	bne.n	8003378 <HAL_RCC_OscConfig+0x19c>
 8003338:	4b75      	ldr	r3, [pc, #468]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	23c0      	movs	r3, #192	; 0xc0
 800333e:	025b      	lsls	r3, r3, #9
 8003340:	401a      	ands	r2, r3
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	429a      	cmp	r2, r3
 8003348:	d116      	bne.n	8003378 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	4b71      	ldr	r3, [pc, #452]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2202      	movs	r2, #2
 8003350:	4013      	ands	r3, r2
 8003352:	d005      	beq.n	8003360 <HAL_RCC_OscConfig+0x184>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d001      	beq.n	8003360 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e24c      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b6b      	ldr	r3, [pc, #428]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	22f8      	movs	r2, #248	; 0xf8
 8003366:	4393      	bics	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00da      	lsls	r2, r3, #3
 8003370:	4b67      	ldr	r3, [pc, #412]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003376:	e041      	b.n	80033fc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d024      	beq.n	80033ca <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003380:	4b63      	ldr	r3, [pc, #396]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b62      	ldr	r3, [pc, #392]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003386:	2101      	movs	r1, #1
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7ff f922 	bl	80025d4 <HAL_GetTick>
 8003390:	0003      	movs	r3, r0
 8003392:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003396:	f7ff f91d 	bl	80025d4 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e228      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	4b59      	ldr	r3, [pc, #356]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2202      	movs	r2, #2
 80033ae:	4013      	ands	r3, r2
 80033b0:	d0f1      	beq.n	8003396 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b2:	4b57      	ldr	r3, [pc, #348]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	22f8      	movs	r2, #248	; 0xf8
 80033b8:	4393      	bics	r3, r2
 80033ba:	0019      	movs	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	00da      	lsls	r2, r3, #3
 80033c2:	4b53      	ldr	r3, [pc, #332]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e018      	b.n	80033fc <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ca:	4b51      	ldr	r3, [pc, #324]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b50      	ldr	r3, [pc, #320]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80033d0:	2101      	movs	r1, #1
 80033d2:	438a      	bics	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7ff f8fd 	bl	80025d4 <HAL_GetTick>
 80033da:	0003      	movs	r3, r0
 80033dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e0:	f7ff f8f8 	bl	80025d4 <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e203      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2202      	movs	r2, #2
 80033f8:	4013      	ands	r3, r2
 80033fa:	d1f1      	bne.n	80033e0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2208      	movs	r2, #8
 8003402:	4013      	ands	r3, r2
 8003404:	d036      	beq.n	8003474 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d019      	beq.n	8003442 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003412:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003414:	2101      	movs	r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341a:	f7ff f8db 	bl	80025d4 <HAL_GetTick>
 800341e:	0003      	movs	r3, r0
 8003420:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003424:	f7ff f8d6 	bl	80025d4 <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e1e1      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003436:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2202      	movs	r2, #2
 800343c:	4013      	ands	r3, r2
 800343e:	d0f1      	beq.n	8003424 <HAL_RCC_OscConfig+0x248>
 8003440:	e018      	b.n	8003474 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003442:	4b33      	ldr	r3, [pc, #204]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003446:	4b32      	ldr	r3, [pc, #200]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003448:	2101      	movs	r1, #1
 800344a:	438a      	bics	r2, r1
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7ff f8c1 	bl	80025d4 <HAL_GetTick>
 8003452:	0003      	movs	r3, r0
 8003454:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003458:	f7ff f8bc 	bl	80025d4 <HAL_GetTick>
 800345c:	0002      	movs	r2, r0
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1c7      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2202      	movs	r2, #2
 8003470:	4013      	ands	r3, r2
 8003472:	d1f1      	bne.n	8003458 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2204      	movs	r2, #4
 800347a:	4013      	ands	r3, r2
 800347c:	d100      	bne.n	8003480 <HAL_RCC_OscConfig+0x2a4>
 800347e:	e0b5      	b.n	80035ec <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003480:	201f      	movs	r0, #31
 8003482:	183b      	adds	r3, r7, r0
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	055b      	lsls	r3, r3, #21
 8003490:	4013      	ands	r3, r2
 8003492:	d110      	bne.n	80034b6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 800349a:	2180      	movs	r1, #128	; 0x80
 800349c:	0549      	lsls	r1, r1, #21
 800349e:	430a      	orrs	r2, r1
 80034a0:	61da      	str	r2, [r3, #28]
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	055b      	lsls	r3, r3, #21
 80034aa:	4013      	ands	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034b0:	183b      	adds	r3, r7, r0
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b6:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_OscConfig+0x340>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4013      	ands	r3, r2
 80034c0:	d11a      	bne.n	80034f8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_RCC_OscConfig+0x340>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <HAL_RCC_OscConfig+0x340>)
 80034c8:	2180      	movs	r1, #128	; 0x80
 80034ca:	0049      	lsls	r1, r1, #1
 80034cc:	430a      	orrs	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d0:	f7ff f880 	bl	80025d4 <HAL_GetTick>
 80034d4:	0003      	movs	r3, r0
 80034d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7ff f87b 	bl	80025d4 <HAL_GetTick>
 80034de:	0002      	movs	r2, r0
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b64      	cmp	r3, #100	; 0x64
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e186      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_OscConfig+0x340>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4013      	ands	r3, r2
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10f      	bne.n	8003520 <HAL_RCC_OscConfig+0x344>
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003502:	6a1a      	ldr	r2, [r3, #32]
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <HAL_RCC_OscConfig+0x334>)
 8003506:	2101      	movs	r1, #1
 8003508:	430a      	orrs	r2, r1
 800350a:	621a      	str	r2, [r3, #32]
 800350c:	e036      	b.n	800357c <HAL_RCC_OscConfig+0x3a0>
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	40021000 	.word	0x40021000
 8003514:	fffeffff 	.word	0xfffeffff
 8003518:	fffbffff 	.word	0xfffbffff
 800351c:	40007000 	.word	0x40007000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10c      	bne.n	8003542 <HAL_RCC_OscConfig+0x366>
 8003528:	4bb6      	ldr	r3, [pc, #728]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800352a:	6a1a      	ldr	r2, [r3, #32]
 800352c:	4bb5      	ldr	r3, [pc, #724]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800352e:	2101      	movs	r1, #1
 8003530:	438a      	bics	r2, r1
 8003532:	621a      	str	r2, [r3, #32]
 8003534:	4bb3      	ldr	r3, [pc, #716]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003536:	6a1a      	ldr	r2, [r3, #32]
 8003538:	4bb2      	ldr	r3, [pc, #712]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800353a:	2104      	movs	r1, #4
 800353c:	438a      	bics	r2, r1
 800353e:	621a      	str	r2, [r3, #32]
 8003540:	e01c      	b.n	800357c <HAL_RCC_OscConfig+0x3a0>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x388>
 800354a:	4bae      	ldr	r3, [pc, #696]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800354c:	6a1a      	ldr	r2, [r3, #32]
 800354e:	4bad      	ldr	r3, [pc, #692]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003550:	2104      	movs	r1, #4
 8003552:	430a      	orrs	r2, r1
 8003554:	621a      	str	r2, [r3, #32]
 8003556:	4bab      	ldr	r3, [pc, #684]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	4baa      	ldr	r3, [pc, #680]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800355c:	2101      	movs	r1, #1
 800355e:	430a      	orrs	r2, r1
 8003560:	621a      	str	r2, [r3, #32]
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0x3a0>
 8003564:	4ba7      	ldr	r3, [pc, #668]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003566:	6a1a      	ldr	r2, [r3, #32]
 8003568:	4ba6      	ldr	r3, [pc, #664]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800356a:	2101      	movs	r1, #1
 800356c:	438a      	bics	r2, r1
 800356e:	621a      	str	r2, [r3, #32]
 8003570:	4ba4      	ldr	r3, [pc, #656]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	4ba3      	ldr	r3, [pc, #652]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003576:	2104      	movs	r1, #4
 8003578:	438a      	bics	r2, r1
 800357a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d014      	beq.n	80035ae <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003584:	f7ff f826 	bl	80025d4 <HAL_GetTick>
 8003588:	0003      	movs	r3, r0
 800358a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e009      	b.n	80035a2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7ff f821 	bl	80025d4 <HAL_GetTick>
 8003592:	0002      	movs	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	4a9b      	ldr	r2, [pc, #620]	; (8003808 <HAL_RCC_OscConfig+0x62c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e12b      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	4b98      	ldr	r3, [pc, #608]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	2202      	movs	r2, #2
 80035a8:	4013      	ands	r3, r2
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x3b2>
 80035ac:	e013      	b.n	80035d6 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ae:	f7ff f811 	bl	80025d4 <HAL_GetTick>
 80035b2:	0003      	movs	r3, r0
 80035b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b6:	e009      	b.n	80035cc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7ff f80c 	bl	80025d4 <HAL_GetTick>
 80035bc:	0002      	movs	r2, r0
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	4a91      	ldr	r2, [pc, #580]	; (8003808 <HAL_RCC_OscConfig+0x62c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e116      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	4b8d      	ldr	r3, [pc, #564]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	2202      	movs	r2, #2
 80035d2:	4013      	ands	r3, r2
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035d6:	231f      	movs	r3, #31
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b88      	ldr	r3, [pc, #544]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	4b87      	ldr	r3, [pc, #540]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 80035e6:	4989      	ldr	r1, [pc, #548]	; (800380c <HAL_RCC_OscConfig+0x630>)
 80035e8:	400a      	ands	r2, r1
 80035ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2210      	movs	r2, #16
 80035f2:	4013      	ands	r3, r2
 80035f4:	d063      	beq.n	80036be <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d12a      	bne.n	8003654 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80035fe:	4b81      	ldr	r3, [pc, #516]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003602:	4b80      	ldr	r3, [pc, #512]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003604:	2104      	movs	r1, #4
 8003606:	430a      	orrs	r2, r1
 8003608:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800360a:	4b7e      	ldr	r3, [pc, #504]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800360c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360e:	4b7d      	ldr	r3, [pc, #500]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003610:	2101      	movs	r1, #1
 8003612:	430a      	orrs	r2, r1
 8003614:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003616:	f7fe ffdd 	bl	80025d4 <HAL_GetTick>
 800361a:	0003      	movs	r3, r0
 800361c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003620:	f7fe ffd8 	bl	80025d4 <HAL_GetTick>
 8003624:	0002      	movs	r2, r0
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e0e3      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003632:	4b74      	ldr	r3, [pc, #464]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	2202      	movs	r2, #2
 8003638:	4013      	ands	r3, r2
 800363a:	d0f1      	beq.n	8003620 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800363c:	4b71      	ldr	r3, [pc, #452]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	22f8      	movs	r2, #248	; 0xf8
 8003642:	4393      	bics	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	00da      	lsls	r2, r3, #3
 800364c:	4b6d      	ldr	r3, [pc, #436]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800364e:	430a      	orrs	r2, r1
 8003650:	635a      	str	r2, [r3, #52]	; 0x34
 8003652:	e034      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	3305      	adds	r3, #5
 800365a:	d111      	bne.n	8003680 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800365c:	4b69      	ldr	r3, [pc, #420]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800365e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003660:	4b68      	ldr	r3, [pc, #416]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003662:	2104      	movs	r1, #4
 8003664:	438a      	bics	r2, r1
 8003666:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003668:	4b66      	ldr	r3, [pc, #408]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366c:	22f8      	movs	r2, #248	; 0xf8
 800366e:	4393      	bics	r3, r2
 8003670:	0019      	movs	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	00da      	lsls	r2, r3, #3
 8003678:	4b62      	ldr	r3, [pc, #392]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800367a:	430a      	orrs	r2, r1
 800367c:	635a      	str	r2, [r3, #52]	; 0x34
 800367e:	e01e      	b.n	80036be <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003680:	4b60      	ldr	r3, [pc, #384]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003684:	4b5f      	ldr	r3, [pc, #380]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003686:	2104      	movs	r1, #4
 8003688:	430a      	orrs	r2, r1
 800368a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800368c:	4b5d      	ldr	r3, [pc, #372]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800368e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003690:	4b5c      	ldr	r3, [pc, #368]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003692:	2101      	movs	r1, #1
 8003694:	438a      	bics	r2, r1
 8003696:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003698:	f7fe ff9c 	bl	80025d4 <HAL_GetTick>
 800369c:	0003      	movs	r3, r0
 800369e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80036a2:	f7fe ff97 	bl	80025d4 <HAL_GetTick>
 80036a6:	0002      	movs	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e0a2      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80036b4:	4b53      	ldr	r3, [pc, #332]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	2202      	movs	r2, #2
 80036ba:	4013      	ands	r3, r2
 80036bc:	d1f1      	bne.n	80036a2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d100      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
 80036c6:	e097      	b.n	80037f8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c8:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	220c      	movs	r2, #12
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d100      	bne.n	80036d6 <HAL_RCC_OscConfig+0x4fa>
 80036d4:	e06b      	b.n	80037ae <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d14c      	bne.n	8003778 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036de:	4b49      	ldr	r3, [pc, #292]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b48      	ldr	r3, [pc, #288]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 80036e4:	494a      	ldr	r1, [pc, #296]	; (8003810 <HAL_RCC_OscConfig+0x634>)
 80036e6:	400a      	ands	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fe ff73 	bl	80025d4 <HAL_GetTick>
 80036ee:	0003      	movs	r3, r0
 80036f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe ff6e 	bl	80025d4 <HAL_GetTick>
 80036f8:	0002      	movs	r2, r0
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e079      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003706:	4b3f      	ldr	r3, [pc, #252]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	049b      	lsls	r3, r3, #18
 800370e:	4013      	ands	r3, r2
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003712:	4b3c      	ldr	r3, [pc, #240]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	220f      	movs	r2, #15
 8003718:	4393      	bics	r3, r2
 800371a:	0019      	movs	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003720:	4b38      	ldr	r3, [pc, #224]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003722:	430a      	orrs	r2, r1
 8003724:	62da      	str	r2, [r3, #44]	; 0x2c
 8003726:	4b37      	ldr	r3, [pc, #220]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <HAL_RCC_OscConfig+0x638>)
 800372c:	4013      	ands	r3, r2
 800372e:	0019      	movs	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	431a      	orrs	r2, r3
 800373a:	4b32      	ldr	r3, [pc, #200]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003740:	4b30      	ldr	r3, [pc, #192]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b2f      	ldr	r3, [pc, #188]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	0449      	lsls	r1, r1, #17
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374e:	f7fe ff41 	bl	80025d4 <HAL_GetTick>
 8003752:	0003      	movs	r3, r0
 8003754:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003758:	f7fe ff3c 	bl	80025d4 <HAL_GetTick>
 800375c:	0002      	movs	r2, r0
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e047      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800376a:	4b26      	ldr	r3, [pc, #152]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	049b      	lsls	r3, r3, #18
 8003772:	4013      	ands	r3, r2
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x57c>
 8003776:	e03f      	b.n	80037f8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003778:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b21      	ldr	r3, [pc, #132]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 800377e:	4924      	ldr	r1, [pc, #144]	; (8003810 <HAL_RCC_OscConfig+0x634>)
 8003780:	400a      	ands	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe ff26 	bl	80025d4 <HAL_GetTick>
 8003788:	0003      	movs	r3, r0
 800378a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fe ff21 	bl	80025d4 <HAL_GetTick>
 8003792:	0002      	movs	r2, r0
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e02c      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a0:	4b18      	ldr	r3, [pc, #96]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	049b      	lsls	r3, r3, #18
 80037a8:	4013      	ands	r3, r2
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x5b2>
 80037ac:	e024      	b.n	80037f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e01f      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80037c0:	4b10      	ldr	r3, [pc, #64]	; (8003804 <HAL_RCC_OscConfig+0x628>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	23c0      	movs	r3, #192	; 0xc0
 80037ca:	025b      	lsls	r3, r3, #9
 80037cc:	401a      	ands	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d10e      	bne.n	80037f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	220f      	movs	r2, #15
 80037da:	401a      	ands	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	23f0      	movs	r3, #240	; 0xf0
 80037e8:	039b      	lsls	r3, r3, #14
 80037ea:	401a      	ands	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	0018      	movs	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b008      	add	sp, #32
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	40021000 	.word	0x40021000
 8003808:	00001388 	.word	0x00001388
 800380c:	efffffff 	.word	0xefffffff
 8003810:	feffffff 	.word	0xfeffffff
 8003814:	ffc27fff 	.word	0xffc27fff

08003818 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b3      	b.n	8003994 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800382c:	4b5b      	ldr	r3, [pc, #364]	; (800399c <HAL_RCC_ClockConfig+0x184>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2201      	movs	r2, #1
 8003832:	4013      	ands	r3, r2
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d911      	bls.n	800385e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b58      	ldr	r3, [pc, #352]	; (800399c <HAL_RCC_ClockConfig+0x184>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2201      	movs	r2, #1
 8003840:	4393      	bics	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	4b55      	ldr	r3, [pc, #340]	; (800399c <HAL_RCC_ClockConfig+0x184>)
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384c:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_RCC_ClockConfig+0x184>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2201      	movs	r2, #1
 8003852:	4013      	ands	r3, r2
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e09a      	b.n	8003994 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2202      	movs	r2, #2
 8003864:	4013      	ands	r3, r2
 8003866:	d015      	beq.n	8003894 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2204      	movs	r2, #4
 800386e:	4013      	ands	r3, r2
 8003870:	d006      	beq.n	8003880 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003872:	4b4b      	ldr	r3, [pc, #300]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 8003878:	21e0      	movs	r1, #224	; 0xe0
 800387a:	00c9      	lsls	r1, r1, #3
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003880:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	22f0      	movs	r2, #240	; 0xf0
 8003886:	4393      	bics	r3, r2
 8003888:	0019      	movs	r1, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	4b44      	ldr	r3, [pc, #272]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2201      	movs	r2, #1
 800389a:	4013      	ands	r3, r2
 800389c:	d040      	beq.n	8003920 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	4b3e      	ldr	r3, [pc, #248]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	029b      	lsls	r3, r3, #10
 80038ae:	4013      	ands	r3, r2
 80038b0:	d114      	bne.n	80038dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e06e      	b.n	8003994 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038be:	4b38      	ldr	r3, [pc, #224]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	049b      	lsls	r3, r3, #18
 80038c6:	4013      	ands	r3, r2
 80038c8:	d108      	bne.n	80038dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e062      	b.n	8003994 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ce:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2202      	movs	r2, #2
 80038d4:	4013      	ands	r3, r2
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e05b      	b.n	8003994 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038dc:	4b30      	ldr	r3, [pc, #192]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2203      	movs	r2, #3
 80038e2:	4393      	bics	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f0:	f7fe fe70 	bl	80025d4 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f8:	e009      	b.n	800390e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fa:	f7fe fe6b 	bl	80025d4 <HAL_GetTick>
 80038fe:	0002      	movs	r2, r0
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <HAL_RCC_ClockConfig+0x18c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e042      	b.n	8003994 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	220c      	movs	r2, #12
 8003914:	401a      	ands	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	429a      	cmp	r2, r3
 800391e:	d1ec      	bne.n	80038fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003920:	4b1e      	ldr	r3, [pc, #120]	; (800399c <HAL_RCC_ClockConfig+0x184>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2201      	movs	r2, #1
 8003926:	4013      	ands	r3, r2
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d211      	bcs.n	8003952 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_RCC_ClockConfig+0x184>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2201      	movs	r2, #1
 8003934:	4393      	bics	r3, r2
 8003936:	0019      	movs	r1, r3
 8003938:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_RCC_ClockConfig+0x184>)
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003940:	4b16      	ldr	r3, [pc, #88]	; (800399c <HAL_RCC_ClockConfig+0x184>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2201      	movs	r2, #1
 8003946:	4013      	ands	r3, r2
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d001      	beq.n	8003952 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e020      	b.n	8003994 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2204      	movs	r2, #4
 8003958:	4013      	ands	r3, r2
 800395a:	d009      	beq.n	8003970 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <HAL_RCC_ClockConfig+0x190>)
 8003962:	4013      	ands	r3, r2
 8003964:	0019      	movs	r1, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003970:	f000 f820 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003974:	0001      	movs	r1, r0
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <HAL_RCC_ClockConfig+0x188>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	220f      	movs	r2, #15
 800397e:	4013      	ands	r3, r2
 8003980:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x194>)
 8003982:	5cd3      	ldrb	r3, [r2, r3]
 8003984:	000a      	movs	r2, r1
 8003986:	40da      	lsrs	r2, r3
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x198>)
 800398a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800398c:	2003      	movs	r0, #3
 800398e:	f7fe fddb 	bl	8002548 <HAL_InitTick>
  
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	0018      	movs	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	b004      	add	sp, #16
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40022000 	.word	0x40022000
 80039a0:	40021000 	.word	0x40021000
 80039a4:	00001388 	.word	0x00001388
 80039a8:	fffff8ff 	.word	0xfffff8ff
 80039ac:	08004470 	.word	0x08004470
 80039b0:	20000000 	.word	0x20000000

080039b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80039ce:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	220c      	movs	r2, #12
 80039d8:	4013      	ands	r3, r2
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d002      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x30>
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d003      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x36>
 80039e2:	e02e      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e4:	4b1c      	ldr	r3, [pc, #112]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039e6:	613b      	str	r3, [r7, #16]
      break;
 80039e8:	e02e      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	0c9b      	lsrs	r3, r3, #18
 80039ee:	220f      	movs	r2, #15
 80039f0:	4013      	ands	r3, r2
 80039f2:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xa8>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
 80039f6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	220f      	movs	r2, #15
 80039fe:	4013      	ands	r3, r2
 8003a00:	4a17      	ldr	r2, [pc, #92]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	23c0      	movs	r3, #192	; 0xc0
 8003a0a:	025b      	lsls	r3, r3, #9
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	025b      	lsls	r3, r3, #9
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d109      	bne.n	8003a2a <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	480f      	ldr	r0, [pc, #60]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a1a:	f7fc fb73 	bl	8000104 <__udivsi3>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	001a      	movs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4353      	muls	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	480a      	ldr	r0, [pc, #40]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a2e:	f7fc fb69 	bl	8000104 <__udivsi3>
 8003a32:	0003      	movs	r3, r0
 8003a34:	001a      	movs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4353      	muls	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	613b      	str	r3, [r7, #16]
      break;
 8003a40:	e002      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a44:	613b      	str	r3, [r7, #16]
      break;
 8003a46:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a48:	693b      	ldr	r3, [r7, #16]
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b006      	add	sp, #24
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	40021000 	.word	0x40021000
 8003a58:	007a1200 	.word	0x007a1200
 8003a5c:	08004488 	.word	0x08004488
 8003a60:	08004498 	.word	0x08004498

08003a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a68:	4b02      	ldr	r3, [pc, #8]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	20000000 	.word	0x20000000

08003a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003a7c:	f7ff fff2 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a80:	0001      	movs	r1, r0
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	2207      	movs	r2, #7
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a8e:	5cd3      	ldrb	r3, [r2, r3]
 8003a90:	40d9      	lsrs	r1, r3
 8003a92:	000b      	movs	r3, r1
}    
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	08004480 	.word	0x08004480

08003aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e044      	b.n	8003b40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2278      	movs	r2, #120	; 0x78
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f7fe fc95 	bl	80023f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2224      	movs	r2, #36	; 0x24
 8003ad2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2101      	movs	r1, #1
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 f8d0 	bl	8003c8c <UART_SetConfig>
 8003aec:	0003      	movs	r3, r0
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e024      	b.n	8003b40 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 fa33 	bl	8003f6c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	490d      	ldr	r1, [pc, #52]	; (8003b48 <HAL_UART_Init+0xa4>)
 8003b12:	400a      	ands	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2108      	movs	r1, #8
 8003b22:	438a      	bics	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2101      	movs	r1, #1
 8003b32:	430a      	orrs	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 facb 	bl	80040d4 <UART_CheckIdleState>
 8003b3e:	0003      	movs	r3, r0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	fffff7ff 	.word	0xfffff7ff

08003b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	1dbb      	adds	r3, r7, #6
 8003b5a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d000      	beq.n	8003b66 <HAL_UART_Transmit+0x1a>
 8003b64:	e08d      	b.n	8003c82 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_UART_Transmit+0x28>
 8003b6c:	1dbb      	adds	r3, r7, #6
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e085      	b.n	8003c84 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	015b      	lsls	r3, r3, #5
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d109      	bne.n	8003b98 <HAL_UART_Transmit+0x4c>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	4013      	ands	r3, r2
 8003b92:	d001      	beq.n	8003b98 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e075      	b.n	8003c84 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2284      	movs	r2, #132	; 0x84
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2221      	movs	r2, #33	; 0x21
 8003ba4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ba6:	f7fe fd15 	bl	80025d4 <HAL_GetTick>
 8003baa:	0003      	movs	r3, r0
 8003bac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1dba      	adds	r2, r7, #6
 8003bb2:	2150      	movs	r1, #80	; 0x50
 8003bb4:	8812      	ldrh	r2, [r2, #0]
 8003bb6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1dba      	adds	r2, r7, #6
 8003bbc:	2152      	movs	r1, #82	; 0x52
 8003bbe:	8812      	ldrh	r2, [r2, #0]
 8003bc0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	015b      	lsls	r3, r3, #5
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d108      	bne.n	8003be0 <HAL_UART_Transmit+0x94>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d104      	bne.n	8003be0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	e003      	b.n	8003be8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003be8:	e030      	b.n	8003c4c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	0013      	movs	r3, r2
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	f000 fb14 	bl	8004224 <UART_WaitOnFlagUntilTimeout>
 8003bfc:	1e03      	subs	r3, r0, #0
 8003bfe:	d004      	beq.n	8003c0a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e03c      	b.n	8003c84 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	881a      	ldrh	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	05d2      	lsls	r2, r2, #23
 8003c1a:	0dd2      	lsrs	r2, r2, #23
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	3302      	adds	r3, #2
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	e008      	b.n	8003c3a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	781a      	ldrb	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	b292      	uxth	r2, r2
 8003c32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3301      	adds	r3, #1
 8003c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2252      	movs	r2, #82	; 0x52
 8003c3e:	5a9b      	ldrh	r3, [r3, r2]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b299      	uxth	r1, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2252      	movs	r2, #82	; 0x52
 8003c4a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2252      	movs	r2, #82	; 0x52
 8003c50:	5a9b      	ldrh	r3, [r3, r2]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1c8      	bne.n	8003bea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	0013      	movs	r3, r2
 8003c62:	2200      	movs	r2, #0
 8003c64:	2140      	movs	r1, #64	; 0x40
 8003c66:	f000 fadd 	bl	8004224 <UART_WaitOnFlagUntilTimeout>
 8003c6a:	1e03      	subs	r3, r0, #0
 8003c6c:	d004      	beq.n	8003c78 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e005      	b.n	8003c84 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e000      	b.n	8003c84 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
  }
}
 8003c84:	0018      	movs	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b008      	add	sp, #32
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c94:	231e      	movs	r3, #30
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4aa1      	ldr	r2, [pc, #644]	; (8003f40 <UART_SetConfig+0x2b4>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a9c      	ldr	r2, [pc, #624]	; (8003f44 <UART_SetConfig+0x2b8>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a93      	ldr	r2, [pc, #588]	; (8003f48 <UART_SetConfig+0x2bc>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a8f      	ldr	r2, [pc, #572]	; (8003f4c <UART_SetConfig+0x2c0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d127      	bne.n	8003d62 <UART_SetConfig+0xd6>
 8003d12:	4b8f      	ldr	r3, [pc, #572]	; (8003f50 <UART_SetConfig+0x2c4>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	2203      	movs	r2, #3
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d00d      	beq.n	8003d3a <UART_SetConfig+0xae>
 8003d1e:	d81b      	bhi.n	8003d58 <UART_SetConfig+0xcc>
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d014      	beq.n	8003d4e <UART_SetConfig+0xc2>
 8003d24:	d818      	bhi.n	8003d58 <UART_SetConfig+0xcc>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <UART_SetConfig+0xa4>
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d00a      	beq.n	8003d44 <UART_SetConfig+0xb8>
 8003d2e:	e013      	b.n	8003d58 <UART_SetConfig+0xcc>
 8003d30:	231f      	movs	r3, #31
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	e049      	b.n	8003dce <UART_SetConfig+0x142>
 8003d3a:	231f      	movs	r3, #31
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	2202      	movs	r2, #2
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e044      	b.n	8003dce <UART_SetConfig+0x142>
 8003d44:	231f      	movs	r3, #31
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	2204      	movs	r2, #4
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e03f      	b.n	8003dce <UART_SetConfig+0x142>
 8003d4e:	231f      	movs	r3, #31
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	2208      	movs	r2, #8
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	e03a      	b.n	8003dce <UART_SetConfig+0x142>
 8003d58:	231f      	movs	r3, #31
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e035      	b.n	8003dce <UART_SetConfig+0x142>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a7b      	ldr	r2, [pc, #492]	; (8003f54 <UART_SetConfig+0x2c8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d104      	bne.n	8003d76 <UART_SetConfig+0xea>
 8003d6c:	231f      	movs	r3, #31
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e02b      	b.n	8003dce <UART_SetConfig+0x142>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a77      	ldr	r2, [pc, #476]	; (8003f58 <UART_SetConfig+0x2cc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d104      	bne.n	8003d8a <UART_SetConfig+0xfe>
 8003d80:	231f      	movs	r3, #31
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e021      	b.n	8003dce <UART_SetConfig+0x142>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a73      	ldr	r2, [pc, #460]	; (8003f5c <UART_SetConfig+0x2d0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d104      	bne.n	8003d9e <UART_SetConfig+0x112>
 8003d94:	231f      	movs	r3, #31
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e017      	b.n	8003dce <UART_SetConfig+0x142>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a6f      	ldr	r2, [pc, #444]	; (8003f60 <UART_SetConfig+0x2d4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d104      	bne.n	8003db2 <UART_SetConfig+0x126>
 8003da8:	231f      	movs	r3, #31
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	e00d      	b.n	8003dce <UART_SetConfig+0x142>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a6b      	ldr	r2, [pc, #428]	; (8003f64 <UART_SetConfig+0x2d8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d104      	bne.n	8003dc6 <UART_SetConfig+0x13a>
 8003dbc:	231f      	movs	r3, #31
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e003      	b.n	8003dce <UART_SetConfig+0x142>
 8003dc6:	231f      	movs	r3, #31
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	2210      	movs	r2, #16
 8003dcc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d15c      	bne.n	8003e94 <UART_SetConfig+0x208>
  {
    switch (clocksource)
 8003dda:	231f      	movs	r3, #31
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d015      	beq.n	8003e10 <UART_SetConfig+0x184>
 8003de4:	dc18      	bgt.n	8003e18 <UART_SetConfig+0x18c>
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00d      	beq.n	8003e06 <UART_SetConfig+0x17a>
 8003dea:	dc15      	bgt.n	8003e18 <UART_SetConfig+0x18c>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <UART_SetConfig+0x16a>
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d005      	beq.n	8003e00 <UART_SetConfig+0x174>
 8003df4:	e010      	b.n	8003e18 <UART_SetConfig+0x18c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df6:	f7ff fe3f 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	61bb      	str	r3, [r7, #24]
        break;
 8003dfe:	e012      	b.n	8003e26 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e00:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <UART_SetConfig+0x2dc>)
 8003e02:	61bb      	str	r3, [r7, #24]
        break;
 8003e04:	e00f      	b.n	8003e26 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e06:	f7ff fdd5 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	61bb      	str	r3, [r7, #24]
        break;
 8003e0e:	e00a      	b.n	8003e26 <UART_SetConfig+0x19a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	61bb      	str	r3, [r7, #24]
        break;
 8003e16:	e006      	b.n	8003e26 <UART_SetConfig+0x19a>
      default:
        pclk = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e1c:	231e      	movs	r3, #30
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
        break;
 8003e24:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d100      	bne.n	8003e2e <UART_SetConfig+0x1a2>
 8003e2c:	e07a      	b.n	8003f24 <UART_SetConfig+0x298>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	005a      	lsls	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	18d2      	adds	r2, r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	0019      	movs	r1, r3
 8003e40:	0010      	movs	r0, r2
 8003e42:	f7fc f95f 	bl	8000104 <__udivsi3>
 8003e46:	0003      	movs	r3, r0
 8003e48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d91c      	bls.n	8003e8a <UART_SetConfig+0x1fe>
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	025b      	lsls	r3, r3, #9
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d217      	bcs.n	8003e8a <UART_SetConfig+0x1fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	200e      	movs	r0, #14
 8003e60:	183b      	adds	r3, r7, r0
 8003e62:	210f      	movs	r1, #15
 8003e64:	438a      	bics	r2, r1
 8003e66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2207      	movs	r2, #7
 8003e70:	4013      	ands	r3, r2
 8003e72:	b299      	uxth	r1, r3
 8003e74:	183b      	adds	r3, r7, r0
 8003e76:	183a      	adds	r2, r7, r0
 8003e78:	8812      	ldrh	r2, [r2, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	183a      	adds	r2, r7, r0
 8003e84:	8812      	ldrh	r2, [r2, #0]
 8003e86:	60da      	str	r2, [r3, #12]
 8003e88:	e04c      	b.n	8003f24 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8a:	231e      	movs	r3, #30
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	2201      	movs	r2, #1
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e047      	b.n	8003f24 <UART_SetConfig+0x298>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e94:	231f      	movs	r3, #31
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d015      	beq.n	8003eca <UART_SetConfig+0x23e>
 8003e9e:	dc18      	bgt.n	8003ed2 <UART_SetConfig+0x246>
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d00d      	beq.n	8003ec0 <UART_SetConfig+0x234>
 8003ea4:	dc15      	bgt.n	8003ed2 <UART_SetConfig+0x246>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <UART_SetConfig+0x224>
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d005      	beq.n	8003eba <UART_SetConfig+0x22e>
 8003eae:	e010      	b.n	8003ed2 <UART_SetConfig+0x246>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb0:	f7ff fde2 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	61bb      	str	r3, [r7, #24]
        break;
 8003eb8:	e012      	b.n	8003ee0 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eba:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <UART_SetConfig+0x2dc>)
 8003ebc:	61bb      	str	r3, [r7, #24]
        break;
 8003ebe:	e00f      	b.n	8003ee0 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec0:	f7ff fd78 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	61bb      	str	r3, [r7, #24]
        break;
 8003ec8:	e00a      	b.n	8003ee0 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	61bb      	str	r3, [r7, #24]
        break;
 8003ed0:	e006      	b.n	8003ee0 <UART_SetConfig+0x254>
      default:
        pclk = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ed6:	231e      	movs	r3, #30
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	2201      	movs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
        break;
 8003ede:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01e      	beq.n	8003f24 <UART_SetConfig+0x298>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	085a      	lsrs	r2, r3, #1
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	18d2      	adds	r2, r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	0010      	movs	r0, r2
 8003ef8:	f7fc f904 	bl	8000104 <__udivsi3>
 8003efc:	0003      	movs	r3, r0
 8003efe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b0f      	cmp	r3, #15
 8003f04:	d90a      	bls.n	8003f1c <UART_SetConfig+0x290>
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	025b      	lsls	r3, r3, #9
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d205      	bcs.n	8003f1c <UART_SetConfig+0x290>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	e003      	b.n	8003f24 <UART_SetConfig+0x298>
      }
      else
      {
        ret = HAL_ERROR;
 8003f1c:	231e      	movs	r3, #30
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	2201      	movs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f30:	231e      	movs	r3, #30
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	781b      	ldrb	r3, [r3, #0]
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b008      	add	sp, #32
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	efff69f3 	.word	0xefff69f3
 8003f44:	ffffcfff 	.word	0xffffcfff
 8003f48:	fffff4ff 	.word	0xfffff4ff
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40004400 	.word	0x40004400
 8003f58:	40004800 	.word	0x40004800
 8003f5c:	40004c00 	.word	0x40004c00
 8003f60:	40005000 	.word	0x40005000
 8003f64:	40011400 	.word	0x40011400
 8003f68:	007a1200 	.word	0x007a1200

08003f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2201      	movs	r2, #1
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d00b      	beq.n	8003f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a4a      	ldr	r2, [pc, #296]	; (80040b0 <UART_AdvFeatureConfig+0x144>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	0019      	movs	r1, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d00b      	beq.n	8003fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4a43      	ldr	r2, [pc, #268]	; (80040b4 <UART_AdvFeatureConfig+0x148>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4a3b      	ldr	r2, [pc, #236]	; (80040b8 <UART_AdvFeatureConfig+0x14c>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	0019      	movs	r1, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2208      	movs	r2, #8
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d00b      	beq.n	8003ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4a34      	ldr	r2, [pc, #208]	; (80040bc <UART_AdvFeatureConfig+0x150>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	0019      	movs	r1, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	2210      	movs	r2, #16
 8004002:	4013      	ands	r3, r2
 8004004:	d00b      	beq.n	800401e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <UART_AdvFeatureConfig+0x154>)
 800400e:	4013      	ands	r3, r2
 8004010:	0019      	movs	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2220      	movs	r2, #32
 8004024:	4013      	ands	r3, r2
 8004026:	d00b      	beq.n	8004040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <UART_AdvFeatureConfig+0x158>)
 8004030:	4013      	ands	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2240      	movs	r2, #64	; 0x40
 8004046:	4013      	ands	r3, r2
 8004048:	d01d      	beq.n	8004086 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <UART_AdvFeatureConfig+0x15c>)
 8004052:	4013      	ands	r3, r2
 8004054:	0019      	movs	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	035b      	lsls	r3, r3, #13
 800406a:	429a      	cmp	r2, r3
 800406c:	d10b      	bne.n	8004086 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4a15      	ldr	r2, [pc, #84]	; (80040cc <UART_AdvFeatureConfig+0x160>)
 8004076:	4013      	ands	r3, r2
 8004078:	0019      	movs	r1, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	2280      	movs	r2, #128	; 0x80
 800408c:	4013      	ands	r3, r2
 800408e:	d00b      	beq.n	80040a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <UART_AdvFeatureConfig+0x164>)
 8004098:	4013      	ands	r3, r2
 800409a:	0019      	movs	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
  }
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b002      	add	sp, #8
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	fffdffff 	.word	0xfffdffff
 80040b4:	fffeffff 	.word	0xfffeffff
 80040b8:	fffbffff 	.word	0xfffbffff
 80040bc:	ffff7fff 	.word	0xffff7fff
 80040c0:	ffffefff 	.word	0xffffefff
 80040c4:	ffffdfff 	.word	0xffffdfff
 80040c8:	ffefffff 	.word	0xffefffff
 80040cc:	ff9fffff 	.word	0xff9fffff
 80040d0:	fff7ffff 	.word	0xfff7ffff

080040d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b092      	sub	sp, #72	; 0x48
 80040d8:	af02      	add	r7, sp, #8
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2284      	movs	r2, #132	; 0x84
 80040e0:	2100      	movs	r1, #0
 80040e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040e4:	f7fe fa76 	bl	80025d4 <HAL_GetTick>
 80040e8:	0003      	movs	r3, r0
 80040ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2208      	movs	r2, #8
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d12c      	bne.n	8004154 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fc:	2280      	movs	r2, #128	; 0x80
 80040fe:	0391      	lsls	r1, r2, #14
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4a46      	ldr	r2, [pc, #280]	; (800421c <UART_CheckIdleState+0x148>)
 8004104:	9200      	str	r2, [sp, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	f000 f88c 	bl	8004224 <UART_WaitOnFlagUntilTimeout>
 800410c:	1e03      	subs	r3, r0, #0
 800410e:	d021      	beq.n	8004154 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004110:	f3ef 8310 	mrs	r3, PRIMASK
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38
 800411a:	2301      	movs	r3, #1
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	f383 8810 	msr	PRIMASK, r3
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	438a      	bics	r2, r1
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	f383 8810 	msr	PRIMASK, r3
}
 8004140:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2278      	movs	r2, #120	; 0x78
 800414c:	2100      	movs	r1, #0
 800414e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e05f      	b.n	8004214 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2204      	movs	r2, #4
 800415c:	4013      	ands	r3, r2
 800415e:	2b04      	cmp	r3, #4
 8004160:	d146      	bne.n	80041f0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004164:	2280      	movs	r2, #128	; 0x80
 8004166:	03d1      	lsls	r1, r2, #15
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4a2c      	ldr	r2, [pc, #176]	; (800421c <UART_CheckIdleState+0x148>)
 800416c:	9200      	str	r2, [sp, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	f000 f858 	bl	8004224 <UART_WaitOnFlagUntilTimeout>
 8004174:	1e03      	subs	r3, r0, #0
 8004176:	d03b      	beq.n	80041f0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004178:	f3ef 8310 	mrs	r3, PRIMASK
 800417c:	60fb      	str	r3, [r7, #12]
  return(result);
 800417e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004180:	637b      	str	r3, [r7, #52]	; 0x34
 8004182:	2301      	movs	r3, #1
 8004184:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f383 8810 	msr	PRIMASK, r3
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4921      	ldr	r1, [pc, #132]	; (8004220 <UART_CheckIdleState+0x14c>)
 800419a:	400a      	ands	r2, r1
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f383 8810 	msr	PRIMASK, r3
}
 80041a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041aa:	f3ef 8310 	mrs	r3, PRIMASK
 80041ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80041b0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
 80041b4:	2301      	movs	r3, #1
 80041b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f383 8810 	msr	PRIMASK, r3
}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2101      	movs	r1, #1
 80041cc:	438a      	bics	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	f383 8810 	msr	PRIMASK, r3
}
 80041da:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	2120      	movs	r1, #32
 80041e2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2278      	movs	r2, #120	; 0x78
 80041e8:	2100      	movs	r1, #0
 80041ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e011      	b.n	8004214 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2280      	movs	r2, #128	; 0x80
 80041fa:	2120      	movs	r1, #32
 80041fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2278      	movs	r2, #120	; 0x78
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	b010      	add	sp, #64	; 0x40
 800421a:	bd80      	pop	{r7, pc}
 800421c:	01ffffff 	.word	0x01ffffff
 8004220:	fffffedf 	.word	0xfffffedf

08004224 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	1dfb      	adds	r3, r7, #7
 8004232:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004234:	e04b      	b.n	80042ce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	3301      	adds	r3, #1
 800423a:	d048      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423c:	f7fe f9ca 	bl	80025d4 <HAL_GetTick>
 8004240:	0002      	movs	r2, r0
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	429a      	cmp	r2, r3
 800424a:	d302      	bcc.n	8004252 <UART_WaitOnFlagUntilTimeout+0x2e>
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e04b      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2204      	movs	r2, #4
 800425e:	4013      	ands	r3, r2
 8004260:	d035      	beq.n	80042ce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	2208      	movs	r2, #8
 800426a:	4013      	ands	r3, r2
 800426c:	2b08      	cmp	r3, #8
 800426e:	d111      	bne.n	8004294 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2208      	movs	r2, #8
 8004276:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	0018      	movs	r0, r3
 800427c:	f000 f83c 	bl	80042f8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2284      	movs	r2, #132	; 0x84
 8004284:	2108      	movs	r1, #8
 8004286:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2278      	movs	r2, #120	; 0x78
 800428c:	2100      	movs	r1, #0
 800428e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e02c      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69da      	ldr	r2, [r3, #28]
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	401a      	ands	r2, r3
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d112      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	0112      	lsls	r2, r2, #4
 80042b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f000 f81f 	bl	80042f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2284      	movs	r2, #132	; 0x84
 80042be:	2120      	movs	r1, #32
 80042c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2278      	movs	r2, #120	; 0x78
 80042c6:	2100      	movs	r1, #0
 80042c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e00f      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	4013      	ands	r3, r2
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	425a      	negs	r2, r3
 80042de:	4153      	adcs	r3, r2
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	001a      	movs	r2, r3
 80042e4:	1dfb      	adds	r3, r7, #7
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d0a4      	beq.n	8004236 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b004      	add	sp, #16
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08e      	sub	sp, #56	; 0x38
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004300:	f3ef 8310 	mrs	r3, PRIMASK
 8004304:	617b      	str	r3, [r7, #20]
  return(result);
 8004306:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
 800430a:	2301      	movs	r3, #1
 800430c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f383 8810 	msr	PRIMASK, r3
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4926      	ldr	r1, [pc, #152]	; (80043bc <UART_EndRxTransfer+0xc4>)
 8004322:	400a      	ands	r2, r1
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004328:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004332:	f3ef 8310 	mrs	r3, PRIMASK
 8004336:	623b      	str	r3, [r7, #32]
  return(result);
 8004338:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	633b      	str	r3, [r7, #48]	; 0x30
 800433c:	2301      	movs	r3, #1
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	f383 8810 	msr	PRIMASK, r3
}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2101      	movs	r1, #1
 8004354:	438a      	bics	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	f383 8810 	msr	PRIMASK, r3
}
 8004362:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004368:	2b01      	cmp	r3, #1
 800436a:	d118      	bne.n	800439e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800436c:	f3ef 8310 	mrs	r3, PRIMASK
 8004370:	60bb      	str	r3, [r7, #8]
  return(result);
 8004372:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004376:	2301      	movs	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f383 8810 	msr	PRIMASK, r3
}
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2110      	movs	r1, #16
 800438e:	438a      	bics	r2, r1
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f383 8810 	msr	PRIMASK, r3
}
 800439c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2280      	movs	r2, #128	; 0x80
 80043a2:	2120      	movs	r1, #32
 80043a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b00e      	add	sp, #56	; 0x38
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	fffffedf 	.word	0xfffffedf

080043c0 <memset>:
 80043c0:	0003      	movs	r3, r0
 80043c2:	1882      	adds	r2, r0, r2
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d100      	bne.n	80043ca <memset+0xa>
 80043c8:	4770      	bx	lr
 80043ca:	7019      	strb	r1, [r3, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	e7f9      	b.n	80043c4 <memset+0x4>

080043d0 <__libc_init_array>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	2600      	movs	r6, #0
 80043d4:	4c0c      	ldr	r4, [pc, #48]	; (8004408 <__libc_init_array+0x38>)
 80043d6:	4d0d      	ldr	r5, [pc, #52]	; (800440c <__libc_init_array+0x3c>)
 80043d8:	1b64      	subs	r4, r4, r5
 80043da:	10a4      	asrs	r4, r4, #2
 80043dc:	42a6      	cmp	r6, r4
 80043de:	d109      	bne.n	80043f4 <__libc_init_array+0x24>
 80043e0:	2600      	movs	r6, #0
 80043e2:	f000 f819 	bl	8004418 <_init>
 80043e6:	4c0a      	ldr	r4, [pc, #40]	; (8004410 <__libc_init_array+0x40>)
 80043e8:	4d0a      	ldr	r5, [pc, #40]	; (8004414 <__libc_init_array+0x44>)
 80043ea:	1b64      	subs	r4, r4, r5
 80043ec:	10a4      	asrs	r4, r4, #2
 80043ee:	42a6      	cmp	r6, r4
 80043f0:	d105      	bne.n	80043fe <__libc_init_array+0x2e>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	00b3      	lsls	r3, r6, #2
 80043f6:	58eb      	ldr	r3, [r5, r3]
 80043f8:	4798      	blx	r3
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7ee      	b.n	80043dc <__libc_init_array+0xc>
 80043fe:	00b3      	lsls	r3, r6, #2
 8004400:	58eb      	ldr	r3, [r5, r3]
 8004402:	4798      	blx	r3
 8004404:	3601      	adds	r6, #1
 8004406:	e7f2      	b.n	80043ee <__libc_init_array+0x1e>
 8004408:	080044a8 	.word	0x080044a8
 800440c:	080044a8 	.word	0x080044a8
 8004410:	080044ac 	.word	0x080044ac
 8004414:	080044a8 	.word	0x080044a8

08004418 <_init>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

08004424 <_fini>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr
