
RC_L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff8  08006ff8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007000  08007000  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000010  08007018  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08007018  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e07  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288d  00000000  00000000  00034e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  00037718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef9  00000000  00000000  00038a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027fa9  00000000  00000000  00039929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015cfd  00000000  00000000  000618d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102093  00000000  00000000  000775cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005360  00000000  00000000  00179664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0017e9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f98 	.word	0x08006f98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006f98 	.word	0x08006f98

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b970 	b.w	8000cfc <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	460f      	mov	r7, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d965      	bls.n	8000b16 <__udivmoddi4+0xe2>
 8000a4a:	fab2 f382 	clz	r3, r2
 8000a4e:	b143      	cbz	r3, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a54:	f1c3 0220 	rsb	r2, r3, #32
 8000a58:	409f      	lsls	r7, r3
 8000a5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a5e:	4317      	orrs	r7, r2
 8000a60:	409c      	lsls	r4, r3
 8000a62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a66:	fa1f f58c 	uxth.w	r5, ip
 8000a6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a6e:	0c22      	lsrs	r2, r4, #16
 8000a70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a78:	fb01 f005 	mul.w	r0, r1, r5
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	d90a      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a80:	eb1c 0202 	adds.w	r2, ip, r2
 8000a84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a88:	f080 811c 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	f240 8119 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000a92:	3902      	subs	r1, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	b2a4      	uxth	r4, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aa6:	fb00 f505 	mul.w	r5, r0, r5
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x90>
 8000aae:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab6:	f080 8107 	bcs.w	8000cc8 <__udivmoddi4+0x294>
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	f240 8104 	bls.w	8000cc8 <__udivmoddi4+0x294>
 8000ac0:	4464      	add	r4, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11e      	cbz	r6, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40dc      	lsrs	r4, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0xbc>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ed 	beq.w	8000cbe <__udivmoddi4+0x28a>
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aea:	4608      	mov	r0, r1
 8000aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af0:	fab3 f183 	clz	r1, r3
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d149      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d302      	bcc.n	8000b02 <__udivmoddi4+0xce>
 8000afc:	4282      	cmp	r2, r0
 8000afe:	f200 80f8 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b02:	1a84      	subs	r4, r0, r2
 8000b04:	eb65 0203 	sbc.w	r2, r5, r3
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4617      	mov	r7, r2
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d0e2      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	e9c6 4700 	strd	r4, r7, [r6]
 8000b14:	e7df      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b16:	b902      	cbnz	r2, 8000b1a <__udivmoddi4+0xe6>
 8000b18:	deff      	udf	#255	; 0xff
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b34:	fb07 2015 	mls	r0, r7, r5, r2
 8000b38:	0c22      	lsrs	r2, r4, #16
 8000b3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b3e:	fb0e f005 	mul.w	r0, lr, r5
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b46:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4290      	cmp	r0, r2
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b56:	4645      	mov	r5, r8
 8000b58:	1a12      	subs	r2, r2, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b60:	fb07 2210 	mls	r2, r7, r0, r2
 8000b64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b80:	4610      	mov	r0, r2
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b8a:	e79f      	b.n	8000acc <__udivmoddi4+0x98>
 8000b8c:	f1c1 0720 	rsb	r7, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ba2:	40fd      	lsrs	r5, r7
 8000ba4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba8:	4323      	orrs	r3, r4
 8000baa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bae:	fa1f fe8c 	uxth.w	lr, ip
 8000bb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bb6:	0c1c      	lsrs	r4, r3, #16
 8000bb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	b29d      	uxth	r5, r3
 8000be8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bec:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c12:	fba3 9502 	umull	r9, r5, r3, r2
 8000c16:	eba4 040e 	sub.w	r4, r4, lr
 8000c1a:	42ac      	cmp	r4, r5
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46ae      	mov	lr, r5
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x29c>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x298>
 8000c24:	b156      	cbz	r6, 8000c3c <__udivmoddi4+0x208>
 8000c26:	ebb0 0208 	subs.w	r2, r0, r8
 8000c2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c32:	40ca      	lsrs	r2, r1
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	4317      	orrs	r7, r2
 8000c38:	e9c6 7400 	strd	r7, r4, [r6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	f1c3 0120 	rsb	r1, r3, #32
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c50:	fa25 f101 	lsr.w	r1, r5, r1
 8000c54:	409d      	lsls	r5, r3
 8000c56:	432a      	orrs	r2, r5
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c64:	fb07 1510 	mls	r5, r7, r0, r1
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c72:	428d      	cmp	r5, r1
 8000c74:	fa04 f403 	lsl.w	r4, r4, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x258>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	428d      	cmp	r5, r1
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c94:	fb07 1115 	mls	r1, r7, r5, r1
 8000c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca0:	4291      	cmp	r1, r2
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x282>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	4291      	cmp	r1, r2
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cb2:	3d02      	subs	r5, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a52      	subs	r2, r2, r1
 8000cb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0xfc>
 8000cbe:	4631      	mov	r1, r6
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e6e6      	b.n	8000a96 <__udivmoddi4+0x62>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	e6fb      	b.n	8000ac4 <__udivmoddi4+0x90>
 8000ccc:	4548      	cmp	r0, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cdc:	4645      	mov	r5, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000ce0:	462b      	mov	r3, r5
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x258>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3d02      	subs	r5, #2
 8000cee:	4462      	add	r2, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e70a      	b.n	8000b0c <__udivmoddi4+0xd8>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x14e>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f000 fdb9 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f955 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f000 fb11 	bl	8001334 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d12:	f000 f9a5 	bl	8001060 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d16:	f000 fa29 	bl	800116c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d1a:	f000 faab 	bl	8001274 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d1e:	f000 fad9 	bl	80012d4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000d22:	2108      	movs	r1, #8
 8000d24:	489b      	ldr	r0, [pc, #620]	; (8000f94 <main+0x294>)
 8000d26:	f003 fd17 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000d2a:	210c      	movs	r1, #12
 8000d2c:	4899      	ldr	r0, [pc, #612]	; (8000f94 <main+0x294>)
 8000d2e:	f003 fd13 	bl	8004758 <HAL_TIM_PWM_Start>

  // Set an initial duty cycle for an angle of 6 degree (middle)
  duty = ( ( ( 0 / 18.0 ) + 2 ) / 100 );
 8000d32:	4b99      	ldr	r3, [pc, #612]	; (8000f98 <main+0x298>)
 8000d34:	607b      	str	r3, [r7, #4]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ( duty * htim2.Init.Period ));
 8000d36:	4b97      	ldr	r3, [pc, #604]	; (8000f94 <main+0x294>)
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	ee07 3a90 	vmov	s15, r3
 8000d3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d4a:	4b92      	ldr	r3, [pc, #584]	; (8000f94 <main+0x294>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d52:	ee17 2a90 	vmov	r2, s15
 8000d56:	63da      	str	r2, [r3, #60]	; 0x3c
  duty = ( ( ( 180 / 18.0 ) + 2 ) / 100 );
 8000d58:	4b90      	ldr	r3, [pc, #576]	; (8000f9c <main+0x29c>)
 8000d5a:	607b      	str	r3, [r7, #4]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ( duty * htim2.Init.Period ));
 8000d5c:	4b8d      	ldr	r3, [pc, #564]	; (8000f94 <main+0x294>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	ee07 3a90 	vmov	s15, r3
 8000d64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d68:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d70:	4b88      	ldr	r3, [pc, #544]	; (8000f94 <main+0x294>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d78:	ee17 2a90 	vmov	r2, s15
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_UART_Transmit_IT(&huart3, (uint8_t *)('k'), 1);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	216b      	movs	r1, #107	; 0x6b
 8000d82:	4887      	ldr	r0, [pc, #540]	; (8000fa0 <main+0x2a0>)
 8000d84:	f004 fcd2 	bl	800572c <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart3, loraDataRx, 1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4986      	ldr	r1, [pc, #536]	; (8000fa4 <main+0x2a4>)
 8000d8c:	4884      	ldr	r0, [pc, #528]	; (8000fa0 <main+0x2a0>)
 8000d8e:	f004 fd2b 	bl	80057e8 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    /* USER CODE END WHILE */
		  // Delay between each iteration
		  HAL_Delay(20);
 8000d92:	2014      	movs	r0, #20
 8000d94:	f000 fdee 	bl	8001974 <HAL_Delay>

		  // Servo motor angle //

		  if(angle < 80 )
 8000d98:	4b83      	ldr	r3, [pc, #524]	; (8000fa8 <main+0x2a8>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b4f      	cmp	r3, #79	; 0x4f
 8000d9e:	d84c      	bhi.n	8000e3a <main+0x13a>
		  {

			  // Turn right

			  anglep = angle + 100;
 8000da0:	4b81      	ldr	r3, [pc, #516]	; (8000fa8 <main+0x2a8>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3364      	adds	r3, #100	; 0x64
 8000da6:	70fb      	strb	r3, [r7, #3]
			  duty = ( ( ( 0 / 18.0 ) + 2 ) / 100.0 );
 8000da8:	4b7b      	ldr	r3, [pc, #492]	; (8000f98 <main+0x298>)
 8000daa:	607b      	str	r3, [r7, #4]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ( duty * htim2.Init.Period ));
 8000dac:	4b79      	ldr	r3, [pc, #484]	; (8000f94 <main+0x294>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000db8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc0:	4b74      	ldr	r3, [pc, #464]	; (8000f94 <main+0x294>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dc8:	ee17 2a90 	vmov	r2, s15
 8000dcc:	63da      	str	r2, [r3, #60]	; 0x3c
			  duty = ( ( (anglep / 18.0 ) + 2 ) / 100.0 );
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fb4b 	bl	800046c <__aeabi_i2d>
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	4b74      	ldr	r3, [pc, #464]	; (8000fac <main+0x2ac>)
 8000ddc:	f7ff fcda 	bl	8000794 <__aeabi_ddiv>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	4610      	mov	r0, r2
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 0200 	mov.w	r2, #0
 8000dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df0:	f7ff f9f0 	bl	80001d4 <__adddf3>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 0200 	mov.w	r2, #0
 8000e00:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <main+0x2b0>)
 8000e02:	f7ff fcc7 	bl	8000794 <__aeabi_ddiv>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f7ff fda9 	bl	8000964 <__aeabi_d2f>
 8000e12:	4603      	mov	r3, r0
 8000e14:	607b      	str	r3, [r7, #4]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ( duty * htim2.Init.Period ));
 8000e16:	4b5f      	ldr	r3, [pc, #380]	; (8000f94 <main+0x294>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e2a:	4b5a      	ldr	r3, [pc, #360]	; (8000f94 <main+0x294>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e32:	ee17 2a90 	vmov	r2, s15
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
 8000e38:	e076      	b.n	8000f28 <main+0x228>

		  }
		  else if(angle > 100)
 8000e3a:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <main+0x2a8>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b64      	cmp	r3, #100	; 0x64
 8000e40:	d94c      	bls.n	8000edc <main+0x1dc>
		  {

			  // Turn left

			  anglep = angle + 50;
 8000e42:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <main+0x2a8>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3332      	adds	r3, #50	; 0x32
 8000e48:	70fb      	strb	r3, [r7, #3]
			  duty = ( ( ( anglep / 18.0 ) + 2 ) / 100.0 );
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb0d 	bl	800046c <__aeabi_i2d>
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	4b55      	ldr	r3, [pc, #340]	; (8000fac <main+0x2ac>)
 8000e58:	f7ff fc9c 	bl	8000794 <__aeabi_ddiv>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e6c:	f7ff f9b2 	bl	80001d4 <__adddf3>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <main+0x2b0>)
 8000e7e:	f7ff fc89 	bl	8000794 <__aeabi_ddiv>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fd6b 	bl	8000964 <__aeabi_d2f>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	607b      	str	r3, [r7, #4]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ( duty * htim2.Init.Period ));
 8000e92:	4b40      	ldr	r3, [pc, #256]	; (8000f94 <main+0x294>)
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <main+0x294>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eae:	ee17 2a90 	vmov	r2, s15
 8000eb2:	63da      	str	r2, [r3, #60]	; 0x3c
			  duty = ( ( ( 180 / 18.0 ) + 2 ) / 100.0 );
 8000eb4:	4b39      	ldr	r3, [pc, #228]	; (8000f9c <main+0x29c>)
 8000eb6:	607b      	str	r3, [r7, #4]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ( duty * htim2.Init.Period ));
 8000eb8:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <main+0x294>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ec4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ecc:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <main+0x294>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ed4:	ee17 2a90 	vmov	r2, s15
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40
 8000eda:	e025      	b.n	8000f28 <main+0x228>
		  else
		  {

			  // Straight

			  duty = ( ( ( 0 / 18.0 ) + 2 ) / 100.0 );
 8000edc:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <main+0x298>)
 8000ede:	607b      	str	r3, [r7, #4]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ( duty * htim2.Init.Period ));
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <main+0x294>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <main+0x294>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000efc:	ee17 2a90 	vmov	r2, s15
 8000f00:	63da      	str	r2, [r3, #60]	; 0x3c
			  duty = ( ( ( 180 / 18.0 ) + 2 ) / 100.0 );
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <main+0x29c>)
 8000f04:	607b      	str	r3, [r7, #4]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ( duty * htim2.Init.Period ));
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <main+0x294>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <main+0x294>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f22:	ee17 2a90 	vmov	r2, s15
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40

		  }

		  // Motor speed //

		  if(speed > 200)
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <main+0x2b4>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	2bc8      	cmp	r3, #200	; 0xc8
 8000f2e:	d90e      	bls.n	8000f4e <main+0x24e>
		  {

			  // Motor forward rotation

			  HAL_GPIO_WritePin(M_BACKWARD_GPIO_Port, M_BACKWARD_Pin, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f002 f81d 	bl	8002f78 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(M_FORWARD_GPIO_Port, M_FORWARD_Pin, 1);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f002 f816 	bl	8002f78 <HAL_GPIO_WritePin>
 8000f4c:	e721      	b.n	8000d92 <main+0x92>

		  }
		  else if( speed < 100 )
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <main+0x2b4>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	2b63      	cmp	r3, #99	; 0x63
 8000f54:	d80e      	bhi.n	8000f74 <main+0x274>
		  {


			  // Motor backward rotation

			  HAL_GPIO_WritePin(M_FORWARD_GPIO_Port, M_FORWARD_Pin, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f002 f80a 	bl	8002f78 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(M_BACKWARD_GPIO_Port, M_BACKWARD_Pin, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f002 f803 	bl	8002f78 <HAL_GPIO_WritePin>
 8000f72:	e70e      	b.n	8000d92 <main+0x92>
		  else
		  {

			  // Stop

			  HAL_GPIO_WritePin(M_FORWARD_GPIO_Port, M_FORWARD_Pin, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f001 fffb 	bl	8002f78 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(M_BACKWARD_GPIO_Port, M_BACKWARD_Pin, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f001 fff4 	bl	8002f78 <HAL_GPIO_WritePin>
		  HAL_Delay(20);
 8000f90:	e6ff      	b.n	8000d92 <main+0x92>
 8000f92:	bf00      	nop
 8000f94:	20000090 	.word	0x20000090
 8000f98:	3ca3d70a 	.word	0x3ca3d70a
 8000f9c:	3df5c28f 	.word	0x3df5c28f
 8000fa0:	20000164 	.word	0x20000164
 8000fa4:	200001ec 	.word	0x200001ec
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	40320000 	.word	0x40320000
 8000fb0:	40590000 	.word	0x40590000
 8000fb4:	20000002 	.word	0x20000002

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b096      	sub	sp, #88	; 0x58
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2244      	movs	r2, #68	; 0x44
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f005 ffba 	bl	8006f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fde:	f001 fff1 	bl	8002fc4 <HAL_PWREx_ControlVoltageScaling>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fe8:	f000 fa48 	bl	800147c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fec:	2302      	movs	r3, #2
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffe:	2302      	movs	r3, #2
 8001000:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001006:	2308      	movs	r3, #8
 8001008:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800100a:	2307      	movs	r3, #7
 800100c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800100e:	2302      	movs	r3, #2
 8001010:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001012:	2302      	movs	r3, #2
 8001014:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f828 	bl	8003070 <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001026:	f000 fa29 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102e:	2303      	movs	r3, #3
 8001030:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001036:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800103a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800103c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001040:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	2103      	movs	r1, #3
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fbee 	bl	8003828 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001052:	f000 fa13 	bl	800147c <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3758      	adds	r7, #88	; 0x58
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
 8001080:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001082:	4b36      	ldr	r3, [pc, #216]	; (800115c <MX_ADC1_Init+0xfc>)
 8001084:	4a36      	ldr	r2, [pc, #216]	; (8001160 <MX_ADC1_Init+0x100>)
 8001086:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001088:	4b34      	ldr	r3, [pc, #208]	; (800115c <MX_ADC1_Init+0xfc>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <MX_ADC1_Init+0xfc>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001094:	4b31      	ldr	r3, [pc, #196]	; (800115c <MX_ADC1_Init+0xfc>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <MX_ADC1_Init+0xfc>)
 800109c:	2201      	movs	r2, #1
 800109e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a0:	4b2e      	ldr	r3, [pc, #184]	; (800115c <MX_ADC1_Init+0xfc>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_ADC1_Init+0xfc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ac:	4b2b      	ldr	r3, [pc, #172]	; (800115c <MX_ADC1_Init+0xfc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_ADC1_Init+0xfc>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <MX_ADC1_Init+0xfc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <MX_ADC1_Init+0xfc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <MX_ADC1_Init+0xfc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <MX_ADC1_Init+0xfc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_ADC1_Init+0xfc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <MX_ADC1_Init+0xfc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e2:	481e      	ldr	r0, [pc, #120]	; (800115c <MX_ADC1_Init+0xfc>)
 80010e4:	f000 fdf6 	bl	8001cd4 <HAL_ADC_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010ee:	f000 f9c5 	bl	800147c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4817      	ldr	r0, [pc, #92]	; (800115c <MX_ADC1_Init+0xfc>)
 80010fe:	f001 fb51 	bl	80027a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001108:	f000 f9b8 	bl	800147c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_ADC1_Init+0x104>)
 800110e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001110:	2306      	movs	r3, #6
 8001112:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001114:	2306      	movs	r3, #6
 8001116:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001118:	237f      	movs	r3, #127	; 0x7f
 800111a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111c:	2304      	movs	r3, #4
 800111e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <MX_ADC1_Init+0xfc>)
 800112a:	f000 ff23 	bl	8001f74 <HAL_ADC_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001134:	f000 f9a2 	bl	800147c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_ADC1_Init+0x108>)
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800113c:	230c      	movs	r3, #12
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_ADC1_Init+0xfc>)
 8001146:	f000 ff15 	bl	8001f74 <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001150:	f000 f994 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000002c 	.word	0x2000002c
 8001160:	50040000 	.word	0x50040000
 8001164:	2e300800 	.word	0x2e300800
 8001168:	32601000 	.word	0x32601000

0800116c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	615a      	str	r2, [r3, #20]
 800119c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800119e:	4b33      	ldr	r3, [pc, #204]	; (800126c <MX_TIM2_Init+0x100>)
 80011a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011a6:	4b31      	ldr	r3, [pc, #196]	; (800126c <MX_TIM2_Init+0x100>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b2f      	ldr	r3, [pc, #188]	; (800126c <MX_TIM2_Init+0x100>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 320000-1;
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <MX_TIM2_Init+0x100>)
 80011b4:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <MX_TIM2_Init+0x104>)
 80011b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <MX_TIM2_Init+0x100>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <MX_TIM2_Init+0x100>)
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011c4:	4829      	ldr	r0, [pc, #164]	; (800126c <MX_TIM2_Init+0x100>)
 80011c6:	f003 fa0f 	bl	80045e8 <HAL_TIM_Base_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011d0:	f000 f954 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011de:	4619      	mov	r1, r3
 80011e0:	4822      	ldr	r0, [pc, #136]	; (800126c <MX_TIM2_Init+0x100>)
 80011e2:	f003 fcd3 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011ec:	f000 f946 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011f0:	481e      	ldr	r0, [pc, #120]	; (800126c <MX_TIM2_Init+0x100>)
 80011f2:	f003 fa50 	bl	8004696 <HAL_TIM_PWM_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011fc:	f000 f93e 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	4817      	ldr	r0, [pc, #92]	; (800126c <MX_TIM2_Init+0x100>)
 8001210:	f004 f9b6 	bl	8005580 <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800121a:	f000 f92f 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121e:	2360      	movs	r3, #96	; 0x60
 8001220:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 15999;
 8001222:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8001226:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	2208      	movs	r2, #8
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_TIM2_Init+0x100>)
 8001238:	f003 fb94 	bl	8004964 <HAL_TIM_PWM_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001242:	f000 f91b 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	220c      	movs	r2, #12
 800124a:	4619      	mov	r1, r3
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <MX_TIM2_Init+0x100>)
 800124e:	f003 fb89 	bl	8004964 <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001258:	f000 f910 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <MX_TIM2_Init+0x100>)
 800125e:	f000 f9bd 	bl	80015dc <HAL_TIM_MspPostInit>

}
 8001262:	bf00      	nop
 8001264:	3738      	adds	r7, #56	; 0x38
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000090 	.word	0x20000090
 8001270:	0004e1ff 	.word	0x0004e1ff

08001274 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <MX_USART2_UART_Init+0x5c>)
 800127c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012b8:	f004 f9ea 	bl	8005690 <HAL_UART_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012c2:	f000 f8db 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200000dc 	.word	0x200000dc
 80012d0:	40004400 	.word	0x40004400

080012d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_USART3_UART_Init+0x58>)
 80012da:	4a15      	ldr	r2, [pc, #84]	; (8001330 <MX_USART3_UART_Init+0x5c>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_USART3_UART_Init+0x58>)
 80012e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_USART3_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_USART3_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_USART3_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_USART3_UART_Init+0x58>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_USART3_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_USART3_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_USART3_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_USART3_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_USART3_UART_Init+0x58>)
 8001318:	f004 f9ba 	bl	8005690 <HAL_UART_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001322:	f000 f8ab 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000164 	.word	0x20000164
 8001330:	40004800 	.word	0x40004800

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <MX_GPIO_Init+0xc8>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <MX_GPIO_Init+0xc8>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <MX_GPIO_Init+0xc8>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <MX_GPIO_Init+0xc8>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a25      	ldr	r2, [pc, #148]	; (80013fc <MX_GPIO_Init+0xc8>)
 8001368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <MX_GPIO_Init+0xc8>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_GPIO_Init+0xc8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <MX_GPIO_Init+0xc8>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_GPIO_Init+0xc8>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_GPIO_Init+0xc8>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	4a19      	ldr	r2, [pc, #100]	; (80013fc <MX_GPIO_Init+0xc8>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_GPIO_Init+0xc8>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|M_BACKWARD_Pin|M_FORWARD_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f001 fde0 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_GPIO_Init+0xcc>)
 80013d0:	f001 fc28 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin M_BACKWARD_Pin M_FORWARD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|M_BACKWARD_Pin|M_FORWARD_Pin;
 80013d4:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f001 fc18 	bl	8002c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000800 	.word	0x48000800

08001404 <analogPad_process>:

/* USER CODE BEGIN 4 */
static void analogPad_process(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

	static uint8_t flag = 0;

	if(flag == 0)
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <analogPad_process+0x38>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d104      	bne.n	800141a <analogPad_process+0x16>
	{

		angle = loraDataRx[0];//( analog_padx * (180.0 / 3300.0) );
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <analogPad_process+0x3c>)
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <analogPad_process+0x40>)
 8001416:	701a      	strb	r2, [r3, #0]
 8001418:	e004      	b.n	8001424 <analogPad_process+0x20>

	}
	else
	{

		speed = loraDataRx[0];//( analog_padx * (180.0 / 3300.0) );
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <analogPad_process+0x3c>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <analogPad_process+0x44>)
 8001422:	801a      	strh	r2, [r3, #0]

	}

	flag = 1 - flag;
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <analogPad_process+0x38>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f1c3 0301 	rsb	r3, r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b03      	ldr	r3, [pc, #12]	; (800143c <analogPad_process+0x38>)
 8001430:	701a      	strb	r2, [r3, #0]

	return;
 8001432:	bf00      	nop

}
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	200001ef 	.word	0x200001ef
 8001440:	200001ec 	.word	0x200001ec
 8001444:	20000000 	.word	0x20000000
 8001448:	20000002 	.word	0x20000002

0800144c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]


	// Evaluation of the analog pad
	analogPad_process();
 8001454:	f7ff ffd6 	bl	8001404 <analogPad_process>

	// Start a new reception
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)('k'), 1);
 8001458:	2201      	movs	r2, #1
 800145a:	216b      	movs	r1, #107	; 0x6b
 800145c:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_UART_RxCpltCallback+0x28>)
 800145e:	f004 f965 	bl	800572c <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart3, loraDataRx, 1);
 8001462:	2201      	movs	r2, #1
 8001464:	4904      	ldr	r1, [pc, #16]	; (8001478 <HAL_UART_RxCpltCallback+0x2c>)
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <HAL_UART_RxCpltCallback+0x28>)
 8001468:	f004 f9be 	bl	80057e8 <HAL_UART_Receive_IT>


}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000164 	.word	0x20000164
 8001478:	200001ec 	.word	0x200001ec

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001484:	e7fe      	b.n	8001484 <Error_Handler+0x8>
	...

08001488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_MspInit+0x44>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_MspInit+0x44>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6613      	str	r3, [r2, #96]	; 0x60
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_MspInit+0x44>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_MspInit+0x44>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_MspInit+0x44>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6593      	str	r3, [r2, #88]	; 0x58
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_MspInit+0x44>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0ac      	sub	sp, #176	; 0xb0
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2288      	movs	r2, #136	; 0x88
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f005 fd25 	bl	8006f40 <memset>
  if(hadc->Instance==ADC1)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a27      	ldr	r2, [pc, #156]	; (8001598 <HAL_ADC_MspInit+0xc8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d147      	bne.n	8001590 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001500:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001504:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001506:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800150a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001512:	2301      	movs	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001516:	2308      	movs	r3, #8
 8001518:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800151a:	2307      	movs	r3, #7
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001522:	2302      	movs	r3, #2
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001526:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fb9d 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800153c:	f7ff ff9e 	bl	800147c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_ADC_MspInit+0xcc>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001544:	4a15      	ldr	r2, [pc, #84]	; (800159c <HAL_ADC_MspInit+0xcc>)
 8001546:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800154a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_ADC_MspInit+0xcc>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_ADC_MspInit+0xcc>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_ADC_MspInit+0xcc>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_ADC_MspInit+0xcc>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = PAD_X_Pin|PAD_Y_Pin;
 8001570:	23c0      	movs	r3, #192	; 0xc0
 8001572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001576:	230b      	movs	r3, #11
 8001578:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001586:	4619      	mov	r1, r3
 8001588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158c:	f001 fb4a 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001590:	bf00      	nop
 8001592:	37b0      	adds	r7, #176	; 0xb0
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	50040000 	.word	0x50040000
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b0:	d10b      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_TIM_Base_MspInit+0x38>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_TIM_Base_MspInit+0x38>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_TIM_Base_MspInit+0x38>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015fc:	d11c      	bne.n	8001638 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <HAL_TIM_MspPostInit+0x64>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <HAL_TIM_MspPostInit+0x64>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_TIM_MspPostInit+0x64>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SM1_PWM_Pin|SM_PWM2_Pin;
 8001616:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800161a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001628:	2301      	movs	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4619      	mov	r1, r3
 8001632:	4804      	ldr	r0, [pc, #16]	; (8001644 <HAL_TIM_MspPostInit+0x68>)
 8001634:	f001 faf6 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3720      	adds	r7, #32
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0ae      	sub	sp, #184	; 0xb8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	2288      	movs	r2, #136	; 0x88
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f005 fc69 	bl	8006f40 <memset>
  if(huart->Instance==USART2)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_UART_MspInit+0x144>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d13c      	bne.n	80016f2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001678:	2302      	movs	r3, #2
 800167a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800167c:	2300      	movs	r3, #0
 800167e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4618      	mov	r0, r3
 8001686:	f002 faf3 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001690:	f7ff fef4 	bl	800147c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <HAL_UART_MspInit+0x148>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	4a3d      	ldr	r2, [pc, #244]	; (8001790 <HAL_UART_MspInit+0x148>)
 800169a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169e:	6593      	str	r3, [r2, #88]	; 0x58
 80016a0:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <HAL_UART_MspInit+0x148>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_UART_MspInit+0x148>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a37      	ldr	r2, [pc, #220]	; (8001790 <HAL_UART_MspInit+0x148>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_UART_MspInit+0x148>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016c4:	230c      	movs	r3, #12
 80016c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016dc:	2307      	movs	r3, #7
 80016de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ec:	f001 fa9a 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016f0:	e047      	b.n	8001782 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a27      	ldr	r2, [pc, #156]	; (8001794 <HAL_UART_MspInit+0x14c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d142      	bne.n	8001782 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016fc:	2304      	movs	r3, #4
 80016fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001700:	2300      	movs	r3, #0
 8001702:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fab1 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001714:	f7ff feb2 	bl	800147c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_UART_MspInit+0x148>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <HAL_UART_MspInit+0x148>)
 800171e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001722:	6593      	str	r3, [r2, #88]	; 0x58
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_UART_MspInit+0x148>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HAL_UART_MspInit+0x148>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001734:	4a16      	ldr	r2, [pc, #88]	; (8001790 <HAL_UART_MspInit+0x148>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_UART_MspInit+0x148>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LORA_TX_Pin|LORA_RX_Pin;
 8001748:	2330      	movs	r3, #48	; 0x30
 800174a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001760:	2307      	movs	r3, #7
 8001762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800176a:	4619      	mov	r1, r3
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <HAL_UART_MspInit+0x150>)
 800176e:	f001 fa59 	bl	8002c24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2027      	movs	r0, #39	; 0x27
 8001778:	f001 f99f 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800177c:	2027      	movs	r0, #39	; 0x27
 800177e:	f001 f9b8 	bl	8002af2 <HAL_NVIC_EnableIRQ>
}
 8001782:	bf00      	nop
 8001784:	37b8      	adds	r7, #184	; 0xb8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40004400 	.word	0x40004400
 8001790:	40021000 	.word	0x40021000
 8001794:	40004800 	.word	0x40004800
 8001798:	48000800 	.word	0x48000800

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	e7fe      	b.n	80017a0 <NMI_Handler+0x4>

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler+0x4>

080017ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e8:	f000 f8a4 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <USART3_IRQHandler+0x10>)
 80017f6:	f004 f843 	bl	8005880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000164 	.word	0x20000164

08001804 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <SystemInit+0x20>)
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <SystemInit+0x20>)
 8001810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001860 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800182c:	f7ff ffea 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <LoopForever+0x6>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	; (8001868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <LoopForever+0xe>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	; (8001874 <LoopForever+0x16>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001856:	f005 fb7b 	bl	8006f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800185a:	f7ff fa51 	bl	8000d00 <main>

0800185e <LoopForever>:

LoopForever:
    b LoopForever
 800185e:	e7fe      	b.n	800185e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001860:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800186c:	08007008 	.word	0x08007008
  ldr r2, =_sbss
 8001870:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001874:	200001f4 	.word	0x200001f4

08001878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC1_2_IRQHandler>
	...

0800187c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_Init+0x3c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_Init+0x3c>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001892:	2003      	movs	r0, #3
 8001894:	f001 f906 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001898:	2000      	movs	r0, #0
 800189a:	f000 f80f 	bl	80018bc <HAL_InitTick>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	e001      	b.n	80018ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018aa:	f7ff fded 	bl	8001488 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ae:	79fb      	ldrb	r3, [r7, #7]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40022000 	.word	0x40022000

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <HAL_InitTick+0x6c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d023      	beq.n	8001918 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_InitTick+0x70>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <HAL_InitTick+0x6c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 f911 	bl	8002b0e <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10f      	bne.n	8001912 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d809      	bhi.n	800190c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f001 f8db 	bl	8002aba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_InitTick+0x74>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e007      	b.n	800191c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	e004      	b.n	800191c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	e001      	b.n	800191c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800191c:	7bfb      	ldrb	r3, [r7, #15]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000000c 	.word	0x2000000c
 800192c:	20000004 	.word	0x20000004
 8001930:	20000008 	.word	0x20000008

08001934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x20>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_IncTick+0x24>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	2000000c 	.word	0x2000000c
 8001958:	200001f0 	.word	0x200001f0

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	200001f0 	.word	0x200001f0

08001974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff ffee 	bl	800195c <HAL_GetTick>
 8001980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d005      	beq.n	800199a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_Delay+0x44>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800199a:	bf00      	nop
 800199c:	f7ff ffde 	bl	800195c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d8f7      	bhi.n	800199c <HAL_Delay+0x28>
  {
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000000c 	.word	0x2000000c

080019bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3360      	adds	r3, #96	; 0x60
 8001a36:	461a      	mov	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <LL_ADC_SetOffset+0x44>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	4313      	orrs	r3, r2
 8001a54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a5c:	bf00      	nop
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	03fff000 	.word	0x03fff000

08001a6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3360      	adds	r3, #96	; 0x60
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3360      	adds	r3, #96	; 0x60
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b087      	sub	sp, #28
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3330      	adds	r3, #48	; 0x30
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	4413      	add	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	211f      	movs	r1, #31
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	401a      	ands	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	0e9b      	lsrs	r3, r3, #26
 8001b06:	f003 011f 	and.w	r1, r3, #31
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b087      	sub	sp, #28
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3314      	adds	r3, #20
 8001b36:	461a      	mov	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	0e5b      	lsrs	r3, r3, #25
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	4413      	add	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	0d1b      	lsrs	r3, r3, #20
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2107      	movs	r1, #7
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	0d1b      	lsrs	r3, r3, #20
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b94:	43db      	mvns	r3, r3
 8001b96:	401a      	ands	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0318 	and.w	r3, r3, #24
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ba0:	40d9      	lsrs	r1, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001baa:	431a      	orrs	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	0007ffff 	.word	0x0007ffff

08001bc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6093      	str	r3, [r2, #8]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bfc:	d101      	bne.n	8001c02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c4c:	d101      	bne.n	8001c52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <LL_ADC_IsEnabled+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <LL_ADC_IsEnabled+0x1a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d101      	bne.n	8001c9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d101      	bne.n	8001cc4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e130      	b.n	8001f50 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff fbe7 	bl	80014d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff67 	bl	8001be8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff4d 	bl	8001bc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff82 	bl	8001c38 <LL_ADC_IsInternalRegulatorEnabled>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d115      	bne.n	8001d66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff66 	bl	8001c10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d44:	4b84      	ldr	r3, [pc, #528]	; (8001f58 <HAL_ADC_Init+0x284>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	4a84      	ldr	r2, [pc, #528]	; (8001f5c <HAL_ADC_Init+0x288>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	099b      	lsrs	r3, r3, #6
 8001d52:	3301      	adds	r3, #1
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d58:	e002      	b.n	8001d60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f9      	bne.n	8001d5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff64 	bl	8001c38 <LL_ADC_IsInternalRegulatorEnabled>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10d      	bne.n	8001d92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7a:	f043 0210 	orr.w	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff75 	bl	8001c86 <LL_ADC_REG_IsConversionOngoing>
 8001d9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 80c9 	bne.w	8001f3e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 80c5 	bne.w	8001f3e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dbc:	f043 0202 	orr.w	r2, r3, #2
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff49 	bl	8001c60 <LL_ADC_IsEnabled>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d115      	bne.n	8001e00 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dd4:	4862      	ldr	r0, [pc, #392]	; (8001f60 <HAL_ADC_Init+0x28c>)
 8001dd6:	f7ff ff43 	bl	8001c60 <LL_ADC_IsEnabled>
 8001dda:	4604      	mov	r4, r0
 8001ddc:	4861      	ldr	r0, [pc, #388]	; (8001f64 <HAL_ADC_Init+0x290>)
 8001dde:	f7ff ff3f 	bl	8001c60 <LL_ADC_IsEnabled>
 8001de2:	4603      	mov	r3, r0
 8001de4:	431c      	orrs	r4, r3
 8001de6:	4860      	ldr	r0, [pc, #384]	; (8001f68 <HAL_ADC_Init+0x294>)
 8001de8:	f7ff ff3a 	bl	8001c60 <LL_ADC_IsEnabled>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4323      	orrs	r3, r4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	485c      	ldr	r0, [pc, #368]	; (8001f6c <HAL_ADC_Init+0x298>)
 8001dfc:	f7ff fdde 	bl	80019bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7e5b      	ldrb	r3, [r3, #25]
 8001e04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d106      	bne.n	8001e3c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	3b01      	subs	r3, #1
 8001e34:	045b      	lsls	r3, r3, #17
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	4b44      	ldr	r3, [pc, #272]	; (8001f70 <HAL_ADC_Init+0x29c>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	69b9      	ldr	r1, [r7, #24]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff1b 	bl	8001cac <LL_ADC_INJ_IsConversionOngoing>
 8001e76:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d13d      	bne.n	8001efa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d13a      	bne.n	8001efa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e88:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e90:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea0:	f023 0302 	bic.w	r3, r3, #2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	69b9      	ldr	r1, [r7, #24]
 8001eaa:	430b      	orrs	r3, r1
 8001eac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d118      	bne.n	8001eea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ec2:	f023 0304 	bic.w	r3, r3, #4
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001eda:	430a      	orrs	r2, r1
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	611a      	str	r2, [r3, #16]
 8001ee8:	e007      	b.n	8001efa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10c      	bne.n	8001f1c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f023 010f 	bic.w	r1, r3, #15
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	1e5a      	subs	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30
 8001f1a:	e007      	b.n	8001f2c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 020f 	bic.w	r2, r2, #15
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	f023 0303 	bic.w	r3, r3, #3
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
 8001f3c:	e007      	b.n	8001f4e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f043 0210 	orr.w	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3724      	adds	r7, #36	; 0x24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd90      	pop	{r4, r7, pc}
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	053e2d63 	.word	0x053e2d63
 8001f60:	50040000 	.word	0x50040000
 8001f64:	50040100 	.word	0x50040100
 8001f68:	50040200 	.word	0x50040200
 8001f6c:	50040300 	.word	0x50040300
 8001f70:	fff0c007 	.word	0xfff0c007

08001f74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0b6      	sub	sp, #216	; 0xd8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x22>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e3c9      	b.n	800272a <HAL_ADC_ConfigChannel+0x7b6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fe6f 	bl	8001c86 <LL_ADC_REG_IsConversionOngoing>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 83aa 	bne.w	8002704 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d824      	bhi.n	800200a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	3b02      	subs	r3, #2
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d81b      	bhi.n	8002002 <HAL_ADC_ConfigChannel+0x8e>
 8001fca:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <HAL_ADC_ConfigChannel+0x5c>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	08001fe1 	.word	0x08001fe1
 8001fd4:	08001fe9 	.word	0x08001fe9
 8001fd8:	08001ff1 	.word	0x08001ff1
 8001fdc:	08001ff9 	.word	0x08001ff9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001fe6:	e010      	b.n	800200a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001fe8:	2312      	movs	r3, #18
 8001fea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001fee:	e00c      	b.n	800200a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ff0:	2318      	movs	r3, #24
 8001ff2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ff6:	e008      	b.n	800200a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002000:	e003      	b.n	800200a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002002:	2306      	movs	r3, #6
 8002004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002008:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002018:	f7ff fd59 	bl	8001ace <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fe30 	bl	8001c86 <LL_ADC_REG_IsConversionOngoing>
 8002026:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fe3c 	bl	8001cac <LL_ADC_INJ_IsConversionOngoing>
 8002034:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 81a4 	bne.w	800238a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002042:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 819f 	bne.w	800238a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	461a      	mov	r2, r3
 800205a:	f7ff fd64 	bl	8001b26 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	08db      	lsrs	r3, r3, #3
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d00a      	beq.n	8002096 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6919      	ldr	r1, [r3, #16]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002090:	f7ff fcc8 	bl	8001a24 <LL_ADC_SetOffset>
 8002094:	e179      	b.n	800238a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fce5 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10a      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x14e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fcda 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	0e9b      	lsrs	r3, r3, #26
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	e01e      	b.n	8002100 <HAL_ADC_ConfigChannel+0x18c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fccf 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80020f0:	2320      	movs	r3, #32
 80020f2:	e004      	b.n	80020fe <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80020f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1a4>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	e018      	b.n	800214a <HAL_ADC_ConfigChannel+0x1d6>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800212c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002134:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800213c:	2320      	movs	r3, #32
 800213e:	e004      	b.n	800214a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002140:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800214a:	429a      	cmp	r2, r3
 800214c:	d106      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fc9e 	bl	8001a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fc82 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x214>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2101      	movs	r1, #1
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fc77 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	f003 021f 	and.w	r2, r3, #31
 8002186:	e01e      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x252>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fc6c 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80021a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80021ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80021b6:	2320      	movs	r3, #32
 80021b8:	e004      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80021ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d105      	bne.n	80021de <HAL_ADC_ConfigChannel+0x26a>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	0e9b      	lsrs	r3, r3, #26
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	e018      	b.n	8002210 <HAL_ADC_ConfigChannel+0x29c>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80021f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80021fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e004      	b.n	8002210 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002206:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002210:	429a      	cmp	r2, r3
 8002212:	d106      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fc3b 	bl	8001a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2102      	movs	r1, #2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fc1f 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_ADC_ConfigChannel+0x2da>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2102      	movs	r1, #2
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fc14 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	0e9b      	lsrs	r3, r3, #26
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	e01e      	b.n	800228c <HAL_ADC_ConfigChannel+0x318>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2102      	movs	r1, #2
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fc09 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800226c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002270:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002274:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800227c:	2320      	movs	r3, #32
 800227e:	e004      	b.n	800228a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x330>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	e014      	b.n	80022ce <HAL_ADC_ConfigChannel+0x35a>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80022b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80022b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e004      	b.n	80022ce <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80022c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d106      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	2102      	movs	r1, #2
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fbdc 	bl	8001a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2103      	movs	r1, #3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fbc0 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10a      	bne.n	800230c <HAL_ADC_ConfigChannel+0x398>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2103      	movs	r1, #3
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fbb5 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	0e9b      	lsrs	r3, r3, #26
 8002306:	f003 021f 	and.w	r2, r3, #31
 800230a:	e017      	b.n	800233c <HAL_ADC_ConfigChannel+0x3c8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2103      	movs	r1, #3
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fbaa 	bl	8001a6c <LL_ADC_GetOffsetChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002326:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800232e:	2320      	movs	r3, #32
 8002330:	e003      	b.n	800233a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x3e0>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0e9b      	lsrs	r3, r3, #26
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	e011      	b.n	8002378 <HAL_ADC_ConfigChannel+0x404>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002364:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800236c:	2320      	movs	r3, #32
 800236e:	e003      	b.n	8002378 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002378:	429a      	cmp	r2, r3
 800237a:	d106      	bne.n	800238a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2200      	movs	r2, #0
 8002382:	2103      	movs	r1, #3
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fb87 	bl	8001a98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fc66 	bl	8001c60 <LL_ADC_IsEnabled>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 8140 	bne.w	800261c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6819      	ldr	r1, [r3, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	461a      	mov	r2, r3
 80023aa:	f7ff fbe7 	bl	8001b7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4a8f      	ldr	r2, [pc, #572]	; (80025f0 <HAL_ADC_ConfigChannel+0x67c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	f040 8131 	bne.w	800261c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10b      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x46e>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	0e9b      	lsrs	r3, r3, #26
 80023d0:	3301      	adds	r3, #1
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2b09      	cmp	r3, #9
 80023d8:	bf94      	ite	ls
 80023da:	2301      	movls	r3, #1
 80023dc:	2300      	movhi	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	e019      	b.n	8002416 <HAL_ADC_ConfigChannel+0x4a2>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80023f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80023f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80023fa:	2320      	movs	r3, #32
 80023fc:	e003      	b.n	8002406 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80023fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2b09      	cmp	r3, #9
 800240e:	bf94      	ite	ls
 8002410:	2301      	movls	r3, #1
 8002412:	2300      	movhi	r3, #0
 8002414:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002416:	2b00      	cmp	r3, #0
 8002418:	d079      	beq.n	800250e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x4c2>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	3301      	adds	r3, #1
 800242e:	069b      	lsls	r3, r3, #26
 8002430:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002434:	e015      	b.n	8002462 <HAL_ADC_ConfigChannel+0x4ee>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002446:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800244e:	2320      	movs	r3, #32
 8002450:	e003      	b.n	800245a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	3301      	adds	r3, #1
 800245c:	069b      	lsls	r3, r3, #26
 800245e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x50e>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0e9b      	lsrs	r3, r3, #26
 8002474:	3301      	adds	r3, #1
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	2101      	movs	r1, #1
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	e017      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x53e>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e003      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800249e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	ea42 0103 	orr.w	r1, r2, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10a      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x564>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e9b      	lsrs	r3, r3, #26
 80024c8:	3301      	adds	r3, #1
 80024ca:	f003 021f 	and.w	r2, r3, #31
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	051b      	lsls	r3, r3, #20
 80024d6:	e018      	b.n	800250a <HAL_ADC_ConfigChannel+0x596>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80024ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80024f0:	2320      	movs	r3, #32
 80024f2:	e003      	b.n	80024fc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80024f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	3301      	adds	r3, #1
 80024fe:	f003 021f 	and.w	r2, r3, #31
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800250a:	430b      	orrs	r3, r1
 800250c:	e081      	b.n	8002612 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <HAL_ADC_ConfigChannel+0x5b6>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0e9b      	lsrs	r3, r3, #26
 8002520:	3301      	adds	r3, #1
 8002522:	069b      	lsls	r3, r3, #26
 8002524:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002528:	e015      	b.n	8002556 <HAL_ADC_ConfigChannel+0x5e2>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e003      	b.n	800254e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	3301      	adds	r3, #1
 8002550:	069b      	lsls	r3, r3, #26
 8002552:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x602>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0e9b      	lsrs	r3, r3, #26
 8002568:	3301      	adds	r3, #1
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	2101      	movs	r1, #1
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	e017      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x632>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	61bb      	str	r3, [r7, #24]
  return result;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800258e:	2320      	movs	r3, #32
 8002590:	e003      	b.n	800259a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	ea42 0103 	orr.w	r1, r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x65e>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	3301      	adds	r3, #1
 80025be:	f003 021f 	and.w	r2, r3, #31
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	3b1e      	subs	r3, #30
 80025ca:	051b      	lsls	r3, r3, #20
 80025cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d0:	e01e      	b.n	8002610 <HAL_ADC_ConfigChannel+0x69c>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	60fb      	str	r3, [r7, #12]
  return result;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d104      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e006      	b.n	80025fc <HAL_ADC_ConfigChannel+0x688>
 80025ee:	bf00      	nop
 80025f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	3b1e      	subs	r3, #30
 800260a:	051b      	lsls	r3, r3, #20
 800260c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002610:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002616:	4619      	mov	r1, r3
 8002618:	f7ff fa85 	bl	8001b26 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b44      	ldr	r3, [pc, #272]	; (8002734 <HAL_ADC_ConfigChannel+0x7c0>)
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d07a      	beq.n	800271e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002628:	4843      	ldr	r0, [pc, #268]	; (8002738 <HAL_ADC_ConfigChannel+0x7c4>)
 800262a:	f7ff f9ed 	bl	8001a08 <LL_ADC_GetCommonPathInternalCh>
 800262e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a41      	ldr	r2, [pc, #260]	; (800273c <HAL_ADC_ConfigChannel+0x7c8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d12c      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800263c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d126      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a3c      	ldr	r2, [pc, #240]	; (8002740 <HAL_ADC_ConfigChannel+0x7cc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d004      	beq.n	800265c <HAL_ADC_ConfigChannel+0x6e8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a3b      	ldr	r2, [pc, #236]	; (8002744 <HAL_ADC_ConfigChannel+0x7d0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d15d      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800265c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002660:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002664:	4619      	mov	r1, r3
 8002666:	4834      	ldr	r0, [pc, #208]	; (8002738 <HAL_ADC_ConfigChannel+0x7c4>)
 8002668:	f7ff f9bb 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800266c:	4b36      	ldr	r3, [pc, #216]	; (8002748 <HAL_ADC_ConfigChannel+0x7d4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	4a36      	ldr	r2, [pc, #216]	; (800274c <HAL_ADC_ConfigChannel+0x7d8>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002686:	e002      	b.n	800268e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3b01      	subs	r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f9      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002694:	e040      	b.n	8002718 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <HAL_ADC_ConfigChannel+0x7dc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d118      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d112      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a23      	ldr	r2, [pc, #140]	; (8002740 <HAL_ADC_ConfigChannel+0x7cc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d004      	beq.n	80026c0 <HAL_ADC_ConfigChannel+0x74c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a22      	ldr	r2, [pc, #136]	; (8002744 <HAL_ADC_ConfigChannel+0x7d0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d12d      	bne.n	800271c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c8:	4619      	mov	r1, r3
 80026ca:	481b      	ldr	r0, [pc, #108]	; (8002738 <HAL_ADC_ConfigChannel+0x7c4>)
 80026cc:	f7ff f989 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026d0:	e024      	b.n	800271c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <HAL_ADC_ConfigChannel+0x7e0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d120      	bne.n	800271e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d11a      	bne.n	800271e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_ADC_ConfigChannel+0x7cc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d115      	bne.n	800271e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026fa:	4619      	mov	r1, r3
 80026fc:	480e      	ldr	r0, [pc, #56]	; (8002738 <HAL_ADC_ConfigChannel+0x7c4>)
 80026fe:	f7ff f970 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
 8002702:	e00c      	b.n	800271e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	f043 0220 	orr.w	r2, r3, #32
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002716:	e002      	b.n	800271e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002718:	bf00      	nop
 800271a:	e000      	b.n	800271e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800271c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002726:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800272a:	4618      	mov	r0, r3
 800272c:	37d8      	adds	r7, #216	; 0xd8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	80080000 	.word	0x80080000
 8002738:	50040300 	.word	0x50040300
 800273c:	c7520000 	.word	0xc7520000
 8002740:	50040000 	.word	0x50040000
 8002744:	50040200 	.word	0x50040200
 8002748:	20000004 	.word	0x20000004
 800274c:	053e2d63 	.word	0x053e2d63
 8002750:	cb840000 	.word	0xcb840000
 8002754:	80000001 	.word	0x80000001

08002758 <LL_ADC_IsEnabled>:
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <LL_ADC_IsEnabled+0x18>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <LL_ADC_IsEnabled+0x1a>
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_ADC_REG_IsConversionOngoing>:
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b04      	cmp	r3, #4
 8002790:	d101      	bne.n	8002796 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b09f      	sub	sp, #124	; 0x7c
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027be:	2302      	movs	r3, #2
 80027c0:	e093      	b.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80027ca:	2300      	movs	r3, #0
 80027cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80027ce:	2300      	movs	r3, #0
 80027d0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a47      	ldr	r2, [pc, #284]	; (80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d102      	bne.n	80027e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80027dc:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	e001      	b.n	80027e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f043 0220 	orr.w	r2, r3, #32
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e072      	b.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ffb9 	bl	800277e <LL_ADC_REG_IsConversionOngoing>
 800280c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ffb3 	bl	800277e <LL_ADC_REG_IsConversionOngoing>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d154      	bne.n	80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800281e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002820:	2b00      	cmp	r3, #0
 8002822:	d151      	bne.n	80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002826:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d02c      	beq.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002842:	035b      	lsls	r3, r3, #13
 8002844:	430b      	orrs	r3, r1
 8002846:	431a      	orrs	r2, r3
 8002848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800284c:	4829      	ldr	r0, [pc, #164]	; (80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800284e:	f7ff ff83 	bl	8002758 <LL_ADC_IsEnabled>
 8002852:	4604      	mov	r4, r0
 8002854:	4828      	ldr	r0, [pc, #160]	; (80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002856:	f7ff ff7f 	bl	8002758 <LL_ADC_IsEnabled>
 800285a:	4603      	mov	r3, r0
 800285c:	431c      	orrs	r4, r3
 800285e:	4828      	ldr	r0, [pc, #160]	; (8002900 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002860:	f7ff ff7a 	bl	8002758 <LL_ADC_IsEnabled>
 8002864:	4603      	mov	r3, r0
 8002866:	4323      	orrs	r3, r4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d137      	bne.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800286c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002874:	f023 030f 	bic.w	r3, r3, #15
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	6811      	ldr	r1, [r2, #0]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6892      	ldr	r2, [r2, #8]
 8002880:	430a      	orrs	r2, r1
 8002882:	431a      	orrs	r2, r3
 8002884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002886:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002888:	e028      	b.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800288a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002894:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002896:	4817      	ldr	r0, [pc, #92]	; (80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002898:	f7ff ff5e 	bl	8002758 <LL_ADC_IsEnabled>
 800289c:	4604      	mov	r4, r0
 800289e:	4816      	ldr	r0, [pc, #88]	; (80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028a0:	f7ff ff5a 	bl	8002758 <LL_ADC_IsEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	431c      	orrs	r4, r3
 80028a8:	4815      	ldr	r0, [pc, #84]	; (8002900 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80028aa:	f7ff ff55 	bl	8002758 <LL_ADC_IsEnabled>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4323      	orrs	r3, r4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d112      	bne.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028be:	f023 030f 	bic.w	r3, r3, #15
 80028c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028c6:	e009      	b.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80028da:	e000      	b.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	377c      	adds	r7, #124	; 0x7c
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd90      	pop	{r4, r7, pc}
 80028f2:	bf00      	nop
 80028f4:	50040000 	.word	0x50040000
 80028f8:	50040100 	.word	0x50040100
 80028fc:	50040300 	.word	0x50040300
 8002900:	50040200 	.word	0x50040200

08002904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800292c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <__NVIC_GetPriorityGrouping+0x18>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 0307 	and.w	r3, r3, #7
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db0b      	blt.n	8002992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4907      	ldr	r1, [pc, #28]	; (80029a0 <__NVIC_EnableIRQ+0x38>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2001      	movs	r0, #1
 800298a:	fa00 f202 	lsl.w	r2, r0, r2
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	; (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	; (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	; 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
         );
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a70:	d301      	bcc.n	8002a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00f      	b.n	8002a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <SysTick_Config+0x40>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7e:	210f      	movs	r1, #15
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f7ff ff8e 	bl	80029a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <SysTick_Config+0x40>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <SysTick_Config+0x40>)
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff29 	bl	8002904 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff3e 	bl	800294c <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ff8e 	bl	80029f8 <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff5d 	bl	80029a4 <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff31 	bl	8002968 <__NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ffa2 	bl	8002a60 <SysTick_Config>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d008      	beq.n	8002b50 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2204      	movs	r2, #4
 8002b42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e022      	b.n	8002b96 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 020e 	bic.w	r2, r2, #14
 8002b5e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	f003 021c 	and.w	r2, r3, #28
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b82:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d005      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	e029      	b.n	8002c1a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 020e 	bic.w	r2, r2, #14
 8002bd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f003 021c 	and.w	r2, r3, #28
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
    }
  }
  return status;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c32:	e17f      	b.n	8002f34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8171 	beq.w	8002f2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d005      	beq.n	8002c64 <HAL_GPIO_Init+0x40>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d130      	bne.n	8002cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	091b      	lsrs	r3, r3, #4
 8002cb0:	f003 0201 	and.w	r2, r3, #1
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d118      	bne.n	8002d04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002cd8:	2201      	movs	r2, #1
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	f003 0201 	and.w	r2, r3, #1
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d017      	beq.n	8002d40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4013      	ands	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d123      	bne.n	8002d94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	08da      	lsrs	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3208      	adds	r2, #8
 8002d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	220f      	movs	r2, #15
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	08da      	lsrs	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3208      	adds	r2, #8
 8002d8e:	6939      	ldr	r1, [r7, #16]
 8002d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0203 	and.w	r2, r3, #3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80ac 	beq.w	8002f2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	4b5f      	ldr	r3, [pc, #380]	; (8002f54 <HAL_GPIO_Init+0x330>)
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dda:	4a5e      	ldr	r2, [pc, #376]	; (8002f54 <HAL_GPIO_Init+0x330>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6613      	str	r3, [r2, #96]	; 0x60
 8002de2:	4b5c      	ldr	r3, [pc, #368]	; (8002f54 <HAL_GPIO_Init+0x330>)
 8002de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dee:	4a5a      	ldr	r2, [pc, #360]	; (8002f58 <HAL_GPIO_Init+0x334>)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	3302      	adds	r3, #2
 8002df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	220f      	movs	r2, #15
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e18:	d025      	beq.n	8002e66 <HAL_GPIO_Init+0x242>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4f      	ldr	r2, [pc, #316]	; (8002f5c <HAL_GPIO_Init+0x338>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01f      	beq.n	8002e62 <HAL_GPIO_Init+0x23e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4e      	ldr	r2, [pc, #312]	; (8002f60 <HAL_GPIO_Init+0x33c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d019      	beq.n	8002e5e <HAL_GPIO_Init+0x23a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4d      	ldr	r2, [pc, #308]	; (8002f64 <HAL_GPIO_Init+0x340>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_GPIO_Init+0x236>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4c      	ldr	r2, [pc, #304]	; (8002f68 <HAL_GPIO_Init+0x344>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00d      	beq.n	8002e56 <HAL_GPIO_Init+0x232>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4b      	ldr	r2, [pc, #300]	; (8002f6c <HAL_GPIO_Init+0x348>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <HAL_GPIO_Init+0x22e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4a      	ldr	r2, [pc, #296]	; (8002f70 <HAL_GPIO_Init+0x34c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_GPIO_Init+0x22a>
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	e00c      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e4e:	2307      	movs	r3, #7
 8002e50:	e00a      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e52:	2305      	movs	r3, #5
 8002e54:	e008      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e56:	2304      	movs	r3, #4
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e004      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_GPIO_Init+0x244>
 8002e66:	2300      	movs	r3, #0
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	f002 0203 	and.w	r2, r2, #3
 8002e6e:	0092      	lsls	r2, r2, #2
 8002e70:	4093      	lsls	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e78:	4937      	ldr	r1, [pc, #220]	; (8002f58 <HAL_GPIO_Init+0x334>)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e86:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eaa:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eb0:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ed4:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002eda:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f04:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f28:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <HAL_GPIO_Init+0x350>)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	3301      	adds	r3, #1
 8002f32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f47f ae78 	bne.w	8002c34 <HAL_GPIO_Init+0x10>
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	48000400 	.word	0x48000400
 8002f60:	48000800 	.word	0x48000800
 8002f64:	48000c00 	.word	0x48000c00
 8002f68:	48001000 	.word	0x48001000
 8002f6c:	48001400 	.word	0x48001400
 8002f70:	48001800 	.word	0x48001800
 8002f74:	40010400 	.word	0x40010400

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40007000 	.word	0x40007000

08002fc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd2:	d130      	bne.n	8003036 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fd4:	4b23      	ldr	r3, [pc, #140]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe0:	d038      	beq.n	8003054 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fea:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2232      	movs	r2, #50	; 0x32
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	4a1b      	ldr	r2, [pc, #108]	; (800306c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0c9b      	lsrs	r3, r3, #18
 8003004:	3301      	adds	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003008:	e002      	b.n	8003010 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3b01      	subs	r3, #1
 800300e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003010:	4b14      	ldr	r3, [pc, #80]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301c:	d102      	bne.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x60>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f2      	bne.n	800300a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003030:	d110      	bne.n	8003054 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e00f      	b.n	8003056 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800303e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003042:	d007      	beq.n	8003054 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003044:	4b07      	ldr	r3, [pc, #28]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800304c:	4a05      	ldr	r2, [pc, #20]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800304e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003052:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40007000 	.word	0x40007000
 8003068:	20000004 	.word	0x20000004
 800306c:	431bde83 	.word	0x431bde83

08003070 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e3ca      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003082:	4b97      	ldr	r3, [pc, #604]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800308c:	4b94      	ldr	r3, [pc, #592]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80e4 	beq.w	800326c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <HAL_RCC_OscConfig+0x4a>
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b0c      	cmp	r3, #12
 80030ae:	f040 808b 	bne.w	80031c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 8087 	bne.w	80031c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030ba:	4b89      	ldr	r3, [pc, #548]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_RCC_OscConfig+0x62>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e3a2      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1a      	ldr	r2, [r3, #32]
 80030d6:	4b82      	ldr	r3, [pc, #520]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <HAL_RCC_OscConfig+0x7c>
 80030e2:	4b7f      	ldr	r3, [pc, #508]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ea:	e005      	b.n	80030f8 <HAL_RCC_OscConfig+0x88>
 80030ec:	4b7c      	ldr	r3, [pc, #496]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80030ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d223      	bcs.n	8003144 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fd55 	bl	8003bb0 <RCC_SetFlashLatencyFromMSIRange>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e383      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003110:	4b73      	ldr	r3, [pc, #460]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a72      	ldr	r2, [pc, #456]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003116:	f043 0308 	orr.w	r3, r3, #8
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b70      	ldr	r3, [pc, #448]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	496d      	ldr	r1, [pc, #436]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800312e:	4b6c      	ldr	r3, [pc, #432]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	4968      	ldr	r1, [pc, #416]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]
 8003142:	e025      	b.n	8003190 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003144:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 800314a:	f043 0308 	orr.w	r3, r3, #8
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4960      	ldr	r1, [pc, #384]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003162:	4b5f      	ldr	r3, [pc, #380]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	495b      	ldr	r1, [pc, #364]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d109      	bne.n	8003190 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fd15 	bl	8003bb0 <RCC_SetFlashLatencyFromMSIRange>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e343      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003190:	f000 fc4a 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b52      	ldr	r3, [pc, #328]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	4950      	ldr	r1, [pc, #320]	; (80032e4 <HAL_RCC_OscConfig+0x274>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	4a4e      	ldr	r2, [pc, #312]	; (80032e8 <HAL_RCC_OscConfig+0x278>)
 80031ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031b0:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <HAL_RCC_OscConfig+0x27c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fe fb81 	bl	80018bc <HAL_InitTick>
 80031ba:	4603      	mov	r3, r0
 80031bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d052      	beq.n	800326a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	e327      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d032      	beq.n	8003236 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031d0:	4b43      	ldr	r3, [pc, #268]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a42      	ldr	r2, [pc, #264]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fbbe 	bl	800195c <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e4:	f7fe fbba 	bl	800195c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e310      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031f6:	4b3a      	ldr	r3, [pc, #232]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003202:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a36      	ldr	r2, [pc, #216]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003208:	f043 0308 	orr.w	r3, r3, #8
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4931      	ldr	r1, [pc, #196]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003220:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	492c      	ldr	r1, [pc, #176]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
 8003234:	e01a      	b.n	800326c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a29      	ldr	r2, [pc, #164]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003242:	f7fe fb8b 	bl	800195c <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800324a:	f7fe fb87 	bl	800195c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e2dd      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800325c:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f0      	bne.n	800324a <HAL_RCC_OscConfig+0x1da>
 8003268:	e000      	b.n	800326c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800326a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d074      	beq.n	8003362 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b08      	cmp	r3, #8
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x21a>
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	d10e      	bne.n	80032a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d10b      	bne.n	80032a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d064      	beq.n	8003360 <HAL_RCC_OscConfig+0x2f0>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d160      	bne.n	8003360 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e2ba      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x24a>
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0b      	ldr	r2, [pc, #44]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	e026      	b.n	8003308 <HAL_RCC_OscConfig+0x298>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c2:	d115      	bne.n	80032f0 <HAL_RCC_OscConfig+0x280>
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80032ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a02      	ldr	r2, [pc, #8]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	e014      	b.n	8003308 <HAL_RCC_OscConfig+0x298>
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	08006fb0 	.word	0x08006fb0
 80032e8:	20000004 	.word	0x20000004
 80032ec:	20000008 	.word	0x20000008
 80032f0:	4ba0      	ldr	r3, [pc, #640]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a9f      	ldr	r2, [pc, #636]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b9d      	ldr	r3, [pc, #628]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a9c      	ldr	r2, [pc, #624]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fb24 	bl	800195c <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7fe fb20 	bl	800195c <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e276      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800332a:	4b92      	ldr	r3, [pc, #584]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x2a8>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe fb10 	bl	800195c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fb0c 	bl	800195c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e262      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003352:	4b88      	ldr	r3, [pc, #544]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x2d0>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d060      	beq.n	8003430 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d005      	beq.n	8003380 <HAL_RCC_OscConfig+0x310>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d119      	bne.n	80033ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d116      	bne.n	80033ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003380:	4b7c      	ldr	r3, [pc, #496]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_OscConfig+0x328>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e23f      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b76      	ldr	r3, [pc, #472]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	4973      	ldr	r1, [pc, #460]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ac:	e040      	b.n	8003430 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d023      	beq.n	80033fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b6:	4b6f      	ldr	r3, [pc, #444]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6e      	ldr	r2, [pc, #440]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80033bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7fe facb 	bl	800195c <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ca:	f7fe fac7 	bl	800195c <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e21d      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033dc:	4b65      	ldr	r3, [pc, #404]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e8:	4b62      	ldr	r3, [pc, #392]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	495f      	ldr	r1, [pc, #380]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
 80033fc:	e018      	b.n	8003430 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fe:	4b5d      	ldr	r3, [pc, #372]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a5c      	ldr	r2, [pc, #368]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe faa7 	bl	800195c <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003412:	f7fe faa3 	bl	800195c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1f9      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003424:	4b53      	ldr	r3, [pc, #332]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d03c      	beq.n	80034b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01c      	beq.n	800347e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003444:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344a:	4a4a      	ldr	r2, [pc, #296]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7fe fa82 	bl	800195c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345c:	f7fe fa7e 	bl	800195c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1d4      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800346e:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ef      	beq.n	800345c <HAL_RCC_OscConfig+0x3ec>
 800347c:	e01b      	b.n	80034b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003484:	4a3b      	ldr	r2, [pc, #236]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fe fa65 	bl	800195c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003496:	f7fe fa61 	bl	800195c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e1b7      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a8:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ef      	bne.n	8003496 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80a6 	beq.w	8003610 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c4:	2300      	movs	r3, #0
 80034c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034c8:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10d      	bne.n	80034f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d4:	4b27      	ldr	r3, [pc, #156]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d8:	4a26      	ldr	r2, [pc, #152]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034de:	6593      	str	r3, [r2, #88]	; 0x58
 80034e0:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ec:	2301      	movs	r3, #1
 80034ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f0:	4b21      	ldr	r3, [pc, #132]	; (8003578 <HAL_RCC_OscConfig+0x508>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d118      	bne.n	800352e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034fc:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <HAL_RCC_OscConfig+0x508>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <HAL_RCC_OscConfig+0x508>)
 8003502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003506:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003508:	f7fe fa28 	bl	800195c <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003510:	f7fe fa24 	bl	800195c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e17a      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <HAL_RCC_OscConfig+0x508>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d108      	bne.n	8003548 <HAL_RCC_OscConfig+0x4d8>
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	4a0d      	ldr	r2, [pc, #52]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003546:	e029      	b.n	800359c <HAL_RCC_OscConfig+0x52c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b05      	cmp	r3, #5
 800354e:	d115      	bne.n	800357c <HAL_RCC_OscConfig+0x50c>
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	4a07      	ldr	r2, [pc, #28]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003558:	f043 0304 	orr.w	r3, r3, #4
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	4a03      	ldr	r2, [pc, #12]	; (8003574 <HAL_RCC_OscConfig+0x504>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003570:	e014      	b.n	800359c <HAL_RCC_OscConfig+0x52c>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	40007000 	.word	0x40007000
 800357c:	4b9c      	ldr	r3, [pc, #624]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	4a9b      	ldr	r2, [pc, #620]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800358c:	4b98      	ldr	r3, [pc, #608]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	4a97      	ldr	r2, [pc, #604]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003594:	f023 0304 	bic.w	r3, r3, #4
 8003598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d016      	beq.n	80035d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fe f9da 	bl	800195c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ac:	f7fe f9d6 	bl	800195c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e12a      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c2:	4b8b      	ldr	r3, [pc, #556]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0ed      	beq.n	80035ac <HAL_RCC_OscConfig+0x53c>
 80035d0:	e015      	b.n	80035fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d2:	f7fe f9c3 	bl	800195c <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7fe f9bf 	bl	800195c <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e113      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035f0:	4b7f      	ldr	r3, [pc, #508]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1ed      	bne.n	80035da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035fe:	7ffb      	ldrb	r3, [r7, #31]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003604:	4b7a      	ldr	r3, [pc, #488]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	4a79      	ldr	r2, [pc, #484]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 800360a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80fe 	beq.w	8003816 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	2b02      	cmp	r3, #2
 8003620:	f040 80d0 	bne.w	80037c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003624:	4b72      	ldr	r3, [pc, #456]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f003 0203 	and.w	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	429a      	cmp	r2, r3
 8003636:	d130      	bne.n	800369a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	3b01      	subs	r3, #1
 8003644:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d127      	bne.n	800369a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d11f      	bne.n	800369a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003664:	2a07      	cmp	r2, #7
 8003666:	bf14      	ite	ne
 8003668:	2201      	movne	r2, #1
 800366a:	2200      	moveq	r2, #0
 800366c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800366e:	4293      	cmp	r3, r2
 8003670:	d113      	bne.n	800369a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	085b      	lsrs	r3, r3, #1
 800367e:	3b01      	subs	r3, #1
 8003680:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d109      	bne.n	800369a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	3b01      	subs	r3, #1
 8003694:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d06e      	beq.n	8003778 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b0c      	cmp	r3, #12
 800369e:	d069      	beq.n	8003774 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036a0:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036ac:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0ad      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036bc:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a4b      	ldr	r2, [pc, #300]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 80036c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c8:	f7fe f948 	bl	800195c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fe f944 	bl	800195c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e09a      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e2:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ee:	4b40      	ldr	r3, [pc, #256]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <HAL_RCC_OscConfig+0x784>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036fe:	3a01      	subs	r2, #1
 8003700:	0112      	lsls	r2, r2, #4
 8003702:	4311      	orrs	r1, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003708:	0212      	lsls	r2, r2, #8
 800370a:	4311      	orrs	r1, r2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003710:	0852      	lsrs	r2, r2, #1
 8003712:	3a01      	subs	r2, #1
 8003714:	0552      	lsls	r2, r2, #21
 8003716:	4311      	orrs	r1, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800371c:	0852      	lsrs	r2, r2, #1
 800371e:	3a01      	subs	r2, #1
 8003720:	0652      	lsls	r2, r2, #25
 8003722:	4311      	orrs	r1, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003728:	0912      	lsrs	r2, r2, #4
 800372a:	0452      	lsls	r2, r2, #17
 800372c:	430a      	orrs	r2, r1
 800372e:	4930      	ldr	r1, [pc, #192]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003730:	4313      	orrs	r3, r2
 8003732:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003734:	4b2e      	ldr	r3, [pc, #184]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2d      	ldr	r2, [pc, #180]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 800373a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003740:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4a2a      	ldr	r2, [pc, #168]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800374c:	f7fe f906 	bl	800195c <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003754:	f7fe f902 	bl	800195c <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e058      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003766:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003772:	e050      	b.n	8003816 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e04f      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d148      	bne.n	8003816 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003784:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a19      	ldr	r2, [pc, #100]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 800378a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003790:	4b17      	ldr	r3, [pc, #92]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 8003796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800379c:	f7fe f8de 	bl	800195c <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fe f8da 	bl	800195c <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e030      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b6:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x734>
 80037c2:	e028      	b.n	8003816 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b0c      	cmp	r3, #12
 80037c8:	d023      	beq.n	8003812 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a08      	ldr	r2, [pc, #32]	; (80037f0 <HAL_RCC_OscConfig+0x780>)
 80037d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fe f8c1 	bl	800195c <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037dc:	e00c      	b.n	80037f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037de:	f7fe f8bd 	bl	800195c <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d905      	bls.n	80037f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e013      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
 80037f0:	40021000 	.word	0x40021000
 80037f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_OscConfig+0x7b0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ec      	bne.n	80037de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_OscConfig+0x7b0>)
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	4905      	ldr	r1, [pc, #20]	; (8003820 <HAL_RCC_OscConfig+0x7b0>)
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_OscConfig+0x7b4>)
 800380c:	4013      	ands	r3, r2
 800380e:	60cb      	str	r3, [r1, #12]
 8003810:	e001      	b.n	8003816 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	feeefffc 	.word	0xfeeefffc

08003828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0e7      	b.n	8003a0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800383c:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <HAL_RCC_ClockConfig+0x1ec>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d910      	bls.n	800386c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b72      	ldr	r3, [pc, #456]	; (8003a14 <HAL_RCC_ClockConfig+0x1ec>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 0207 	bic.w	r2, r3, #7
 8003852:	4970      	ldr	r1, [pc, #448]	; (8003a14 <HAL_RCC_ClockConfig+0x1ec>)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b6e      	ldr	r3, [pc, #440]	; (8003a14 <HAL_RCC_ClockConfig+0x1ec>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0cf      	b.n	8003a0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d010      	beq.n	800389a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4b66      	ldr	r3, [pc, #408]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003884:	429a      	cmp	r2, r3
 8003886:	d908      	bls.n	800389a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b63      	ldr	r3, [pc, #396]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4960      	ldr	r1, [pc, #384]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d04c      	beq.n	8003940 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	4b5a      	ldr	r3, [pc, #360]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d121      	bne.n	80038fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e0a6      	b.n	8003a0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c6:	4b54      	ldr	r3, [pc, #336]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d115      	bne.n	80038fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e09a      	b.n	8003a0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038de:	4b4e      	ldr	r3, [pc, #312]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e08e      	b.n	8003a0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ee:	4b4a      	ldr	r3, [pc, #296]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e086      	b.n	8003a0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038fe:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f023 0203 	bic.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4943      	ldr	r1, [pc, #268]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 800390c:	4313      	orrs	r3, r2
 800390e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003910:	f7fe f824 	bl	800195c <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	e00a      	b.n	800392e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003918:	f7fe f820 	bl	800195c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e06e      	b.n	8003a0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	4b3a      	ldr	r3, [pc, #232]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 020c 	and.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	d1eb      	bne.n	8003918 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d010      	beq.n	800396e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003958:	429a      	cmp	r2, r3
 800395a:	d208      	bcs.n	800396e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395c:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	492b      	ldr	r1, [pc, #172]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800396e:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <HAL_RCC_ClockConfig+0x1ec>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d210      	bcs.n	800399e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397c:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_RCC_ClockConfig+0x1ec>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 0207 	bic.w	r2, r3, #7
 8003984:	4923      	ldr	r1, [pc, #140]	; (8003a14 <HAL_RCC_ClockConfig+0x1ec>)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	4313      	orrs	r3, r2
 800398a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398c:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <HAL_RCC_ClockConfig+0x1ec>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e036      	b.n	8003a0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4918      	ldr	r1, [pc, #96]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d009      	beq.n	80039dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c8:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4910      	ldr	r1, [pc, #64]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039dc:	f000 f824 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <HAL_RCC_ClockConfig+0x1f0>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	490b      	ldr	r1, [pc, #44]	; (8003a1c <HAL_RCC_ClockConfig+0x1f4>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
 80039f8:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1f8>)
 80039fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1fc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fd ff5b 	bl	80018bc <HAL_InitTick>
 8003a06:	4603      	mov	r3, r0
 8003a08:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40022000 	.word	0x40022000
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	08006fb0 	.word	0x08006fb0
 8003a20:	20000004 	.word	0x20000004
 8003a24:	20000008 	.word	0x20000008

08003a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	; 0x24
 8003a2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a36:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a40:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x34>
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d121      	bne.n	8003a9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d11e      	bne.n	8003a9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a5c:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a68:	4b31      	ldr	r3, [pc, #196]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	e005      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a84:	4a2b      	ldr	r2, [pc, #172]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10d      	bne.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d102      	bne.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e004      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003aac:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003aae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	d134      	bne.n	8003b20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0xa6>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d003      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xac>
 8003acc:	e005      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ace:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ad0:	617b      	str	r3, [r7, #20]
      break;
 8003ad2:	e005      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ad6:	617b      	str	r3, [r7, #20]
      break;
 8003ad8:	e002      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	617b      	str	r3, [r7, #20]
      break;
 8003ade:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	3301      	adds	r3, #1
 8003aec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	fb03 f202 	mul.w	r2, r3, r2
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	0e5b      	lsrs	r3, r3, #25
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	3301      	adds	r3, #1
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b20:	69bb      	ldr	r3, [r7, #24]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3724      	adds	r7, #36	; 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	08006fc8 	.word	0x08006fc8
 8003b38:	00f42400 	.word	0x00f42400
 8003b3c:	007a1200 	.word	0x007a1200

08003b40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000004 	.word	0x20000004

08003b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b5c:	f7ff fff0 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4904      	ldr	r1, [pc, #16]	; (8003b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b6e:	5ccb      	ldrb	r3, [r1, r3]
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08006fc0 	.word	0x08006fc0

08003b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b88:	f7ff ffda 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	0adb      	lsrs	r3, r3, #11
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4904      	ldr	r1, [pc, #16]	; (8003bac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	08006fc0 	.word	0x08006fc0

08003bb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bc8:	f7ff f9ee 	bl	8002fa8 <HAL_PWREx_GetVoltageRange>
 8003bcc:	6178      	str	r0, [r7, #20]
 8003bce:	e014      	b.n	8003bfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd0:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	4a24      	ldr	r2, [pc, #144]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bda:	6593      	str	r3, [r2, #88]	; 0x58
 8003bdc:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003be8:	f7ff f9de 	bl	8002fa8 <HAL_PWREx_GetVoltageRange>
 8003bec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bee:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c00:	d10b      	bne.n	8003c1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b80      	cmp	r3, #128	; 0x80
 8003c06:	d919      	bls.n	8003c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2ba0      	cmp	r3, #160	; 0xa0
 8003c0c:	d902      	bls.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c0e:	2302      	movs	r3, #2
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e013      	b.n	8003c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c14:	2301      	movs	r3, #1
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	e010      	b.n	8003c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d902      	bls.n	8003c26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c20:	2303      	movs	r3, #3
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	e00a      	b.n	8003c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d102      	bne.n	8003c32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	e004      	b.n	8003c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b70      	cmp	r3, #112	; 0x70
 8003c36:	d101      	bne.n	8003c3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c38:	2301      	movs	r3, #1
 8003c3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 0207 	bic.w	r2, r3, #7
 8003c44:	4909      	ldr	r1, [pc, #36]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c4c:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d001      	beq.n	8003c5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40022000 	.word	0x40022000

08003c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c78:	2300      	movs	r3, #0
 8003c7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d041      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c94:	d02a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c9a:	d824      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ca0:	d008      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ca2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ca6:	d81e      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb0:	d010      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cb2:	e018      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cb4:	4b86      	ldr	r3, [pc, #536]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a85      	ldr	r2, [pc, #532]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc0:	e015      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fabb 	bl	8004244 <RCCEx_PLLSAI1_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cd2:	e00c      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3320      	adds	r3, #32
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fba6 	bl	800442c <RCCEx_PLLSAI2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ce4:	e003      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cea:	e000      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cee:	7cfb      	ldrb	r3, [r7, #19]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10b      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf4:	4b76      	ldr	r3, [pc, #472]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d02:	4973      	ldr	r1, [pc, #460]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d0a:	e001      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d041      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d24:	d02a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d2a:	d824      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d30:	d008      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d36:	d81e      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d40:	d010      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d42:	e018      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d44:	4b62      	ldr	r3, [pc, #392]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4a61      	ldr	r2, [pc, #388]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d50:	e015      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fa73 	bl	8004244 <RCCEx_PLLSAI1_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d62:	e00c      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3320      	adds	r3, #32
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fb5e 	bl	800442c <RCCEx_PLLSAI2_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d74:	e003      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	74fb      	strb	r3, [r7, #19]
      break;
 8003d7a:	e000      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d7e:	7cfb      	ldrb	r3, [r7, #19]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d84:	4b52      	ldr	r3, [pc, #328]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d92:	494f      	ldr	r1, [pc, #316]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d9a:	e001      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a0 	beq.w	8003eee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dae:	2300      	movs	r3, #0
 8003db0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00d      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc8:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	4a40      	ldr	r2, [pc, #256]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd4:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de0:	2301      	movs	r3, #1
 8003de2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de4:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a3a      	ldr	r2, [pc, #232]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003df0:	f7fd fdb4 	bl	800195c <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003df6:	e009      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df8:	f7fd fdb0 	bl	800195c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d902      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	74fb      	strb	r3, [r7, #19]
        break;
 8003e0a:	e005      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e0c:	4b31      	ldr	r3, [pc, #196]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ef      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d15c      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01f      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d019      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e48:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e58:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e68:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d016      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fd fd6f 	bl	800195c <HAL_GetTick>
 8003e7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e80:	e00b      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fd fd6b 	bl	800195c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d902      	bls.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	74fb      	strb	r3, [r7, #19]
            break;
 8003e98:	e006      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0ec      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebe:	4904      	ldr	r1, [pc, #16]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ec6:	e009      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	74bb      	strb	r3, [r7, #18]
 8003ecc:	e006      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	7cfb      	ldrb	r3, [r7, #19]
 8003eda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003edc:	7c7b      	ldrb	r3, [r7, #17]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d105      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee2:	4b9e      	ldr	r3, [pc, #632]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	4a9d      	ldr	r2, [pc, #628]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003efa:	4b98      	ldr	r3, [pc, #608]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f023 0203 	bic.w	r2, r3, #3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	4994      	ldr	r1, [pc, #592]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f1c:	4b8f      	ldr	r3, [pc, #572]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f023 020c 	bic.w	r2, r3, #12
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	498c      	ldr	r1, [pc, #560]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f3e:	4b87      	ldr	r3, [pc, #540]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	4983      	ldr	r1, [pc, #524]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f60:	4b7e      	ldr	r3, [pc, #504]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	497b      	ldr	r1, [pc, #492]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f82:	4b76      	ldr	r3, [pc, #472]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f90:	4972      	ldr	r1, [pc, #456]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fa4:	4b6d      	ldr	r3, [pc, #436]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb2:	496a      	ldr	r1, [pc, #424]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc6:	4b65      	ldr	r3, [pc, #404]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	4961      	ldr	r1, [pc, #388]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fe8:	4b5c      	ldr	r3, [pc, #368]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff6:	4959      	ldr	r1, [pc, #356]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800400a:	4b54      	ldr	r3, [pc, #336]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004018:	4950      	ldr	r1, [pc, #320]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800402c:	4b4b      	ldr	r3, [pc, #300]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	4948      	ldr	r1, [pc, #288]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800404e:	4b43      	ldr	r3, [pc, #268]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	493f      	ldr	r1, [pc, #252]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d028      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004070:	4b3a      	ldr	r3, [pc, #232]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407e:	4937      	ldr	r1, [pc, #220]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408e:	d106      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004090:	4b32      	ldr	r3, [pc, #200]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4a31      	ldr	r2, [pc, #196]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800409a:	60d3      	str	r3, [r2, #12]
 800409c:	e011      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	2101      	movs	r1, #1
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f8c8 	bl	8004244 <RCCEx_PLLSAI1_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040be:	7cfb      	ldrb	r3, [r7, #19]
 80040c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d028      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040ce:	4b23      	ldr	r3, [pc, #140]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	491f      	ldr	r1, [pc, #124]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040ec:	d106      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ee:	4b1b      	ldr	r3, [pc, #108]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	4a1a      	ldr	r2, [pc, #104]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040f8:	60d3      	str	r3, [r2, #12]
 80040fa:	e011      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004104:	d10c      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3304      	adds	r3, #4
 800410a:	2101      	movs	r1, #1
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f899 	bl	8004244 <RCCEx_PLLSAI1_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800411c:	7cfb      	ldrb	r3, [r7, #19]
 800411e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d02b      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004132:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413a:	4908      	ldr	r1, [pc, #32]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800414a:	d109      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a02      	ldr	r2, [pc, #8]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004156:	60d3      	str	r3, [r2, #12]
 8004158:	e014      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004164:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004168:	d10c      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3304      	adds	r3, #4
 800416e:	2101      	movs	r1, #1
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f867 	bl	8004244 <RCCEx_PLLSAI1_Config>
 8004176:	4603      	mov	r3, r0
 8004178:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d02f      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800419e:	4928      	ldr	r1, [pc, #160]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ae:	d10d      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3304      	adds	r3, #4
 80041b4:	2102      	movs	r1, #2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 f844 	bl	8004244 <RCCEx_PLLSAI1_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041c0:	7cfb      	ldrb	r3, [r7, #19]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d014      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	74bb      	strb	r3, [r7, #18]
 80041ca:	e011      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3320      	adds	r3, #32
 80041da:	2102      	movs	r1, #2
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 f925 	bl	800442c <RCCEx_PLLSAI2_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041e6:	7cfb      	ldrb	r3, [r7, #19]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041ec:	7cfb      	ldrb	r3, [r7, #19]
 80041ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041fc:	4b10      	ldr	r3, [pc, #64]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800420a:	490d      	ldr	r1, [pc, #52]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800421e:	4b08      	ldr	r3, [pc, #32]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422e:	4904      	ldr	r1, [pc, #16]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004236:	7cbb      	ldrb	r3, [r7, #18]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000

08004244 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004252:	4b75      	ldr	r3, [pc, #468]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d018      	beq.n	8004290 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800425e:	4b72      	ldr	r3, [pc, #456]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0203 	and.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d10d      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
       ||
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004276:	4b6c      	ldr	r3, [pc, #432]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
       ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d047      	beq.n	800431a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
 800428e:	e044      	b.n	800431a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d018      	beq.n	80042ca <RCCEx_PLLSAI1_Config+0x86>
 8004298:	2b03      	cmp	r3, #3
 800429a:	d825      	bhi.n	80042e8 <RCCEx_PLLSAI1_Config+0xa4>
 800429c:	2b01      	cmp	r3, #1
 800429e:	d002      	beq.n	80042a6 <RCCEx_PLLSAI1_Config+0x62>
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d009      	beq.n	80042b8 <RCCEx_PLLSAI1_Config+0x74>
 80042a4:	e020      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042a6:	4b60      	ldr	r3, [pc, #384]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11d      	bne.n	80042ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b6:	e01a      	b.n	80042ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042b8:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d116      	bne.n	80042f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c8:	e013      	b.n	80042f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042ca:	4b57      	ldr	r3, [pc, #348]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10f      	bne.n	80042f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042d6:	4b54      	ldr	r3, [pc, #336]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042e6:	e006      	b.n	80042f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
      break;
 80042ec:	e004      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10d      	bne.n	800431a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042fe:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	3b01      	subs	r3, #1
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	430b      	orrs	r3, r1
 8004314:	4944      	ldr	r1, [pc, #272]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d17d      	bne.n	800441c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004320:	4b41      	ldr	r3, [pc, #260]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a40      	ldr	r2, [pc, #256]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004326:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800432a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432c:	f7fd fb16 	bl	800195c <HAL_GetTick>
 8004330:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004332:	e009      	b.n	8004348 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004334:	f7fd fb12 	bl	800195c <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d902      	bls.n	8004348 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	73fb      	strb	r3, [r7, #15]
        break;
 8004346:	e005      	b.n	8004354 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004348:	4b37      	ldr	r3, [pc, #220]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ef      	bne.n	8004334 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d160      	bne.n	800441c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d111      	bne.n	8004384 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004360:	4b31      	ldr	r3, [pc, #196]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6892      	ldr	r2, [r2, #8]
 8004370:	0211      	lsls	r1, r2, #8
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68d2      	ldr	r2, [r2, #12]
 8004376:	0912      	lsrs	r2, r2, #4
 8004378:	0452      	lsls	r2, r2, #17
 800437a:	430a      	orrs	r2, r1
 800437c:	492a      	ldr	r1, [pc, #168]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	610b      	str	r3, [r1, #16]
 8004382:	e027      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d112      	bne.n	80043b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800438a:	4b27      	ldr	r3, [pc, #156]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004392:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6892      	ldr	r2, [r2, #8]
 800439a:	0211      	lsls	r1, r2, #8
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6912      	ldr	r2, [r2, #16]
 80043a0:	0852      	lsrs	r2, r2, #1
 80043a2:	3a01      	subs	r2, #1
 80043a4:	0552      	lsls	r2, r2, #21
 80043a6:	430a      	orrs	r2, r1
 80043a8:	491f      	ldr	r1, [pc, #124]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]
 80043ae:	e011      	b.n	80043d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6892      	ldr	r2, [r2, #8]
 80043c0:	0211      	lsls	r1, r2, #8
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6952      	ldr	r2, [r2, #20]
 80043c6:	0852      	lsrs	r2, r2, #1
 80043c8:	3a01      	subs	r2, #1
 80043ca:	0652      	lsls	r2, r2, #25
 80043cc:	430a      	orrs	r2, r1
 80043ce:	4916      	ldr	r1, [pc, #88]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043d4:	4b14      	ldr	r3, [pc, #80]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a13      	ldr	r2, [pc, #76]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fd fabc 	bl	800195c <HAL_GetTick>
 80043e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043e6:	e009      	b.n	80043fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043e8:	f7fd fab8 	bl	800195c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d902      	bls.n	80043fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	73fb      	strb	r3, [r7, #15]
          break;
 80043fa:	e005      	b.n	8004408 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ef      	beq.n	80043e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	4904      	ldr	r1, [pc, #16]	; (8004428 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004418:	4313      	orrs	r3, r2
 800441a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000

0800442c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800443a:	4b6a      	ldr	r3, [pc, #424]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d018      	beq.n	8004478 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004446:	4b67      	ldr	r3, [pc, #412]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0203 	and.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d10d      	bne.n	8004472 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
       ||
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800445e:	4b61      	ldr	r3, [pc, #388]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
       ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d047      	beq.n	8004502 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
 8004476:	e044      	b.n	8004502 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d018      	beq.n	80044b2 <RCCEx_PLLSAI2_Config+0x86>
 8004480:	2b03      	cmp	r3, #3
 8004482:	d825      	bhi.n	80044d0 <RCCEx_PLLSAI2_Config+0xa4>
 8004484:	2b01      	cmp	r3, #1
 8004486:	d002      	beq.n	800448e <RCCEx_PLLSAI2_Config+0x62>
 8004488:	2b02      	cmp	r3, #2
 800448a:	d009      	beq.n	80044a0 <RCCEx_PLLSAI2_Config+0x74>
 800448c:	e020      	b.n	80044d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800448e:	4b55      	ldr	r3, [pc, #340]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11d      	bne.n	80044d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449e:	e01a      	b.n	80044d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044a0:	4b50      	ldr	r3, [pc, #320]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d116      	bne.n	80044da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b0:	e013      	b.n	80044da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044b2:	4b4c      	ldr	r3, [pc, #304]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10f      	bne.n	80044de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044be:	4b49      	ldr	r3, [pc, #292]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ce:	e006      	b.n	80044de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      break;
 80044d4:	e004      	b.n	80044e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044de:	bf00      	nop
    }

    if(status == HAL_OK)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10d      	bne.n	8004502 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044e6:	4b3f      	ldr	r3, [pc, #252]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6819      	ldr	r1, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	430b      	orrs	r3, r1
 80044fc:	4939      	ldr	r1, [pc, #228]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d167      	bne.n	80045d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004508:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a35      	ldr	r2, [pc, #212]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004514:	f7fd fa22 	bl	800195c <HAL_GetTick>
 8004518:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800451a:	e009      	b.n	8004530 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800451c:	f7fd fa1e 	bl	800195c <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d902      	bls.n	8004530 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	73fb      	strb	r3, [r7, #15]
        break;
 800452e:	e005      	b.n	800453c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1ef      	bne.n	800451c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d14a      	bne.n	80045d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d111      	bne.n	800456c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004548:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6892      	ldr	r2, [r2, #8]
 8004558:	0211      	lsls	r1, r2, #8
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68d2      	ldr	r2, [r2, #12]
 800455e:	0912      	lsrs	r2, r2, #4
 8004560:	0452      	lsls	r2, r2, #17
 8004562:	430a      	orrs	r2, r1
 8004564:	491f      	ldr	r1, [pc, #124]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	614b      	str	r3, [r1, #20]
 800456a:	e011      	b.n	8004590 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800456c:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004574:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6892      	ldr	r2, [r2, #8]
 800457c:	0211      	lsls	r1, r2, #8
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6912      	ldr	r2, [r2, #16]
 8004582:	0852      	lsrs	r2, r2, #1
 8004584:	3a01      	subs	r2, #1
 8004586:	0652      	lsls	r2, r2, #25
 8004588:	430a      	orrs	r2, r1
 800458a:	4916      	ldr	r1, [pc, #88]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800458c:	4313      	orrs	r3, r2
 800458e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004590:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fd f9de 	bl	800195c <HAL_GetTick>
 80045a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045a2:	e009      	b.n	80045b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045a4:	f7fd f9da 	bl	800195c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d902      	bls.n	80045b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	73fb      	strb	r3, [r7, #15]
          break;
 80045b6:	e005      	b.n	80045c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045b8:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ef      	beq.n	80045a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	4904      	ldr	r1, [pc, #16]	; (80045e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e049      	b.n	800468e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc ffc6 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 fb7a 	bl	8004d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e049      	b.n	800473c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f841 	bl	8004744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f000 fb23 	bl	8004d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_TIM_PWM_Start+0x24>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e03c      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b04      	cmp	r3, #4
 8004780:	d109      	bne.n	8004796 <HAL_TIM_PWM_Start+0x3e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	bf14      	ite	ne
 800478e:	2301      	movne	r3, #1
 8004790:	2300      	moveq	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	e02f      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b08      	cmp	r3, #8
 800479a:	d109      	bne.n	80047b0 <HAL_TIM_PWM_Start+0x58>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e022      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d109      	bne.n	80047ca <HAL_TIM_PWM_Start+0x72>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	bf14      	ite	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	2300      	moveq	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	e015      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d109      	bne.n	80047e4 <HAL_TIM_PWM_Start+0x8c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e008      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e09c      	b.n	8004938 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_TIM_PWM_Start+0xb6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800480c:	e023      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start+0xc6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800481c:	e01b      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d104      	bne.n	800482e <HAL_TIM_PWM_Start+0xd6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800482c:	e013      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d104      	bne.n	800483e <HAL_TIM_PWM_Start+0xe6>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800483c:	e00b      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b10      	cmp	r3, #16
 8004842:	d104      	bne.n	800484e <HAL_TIM_PWM_Start+0xf6>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800484c:	e003      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2201      	movs	r2, #1
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fe68 	bl	8005534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a35      	ldr	r2, [pc, #212]	; (8004940 <HAL_TIM_PWM_Start+0x1e8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_TIM_PWM_Start+0x13e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a34      	ldr	r2, [pc, #208]	; (8004944 <HAL_TIM_PWM_Start+0x1ec>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_TIM_PWM_Start+0x13e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a32      	ldr	r2, [pc, #200]	; (8004948 <HAL_TIM_PWM_Start+0x1f0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_TIM_PWM_Start+0x13e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a31      	ldr	r2, [pc, #196]	; (800494c <HAL_TIM_PWM_Start+0x1f4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_TIM_PWM_Start+0x13e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a2f      	ldr	r2, [pc, #188]	; (8004950 <HAL_TIM_PWM_Start+0x1f8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_TIM_PWM_Start+0x142>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <HAL_TIM_PWM_Start+0x144>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a22      	ldr	r2, [pc, #136]	; (8004940 <HAL_TIM_PWM_Start+0x1e8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01d      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c2:	d018      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a22      	ldr	r2, [pc, #136]	; (8004954 <HAL_TIM_PWM_Start+0x1fc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a21      	ldr	r2, [pc, #132]	; (8004958 <HAL_TIM_PWM_Start+0x200>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1f      	ldr	r2, [pc, #124]	; (800495c <HAL_TIM_PWM_Start+0x204>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a17      	ldr	r2, [pc, #92]	; (8004944 <HAL_TIM_PWM_Start+0x1ec>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x19e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a15      	ldr	r2, [pc, #84]	; (8004948 <HAL_TIM_PWM_Start+0x1f0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d115      	bne.n	8004922 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	4b18      	ldr	r3, [pc, #96]	; (8004960 <HAL_TIM_PWM_Start+0x208>)
 80048fe:	4013      	ands	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b06      	cmp	r3, #6
 8004906:	d015      	beq.n	8004934 <HAL_TIM_PWM_Start+0x1dc>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490e:	d011      	beq.n	8004934 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004920:	e008      	b.n	8004934 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	e000      	b.n	8004936 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004934:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40012c00 	.word	0x40012c00
 8004944:	40013400 	.word	0x40013400
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	00010007 	.word	0x00010007

08004964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800497e:	2302      	movs	r3, #2
 8004980:	e0ff      	b.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b14      	cmp	r3, #20
 800498e:	f200 80f0 	bhi.w	8004b72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049ed 	.word	0x080049ed
 800499c:	08004b73 	.word	0x08004b73
 80049a0:	08004b73 	.word	0x08004b73
 80049a4:	08004b73 	.word	0x08004b73
 80049a8:	08004a2d 	.word	0x08004a2d
 80049ac:	08004b73 	.word	0x08004b73
 80049b0:	08004b73 	.word	0x08004b73
 80049b4:	08004b73 	.word	0x08004b73
 80049b8:	08004a6f 	.word	0x08004a6f
 80049bc:	08004b73 	.word	0x08004b73
 80049c0:	08004b73 	.word	0x08004b73
 80049c4:	08004b73 	.word	0x08004b73
 80049c8:	08004aaf 	.word	0x08004aaf
 80049cc:	08004b73 	.word	0x08004b73
 80049d0:	08004b73 	.word	0x08004b73
 80049d4:	08004b73 	.word	0x08004b73
 80049d8:	08004af1 	.word	0x08004af1
 80049dc:	08004b73 	.word	0x08004b73
 80049e0:	08004b73 	.word	0x08004b73
 80049e4:	08004b73 	.word	0x08004b73
 80049e8:	08004b31 	.word	0x08004b31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fa2e 	bl	8004e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0208 	orr.w	r2, r2, #8
 8004a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0204 	bic.w	r2, r2, #4
 8004a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6999      	ldr	r1, [r3, #24]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	619a      	str	r2, [r3, #24]
      break;
 8004a2a:	e0a5      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fa9e 	bl	8004f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699a      	ldr	r2, [r3, #24]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6999      	ldr	r1, [r3, #24]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	021a      	lsls	r2, r3, #8
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	619a      	str	r2, [r3, #24]
      break;
 8004a6c:	e084      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fb07 	bl	8005088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0208 	orr.w	r2, r2, #8
 8004a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0204 	bic.w	r2, r2, #4
 8004a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69d9      	ldr	r1, [r3, #28]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	61da      	str	r2, [r3, #28]
      break;
 8004aac:	e064      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fb6f 	bl	8005198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69da      	ldr	r2, [r3, #28]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69d9      	ldr	r1, [r3, #28]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	021a      	lsls	r2, r3, #8
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	61da      	str	r2, [r3, #28]
      break;
 8004aee:	e043      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fbb8 	bl	800526c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0208 	orr.w	r2, r2, #8
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0204 	bic.w	r2, r2, #4
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b2e:	e023      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fbfc 	bl	8005334 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	021a      	lsls	r2, r3, #8
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b70:	e002      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	75fb      	strb	r3, [r7, #23]
      break;
 8004b76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop

08004b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e0b6      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x18a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be4:	d03e      	beq.n	8004c64 <HAL_TIM_ConfigClockSource+0xd8>
 8004be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bea:	f200 8087 	bhi.w	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf2:	f000 8086 	beq.w	8004d02 <HAL_TIM_ConfigClockSource+0x176>
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfa:	d87f      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004bfc:	2b70      	cmp	r3, #112	; 0x70
 8004bfe:	d01a      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0xaa>
 8004c00:	2b70      	cmp	r3, #112	; 0x70
 8004c02:	d87b      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c04:	2b60      	cmp	r3, #96	; 0x60
 8004c06:	d050      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x11e>
 8004c08:	2b60      	cmp	r3, #96	; 0x60
 8004c0a:	d877      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c0c:	2b50      	cmp	r3, #80	; 0x50
 8004c0e:	d03c      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0xfe>
 8004c10:	2b50      	cmp	r3, #80	; 0x50
 8004c12:	d873      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d058      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x13e>
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	d86f      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c1c:	2b30      	cmp	r3, #48	; 0x30
 8004c1e:	d064      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c20:	2b30      	cmp	r3, #48	; 0x30
 8004c22:	d86b      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d060      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d867      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d05c      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d05a      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c34:	e062      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c46:	f000 fc55 	bl	80054f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	609a      	str	r2, [r3, #8]
      break;
 8004c62:	e04f      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c74:	f000 fc3e 	bl	80054f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c86:	609a      	str	r2, [r3, #8]
      break;
 8004c88:	e03c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 fbb2 	bl	8005400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2150      	movs	r1, #80	; 0x50
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fc0b 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e02c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f000 fbd1 	bl	800545e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2160      	movs	r1, #96	; 0x60
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fbfb 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e01c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f000 fb92 	bl	8005400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2140      	movs	r1, #64	; 0x40
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fbeb 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004ce8:	e00c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f000 fbe2 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004cfa:	e003      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004d00:	e000      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a40      	ldr	r2, [pc, #256]	; (8004e34 <TIM_Base_SetConfig+0x114>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d013      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3e:	d00f      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a3d      	ldr	r2, [pc, #244]	; (8004e38 <TIM_Base_SetConfig+0x118>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00b      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a3c      	ldr	r2, [pc, #240]	; (8004e3c <TIM_Base_SetConfig+0x11c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d007      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a3b      	ldr	r2, [pc, #236]	; (8004e40 <TIM_Base_SetConfig+0x120>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d003      	beq.n	8004d60 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a3a      	ldr	r2, [pc, #232]	; (8004e44 <TIM_Base_SetConfig+0x124>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d108      	bne.n	8004d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2f      	ldr	r2, [pc, #188]	; (8004e34 <TIM_Base_SetConfig+0x114>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01f      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d80:	d01b      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2c      	ldr	r2, [pc, #176]	; (8004e38 <TIM_Base_SetConfig+0x118>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d017      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2b      	ldr	r2, [pc, #172]	; (8004e3c <TIM_Base_SetConfig+0x11c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2a      	ldr	r2, [pc, #168]	; (8004e40 <TIM_Base_SetConfig+0x120>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00f      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a29      	ldr	r2, [pc, #164]	; (8004e44 <TIM_Base_SetConfig+0x124>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00b      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a28      	ldr	r2, [pc, #160]	; (8004e48 <TIM_Base_SetConfig+0x128>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d007      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a27      	ldr	r2, [pc, #156]	; (8004e4c <TIM_Base_SetConfig+0x12c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_Base_SetConfig+0x9a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <TIM_Base_SetConfig+0x130>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d108      	bne.n	8004dcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <TIM_Base_SetConfig+0x114>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00f      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a12      	ldr	r2, [pc, #72]	; (8004e44 <TIM_Base_SetConfig+0x124>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <TIM_Base_SetConfig+0x128>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a10      	ldr	r2, [pc, #64]	; (8004e4c <TIM_Base_SetConfig+0x12c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_Base_SetConfig+0xf8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a0f      	ldr	r2, [pc, #60]	; (8004e50 <TIM_Base_SetConfig+0x130>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d103      	bne.n	8004e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	615a      	str	r2, [r3, #20]
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40012c00 	.word	0x40012c00
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40000800 	.word	0x40000800
 8004e40:	40000c00 	.word	0x40000c00
 8004e44:	40013400 	.word	0x40013400
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800

08004e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f023 0201 	bic.w	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f023 0302 	bic.w	r3, r3, #2
 8004ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a2c      	ldr	r2, [pc, #176]	; (8004f60 <TIM_OC1_SetConfig+0x10c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a2b      	ldr	r2, [pc, #172]	; (8004f64 <TIM_OC1_SetConfig+0x110>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <TIM_OC1_SetConfig+0x114>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a29      	ldr	r2, [pc, #164]	; (8004f6c <TIM_OC1_SetConfig+0x118>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a28      	ldr	r2, [pc, #160]	; (8004f70 <TIM_OC1_SetConfig+0x11c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d10c      	bne.n	8004eee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0308 	bic.w	r3, r3, #8
 8004eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f023 0304 	bic.w	r3, r3, #4
 8004eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <TIM_OC1_SetConfig+0x10c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00f      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a1a      	ldr	r2, [pc, #104]	; (8004f64 <TIM_OC1_SetConfig+0x110>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <TIM_OC1_SetConfig+0x114>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <TIM_OC1_SetConfig+0x118>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <TIM_OC1_SetConfig+0x11c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d111      	bne.n	8004f3a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	621a      	str	r2, [r3, #32]
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40013400 	.word	0x40013400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800

08004f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f023 0210 	bic.w	r2, r3, #16
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f023 0320 	bic.w	r3, r3, #32
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a28      	ldr	r2, [pc, #160]	; (8005074 <TIM_OC2_SetConfig+0x100>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_OC2_SetConfig+0x6c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a27      	ldr	r2, [pc, #156]	; (8005078 <TIM_OC2_SetConfig+0x104>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10d      	bne.n	8004ffc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ffa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <TIM_OC2_SetConfig+0x100>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00f      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a1c      	ldr	r2, [pc, #112]	; (8005078 <TIM_OC2_SetConfig+0x104>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a1b      	ldr	r2, [pc, #108]	; (800507c <TIM_OC2_SetConfig+0x108>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a1a      	ldr	r2, [pc, #104]	; (8005080 <TIM_OC2_SetConfig+0x10c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a19      	ldr	r2, [pc, #100]	; (8005084 <TIM_OC2_SetConfig+0x110>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d113      	bne.n	800504c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800502a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40013400 	.word	0x40013400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800

08005088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a27      	ldr	r2, [pc, #156]	; (8005184 <TIM_OC3_SetConfig+0xfc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_OC3_SetConfig+0x6a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a26      	ldr	r2, [pc, #152]	; (8005188 <TIM_OC3_SetConfig+0x100>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10d      	bne.n	800510e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800510c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <TIM_OC3_SetConfig+0xfc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00f      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <TIM_OC3_SetConfig+0x100>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1a      	ldr	r2, [pc, #104]	; (800518c <TIM_OC3_SetConfig+0x104>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a19      	ldr	r2, [pc, #100]	; (8005190 <TIM_OC3_SetConfig+0x108>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a18      	ldr	r2, [pc, #96]	; (8005194 <TIM_OC3_SetConfig+0x10c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d113      	bne.n	800515e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40013400 	.word	0x40013400
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800

08005198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	031b      	lsls	r3, r3, #12
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a18      	ldr	r2, [pc, #96]	; (8005258 <TIM_OC4_SetConfig+0xc0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00f      	beq.n	800521c <TIM_OC4_SetConfig+0x84>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a17      	ldr	r2, [pc, #92]	; (800525c <TIM_OC4_SetConfig+0xc4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00b      	beq.n	800521c <TIM_OC4_SetConfig+0x84>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a16      	ldr	r2, [pc, #88]	; (8005260 <TIM_OC4_SetConfig+0xc8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d007      	beq.n	800521c <TIM_OC4_SetConfig+0x84>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a15      	ldr	r2, [pc, #84]	; (8005264 <TIM_OC4_SetConfig+0xcc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_OC4_SetConfig+0x84>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a14      	ldr	r2, [pc, #80]	; (8005268 <TIM_OC4_SetConfig+0xd0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d109      	bne.n	8005230 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	019b      	lsls	r3, r3, #6
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40012c00 	.word	0x40012c00
 800525c:	40013400 	.word	0x40013400
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a17      	ldr	r2, [pc, #92]	; (8005320 <TIM_OC5_SetConfig+0xb4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00f      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a16      	ldr	r2, [pc, #88]	; (8005324 <TIM_OC5_SetConfig+0xb8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00b      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a15      	ldr	r2, [pc, #84]	; (8005328 <TIM_OC5_SetConfig+0xbc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a14      	ldr	r2, [pc, #80]	; (800532c <TIM_OC5_SetConfig+0xc0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <TIM_OC5_SetConfig+0xc4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d109      	bne.n	80052fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40013400 	.word	0x40013400
 8005328:	40014000 	.word	0x40014000
 800532c:	40014400 	.word	0x40014400
 8005330:	40014800 	.word	0x40014800

08005334 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800537a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	051b      	lsls	r3, r3, #20
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a18      	ldr	r2, [pc, #96]	; (80053ec <TIM_OC6_SetConfig+0xb8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00f      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <TIM_OC6_SetConfig+0xbc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00b      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <TIM_OC6_SetConfig+0xc0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d007      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <TIM_OC6_SetConfig+0xc4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a14      	ldr	r2, [pc, #80]	; (80053fc <TIM_OC6_SetConfig+0xc8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d109      	bne.n	80053c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	029b      	lsls	r3, r3, #10
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40013400 	.word	0x40013400
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400
 80053fc:	40014800 	.word	0x40014800

08005400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f023 0201 	bic.w	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800542a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 030a 	bic.w	r3, r3, #10
 800543c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800545e:	b480      	push	{r7}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f023 0210 	bic.w	r2, r3, #16
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	031b      	lsls	r3, r3, #12
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800549a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	f043 0307 	orr.w	r3, r3, #7
 80054e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800550e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	021a      	lsls	r2, r3, #8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	431a      	orrs	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4313      	orrs	r3, r2
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	609a      	str	r2, [r3, #8]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2201      	movs	r2, #1
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	43db      	mvns	r3, r3
 8005556:	401a      	ands	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1a      	ldr	r2, [r3, #32]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	fa01 f303 	lsl.w	r3, r1, r3
 800556c:	431a      	orrs	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005594:	2302      	movs	r3, #2
 8005596:	e068      	b.n	800566a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a2e      	ldr	r2, [pc, #184]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a2d      	ldr	r2, [pc, #180]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d108      	bne.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1e      	ldr	r2, [pc, #120]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01d      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560a:	d018      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1a      	ldr	r2, [pc, #104]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00e      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a18      	ldr	r2, [pc, #96]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d009      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a13      	ldr	r2, [pc, #76]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d004      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a14      	ldr	r2, [pc, #80]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d10c      	bne.n	8005658 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	4313      	orrs	r3, r2
 800564e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40012c00 	.word	0x40012c00
 800567c:	40013400 	.word	0x40013400
 8005680:	40000400 	.word	0x40000400
 8005684:	40000800 	.word	0x40000800
 8005688:	40000c00 	.word	0x40000c00
 800568c:	40014000 	.word	0x40014000

08005690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e040      	b.n	8005724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fb ffc8 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2224      	movs	r2, #36	; 0x24
 80056bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fe94 	bl	8006404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fbd9 	bl	8005e94 <UART_SetConfig>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e01b      	b.n	8005724 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800570a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 ff13 	bl	8006548 <UART_CheckIdleState>
 8005722:	4603      	mov	r3, r0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800572c:	b480      	push	{r7}
 800572e:	b08b      	sub	sp, #44	; 0x2c
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573e:	2b20      	cmp	r3, #32
 8005740:	d147      	bne.n	80057d2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_UART_Transmit_IT+0x22>
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e040      	b.n	80057d4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	88fa      	ldrh	r2, [r7, #6]
 8005764:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2221      	movs	r2, #33	; 0x21
 800577a:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005784:	d107      	bne.n	8005796 <HAL_UART_Transmit_IT+0x6a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <HAL_UART_Transmit_IT+0xb4>)
 8005792:	66da      	str	r2, [r3, #108]	; 0x6c
 8005794:	e002      	b.n	800579c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4a12      	ldr	r2, [pc, #72]	; (80057e4 <HAL_UART_Transmit_IT+0xb8>)
 800579a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	613b      	str	r3, [r7, #16]
   return(result);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	623b      	str	r3, [r7, #32]
 80057bc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	69f9      	ldr	r1, [r7, #28]
 80057c0:	6a3a      	ldr	r2, [r7, #32]
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e6      	bne.n	800579c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e000      	b.n	80057d4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
  }
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	372c      	adds	r7, #44	; 0x2c
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	08006aa1 	.word	0x08006aa1
 80057e4:	080069e9 	.word	0x080069e9

080057e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	; 0x28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d137      	bne.n	8005870 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_UART_Receive_IT+0x24>
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e030      	b.n	8005872 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a18      	ldr	r2, [pc, #96]	; (800587c <HAL_UART_Receive_IT+0x94>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d01f      	beq.n	8005860 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d018      	beq.n	8005860 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	613b      	str	r3, [r7, #16]
   return(result);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	623b      	str	r3, [r7, #32]
 800584e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	69f9      	ldr	r1, [r7, #28]
 8005852:	6a3a      	ldr	r2, [r7, #32]
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	61bb      	str	r3, [r7, #24]
   return(result);
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e6      	bne.n	800582e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	461a      	mov	r2, r3
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 ff7e 	bl	8006768 <UART_Start_Receive_IT>
 800586c:	4603      	mov	r3, r0
 800586e:	e000      	b.n	8005872 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	3728      	adds	r7, #40	; 0x28
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40008000 	.word	0x40008000

08005880 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b0ba      	sub	sp, #232	; 0xe8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80058ae:	4013      	ands	r3, r2
 80058b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d115      	bne.n	80058e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00f      	beq.n	80058e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 82ae 	beq.w	8005e3a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	4798      	blx	r3
      }
      return;
 80058e6:	e2a8      	b.n	8005e3a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80058e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8117 	beq.w	8005b20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005902:	4b85      	ldr	r3, [pc, #532]	; (8005b18 <HAL_UART_IRQHandler+0x298>)
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 810a 	beq.w	8005b20 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800590c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d011      	beq.n	800593c <HAL_UART_IRQHandler+0xbc>
 8005918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800591c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2201      	movs	r2, #1
 800592a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005932:	f043 0201 	orr.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800593c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d011      	beq.n	800596c <HAL_UART_IRQHandler+0xec>
 8005948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2202      	movs	r2, #2
 800595a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005962:	f043 0204 	orr.w	r2, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800596c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d011      	beq.n	800599c <HAL_UART_IRQHandler+0x11c>
 8005978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00b      	beq.n	800599c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2204      	movs	r2, #4
 800598a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005992:	f043 0202 	orr.w	r2, r3, #2
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800599c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d017      	beq.n	80059d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00b      	beq.n	80059d8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2208      	movs	r2, #8
 80059c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ce:	f043 0208 	orr.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d012      	beq.n	8005a0a <HAL_UART_IRQHandler+0x18a>
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00c      	beq.n	8005a0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a00:	f043 0220 	orr.w	r2, r3, #32
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 8214 	beq.w	8005e3e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d005      	beq.n	8005a62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d04f      	beq.n	8005b02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 ff46 	bl	80068f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d141      	bne.n	8005afa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aa2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1d9      	bne.n	8005a76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d013      	beq.n	8005af2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ace:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <HAL_UART_IRQHandler+0x29c>)
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fd f863 	bl	8002ba2 <HAL_DMA_Abort_IT>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d017      	beq.n	8005b12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005aec:	4610      	mov	r0, r2
 8005aee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	e00f      	b.n	8005b12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9b8 	bl	8005e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	e00b      	b.n	8005b12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f9b4 	bl	8005e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b00:	e007      	b.n	8005b12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f9b0 	bl	8005e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b10:	e195      	b.n	8005e3e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b12:	bf00      	nop
    return;
 8005b14:	e193      	b.n	8005e3e <HAL_UART_IRQHandler+0x5be>
 8005b16:	bf00      	nop
 8005b18:	04000120 	.word	0x04000120
 8005b1c:	080069bd 	.word	0x080069bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	f040 814e 	bne.w	8005dc6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8147 	beq.w	8005dc6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8140 	beq.w	8005dc6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2210      	movs	r2, #16
 8005b4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	f040 80b8 	bne.w	8005cce <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8167 	beq.w	8005e42 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	f080 815f 	bcs.w	8005e42 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f040 8086 	bne.w	8005cac <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1da      	bne.n	8005ba0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3308      	adds	r3, #8
 8005c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e1      	bne.n	8005bea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e3      	bne.n	8005c26 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7c:	f023 0310 	bic.w	r3, r3, #16
 8005c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e4      	bne.n	8005c6c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fc ff3d 	bl	8002b26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f8d8 	bl	8005e7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ccc:	e0b9      	b.n	8005e42 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 80ab 	beq.w	8005e46 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80a6 	beq.w	8005e46 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e4      	bne.n	8005cfa <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	f023 0301 	bic.w	r3, r3, #1
 8005d46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d54:	633a      	str	r2, [r7, #48]	; 0x30
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e3      	bne.n	8005d30 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f023 0310 	bic.w	r3, r3, #16
 8005d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	69b9      	ldr	r1, [r7, #24]
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	617b      	str	r3, [r7, #20]
   return(result);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e4      	bne.n	8005d7c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2202      	movs	r2, #2
 8005db6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f85c 	bl	8005e7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dc4:	e03f      	b.n	8005e46 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00e      	beq.n	8005df0 <HAL_UART_IRQHandler+0x570>
 8005dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d008      	beq.n	8005df0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005de6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 f89f 	bl	8006f2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dee:	e02d      	b.n	8005e4c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00e      	beq.n	8005e1a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d008      	beq.n	8005e1a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01c      	beq.n	8005e4a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
    }
    return;
 8005e18:	e017      	b.n	8005e4a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d012      	beq.n	8005e4c <HAL_UART_IRQHandler+0x5cc>
 8005e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00c      	beq.n	8005e4c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fe94 	bl	8006b60 <UART_EndTransmit_IT>
    return;
 8005e38:	e008      	b.n	8005e4c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005e3a:	bf00      	nop
 8005e3c:	e006      	b.n	8005e4c <HAL_UART_IRQHandler+0x5cc>
    return;
 8005e3e:	bf00      	nop
 8005e40:	e004      	b.n	8005e4c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <HAL_UART_IRQHandler+0x5cc>
    return;
 8005e4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005e4c:	37e8      	adds	r7, #232	; 0xe8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop

08005e54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e98:	b08a      	sub	sp, #40	; 0x28
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	431a      	orrs	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4ba4      	ldr	r3, [pc, #656]	; (8006154 <UART_SetConfig+0x2c0>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a99      	ldr	r2, [pc, #612]	; (8006158 <UART_SetConfig+0x2c4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efc:	4313      	orrs	r3, r2
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f10:	430a      	orrs	r2, r1
 8005f12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a90      	ldr	r2, [pc, #576]	; (800615c <UART_SetConfig+0x2c8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d126      	bne.n	8005f6c <UART_SetConfig+0xd8>
 8005f1e:	4b90      	ldr	r3, [pc, #576]	; (8006160 <UART_SetConfig+0x2cc>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d81b      	bhi.n	8005f64 <UART_SetConfig+0xd0>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <UART_SetConfig+0xa0>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f45 	.word	0x08005f45
 8005f38:	08005f55 	.word	0x08005f55
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005f5d 	.word	0x08005f5d
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4a:	e116      	b.n	800617a <UART_SetConfig+0x2e6>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f52:	e112      	b.n	800617a <UART_SetConfig+0x2e6>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5a:	e10e      	b.n	800617a <UART_SetConfig+0x2e6>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f62:	e10a      	b.n	800617a <UART_SetConfig+0x2e6>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6a:	e106      	b.n	800617a <UART_SetConfig+0x2e6>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a7c      	ldr	r2, [pc, #496]	; (8006164 <UART_SetConfig+0x2d0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d138      	bne.n	8005fe8 <UART_SetConfig+0x154>
 8005f76:	4b7a      	ldr	r3, [pc, #488]	; (8006160 <UART_SetConfig+0x2cc>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	f003 030c 	and.w	r3, r3, #12
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	d82d      	bhi.n	8005fe0 <UART_SetConfig+0x14c>
 8005f84:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <UART_SetConfig+0xf8>)
 8005f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8a:	bf00      	nop
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08005fe1 	.word	0x08005fe1
 8005f94:	08005fe1 	.word	0x08005fe1
 8005f98:	08005fe1 	.word	0x08005fe1
 8005f9c:	08005fd1 	.word	0x08005fd1
 8005fa0:	08005fe1 	.word	0x08005fe1
 8005fa4:	08005fe1 	.word	0x08005fe1
 8005fa8:	08005fe1 	.word	0x08005fe1
 8005fac:	08005fc9 	.word	0x08005fc9
 8005fb0:	08005fe1 	.word	0x08005fe1
 8005fb4:	08005fe1 	.word	0x08005fe1
 8005fb8:	08005fe1 	.word	0x08005fe1
 8005fbc:	08005fd9 	.word	0x08005fd9
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc6:	e0d8      	b.n	800617a <UART_SetConfig+0x2e6>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fce:	e0d4      	b.n	800617a <UART_SetConfig+0x2e6>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd6:	e0d0      	b.n	800617a <UART_SetConfig+0x2e6>
 8005fd8:	2308      	movs	r3, #8
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fde:	e0cc      	b.n	800617a <UART_SetConfig+0x2e6>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe6:	e0c8      	b.n	800617a <UART_SetConfig+0x2e6>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a5e      	ldr	r2, [pc, #376]	; (8006168 <UART_SetConfig+0x2d4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d125      	bne.n	800603e <UART_SetConfig+0x1aa>
 8005ff2:	4b5b      	ldr	r3, [pc, #364]	; (8006160 <UART_SetConfig+0x2cc>)
 8005ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ffc:	2b30      	cmp	r3, #48	; 0x30
 8005ffe:	d016      	beq.n	800602e <UART_SetConfig+0x19a>
 8006000:	2b30      	cmp	r3, #48	; 0x30
 8006002:	d818      	bhi.n	8006036 <UART_SetConfig+0x1a2>
 8006004:	2b20      	cmp	r3, #32
 8006006:	d00a      	beq.n	800601e <UART_SetConfig+0x18a>
 8006008:	2b20      	cmp	r3, #32
 800600a:	d814      	bhi.n	8006036 <UART_SetConfig+0x1a2>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <UART_SetConfig+0x182>
 8006010:	2b10      	cmp	r3, #16
 8006012:	d008      	beq.n	8006026 <UART_SetConfig+0x192>
 8006014:	e00f      	b.n	8006036 <UART_SetConfig+0x1a2>
 8006016:	2300      	movs	r3, #0
 8006018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601c:	e0ad      	b.n	800617a <UART_SetConfig+0x2e6>
 800601e:	2302      	movs	r3, #2
 8006020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006024:	e0a9      	b.n	800617a <UART_SetConfig+0x2e6>
 8006026:	2304      	movs	r3, #4
 8006028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602c:	e0a5      	b.n	800617a <UART_SetConfig+0x2e6>
 800602e:	2308      	movs	r3, #8
 8006030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006034:	e0a1      	b.n	800617a <UART_SetConfig+0x2e6>
 8006036:	2310      	movs	r3, #16
 8006038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603c:	e09d      	b.n	800617a <UART_SetConfig+0x2e6>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a4a      	ldr	r2, [pc, #296]	; (800616c <UART_SetConfig+0x2d8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d125      	bne.n	8006094 <UART_SetConfig+0x200>
 8006048:	4b45      	ldr	r3, [pc, #276]	; (8006160 <UART_SetConfig+0x2cc>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006052:	2bc0      	cmp	r3, #192	; 0xc0
 8006054:	d016      	beq.n	8006084 <UART_SetConfig+0x1f0>
 8006056:	2bc0      	cmp	r3, #192	; 0xc0
 8006058:	d818      	bhi.n	800608c <UART_SetConfig+0x1f8>
 800605a:	2b80      	cmp	r3, #128	; 0x80
 800605c:	d00a      	beq.n	8006074 <UART_SetConfig+0x1e0>
 800605e:	2b80      	cmp	r3, #128	; 0x80
 8006060:	d814      	bhi.n	800608c <UART_SetConfig+0x1f8>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <UART_SetConfig+0x1d8>
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d008      	beq.n	800607c <UART_SetConfig+0x1e8>
 800606a:	e00f      	b.n	800608c <UART_SetConfig+0x1f8>
 800606c:	2300      	movs	r3, #0
 800606e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006072:	e082      	b.n	800617a <UART_SetConfig+0x2e6>
 8006074:	2302      	movs	r3, #2
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607a:	e07e      	b.n	800617a <UART_SetConfig+0x2e6>
 800607c:	2304      	movs	r3, #4
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006082:	e07a      	b.n	800617a <UART_SetConfig+0x2e6>
 8006084:	2308      	movs	r3, #8
 8006086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608a:	e076      	b.n	800617a <UART_SetConfig+0x2e6>
 800608c:	2310      	movs	r3, #16
 800608e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006092:	e072      	b.n	800617a <UART_SetConfig+0x2e6>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a35      	ldr	r2, [pc, #212]	; (8006170 <UART_SetConfig+0x2dc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d12a      	bne.n	80060f4 <UART_SetConfig+0x260>
 800609e:	4b30      	ldr	r3, [pc, #192]	; (8006160 <UART_SetConfig+0x2cc>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ac:	d01a      	beq.n	80060e4 <UART_SetConfig+0x250>
 80060ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b2:	d81b      	bhi.n	80060ec <UART_SetConfig+0x258>
 80060b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b8:	d00c      	beq.n	80060d4 <UART_SetConfig+0x240>
 80060ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060be:	d815      	bhi.n	80060ec <UART_SetConfig+0x258>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <UART_SetConfig+0x238>
 80060c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c8:	d008      	beq.n	80060dc <UART_SetConfig+0x248>
 80060ca:	e00f      	b.n	80060ec <UART_SetConfig+0x258>
 80060cc:	2300      	movs	r3, #0
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d2:	e052      	b.n	800617a <UART_SetConfig+0x2e6>
 80060d4:	2302      	movs	r3, #2
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060da:	e04e      	b.n	800617a <UART_SetConfig+0x2e6>
 80060dc:	2304      	movs	r3, #4
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e2:	e04a      	b.n	800617a <UART_SetConfig+0x2e6>
 80060e4:	2308      	movs	r3, #8
 80060e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ea:	e046      	b.n	800617a <UART_SetConfig+0x2e6>
 80060ec:	2310      	movs	r3, #16
 80060ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060f2:	e042      	b.n	800617a <UART_SetConfig+0x2e6>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a17      	ldr	r2, [pc, #92]	; (8006158 <UART_SetConfig+0x2c4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d13a      	bne.n	8006174 <UART_SetConfig+0x2e0>
 80060fe:	4b18      	ldr	r3, [pc, #96]	; (8006160 <UART_SetConfig+0x2cc>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800610c:	d01a      	beq.n	8006144 <UART_SetConfig+0x2b0>
 800610e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006112:	d81b      	bhi.n	800614c <UART_SetConfig+0x2b8>
 8006114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006118:	d00c      	beq.n	8006134 <UART_SetConfig+0x2a0>
 800611a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800611e:	d815      	bhi.n	800614c <UART_SetConfig+0x2b8>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <UART_SetConfig+0x298>
 8006124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006128:	d008      	beq.n	800613c <UART_SetConfig+0x2a8>
 800612a:	e00f      	b.n	800614c <UART_SetConfig+0x2b8>
 800612c:	2300      	movs	r3, #0
 800612e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006132:	e022      	b.n	800617a <UART_SetConfig+0x2e6>
 8006134:	2302      	movs	r3, #2
 8006136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800613a:	e01e      	b.n	800617a <UART_SetConfig+0x2e6>
 800613c:	2304      	movs	r3, #4
 800613e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006142:	e01a      	b.n	800617a <UART_SetConfig+0x2e6>
 8006144:	2308      	movs	r3, #8
 8006146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800614a:	e016      	b.n	800617a <UART_SetConfig+0x2e6>
 800614c:	2310      	movs	r3, #16
 800614e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006152:	e012      	b.n	800617a <UART_SetConfig+0x2e6>
 8006154:	efff69f3 	.word	0xefff69f3
 8006158:	40008000 	.word	0x40008000
 800615c:	40013800 	.word	0x40013800
 8006160:	40021000 	.word	0x40021000
 8006164:	40004400 	.word	0x40004400
 8006168:	40004800 	.word	0x40004800
 800616c:	40004c00 	.word	0x40004c00
 8006170:	40005000 	.word	0x40005000
 8006174:	2310      	movs	r3, #16
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a9f      	ldr	r2, [pc, #636]	; (80063fc <UART_SetConfig+0x568>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d17a      	bne.n	800627a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006188:	2b08      	cmp	r3, #8
 800618a:	d824      	bhi.n	80061d6 <UART_SetConfig+0x342>
 800618c:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <UART_SetConfig+0x300>)
 800618e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006192:	bf00      	nop
 8006194:	080061b9 	.word	0x080061b9
 8006198:	080061d7 	.word	0x080061d7
 800619c:	080061c1 	.word	0x080061c1
 80061a0:	080061d7 	.word	0x080061d7
 80061a4:	080061c7 	.word	0x080061c7
 80061a8:	080061d7 	.word	0x080061d7
 80061ac:	080061d7 	.word	0x080061d7
 80061b0:	080061d7 	.word	0x080061d7
 80061b4:	080061cf 	.word	0x080061cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b8:	f7fd fcce 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 80061bc:	61f8      	str	r0, [r7, #28]
        break;
 80061be:	e010      	b.n	80061e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c0:	4b8f      	ldr	r3, [pc, #572]	; (8006400 <UART_SetConfig+0x56c>)
 80061c2:	61fb      	str	r3, [r7, #28]
        break;
 80061c4:	e00d      	b.n	80061e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061c6:	f7fd fc2f 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80061ca:	61f8      	str	r0, [r7, #28]
        break;
 80061cc:	e009      	b.n	80061e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d2:	61fb      	str	r3, [r7, #28]
        break;
 80061d4:	e005      	b.n	80061e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 80fb 	beq.w	80063e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	4413      	add	r3, r2
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d305      	bcc.n	8006206 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	429a      	cmp	r2, r3
 8006204:	d903      	bls.n	800620e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800620c:	e0e8      	b.n	80063e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	2200      	movs	r2, #0
 8006212:	461c      	mov	r4, r3
 8006214:	4615      	mov	r5, r2
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	022b      	lsls	r3, r5, #8
 8006220:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006224:	0222      	lsls	r2, r4, #8
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	6849      	ldr	r1, [r1, #4]
 800622a:	0849      	lsrs	r1, r1, #1
 800622c:	2000      	movs	r0, #0
 800622e:	4688      	mov	r8, r1
 8006230:	4681      	mov	r9, r0
 8006232:	eb12 0a08 	adds.w	sl, r2, r8
 8006236:	eb43 0b09 	adc.w	fp, r3, r9
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006248:	4650      	mov	r0, sl
 800624a:	4659      	mov	r1, fp
 800624c:	f7fa fbda 	bl	8000a04 <__aeabi_uldivmod>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4613      	mov	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800625e:	d308      	bcc.n	8006272 <UART_SetConfig+0x3de>
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006266:	d204      	bcs.n	8006272 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	60da      	str	r2, [r3, #12]
 8006270:	e0b6      	b.n	80063e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006278:	e0b2      	b.n	80063e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006282:	d15e      	bne.n	8006342 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006288:	2b08      	cmp	r3, #8
 800628a:	d828      	bhi.n	80062de <UART_SetConfig+0x44a>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <UART_SetConfig+0x400>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062c1 	.word	0x080062c1
 800629c:	080062c9 	.word	0x080062c9
 80062a0:	080062df 	.word	0x080062df
 80062a4:	080062cf 	.word	0x080062cf
 80062a8:	080062df 	.word	0x080062df
 80062ac:	080062df 	.word	0x080062df
 80062b0:	080062df 	.word	0x080062df
 80062b4:	080062d7 	.word	0x080062d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b8:	f7fd fc4e 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 80062bc:	61f8      	str	r0, [r7, #28]
        break;
 80062be:	e014      	b.n	80062ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062c0:	f7fd fc60 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 80062c4:	61f8      	str	r0, [r7, #28]
        break;
 80062c6:	e010      	b.n	80062ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c8:	4b4d      	ldr	r3, [pc, #308]	; (8006400 <UART_SetConfig+0x56c>)
 80062ca:	61fb      	str	r3, [r7, #28]
        break;
 80062cc:	e00d      	b.n	80062ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ce:	f7fd fbab 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80062d2:	61f8      	str	r0, [r7, #28]
        break;
 80062d4:	e009      	b.n	80062ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062da:	61fb      	str	r3, [r7, #28]
        break;
 80062dc:	e005      	b.n	80062ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d077      	beq.n	80063e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	005a      	lsls	r2, r3, #1
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	085b      	lsrs	r3, r3, #1
 80062fa:	441a      	add	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	fbb2 f3f3 	udiv	r3, r2, r3
 8006304:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b0f      	cmp	r3, #15
 800630a:	d916      	bls.n	800633a <UART_SetConfig+0x4a6>
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006312:	d212      	bcs.n	800633a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f023 030f 	bic.w	r3, r3, #15
 800631c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	085b      	lsrs	r3, r3, #1
 8006322:	b29b      	uxth	r3, r3
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	b29a      	uxth	r2, r3
 800632a:	8afb      	ldrh	r3, [r7, #22]
 800632c:	4313      	orrs	r3, r2
 800632e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	8afa      	ldrh	r2, [r7, #22]
 8006336:	60da      	str	r2, [r3, #12]
 8006338:	e052      	b.n	80063e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006340:	e04e      	b.n	80063e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006346:	2b08      	cmp	r3, #8
 8006348:	d827      	bhi.n	800639a <UART_SetConfig+0x506>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <UART_SetConfig+0x4bc>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006375 	.word	0x08006375
 8006354:	0800637d 	.word	0x0800637d
 8006358:	08006385 	.word	0x08006385
 800635c:	0800639b 	.word	0x0800639b
 8006360:	0800638b 	.word	0x0800638b
 8006364:	0800639b 	.word	0x0800639b
 8006368:	0800639b 	.word	0x0800639b
 800636c:	0800639b 	.word	0x0800639b
 8006370:	08006393 	.word	0x08006393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006374:	f7fd fbf0 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8006378:	61f8      	str	r0, [r7, #28]
        break;
 800637a:	e014      	b.n	80063a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800637c:	f7fd fc02 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 8006380:	61f8      	str	r0, [r7, #28]
        break;
 8006382:	e010      	b.n	80063a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006384:	4b1e      	ldr	r3, [pc, #120]	; (8006400 <UART_SetConfig+0x56c>)
 8006386:	61fb      	str	r3, [r7, #28]
        break;
 8006388:	e00d      	b.n	80063a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800638a:	f7fd fb4d 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 800638e:	61f8      	str	r0, [r7, #28]
        break;
 8006390:	e009      	b.n	80063a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006396:	61fb      	str	r3, [r7, #28]
        break;
 8006398:	e005      	b.n	80063a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063a4:	bf00      	nop
    }

    if (pclk != 0U)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d019      	beq.n	80063e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	085a      	lsrs	r2, r3, #1
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	441a      	add	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80063be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	2b0f      	cmp	r3, #15
 80063c4:	d909      	bls.n	80063da <UART_SetConfig+0x546>
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063cc:	d205      	bcs.n	80063da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60da      	str	r2, [r3, #12]
 80063d8:	e002      	b.n	80063e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80063ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3728      	adds	r7, #40	; 0x28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063fa:	bf00      	nop
 80063fc:	40008000 	.word	0x40008000
 8006400:	00f42400 	.word	0x00f42400

08006404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01a      	beq.n	800651a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006502:	d10a      	bne.n	800651a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b098      	sub	sp, #96	; 0x60
 800654c:	af02      	add	r7, sp, #8
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006558:	f7fb fa00 	bl	800195c <HAL_GetTick>
 800655c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b08      	cmp	r3, #8
 800656a:	d12e      	bne.n	80065ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800656c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006574:	2200      	movs	r2, #0
 8006576:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f88c 	bl	8006698 <UART_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d021      	beq.n	80065ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800659a:	653b      	str	r3, [r7, #80]	; 0x50
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a4:	647b      	str	r3, [r7, #68]	; 0x44
 80065a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e6      	bne.n	8006586 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e062      	b.n	8006690 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d149      	bne.n	800666c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e0:	2200      	movs	r2, #0
 80065e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f856 	bl	8006698 <UART_WaitOnFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d03c      	beq.n	800666c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006610:	633b      	str	r3, [r7, #48]	; 0x30
 8006612:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e6      	bne.n	80065f2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	60fb      	str	r3, [r7, #12]
   return(result);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	64bb      	str	r3, [r7, #72]	; 0x48
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006644:	61fa      	str	r2, [r7, #28]
 8006646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	69b9      	ldr	r1, [r7, #24]
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	617b      	str	r3, [r7, #20]
   return(result);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e5      	bne.n	8006624 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e011      	b.n	8006690 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3758      	adds	r7, #88	; 0x58
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	4613      	mov	r3, r2
 80066a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a8:	e049      	b.n	800673e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d045      	beq.n	800673e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b2:	f7fb f953 	bl	800195c <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d302      	bcc.n	80066c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e048      	b.n	800675e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d031      	beq.n	800673e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d110      	bne.n	800670a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2208      	movs	r2, #8
 80066ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f8ff 	bl	80068f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2208      	movs	r2, #8
 80066fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e029      	b.n	800675e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006718:	d111      	bne.n	800673e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f8e5 	bl	80068f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2220      	movs	r2, #32
 800672e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e00f      	b.n	800675e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69da      	ldr	r2, [r3, #28]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4013      	ands	r3, r2
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	429a      	cmp	r2, r3
 800674c:	bf0c      	ite	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	2300      	movne	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	429a      	cmp	r2, r3
 800675a:	d0a6      	beq.n	80066aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
	...

08006768 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006768:	b480      	push	{r7}
 800676a:	b097      	sub	sp, #92	; 0x5c
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	88fa      	ldrh	r2, [r7, #6]
 8006780:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679a:	d10e      	bne.n	80067ba <UART_Start_Receive_IT+0x52>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d105      	bne.n	80067b0 <UART_Start_Receive_IT+0x48>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80067aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067ae:	e02d      	b.n	800680c <UART_Start_Receive_IT+0xa4>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	22ff      	movs	r2, #255	; 0xff
 80067b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067b8:	e028      	b.n	800680c <UART_Start_Receive_IT+0xa4>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10d      	bne.n	80067de <UART_Start_Receive_IT+0x76>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d104      	bne.n	80067d4 <UART_Start_Receive_IT+0x6c>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	22ff      	movs	r2, #255	; 0xff
 80067ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067d2:	e01b      	b.n	800680c <UART_Start_Receive_IT+0xa4>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	227f      	movs	r2, #127	; 0x7f
 80067d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067dc:	e016      	b.n	800680c <UART_Start_Receive_IT+0xa4>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067e6:	d10d      	bne.n	8006804 <UART_Start_Receive_IT+0x9c>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <UART_Start_Receive_IT+0x92>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	227f      	movs	r2, #127	; 0x7f
 80067f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067f8:	e008      	b.n	800680c <UART_Start_Receive_IT+0xa4>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	223f      	movs	r2, #63	; 0x3f
 80067fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006802:	e003      	b.n	800680c <UART_Start_Receive_IT+0xa4>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2222      	movs	r2, #34	; 0x22
 8006818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	657b      	str	r3, [r7, #84]	; 0x54
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3308      	adds	r3, #8
 800683a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800683c:	64ba      	str	r2, [r7, #72]	; 0x48
 800683e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800684a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e5      	bne.n	800681c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006858:	d107      	bne.n	800686a <UART_Start_Receive_IT+0x102>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d103      	bne.n	800686a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a21      	ldr	r2, [pc, #132]	; (80068ec <UART_Start_Receive_IT+0x184>)
 8006866:	669a      	str	r2, [r3, #104]	; 0x68
 8006868:	e002      	b.n	8006870 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4a20      	ldr	r2, [pc, #128]	; (80068f0 <UART_Start_Receive_IT+0x188>)
 800686e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d019      	beq.n	80068ac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800688c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
 8006898:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800689c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e6      	bne.n	8006878 <UART_Start_Receive_IT+0x110>
 80068aa:	e018      	b.n	80068de <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f043 0320 	orr.w	r3, r3, #32
 80068c0:	653b      	str	r3, [r7, #80]	; 0x50
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ca:	623b      	str	r3, [r7, #32]
 80068cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	69f9      	ldr	r1, [r7, #28]
 80068d0:	6a3a      	ldr	r2, [r7, #32]
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e6      	bne.n	80068ac <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	375c      	adds	r7, #92	; 0x5c
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	08006d71 	.word	0x08006d71
 80068f0:	08006bb5 	.word	0x08006bb5

080068f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b095      	sub	sp, #84	; 0x54
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006910:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691a:	643b      	str	r3, [r7, #64]	; 0x40
 800691c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e6      	bne.n	80068fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3308      	adds	r3, #8
 8006934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	61fb      	str	r3, [r7, #28]
   return(result);
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	64bb      	str	r3, [r7, #72]	; 0x48
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3308      	adds	r3, #8
 800694c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800694e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006950:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e5      	bne.n	800692e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006966:	2b01      	cmp	r3, #1
 8006968:	d118      	bne.n	800699c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	60bb      	str	r3, [r7, #8]
   return(result);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f023 0310 	bic.w	r3, r3, #16
 800697e:	647b      	str	r3, [r7, #68]	; 0x44
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006988:	61bb      	str	r3, [r7, #24]
 800698a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6979      	ldr	r1, [r7, #20]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	613b      	str	r3, [r7, #16]
   return(result);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e6      	bne.n	800696a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069b0:	bf00      	nop
 80069b2:	3754      	adds	r7, #84	; 0x54
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff fa44 	bl	8005e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b08f      	sub	sp, #60	; 0x3c
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069f4:	2b21      	cmp	r3, #33	; 0x21
 80069f6:	d14d      	bne.n	8006a94 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d132      	bne.n	8006a6a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a24:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6979      	ldr	r1, [r7, #20]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	613b      	str	r3, [r7, #16]
   return(result);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e6      	bne.n	8006a36 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006a68:	e014      	b.n	8006a94 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6e:	781a      	ldrb	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	b292      	uxth	r2, r2
 8006a76:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006a94:	bf00      	nop
 8006a96:	373c      	adds	r7, #60	; 0x3c
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b091      	sub	sp, #68	; 0x44
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aac:	2b21      	cmp	r3, #33	; 0x21
 8006aae:	d151      	bne.n	8006b54 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d132      	bne.n	8006b22 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	633b      	str	r3, [r7, #48]	; 0x30
 8006adc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e6      	bne.n	8006abc <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b02:	637b      	str	r3, [r7, #52]	; 0x34
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	69b9      	ldr	r1, [r7, #24]
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	617b      	str	r3, [r7, #20]
   return(result);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e6      	bne.n	8006aee <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006b20:	e018      	b.n	8006b54 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2a:	881a      	ldrh	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b34:	b292      	uxth	r2, r2
 8006b36:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3c:	1c9a      	adds	r2, r3, #2
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006b54:	bf00      	nop
 8006b56:	3744      	adds	r7, #68	; 0x44
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	61bb      	str	r3, [r7, #24]
 8006b88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6979      	ldr	r1, [r7, #20]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	613b      	str	r3, [r7, #16]
   return(result);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff f954 	bl	8005e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bac:	bf00      	nop
 8006bae:	3720      	adds	r7, #32
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b09c      	sub	sp, #112	; 0x70
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bc2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bcc:	2b22      	cmp	r3, #34	; 0x22
 8006bce:	f040 80be 	bne.w	8006d4e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bd8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006be0:	b2d9      	uxtb	r1, r3
 8006be2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bec:	400a      	ands	r2, r1
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f040 80a3 	bne.w	8006d62 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c30:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e6      	bne.n	8006c1c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3308      	adds	r3, #8
 8006c54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c60:	f023 0301 	bic.w	r3, r3, #1
 8006c64:	667b      	str	r3, [r7, #100]	; 0x64
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c6e:	647a      	str	r2, [r7, #68]	; 0x44
 8006c70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e5      	bne.n	8006c4e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a34      	ldr	r2, [pc, #208]	; (8006d6c <UART_RxISR_8BIT+0x1b8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d01f      	beq.n	8006ce0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d018      	beq.n	8006ce0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	623b      	str	r3, [r7, #32]
   return(result);
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cc2:	663b      	str	r3, [r7, #96]	; 0x60
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e6      	bne.n	8006cae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d12e      	bne.n	8006d46 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0310 	bic.w	r3, r3, #16
 8006d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	69b9      	ldr	r1, [r7, #24]
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e6      	bne.n	8006cee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d103      	bne.n	8006d36 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2210      	movs	r2, #16
 8006d34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff f89c 	bl	8005e7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d44:	e00d      	b.n	8006d62 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fa fb80 	bl	800144c <HAL_UART_RxCpltCallback>
}
 8006d4c:	e009      	b.n	8006d62 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	8b1b      	ldrh	r3, [r3, #24]
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0208 	orr.w	r2, r2, #8
 8006d5e:	b292      	uxth	r2, r2
 8006d60:	831a      	strh	r2, [r3, #24]
}
 8006d62:	bf00      	nop
 8006d64:	3770      	adds	r7, #112	; 0x70
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40008000 	.word	0x40008000

08006d70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b09c      	sub	sp, #112	; 0x70
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d88:	2b22      	cmp	r3, #34	; 0x22
 8006d8a:	f040 80be 	bne.w	8006f0a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006da2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006da6:	4013      	ands	r3, r2
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	1c9a      	adds	r2, r3, #2
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 80a3 	bne.w	8006f1e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dec:	667b      	str	r3, [r7, #100]	; 0x64
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006df6:	657b      	str	r3, [r7, #84]	; 0x54
 8006df8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e6      	bne.n	8006dd8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	f023 0301 	bic.w	r3, r3, #1
 8006e20:	663b      	str	r3, [r7, #96]	; 0x60
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3308      	adds	r3, #8
 8006e28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e2a:	643a      	str	r2, [r7, #64]	; 0x40
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e5      	bne.n	8006e0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a34      	ldr	r2, [pc, #208]	; (8006f28 <UART_RxISR_16BIT+0x1b8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d01f      	beq.n	8006e9c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d018      	beq.n	8006e9c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e8a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d12e      	bne.n	8006f02 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f023 0310 	bic.w	r3, r3, #16
 8006ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ec8:	61bb      	str	r3, [r7, #24]
 8006eca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6979      	ldr	r1, [r7, #20]
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e6      	bne.n	8006eaa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f003 0310 	and.w	r3, r3, #16
 8006ee6:	2b10      	cmp	r3, #16
 8006ee8:	d103      	bne.n	8006ef2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2210      	movs	r2, #16
 8006ef0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fe ffbe 	bl	8005e7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f00:	e00d      	b.n	8006f1e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fa faa2 	bl	800144c <HAL_UART_RxCpltCallback>
}
 8006f08:	e009      	b.n	8006f1e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	8b1b      	ldrh	r3, [r3, #24]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0208 	orr.w	r2, r2, #8
 8006f1a:	b292      	uxth	r2, r2
 8006f1c:	831a      	strh	r2, [r3, #24]
}
 8006f1e:	bf00      	nop
 8006f20:	3770      	adds	r7, #112	; 0x70
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	40008000 	.word	0x40008000

08006f2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <memset>:
 8006f40:	4402      	add	r2, r0
 8006f42:	4603      	mov	r3, r0
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d100      	bne.n	8006f4a <memset+0xa>
 8006f48:	4770      	bx	lr
 8006f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4e:	e7f9      	b.n	8006f44 <memset+0x4>

08006f50 <__libc_init_array>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	4d0d      	ldr	r5, [pc, #52]	; (8006f88 <__libc_init_array+0x38>)
 8006f54:	4c0d      	ldr	r4, [pc, #52]	; (8006f8c <__libc_init_array+0x3c>)
 8006f56:	1b64      	subs	r4, r4, r5
 8006f58:	10a4      	asrs	r4, r4, #2
 8006f5a:	2600      	movs	r6, #0
 8006f5c:	42a6      	cmp	r6, r4
 8006f5e:	d109      	bne.n	8006f74 <__libc_init_array+0x24>
 8006f60:	4d0b      	ldr	r5, [pc, #44]	; (8006f90 <__libc_init_array+0x40>)
 8006f62:	4c0c      	ldr	r4, [pc, #48]	; (8006f94 <__libc_init_array+0x44>)
 8006f64:	f000 f818 	bl	8006f98 <_init>
 8006f68:	1b64      	subs	r4, r4, r5
 8006f6a:	10a4      	asrs	r4, r4, #2
 8006f6c:	2600      	movs	r6, #0
 8006f6e:	42a6      	cmp	r6, r4
 8006f70:	d105      	bne.n	8006f7e <__libc_init_array+0x2e>
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f78:	4798      	blx	r3
 8006f7a:	3601      	adds	r6, #1
 8006f7c:	e7ee      	b.n	8006f5c <__libc_init_array+0xc>
 8006f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f82:	4798      	blx	r3
 8006f84:	3601      	adds	r6, #1
 8006f86:	e7f2      	b.n	8006f6e <__libc_init_array+0x1e>
 8006f88:	08007000 	.word	0x08007000
 8006f8c:	08007000 	.word	0x08007000
 8006f90:	08007000 	.word	0x08007000
 8006f94:	08007004 	.word	0x08007004

08006f98 <_init>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr

08006fa4 <_fini>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr
